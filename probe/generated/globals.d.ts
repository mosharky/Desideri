declare class ResourceLocation implements Internal.Comparable<ResourceLocation>, Internal.ResourceLocationAccess, Internal.SpecialEquality {
    wait(arg0: number, arg1: number): void;
    wait(): void;
    wait(arg0: number): void;
    hashCode(): number;
    notifyAll(): void;
    compareNamespaced(arg0: ResourceLocation): number;
    equals(arg0: object): boolean;
    toString(): string;
    compareTo(arg0: object): number;
    compareTo(arg0: ResourceLocation): number;
    notify(): void;
    specialEquals(o: object, shallow: boolean): boolean;
    get namespace(): string;
    get path(): string;
    set path(arg0: string);
    set namespace(arg0: string);
    constructor(arg0: string, arg1: string);
    constructor(arg0: string);
}
declare class Fluid {
    wait(arg0: number, arg1: number): void;
    wait(): void;
    wait(arg0: number): void;
    static lava(amount: number): Internal.FluidStackJS;
    static lava(): Internal.FluidStackJS;
    static getType(id: ResourceLocation): Internal.Fluid;
    hashCode(): number;
    notifyAll(): void;
    equals(arg0: object): boolean;
    static of(o: Internal.FluidStackJS): Internal.FluidStackJS;
    static of(o: Internal.FluidStackJS, amount: number, nbt: Internal.CompoundTag): Internal.FluidStackJS;
    static of(o: Internal.FluidStackJS, nbt: Internal.CompoundTag): Internal.FluidStackJS;
    static of(o: Internal.FluidStackJS, amount: number): Internal.FluidStackJS;
    static exists(id: ResourceLocation): boolean;
    toString(): string;
    static water(): Internal.FluidStackJS;
    static water(amount: number): Internal.FluidStackJS;
    notify(): void;
    static readonly LAVA_ID : ResourceLocation;
    static readonly WATER_ID : ResourceLocation;
    get empty(): Internal.FluidStackJS;
    get types(): Internal.List<string>;
    constructor();
}
declare class Block {
    wait(arg0: number, arg1: number): void;
    wait(): void;
    wait(arg0: number): void;
    static getBlock(id: ResourceLocation): Internal.Block;
    notifyAll(): void;
    static custom(predicate: Internal.BlockPredicate): Internal.BlockPredicate;
    notify(): void;
    static getTaggedIds(tag: ResourceLocation): Internal.List<string>;
    hashCode(): number;
    equals(arg0: object): boolean;
    toString(): string;
    static id(id: ResourceLocation, properties: Map<string, object>): Internal.BlockIDPredicate;
    static id(id: ResourceLocation): Internal.BlockIDPredicate;
    static entity(id: ResourceLocation): Internal.BlockEntityPredicate;
    get typeList(): Internal.List<string>;
    get material(): Map<string, Internal.MaterialJS>;
    get facing(): Map<string, Internal.Direction>;
    constructor();
}
declare class Hand extends Internal.Enum<Hand> {
    wait(arg0: number, arg1: number): void;
    wait(): void;
    wait(arg0: number): void;
    hashCode(): number;
    static valueOf(arg0: string): Hand;
    notifyAll(): void;
    equals(arg0: object): boolean;
    static values(): Hand[];
    name(): string;
    toString(): string;
    compareTo(arg0: object): number;
    compareTo(arg0: E): number;
    notify(): void;
    ordinal(): number;
    static readonly MAIN_HAND : Hand;
    static readonly OFF_HAND : Hand;
}
declare class Rarity {
    wait(arg0: number, arg1: number): void;
    wait(): void;
    wait(arg0: number): void;
    hashCode(): number;
    notifyAll(): void;
    equals(arg0: object): boolean;
    toString(): string;
    notify(): void;
    static readonly RARE : Rarity;
    static readonly EPIC : Rarity;
    static readonly UNCOMMON : Rarity;
    static readonly COMMON : Rarity;
    readonly rarity : Internal.Rarity;
}
declare abstract interface Color {
    rgba(r: number, g: number, b: number, a: number): Internal.Color;
    of(o: object): Internal.Color;
    createMapped(o: object, names: string[]): Internal.Color;
    readonly BLUE_DYE : Internal.Color;
    readonly GOLD : Internal.Color;
    readonly GRAY : Internal.Color;
    readonly MAGENTA_DYE : Internal.Color;
    readonly BLUE : Internal.Color;
    readonly DARK_AQUA : Internal.Color;
    readonly TEXT : Map<string, Internal.ChatFormatting>;
    readonly DYE : Map<string, Internal.DyeColor>;
    readonly WHITE_DYE : Internal.Color;
    readonly DARK_RED : Internal.Color;
    readonly LIGHT_PURPLE : Internal.Color;
    readonly BROWN_DYE : Internal.Color;
    readonly BLACK : Internal.Color;
    readonly GRAY_DYE : Internal.Color;
    readonly NONE : Internal.Color;
    readonly LIGHT_BLUE_DYE : Internal.Color;
    readonly AQUA : Internal.Color;
    readonly WHITE : Internal.Color;
    readonly LIGHT_GRAY_DYE : Internal.Color;
    readonly BLACK_DYE : Internal.Color;
    readonly RED_DYE : Internal.Color;
    readonly PURPLE_DYE : Internal.Color;
    readonly GREEN_DYE : Internal.Color;
    readonly PINK_DYE : Internal.Color;
    readonly DARK_BLUE : Internal.Color;
    readonly GREEN : Internal.Color;
    readonly CYAN_DYE : Internal.Color;
    readonly RED : Internal.Color;
    readonly DARK_PURPLE : Internal.Color;
    readonly ORANGE_DYE : Internal.Color;
    readonly YELLOW_DYE : Internal.Color;
    readonly DARK_GREEN : Internal.Color;
    readonly YELLOW : Internal.Color;
    readonly LIME_DYE : Internal.Color;
    readonly DARK_GRAY : Internal.Color;
    readonly MAP : Map<string, Internal.Color>;
}
declare const Color: Color;
declare abstract interface NBTIO {
    read(path: Internal.Path): Internal.CompoundTag;
    write(path: Internal.Path, nbt: Internal.CompoundTag): void;
}
declare const NBTIO: NBTIO;
declare class BlockPos extends Vec3i {
    wait(arg0: number, arg1: number): void;
    wait(): void;
    wait(arg0: number): void;
    hashCode(): number;
    notifyAll(): void;
    equals(arg0: object): boolean;
    toString(): string;
    compareTo(arg0: object): number;
    compareTo(arg0: Vec3i): number;
    notify(): void;
    get x(): number;
    get y(): number;
    get z(): number;
    constructor(arg0: Vec3i);
    constructor(arg0: Internal.Position);
    constructor(arg0: Vec3);
    constructor(arg0: number, arg1: number, arg2: number);
    constructor(arg0: number, arg1: number, arg2: number);
}
declare class BiomeDictionary {
    wait(arg0: number, arg1: number): void;
    wait(): void;
    wait(arg0: number): void;
    static printTags(biome: ResourceLocation): void;
    static getBiomeType(o: object): Internal.BiomeDictionary$Type;
    static printBiomes(type: Internal.BiomeDictionary$Type): void;
    hashCode(): number;
    static addTypes(biomes: ResourceLocation[], tags: Internal.BiomeDictionary$Type[]): void;
    notifyAll(): void;
    equals(arg0: object): boolean;
    toString(): string;
    notify(): void;
    constructor();
}
declare class LootType extends Internal.Enum<LootType> {
    wait(arg0: number, arg1: number): void;
    wait(): void;
    wait(arg0: number): void;
    hashCode(): number;
    static valueOf(arg0: string): LootType;
    notifyAll(): void;
    equals(arg0: object): boolean;
    static values(): LootType[];
    name(): string;
    toString(): string;
    compareTo(arg0: object): number;
    compareTo(arg0: E): number;
    notify(): void;
    ordinal(): number;
    static readonly CHEST : LootType;
    static readonly ADVANCEMENT_ENTITY : LootType;
    static readonly GIFT : LootType;
    static readonly ENTITY : LootType;
    static readonly FISHING : LootType;
    static readonly PIGLIN_BARTER : LootType;
    static readonly BLOCK : LootType;
    static readonly UNKNOWN : LootType;
    static readonly ADVANCEMENT_REWARD : LootType;
}
declare abstract interface UUID {
    digits(sb: Internal.StringBuilder, val: number, digits: number): void;
    toString(id: Internal.UUID): string;
    fromString(o: object): Internal.UUID;
}
declare const UUID: UUID;
declare class Item {
    wait(arg0: number, arg1: number): void;
    wait(): void;
    wait(arg0: number): void;
    notifyAll(): void;
    static findGroup(id: string): Internal.CreativeModeTab;
    static getItem(id: ResourceLocation): Internal.Item;
    static fireworks(properties: Map<string, object>): Internal.FireworksJS;
    notify(): void;
    static clearListCache(): void;
    hashCode(): number;
    equals(arg0: object): boolean;
    static of(in_: Internal.ItemStackJS, count: number, nbt: Internal.CompoundTag): Internal.ItemStackJS;
    static of(in_: Internal.ItemStackJS, tag: Internal.CompoundTag): Internal.ItemStackJS;
    static of(in_: Internal.ItemStackJS, count: number): Internal.ItemStackJS;
    static of(in_: Internal.ItemStackJS): Internal.ItemStackJS;
    static isItem(o: object): boolean;
    static exists(id: ResourceLocation): boolean;
    toString(): string;
    static withChance(in_: Internal.ItemStackJS, c: number): Internal.ItemStackJS;
    static withNBT(in_: Internal.ItemStackJS, nbt: Internal.CompoundTag): Internal.ItemStackJS;
    get typeList(): Internal.ListJS;
    get list(): Internal.ListJS;
    get empty(): Internal.ItemStackJS;
    constructor();
}
declare class DecorationGenerationStep extends Internal.Enum<DecorationGenerationStep> {
    wait(arg0: number, arg1: number): void;
    wait(): void;
    wait(arg0: number): void;
    hashCode(): number;
    static valueOf(arg0: string): DecorationGenerationStep;
    notifyAll(): void;
    equals(arg0: object): boolean;
    static values(): DecorationGenerationStep[];
    name(): string;
    toString(): string;
    compareTo(arg0: object): number;
    compareTo(arg0: E): number;
    notify(): void;
    ordinal(): number;
    static readonly RAW_GENERATION : DecorationGenerationStep;
    static readonly UNDERGROUND_STRUCTURES : DecorationGenerationStep;
    static readonly LOCAL_MODIFICATIONS : DecorationGenerationStep;
    static readonly TOP_LAYER_MODIFICATION : DecorationGenerationStep;
    static readonly UNDERGROUND_DECORATION : DecorationGenerationStep;
    static readonly LAKES : DecorationGenerationStep;
    static readonly SURFACE_STRUCTURES : DecorationGenerationStep;
    static readonly STRONGHOLDS : DecorationGenerationStep;
    static readonly FLUID_SPRINGS : DecorationGenerationStep;
    static readonly VEGETAL_DECORATION : DecorationGenerationStep;
    static readonly UNDERGROUND_ORES : DecorationGenerationStep;
}
declare abstract interface Utils {
    listOrSelf(o: object): Internal.ListJS;
    getStat(id: ResourceLocation): Internal.Stat<ResourceLocation>;
    parseDouble(object: object, def: number): number;
    emptyList<T>(): Internal.List<T>;
    randomOf(random: Internal.Random, objects: Internal.Collection<object>): object;
    emptyMap<K, V>(): Map<K, V>;
    copy(o: object): object;
    id(namespace: string, path: string): ResourceLocation;
    id(id: ResourceLocation): ResourceLocation;
    listOf(o: object): Internal.ListJS;
    rollChestLoot(id: ResourceLocation): Internal.ListJS;
    rollChestLoot(id: ResourceLocation, entity: Internal.EntityJS): Internal.ListJS;
    newCountingMap(): Internal.CountingMap;
    createConsole(name: string): Internal.ConsoleJS;
    newMap(): Internal.MapJS;
    newList(): Internal.ListJS;
    parseInt(object: object, def: number): number;
    getLevel(level: Internal.Level): Internal.LevelJS;
    isWrapped(o: object): boolean;
    regex(s: object): Internal.Pattern;
    regex(pattern: string, flags: number): Internal.Pattern;
    newRandom(seed: number): Internal.Random;
    queueIO(runnable: Internal.Runnable): void;
    toTitleCase(s: string): string;
    mapOf(o: object): Internal.MapJS;
    getSound(id: ResourceLocation): Internal.SoundEvent;
    get systemTime(): number;
    get random(): Internal.Random;
    get server(): Internal.ServerJS;
    get clientLevel(): Internal.LevelJS;
}
declare const Utils: Utils;
declare class Vec3i implements Internal.Comparable<Vec3i> {
    wait(arg0: number, arg1: number): void;
    wait(): void;
    wait(arg0: number): void;
    hashCode(): number;
    notifyAll(): void;
    equals(arg0: object): boolean;
    toString(): string;
    compareTo(arg0: object): number;
    compareTo(arg0: Vec3i): number;
    notify(): void;
    get x(): number;
    get y(): number;
    get z(): number;
    constructor(arg0: number, arg1: number, arg2: number);
    constructor(arg0: number, arg1: number, arg2: number);
}
declare abstract interface BlockStatePredicate {
    test(arg0: Internal.BlockState): boolean;
    of(o: object): BlockStatePredicate;
    fromString(s: string): BlockStatePredicate;
    check(targetStates: Internal.List<Internal.OreConfiguration$TargetBlockState>): boolean;
    asRuleTest(): Internal.RuleTest;
    ruleTestOf(o: object): Internal.RuleTest;
    readonly AIR_ID : ResourceLocation;
    get blockStates(): Internal.Collection<Internal.BlockState>;
    get blocks(): Internal.Collection<Internal.Block>;
    get blockIds(): Internal.Set<ResourceLocation>;
}
declare const BlockStatePredicate: BlockStatePredicate;
declare class CarvingGenerationStep extends Internal.Enum<CarvingGenerationStep> implements Internal.StringRepresentable {
    wait(arg0: number, arg1: number): void;
    wait(): void;
    wait(arg0: number): void;
    hashCode(): number;
    static valueOf(arg0: string): CarvingGenerationStep;
    notifyAll(): void;
    equals(arg0: object): boolean;
    static values(): CarvingGenerationStep[];
    name(): string;
    toString(): string;
    compareTo(arg0: object): number;
    compareTo(arg0: E): number;
    notify(): void;
    ordinal(): number;
    static readonly LIQUID : CarvingGenerationStep;
    static readonly AIR : CarvingGenerationStep;
}
declare class Ingredient {
    static customNBT(in_: Internal.IngredientJS, predicate: (arg0: Internal.CompoundTag) => boolean): Internal.IngredientJS;
    wait(arg0: number, arg1: number): void;
    wait(): void;
    wait(arg0: number): void;
    static isIngredient(o: object): boolean;
    notifyAll(): void;
    static custom(in_: Internal.IngredientJS, predicate: (arg0: Internal.ItemStackJS) => boolean): Internal.IngredientJS;
    static custom(predicate: (arg0: Internal.ItemStackJS) => boolean): Internal.IngredientJS;
    notify(): void;
    static matchAny(objects: object): Internal.IngredientJS;
    hashCode(): number;
    equals(arg0: object): boolean;
    static of(object: object, count: number): Internal.IngredientJS;
    static of(object: object): Internal.IngredientJS;
    toString(): string;
    static registerCustomIngredientAction(id: string, callback: Internal.CustomIngredientActionCallback): void;
    get all(): Internal.IngredientJS;
    get none(): Internal.IngredientJS;
    constructor();
}
declare class Platform {
    static isDevelopmentEnvironment(): boolean;
    static isClientEnvironment(): boolean;
    wait(arg0: number, arg1: number): void;
    wait(): void;
    wait(arg0: number): void;
    static getInfo(modID: string): Internal.PlatformWrapper$ModInfo;
    notifyAll(): void;
    static isForge(): boolean;
    static isLoaded(modId: string): boolean;
    notify(): void;
    static isFabric(): boolean;
    hashCode(): number;
    equals(arg0: object): boolean;
    toString(): string;
    get name(): string;
    get mods(): Map<string, Internal.PlatformWrapper$ModInfo>;
    get list(): Internal.Set<string>;
    get modVersion(): string;
    get mcVersion(): string;
    constructor();
}
declare class JsonIO {
    static writeJsonHash(stream: Internal.DataOutputStream, element: Internal.JsonElement): void;
    wait(arg0: number, arg1: number): void;
    wait(): void;
    wait(arg0: number): void;
    static toPrimitive(element: Internal.JsonElement): object;
    static read(path: Internal.Path): Internal.MapJS;
    notifyAll(): void;
    static getJsonHashBytes(json: Internal.JsonElement): number[];
    static parse(string: string): object;
    static primitiveOf(o: object): Internal.JsonPrimitive;
    notify(): void;
    hashCode(): number;
    equals(arg0: object): boolean;
    static of(o: object): Internal.JsonElement;
    static toArray(element: Internal.JsonElement): Internal.JsonArray;
    static toPrettyString(json: Internal.JsonElement): string;
    static parseRaw(string: string): Internal.JsonElement;
    static toString(json: Internal.JsonElement): string;
    toString(): string;
    static toObject(json: Internal.JsonElement): object;
    static copy(element: Internal.JsonElement): Internal.JsonElement;
    static write(path: Internal.Path, json: Internal.JsonElement): void;
    static readonly GSON : Internal.Gson;
    constructor();
}
declare abstract interface NBT {
    longArrayTag(v: number[]): Internal.Tag;
    byteArrayTag(v: number[]): Internal.Tag;
    b(v: number): Internal.Tag;
    fromTag(t: Internal.Tag): object;
    listTag(list: Internal.List<object>): Internal.Tag;
    listTag(): Internal.Tag;
    d(v: number): Internal.Tag;
    f(v: number): Internal.Tag;
    compoundTag(map: Map<string, object>): Internal.Tag;
    compoundTag(): Internal.Tag;
    toTag(v: object): Internal.Tag;
    i(v: number): Internal.Tag;
    shortTag(v: number): Internal.Tag;
    l(v: number): Internal.Tag;
    floatTag(v: number): Internal.Tag;
    s(v: number): Internal.Tag;
    la(v: number[]): Internal.Tag;
    longTag(v: number): Internal.Tag;
    intArrayTag(v: number[]): Internal.Tag;
    ia(v: number[]): Internal.Tag;
    doubleTag(v: number): Internal.Tag;
    intTag(v: number): Internal.Tag;
    byteTag(v: number): Internal.Tag;
    stringTag(v: string): Internal.Tag;
    ba(v: number[]): Internal.Tag;
}
declare const NBT: NBT;
declare class Vec3 implements Internal.Position {
    wait(arg0: number, arg1: number): void;
    wait(): void;
    wait(arg0: number): void;
    hashCode(): number;
    notifyAll(): void;
    equals(arg0: object): boolean;
    toString(): string;
    notify(): void;
    readonly x : number;
    readonly y : number;
    readonly z : number;
    constructor(arg0: Internal.Vector3f);
    constructor(arg0: number, arg1: number, arg2: number);
}
declare class EquipmentSlot extends Internal.Enum<EquipmentSlot> {
    wait(arg0: number, arg1: number): void;
    wait(): void;
    wait(arg0: number): void;
    hashCode(): number;
    static valueOf(arg0: string): EquipmentSlot;
    notifyAll(): void;
    equals(arg0: object): boolean;
    static values(): EquipmentSlot[];
    name(): string;
    toString(): string;
    compareTo(arg0: object): number;
    compareTo(arg0: E): number;
    notify(): void;
    ordinal(): number;
    static readonly CHEST : EquipmentSlot;
    static readonly HEAD : EquipmentSlot;
    static readonly OFFHAND : EquipmentSlot;
    static readonly MAINHAND : EquipmentSlot;
    static readonly LEGS : EquipmentSlot;
    static readonly FEET : EquipmentSlot;
}
declare class Text {
    wait(arg0: number, arg1: number): void;
    wait(): void;
    wait(arg0: number): void;
    static string(text: object): Internal.Text;
    notifyAll(): void;
    static yellow(text: object): Internal.Text;
    static darkBlue(text: object): Internal.Text;
    notify(): void;
    static translate(key: string): Internal.Text;
    static translate(key: string, objects: object[]): Internal.Text;
    static gold(text: object): Internal.Text;
    static red(text: object): Internal.Text;
    static aqua(text: object): Internal.Text;
    static gray(text: object): Internal.Text;
    static white(text: object): Internal.Text;
    hashCode(): number;
    static darkRed(text: object): Internal.Text;
    static of(object: object): Internal.Text;
    static darkPurple(text: object): Internal.Text;
    static join(separator: Internal.Text, texts: Internal.Iterable<Internal.Text>): Internal.Text;
    static green(text: object): Internal.Text;
    static darkGreen(text: object): Internal.Text;
    static lightPurple(text: object): Internal.Text;
    static black(text: object): Internal.Text;
    static darkAqua(text: object): Internal.Text;
    static blue(text: object): Internal.Text;
    equals(arg0: object): boolean;
    static keybind(keybind: string): Internal.Text;
    static darkGray(text: object): Internal.Text;
    toString(): string;
    constructor();
}
declare abstract interface Facing {
    readonly ALL : Map<string, Internal.Direction>;
    readonly DOWN : Internal.Direction;
    readonly south : Internal.Direction;
    readonly north : Internal.Direction;
    readonly WEST : Internal.Direction;
    readonly down : Internal.Direction;
    readonly east : Internal.Direction;
    readonly NORTH : Internal.Direction;
    readonly west : Internal.Direction;
    readonly up : Internal.Direction;
    readonly UP : Internal.Direction;
    readonly SOUTH : Internal.Direction;
    readonly EAST : Internal.Direction;
}
declare const Facing: Facing;
declare abstract interface AABB {
    ofBlock(pos: BlockPos): Internal.AABB;
    ofSize(x: number, y: number, z: number): Internal.AABB;
    ofSize(vec3: Vec3, x: number, y: number, z: number): Internal.AABB;
    of(x0: number, y0: number, z0: number, x1: number, y1: number, z1: number): Internal.AABB;
    wrap(o: object): Internal.AABB;
    ofBlocks(pos1: BlockPos, pos2: BlockPos): Internal.AABB;
    readonly CUBE : Internal.AABB;
    readonly EMPTY : Internal.AABB;
}
declare const AABB: AABB;
declare class JavaMath {
    static multiplyFull(arg0: number, arg1: number): number;
    static copySign(arg0: number, arg1: number): number;
    static copySign(arg0: number, arg1: number): number;
    static log1p(arg0: number): number;
    static expm1(arg0: number): number;
    static cos(arg0: number): number;
    static rint(arg0: number): number;
    static atan(arg0: number): number;
    static nextUp(arg0: number): number;
    static nextUp(arg0: number): number;
    static sqrt(arg0: number): number;
    static decrementExact(arg0: number): number;
    static decrementExact(arg0: number): number;
    static absExact(arg0: number): number;
    static absExact(arg0: number): number;
    static exp(arg0: number): number;
    static atan2(arg0: number, arg1: number): number;
    static signum(arg0: number): number;
    static signum(arg0: number): number;
    static tan(arg0: number): number;
    static sinh(arg0: number): number;
    static toDegrees(arg0: number): number;
    static acos(arg0: number): number;
    static ceil(arg0: number): number;
    static getExponent(arg0: number): number;
    static getExponent(arg0: number): number;
    static addExact(arg0: number, arg1: number): number;
    static addExact(arg0: number, arg1: number): number;
    static multiplyHigh(arg0: number, arg1: number): number;
    static ulp(arg0: number): number;
    static ulp(arg0: number): number;
    wait(arg0: number, arg1: number): void;
    wait(): void;
    wait(arg0: number): void;
    static scalb(arg0: number, arg1: number): number;
    static scalb(arg0: number, arg1: number): number;
    static floorMod(arg0: number, arg1: number): number;
    static floorMod(arg0: number, arg1: number): number;
    static floorMod(arg0: number, arg1: number): number;
    static log(arg0: number): number;
    static log10(arg0: number): number;
    notifyAll(): void;
    static nextAfter(arg0: number, arg1: number): number;
    static nextAfter(arg0: number, arg1: number): number;
    static multiplyExact(arg0: number, arg1: number): number;
    static multiplyExact(arg0: number, arg1: number): number;
    static multiplyExact(arg0: number, arg1: number): number;
    notify(): void;
    static cbrt(arg0: number): number;
    static random(): number;
    static tanh(arg0: number): number;
    static min(arg0: number, arg1: number): number;
    static min(arg0: number, arg1: number): number;
    static min(arg0: number, arg1: number): number;
    static min(arg0: number, arg1: number): number;
    static negateExact(arg0: number): number;
    static negateExact(arg0: number): number;
    hashCode(): number;
    static hypot(arg0: number, arg1: number): number;
    static pow(arg0: number, arg1: number): number;
    static sin(arg0: number): number;
    static floor(arg0: number): number;
    static subtractExact(arg0: number, arg1: number): number;
    static subtractExact(arg0: number, arg1: number): number;
    static max(arg0: number, arg1: number): number;
    static max(arg0: number, arg1: number): number;
    static max(arg0: number, arg1: number): number;
    static max(arg0: number, arg1: number): number;
    static toIntExact(arg0: number): number;
    static nextDown(arg0: number): number;
    static nextDown(arg0: number): number;
    static toRadians(arg0: number): number;
    static cosh(arg0: number): number;
    static IEEEremainder(arg0: number, arg1: number): number;
    static abs(arg0: number): number;
    static abs(arg0: number): number;
    static abs(arg0: number): number;
    static abs(arg0: number): number;
    static round(arg0: number): number;
    static round(arg0: number): number;
    static floorDiv(arg0: number, arg1: number): number;
    static floorDiv(arg0: number, arg1: number): number;
    static floorDiv(arg0: number, arg1: number): number;
    static incrementExact(arg0: number): number;
    static incrementExact(arg0: number): number;
    equals(arg0: object): boolean;
    toString(): string;
    static asin(arg0: number): number;
    static fma(arg0: number, arg1: number, arg2: number): number;
    static fma(arg0: number, arg1: number, arg2: number): number;
    static readonly E : 2.718281828459045;
    static readonly PI : 3.141592653589793;
}
declare namespace yalter.mousetweaks.mixin {
    abstract interface AbstractContainerScreenAccessor {
        invokeSlotClicked(arg0: Internal.Slot, arg1: number, arg2: number, arg3: Internal.ClickType): void;
        invokeFindSlot(arg0: number, arg1: number): Internal.Slot;
        set skipNextRelease(arg0: boolean);
        set isQuickCrafting(arg0: boolean);
        get quickCraftingButton(): number;
        get isQuickCrafting(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
}
declare namespace com.simibubi.create.foundation.mixin.accessor {
    abstract interface LivingEntityAccessor {
        create$callSpawnItemParticles(arg0: Internal.ItemStack, arg1: number): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
}
declare namespace net.blay09.mods.netherportalfix.mixin {
    abstract interface EntityAccessor {
        get isInsidePortal(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
}
declare namespace net.minecraft.client.model {
    abstract class Model {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
}
declare namespace Internal {
    abstract interface IForgeLevel implements Internal.ICapabilityProvider {
        increaseMaxEntityRadius(arg0: number): number;
        get maxEntityRadius(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class FormatStyle extends Internal.Enum<Internal.FormatStyle> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(arg0: string): Internal.FormatStyle;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.FormatStyle[];
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly MEDIUM : Internal.FormatStyle;
        static readonly FULL : Internal.FormatStyle;
        static readonly LONG : Internal.FormatStyle;
        static readonly SHORT : Internal.FormatStyle;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class IntervalJS {
        matchesSqr(arg0: number): boolean;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        max(arg0: number): Internal.IntervalJS;
        notifyAll(): void;
        matches(arg0: number): boolean;
        notify(): void;
        static ofInt(arg0: object): Internal.MinMaxBounds$Ints;
        min(arg0: number): Internal.IntervalJS;
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        between(arg0: number, arg1: number): Internal.IntervalJS;
        static ofDoubles(arg0: object): Internal.MinMaxBounds$Doubles;
        get vanillaInt(): Internal.MinMaxBounds$Ints;
        get vanillaDoubles(): Internal.MinMaxBounds$Doubles;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Endimatable$EndimatedState {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        animationTick : number;
        endimation : Internal.PlayableEndimation;
        readonly effectHandler : Internal.EndimationEffectHandler;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class AccessMode extends Internal.Enum<Internal.AccessMode> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(arg0: string): Internal.AccessMode;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.AccessMode[];
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly READ : Internal.AccessMode;
        static readonly EXECUTE : Internal.AccessMode;
        static readonly WRITE : Internal.AccessMode;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class GameProfile {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isLegacy(): boolean;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        isComplete(): boolean;
        get name(): string;
        get properties(): Internal.PropertyMap;
        get id(): Internal.UUID;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface PrimitiveIterator <T, T_CONS> implements Internal.Iterator<T> {
        next(): E;
        hasNext(): boolean;
        forEachRemaining(arg0: T_CONS): void;
        remove(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ScriptPack {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        readonly manager : Internal.ScriptManager;
        scope : Internal.Scriptable;
        context : Internal.Context;
        readonly scripts : Internal.List<Internal.ScriptFile>;
        readonly info : Internal.ScriptPackInfo;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ArmorMaterial {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface LongBinaryOperator {
        applyAsLong(arg0: number, arg1: number): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface EntityAccess {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class ImmutableCollection$Builder <E> {
        add(arg0: E): Internal.ImmutableCollection$Builder<E>;
        add(arg0: E[]): Internal.ImmutableCollection$Builder<E>;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        build(): Internal.ImmutableCollection<E>;
        addAll(arg0: Internal.Iterator<E>): Internal.ImmutableCollection$Builder<E>;
        addAll(arg0: Internal.Iterable<E>): Internal.ImmutableCollection$Builder<E>;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface MenuType$MenuSupplier <T> {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class DistancePredicateBuilder {
        horizontal(arg0: Internal.MinMaxBounds$Doubles): Internal.DistancePredicateBuilder;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        build(): Internal.DistancePredicate;
        hashCode(): number;
        absolute(arg0: Internal.MinMaxBounds$Doubles): Internal.DistancePredicateBuilder;
        notifyAll(): void;
        equals(arg0: object): boolean;
        x(arg0: Internal.MinMaxBounds$Doubles): Internal.DistancePredicateBuilder;
        y(arg0: Internal.MinMaxBounds$Doubles): Internal.DistancePredicateBuilder;
        toString(): string;
        z(arg0: Internal.MinMaxBounds$Doubles): Internal.DistancePredicateBuilder;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface TransformStack implements Internal.Transform<Internal.TransformStack>, Internal.TStack<Internal.TransformStack> {
        rotate(arg0: Internal.Direction, arg1: number): Self;
        rotate(arg0: number, arg1: Internal.Direction$Axis): Self;
        translateAll(arg0: number): Self;
        scale(arg0: number, arg1: number, arg2: number): Self;
        scale(arg0: number): Self;
        translate(arg0: Vec3i): Self;
        translate(arg0: Vec3): Self;
        translate(arg0: Internal.Vector3f): Self;
        translate(arg0: number, arg1: number, arg2: number): Self;
        translateZ(arg0: number): Self;
        pushPose(): Self;
        mulNormal(arg0: Internal.Matrix3f): Self;
        transform(arg0: Internal.PoseStack): Self;
        transform(arg0: Internal.Matrix4f, arg1: Internal.Matrix3f): Self;
        translateY(arg0: number): Self;
        translateX(arg0: number): Self;
        multiply(arg0: Internal.Vector3f, arg1: number): Self;
        multiply(arg0: Internal.Quaternion): Self;
        rotateX(arg0: number): Self;
        rotateY(arg0: number): Self;
        translateBack(arg0: Vec3i): Self;
        translateBack(arg0: Vec3): Self;
        translateBack(arg0: number, arg1: number, arg2: number): Self;
        rotateToFace(arg0: Internal.Direction): Self;
        rotateZ(arg0: number): Self;
        nudge(arg0: number): Self;
        rotateCentered(arg0: Internal.Direction, arg1: number): Self;
        rotateCentered(arg0: Internal.Quaternion): Self;
        centre(): Self;
        multiplyRadians(arg0: Internal.Vector3f, arg1: number): Self;
        rotateZRadians(arg0: number): Self;
        mulPose(arg0: Internal.Matrix4f): Self;
        rotateYRadians(arg0: number): Self;
        rotateXRadians(arg0: number): Self;
        popPose(): Self;
        unCentre(): Self;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class DirectMethodHandleDesc$Kind extends Internal.Enum<Internal.DirectMethodHandleDesc$Kind> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(arg0: number, arg1: boolean): Internal.DirectMethodHandleDesc$Kind;
        static valueOf(arg0: string): Internal.DirectMethodHandleDesc$Kind;
        static valueOf(arg0: number): Internal.DirectMethodHandleDesc$Kind;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.DirectMethodHandleDesc$Kind[];
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly INTERFACE_SPECIAL : Internal.DirectMethodHandleDesc$Kind;
        readonly refKind : number;
        static readonly SETTER : Internal.DirectMethodHandleDesc$Kind;
        static readonly SPECIAL : Internal.DirectMethodHandleDesc$Kind;
        static readonly STATIC : Internal.DirectMethodHandleDesc$Kind;
        static readonly GETTER : Internal.DirectMethodHandleDesc$Kind;
        static readonly STATIC_GETTER : Internal.DirectMethodHandleDesc$Kind;
        static readonly INTERFACE_VIRTUAL : Internal.DirectMethodHandleDesc$Kind;
        static readonly STATIC_SETTER : Internal.DirectMethodHandleDesc$Kind;
        static readonly CONSTRUCTOR : Internal.DirectMethodHandleDesc$Kind;
        readonly isInterface : boolean;
        static readonly INTERFACE_STATIC : Internal.DirectMethodHandleDesc$Kind;
        static readonly VIRTUAL : Internal.DirectMethodHandleDesc$Kind;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class LongBuffer extends Internal.Buffer implements Internal.Comparable<Internal.LongBuffer> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        compact(): Internal.LongBuffer;
        notifyAll(): void;
        compareTo(arg0: object): number;
        compareTo(arg0: Internal.LongBuffer): number;
        notify(): void;
        asReadOnlyBuffer(): Internal.LongBuffer;
        put(arg0: number[]): Internal.LongBuffer;
        put(arg0: number, arg1: number[], arg2: number, arg3: number): Internal.LongBuffer;
        put(arg0: number, arg1: number[]): Internal.LongBuffer;
        put(arg0: number[], arg1: number, arg2: number): Internal.LongBuffer;
        put(arg0: number, arg1: Internal.LongBuffer, arg2: number, arg3: number): Internal.LongBuffer;
        put(arg0: Internal.LongBuffer): Internal.LongBuffer;
        put(arg0: number, arg1: number): Internal.LongBuffer;
        put(arg0: number): Internal.LongBuffer;
        capacity(): number;
        isReadOnly(): boolean;
        slice(): Internal.Buffer;
        slice(): Internal.LongBuffer;
        slice(arg0: number, arg1: number): Internal.Buffer;
        slice(arg0: number, arg1: number): Internal.LongBuffer;
        array(): number[];
        array(): object;
        hashCode(): number;
        get(): number;
        get(arg0: number, arg1: number[]): Internal.LongBuffer;
        get(arg0: number): number;
        get(arg0: number, arg1: number[], arg2: number, arg3: number): Internal.LongBuffer;
        get(arg0: number[], arg1: number, arg2: number): Internal.LongBuffer;
        get(arg0: number[]): Internal.LongBuffer;
        limit(arg0: number): Internal.LongBuffer;
        limit(arg0: number): Internal.Buffer;
        limit(): number;
        arrayOffset(): number;
        flip(): Internal.Buffer;
        flip(): Internal.LongBuffer;
        order(): Internal.ByteOrder;
        hasArray(): boolean;
        hasRemaining(): boolean;
        clear(): Internal.Buffer;
        clear(): Internal.LongBuffer;
        duplicate(): Internal.LongBuffer;
        duplicate(): Internal.Buffer;
        remaining(): number;
        static allocate(arg0: number): Internal.LongBuffer;
        rewind(): Internal.Buffer;
        rewind(): Internal.LongBuffer;
        mismatch(arg0: Internal.LongBuffer): number;
        equals(arg0: object): boolean;
        reset(): Internal.Buffer;
        reset(): Internal.LongBuffer;
        toString(): string;
        position(arg0: number): Internal.LongBuffer;
        position(arg0: number): Internal.Buffer;
        position(): number;
        isDirect(): boolean;
        static wrap(arg0: number[]): Internal.LongBuffer;
        static wrap(arg0: number[], arg1: number, arg2: number): Internal.LongBuffer;
        mark(): Internal.Buffer;
        mark(): Internal.LongBuffer;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface PackResources implements Internal.AutoCloseable, Internal.IForgePackResources {
        close(): void;
        isHidden(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class CharBuffer extends Internal.Buffer implements Internal.Comparable<Internal.CharBuffer>, Internal.Appendable, Internal.CharSequence, Internal.Readable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        compact(): Internal.CharBuffer;
        notifyAll(): void;
        compareTo(arg0: Internal.CharBuffer): number;
        compareTo(arg0: object): number;
        notify(): void;
        asReadOnlyBuffer(): Internal.CharBuffer;
        put(arg0: Internal.CharBuffer): Internal.CharBuffer;
        put(arg0: string, arg1: number, arg2: number): Internal.CharBuffer;
        put(arg0: number, arg1: string[]): Internal.CharBuffer;
        put(arg0: number, arg1: string): Internal.CharBuffer;
        put(arg0: number, arg1: string[], arg2: number, arg3: number): Internal.CharBuffer;
        put(arg0: string[]): Internal.CharBuffer;
        put(arg0: string[], arg1: number, arg2: number): Internal.CharBuffer;
        put(arg0: number, arg1: Internal.CharBuffer, arg2: number, arg3: number): Internal.CharBuffer;
        put(arg0: string): Internal.CharBuffer;
        put(arg0: string): Internal.CharBuffer;
        capacity(): number;
        isReadOnly(): boolean;
        slice(): Internal.CharBuffer;
        slice(): Internal.Buffer;
        slice(arg0: number, arg1: number): Internal.CharBuffer;
        slice(arg0: number, arg1: number): Internal.Buffer;
        array(): string[];
        array(): object;
        hashCode(): number;
        get(): string;
        get(arg0: number): string;
        get(arg0: string[], arg1: number, arg2: number): Internal.CharBuffer;
        get(arg0: string[]): Internal.CharBuffer;
        get(arg0: number, arg1: string[]): Internal.CharBuffer;
        get(arg0: number, arg1: string[], arg2: number, arg3: number): Internal.CharBuffer;
        limit(arg0: number): Internal.CharBuffer;
        limit(arg0: number): Internal.Buffer;
        limit(): number;
        arrayOffset(): number;
        flip(): Internal.CharBuffer;
        flip(): Internal.Buffer;
        codePoints(): Internal.IntStream;
        order(): Internal.ByteOrder;
        hasArray(): boolean;
        read(arg0: Internal.CharBuffer): number;
        hasRemaining(): boolean;
        isEmpty(): boolean;
        clear(): Internal.CharBuffer;
        clear(): Internal.Buffer;
        length(): number;
        duplicate(): Internal.CharBuffer;
        duplicate(): Internal.Buffer;
        subSequence(arg0: number, arg1: number): Internal.CharSequence;
        subSequence(arg0: number, arg1: number): Internal.CharBuffer;
        remaining(): number;
        static allocate(arg0: number): Internal.CharBuffer;
        rewind(): Internal.Buffer;
        rewind(): Internal.CharBuffer;
        mismatch(arg0: Internal.CharBuffer): number;
        equals(arg0: object): boolean;
        reset(): Internal.CharBuffer;
        reset(): Internal.Buffer;
        toString(): string;
        position(arg0: number): Internal.Buffer;
        position(arg0: number): Internal.CharBuffer;
        position(): number;
        isDirect(): boolean;
        static wrap(arg0: string[], arg1: number, arg2: number): Internal.CharBuffer;
        static wrap(arg0: string[]): Internal.CharBuffer;
        static wrap(arg0: Internal.CharSequence): Internal.CharBuffer;
        static wrap(arg0: Internal.CharSequence, arg1: number, arg2: number): Internal.CharBuffer;
        mark(): Internal.Buffer;
        mark(): Internal.CharBuffer;
        chars(): Internal.IntStream;
        charAt(arg0: number): string;
        append(arg0: Internal.CharSequence, arg1: number, arg2: number): Internal.CharBuffer;
        append(arg0: Internal.CharSequence, arg1: number, arg2: number): Internal.Appendable;
        append(arg0: Internal.CharSequence): Internal.Appendable;
        append(arg0: Internal.CharSequence): Internal.CharBuffer;
        append(arg0: string): Internal.CharBuffer;
        append(arg0: string): Internal.Appendable;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class FireworksJS {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static of(o: object): Internal.FireworksJS;
        toString(): string;
        createFireworkRocket(w: Internal.Level, x: number, y: number, z: number): Internal.FireworkRocketEntity;
        notify(): void;
        flight : number;
        lifetime : number;
        readonly explosions : Internal.List<Internal.FireworksJS$Explosion>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface AbstractContainerMenuInvoker {
        _moveItemStackTo(arg0: Internal.ItemStack, arg1: number, arg2: number, arg3: boolean): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class TypeWrappers {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        removeAll(): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        getWrapperFactory(target: Internal.Class<object>, from: object): Internal.TypeWrapperFactory<object>;
        register<T>(target: Internal.Class<T>, factory: Internal.TypeWrapperFactory<T>): void;
        register<T>(target: Internal.Class<T>, validator: (arg0: object) => boolean, factory: Internal.TypeWrapperFactory<T>): void;
        register<F, T>(id: string, from: Internal.Class<F>, to: Internal.Class<T>, factory: (arg0: F) => T): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Material {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ImmutableSetMultimap$Builder <K, V> extends Internal.ImmutableMultimap$Builder<K, V> {
        orderKeysBy(arg0: Internal.Comparator<any>): Internal.ImmutableMultimap$Builder<any, any>;
        orderKeysBy(arg0: Internal.Comparator<K>): Internal.ImmutableSetMultimap$Builder<K, V>;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        build(): Internal.ImmutableMultimap<any, any>;
        build(): Internal.ImmutableSetMultimap<K, V>;
        hashCode(): number;
        orderValuesBy(arg0: Internal.Comparator<any>): Internal.ImmutableMultimap$Builder<any, any>;
        orderValuesBy(arg0: Internal.Comparator<V>): Internal.ImmutableSetMultimap$Builder<K, V>;
        notifyAll(): void;
        equals(arg0: object): boolean;
        putAll(arg0: Internal.Iterable<any>): Internal.ImmutableMultimap$Builder<any, any>;
        putAll(arg0: Internal.Iterable<Internal.Map$Entry<K, V>>): Internal.ImmutableSetMultimap$Builder<K, V>;
        putAll(arg0: object, arg1: Internal.Iterable<any>): Internal.ImmutableMultimap$Builder<any, any>;
        putAll(arg0: K, arg1: Internal.Iterable<V>): Internal.ImmutableSetMultimap$Builder<K, V>;
        putAll(arg0: object, arg1: object[]): Internal.ImmutableMultimap$Builder<any, any>;
        putAll(arg0: K, arg1: V[]): Internal.ImmutableSetMultimap$Builder<K, V>;
        putAll(arg0: Internal.Multimap<any, any>): Internal.ImmutableMultimap$Builder<any, any>;
        putAll(arg0: Internal.Multimap<K, V>): Internal.ImmutableSetMultimap$Builder<K, V>;
        toString(): string;
        notify(): void;
        put(arg0: Internal.Map$Entry<K, V>): Internal.ImmutableSetMultimap$Builder<K, V>;
        put(arg0: Internal.Map$Entry<any, any>): Internal.ImmutableMultimap$Builder<any, any>;
        put(arg0: object, arg1: object): Internal.ImmutableMultimap$Builder<any, any>;
        put(arg0: K, arg1: V): Internal.ImmutableSetMultimap$Builder<K, V>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class DirectVertexConsumer implements Internal.VertexConsumer {
        applyBakedLighting(arg0: number, arg1: Internal.ByteBuffer): number;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        createSink(factory: me.jellysquid.mods.sodium.client.model.vertex.type.VertexType<any>): Internal.VertexSink;
        split(arg0: number): Internal.DirectVertexConsumer;
        memSetZero(): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        putBulkData(arg0: Internal.PoseStack$Pose, arg1: Internal.BakedQuad, arg2: number[], arg3: number, arg4: number, arg5: number, arg6: number, arg7: number[], arg8: number, arg9: boolean): void;
        putBulkData(arg0: Internal.PoseStack$Pose, arg1: Internal.BakedQuad, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: boolean): void;
        putBulkData(arg0: Internal.PoseStack$Pose, arg1: Internal.BakedQuad, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
        putBulkData(arg0: Internal.PoseStack$Pose, arg1: Internal.BakedQuad, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: boolean): void;
        applyBakedNormals(arg0: Internal.Vector3f, arg1: Internal.ByteBuffer, arg2: Internal.Matrix3f): void;
        notify(): void;
        hasOverlay(): boolean;
        readonly format : Internal.VertexFormat;
        readonly startPos : number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface AttributeView {
        name(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class RandomTickCallbackJS {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        random : Internal.Random;
        block : Internal.BlockContainerJS;
        get server(): Internal.ServerJS;
        get level(): Internal.LevelJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Spliterator$OfPrimitive <T, T_CONS, T_SPLITR> implements Internal.Spliterator<T> {
        trySplit(): Internal.Spliterator<any>;
        trySplit(): T_SPLITR;
        characteristics(): number;
        tryAdvance(arg0: T_CONS): boolean;
        estimateSize(): number;
        hasCharacteristics(arg0: number): boolean;
        forEachRemaining(arg0: T_CONS): void;
        get exactSizeIfKnown(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ModuleFinder {
        find(arg0: string): Internal.Optional<Internal.ModuleReference>;
        findAll(): Internal.Set<Internal.ModuleReference>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ServerSettings {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        static exportData(): void;
        logInvalidRecipeHandlers : boolean;
        useOriginalRecipeForFilters : boolean;
        dataPackOutput : boolean;
        logSkippedRecipes : boolean;
        static instance : Internal.ServerSettings;
        logOverrides : boolean;
        logErroringRecipes : boolean;
        static source : Internal.CommandSourceStack;
        logAddedRecipes : boolean;
        logRemovedRecipes : boolean;
        static dataExport : Internal.JsonObject;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface AnnotatedElement {
        getAnnotationsByType<T>(arg0: Internal.Class<T>): T[];
        getDeclaredAnnotationsByType<T>(arg0: Internal.Class<T>): T[];
        getAnnotation<T>(arg0: Internal.Class<T>): T;
        isAnnotationPresent(arg0: Internal.Class<Internal.Annotation>): boolean;
        getDeclaredAnnotation<T>(arg0: Internal.Class<T>): T;
        get annotations(): Internal.Annotation[];
        get declaredAnnotations(): Internal.Annotation[];
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface BufferVertexConsumer implements Internal.VertexConsumer {
        applyBakedLighting(arg0: number, arg1: Internal.ByteBuffer): number;
        createSink(factory: me.jellysquid.mods.sodium.client.model.vertex.type.VertexType<any>): Internal.VertexSink;
        putBulkData(arg0: Internal.PoseStack$Pose, arg1: Internal.BakedQuad, arg2: number[], arg3: number, arg4: number, arg5: number, arg6: number, arg7: number[], arg8: number, arg9: boolean): void;
        putBulkData(arg0: Internal.PoseStack$Pose, arg1: Internal.BakedQuad, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: boolean): void;
        putBulkData(arg0: Internal.PoseStack$Pose, arg1: Internal.BakedQuad, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
        putBulkData(arg0: Internal.PoseStack$Pose, arg1: Internal.BakedQuad, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: boolean): void;
        applyBakedNormals(arg0: Internal.Vector3f, arg1: Internal.ByteBuffer, arg2: Internal.Matrix3f): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class LunarEventClient <T> implements Internal.SkyRenderable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        renderSky(arg0: Internal.PoseStack, arg1: number): void;
        notify(): void;
        get moonSize(): number;
        get moonTextureLocation(): ResourceLocation;
        get soundTrack(): Internal.SoundEvent;
        get colorSettings(): Internal.ColorSettings;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Exception extends Internal.Throwable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        printStackTrace(): void;
        printStackTrace(arg0: Internal.PrintStream): void;
        printStackTrace(arg0: Internal.PrintWriter): void;
        notifyAll(): void;
        initCause(arg0: Internal.Throwable): Internal.Throwable;
        notify(): void;
        addSuppressed(arg0: Internal.Throwable): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        fillInStackTrace(): Internal.Throwable;
        get localizedMessage(): string;
        get message(): string;
        get cause(): Internal.Throwable;
        set stackTrace(arg0: Internal.StackTraceElement[]);
        get stackTrace(): Internal.StackTraceElement[];
        get suppressed(): Internal.Throwable[];
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface EntityTypeTest <B, T> {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Object2ObjectMap$Entry <K, V> implements Internal.Map$Entry<K, V> {
        hashCode(): number;
        equals(arg0: object): boolean;
        get key(): K;
        get value(): V;
        set value(arg0: V);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class CraftingContainer implements Internal.Container, Internal.StackedContentsCompatible {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class AbstractStringBuilder implements Internal.Appendable, Internal.CharSequence {
        deleteCharAt(arg0: number): Internal.AbstractStringBuilder;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        codePointAt(arg0: number): number;
        notifyAll(): void;
        setCharAt(arg0: number, arg1: string): void;
        replace(arg0: number, arg1: number, arg2: string): Internal.AbstractStringBuilder;
        insert(arg0: number, arg1: string): Internal.AbstractStringBuilder;
        insert(arg0: number, arg1: Internal.CharSequence): Internal.AbstractStringBuilder;
        insert(arg0: number, arg1: string[]): Internal.AbstractStringBuilder;
        insert(arg0: number, arg1: object): Internal.AbstractStringBuilder;
        insert(arg0: number, arg1: string[], arg2: number, arg3: number): Internal.AbstractStringBuilder;
        insert(arg0: number, arg1: boolean): Internal.AbstractStringBuilder;
        insert(arg0: number, arg1: number): Internal.AbstractStringBuilder;
        insert(arg0: number, arg1: number): Internal.AbstractStringBuilder;
        insert(arg0: number, arg1: number): Internal.AbstractStringBuilder;
        insert(arg0: number, arg1: Internal.CharSequence, arg2: number, arg3: number): Internal.AbstractStringBuilder;
        insert(arg0: number, arg1: number): Internal.AbstractStringBuilder;
        insert(arg0: number, arg1: string): Internal.AbstractStringBuilder;
        delete(arg0: number, arg1: number): Internal.AbstractStringBuilder;
        notify(): void;
        substring(arg0: number): string;
        substring(arg0: number, arg1: number): string;
        capacity(): number;
        appendCodePoint(arg0: number): Internal.AbstractStringBuilder;
        hashCode(): number;
        codePointBefore(arg0: number): number;
        indexOf(arg0: string): number;
        indexOf(arg0: string, arg1: number): number;
        codePointCount(arg0: number, arg1: number): number;
        codePoints(): Internal.IntStream;
        trimToSize(): void;
        getChars(arg0: number, arg1: number, arg2: string[], arg3: number): void;
        isEmpty(): boolean;
        length(): number;
        subSequence(arg0: number, arg1: number): Internal.CharSequence;
        reverse(): Internal.AbstractStringBuilder;
        lastIndexOf(arg0: string): number;
        lastIndexOf(arg0: string, arg1: number): number;
        setLength(arg0: number): void;
        equals(arg0: object): boolean;
        toString(): string;
        ensureCapacity(arg0: number): void;
        chars(): Internal.IntStream;
        offsetByCodePoints(arg0: number, arg1: number): number;
        charAt(arg0: number): string;
        append(arg0: Internal.CharSequence): Internal.AbstractStringBuilder;
        append(arg0: Internal.CharSequence): Internal.Appendable;
        append(arg0: Internal.CharSequence, arg1: number, arg2: number): Internal.AbstractStringBuilder;
        append(arg0: Internal.CharSequence, arg1: number, arg2: number): Internal.Appendable;
        append(arg0: string[]): Internal.AbstractStringBuilder;
        append(arg0: object): Internal.AbstractStringBuilder;
        append(arg0: Internal.StringBuffer): Internal.AbstractStringBuilder;
        append(arg0: string): Internal.AbstractStringBuilder;
        append(arg0: number): Internal.AbstractStringBuilder;
        append(arg0: number): Internal.AbstractStringBuilder;
        append(arg0: number): Internal.AbstractStringBuilder;
        append(arg0: number): Internal.AbstractStringBuilder;
        append(arg0: string): Internal.AbstractStringBuilder;
        append(arg0: string): Internal.Appendable;
        append(arg0: boolean): Internal.AbstractStringBuilder;
        append(arg0: string[], arg1: number, arg2: number): Internal.AbstractStringBuilder;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface BlockEntityGetter {
        getLoadedExistingBlockEntity(arg0: BlockPos): Internal.BlockEntity;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ScriptFile implements Internal.Comparable<Internal.ScriptFile> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        load(): boolean;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        compareTo(o: Internal.ScriptFile): number;
        compareTo(arg0: object): number;
        notify(): void;
        readonly source : Internal.ScriptSource;
        readonly pack : Internal.ScriptPack;
        readonly info : Internal.ScriptFileInfo;
        get error(): Internal.Throwable;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface PrivilegedExceptionAction <T> {
        run(): T;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Type {
        get typeName(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class IdScriptableObject extends Internal.ScriptableObject implements Internal.IdFunctionCall {
        isSealed(): boolean;
        static redefineProperty(obj: Internal.Scriptable, name: string, isConst: boolean): void;
        putConst(name: string, start: Internal.Scriptable, value: object): void;
        static getArrayPrototype(scope: Internal.Scriptable): Internal.Scriptable;
        put(key: Internal.Symbol, start: Internal.Scriptable, value: object): void;
        put(name: string, start: Internal.Scriptable, value: object): void;
        put(index: number, start: Internal.Scriptable, value: object): void;
        defineOwnProperties(cx: Internal.Context, props: Internal.ScriptableObject): void;
        static defineProperty(destination: Internal.Scriptable, propertyName: string, value: object, attributes: number): void;
        defineProperty(key: Internal.Symbol, value: object, attributes: number): void;
        defineProperty(propertyName: string, value: object, attributes: number): void;
        defineProperty(propertyName: string, delegateTo: object, getter: Internal.Method, setter: Internal.Method, attributes: number): void;
        hasPrototypeMap(): boolean;
        setGetterOrSetter(name: string, index: number, getterOrSetter: Internal.Callable, isSetter: boolean): void;
        avoidObjectDetection(): boolean;
        has(key: Internal.Symbol, start: Internal.Scriptable): boolean;
        has(name: string, start: Internal.Scriptable): boolean;
        has(index: number, start: Internal.Scriptable): boolean;
        getAttributes(name: string): number;
        getAttributes(key: Internal.Symbol): number;
        getAttributes(index: number): number;
        hasInstance(instance: Internal.Scriptable): boolean;
        getAssociatedValue(key: object): object;
        execIdCall(f: Internal.IdFunctionObject, cx: Internal.Context, scope: Internal.Scriptable, thisObj: Internal.Scriptable, args: object[]): object;
        static getPropertyIds(obj: Internal.Scriptable): object[];
        static hasProperty(obj: Internal.Scriptable, key: Internal.Symbol): boolean;
        static hasProperty(obj: Internal.Scriptable, index: number): boolean;
        static hasProperty(obj: Internal.Scriptable, name: string): boolean;
        size(): number;
        initPrototypeMethod(tag: object, id: number, key: Internal.Symbol, functionName: string, arity: number): Internal.IdFunctionObject;
        initPrototypeMethod(tag: object, id: number, propertyName: string, functionName: string, arity: number): Internal.IdFunctionObject;
        initPrototypeMethod(tag: object, id: number, name: string, arity: number): Internal.IdFunctionObject;
        defineOwnProperty(cx: Internal.Context, key: object, desc: Internal.ScriptableObject): void;
        initPrototypeValue(id: number, key: Internal.Symbol, value: object, attributes: number): void;
        initPrototypeValue(id: number, name: string, value: object, attributes: number): void;
        static getFunctionPrototype(scope: Internal.Scriptable): Internal.Scriptable;
        preventExtensions(): void;
        static callMethod(obj: Internal.Scriptable, methodName: string, args: object[]): object;
        static callMethod(cx: Internal.Context, obj: Internal.Scriptable, methodName: string, args: object[]): object;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        static getTopScopeValue(scope: Internal.Scriptable, key: object): object;
        initPrototypeConstructor(f: Internal.IdFunctionObject): void;
        notifyAll(): void;
        sealObject(): void;
        setAttributes(name: string, attributes: number): void;
        setAttributes(key: Internal.Symbol, attributes: number): void;
        setAttributes(index: number, attributes: number): void;
        static putProperty(obj: Internal.Scriptable, index: number, value: object): void;
        static putProperty(obj: Internal.Scriptable, name: string, value: object): void;
        static putProperty(obj: Internal.Scriptable, key: Internal.Symbol, value: object): void;
        delete(key: Internal.Symbol): void;
        delete(name: string): void;
        delete(index: number): void;
        notify(): void;
        associateValue(key: object, value: object): object;
        static deleteProperty(obj: Internal.Scriptable, name: string): boolean;
        static deleteProperty(obj: Internal.Scriptable, index: number): boolean;
        static getObjectPrototype(scope: Internal.Scriptable): Internal.Scriptable;
        isExtensible(): boolean;
        hashCode(): number;
        isConst(name: string): boolean;
        get(name: string, start: Internal.Scriptable): object;
        get(key: Internal.Symbol, start: Internal.Scriptable): object;
        get(index: number, start: Internal.Scriptable): object;
        get(key: object): object;
        static putConstProperty(obj: Internal.Scriptable, name: string, value: object): void;
        getGetterOrSetter(name: string, index: number, isSetter: boolean): object;
        static getTopLevelScope(obj: Internal.Scriptable): Internal.Scriptable;
        static getProperty(obj: Internal.Scriptable, key: Internal.Symbol): object;
        static getProperty(obj: Internal.Scriptable, index: number): object;
        static getProperty(obj: Internal.Scriptable, name: string): object;
        activatePrototypeMap(maxPrototypeId: number): void;
        isEmpty(): boolean;
        static getClassPrototype(scope: Internal.Scriptable, className: string): Internal.Scriptable;
        exportAsJSClass(maxPrototypeId: number, scope: Internal.Scriptable, sealed: boolean): Internal.IdFunctionObject;
        defineConst(name: string, start: Internal.Scriptable): void;
        equals(arg0: object): boolean;
        static defineConstProperty(destination: Internal.Scriptable, propertyName: string): void;
        toString(): string;
        static getGeneratorFunctionPrototype(scope: Internal.Scriptable): Internal.Scriptable;
        static readonly DONTENUM : 2;
        static readonly CONST : 13;
        static readonly NOT_FOUND : object;
        static readonly UNINITIALIZED_CONST : 8;
        static readonly EMPTY : 0;
        static readonly READONLY : 1;
        static readonly PERMANENT : 4;
        set parentScope(m: Internal.Scriptable);
        get ids(): object[];
        get allIds(): object[];
        get externalArrayLength(): object;
        get externalArrayData(): Internal.ExternalArrayData;
        get className(): string;
        get parentScope(): Internal.Scriptable;
        set externalArrayData(array: Internal.ExternalArrayData);
        get typeOf(): string;
        get prototype(): Internal.Scriptable;
        set prototype(m: Internal.Scriptable);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class AbstractSet <E> extends Internal.AbstractCollection<E> implements Internal.Set<E> {
        add(arg0: E): boolean;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        spliterator(): Internal.Spliterator<E>;
        notifyAll(): void;
        isEmpty(): boolean;
        clear(): void;
        notify(): void;
        remove(arg0: object): boolean;
        contains(arg0: object): boolean;
        removeAll(arg0: Internal.Collection<object>): boolean;
        size(): number;
        hashCode(): number;
        equals(arg0: object): boolean;
        toArray(): object[];
        toArray<T>(arg0: T[]): T[];
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface TypeVariable <D> implements Internal.Type, Internal.AnnotatedElement {
        get annotatedBounds(): Internal.AnnotatedType[];
        get name(): string;
        get typeName(): string;
        get annotations(): Internal.Annotation[];
        get bounds(): Internal.Type[];
        get declaredAnnotations(): Internal.Annotation[];
        get genericDeclaration(): D;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ChannelHandlerContext implements Internal.AttributeMap, Internal.ChannelInboundInvoker, Internal.ChannelOutboundInvoker {
        disconnect(arg0: Internal.ChannelPromise): Internal.ChannelFuture;
        disconnect(): Internal.ChannelFuture;
        handler(): Internal.ChannelHandler;
        newProgressivePromise(): Internal.ChannelProgressivePromise;
        fireChannelWritabilityChanged(): Internal.ChannelHandlerContext;
        fireChannelWritabilityChanged(): Internal.ChannelInboundInvoker;
        channel(): io.netty.channel.Channel;
        fireExceptionCaught(arg0: Internal.Throwable): Internal.ChannelHandlerContext;
        fireExceptionCaught(arg0: Internal.Throwable): Internal.ChannelInboundInvoker;
        fireChannelActive(): Internal.ChannelHandlerContext;
        fireChannelActive(): Internal.ChannelInboundInvoker;
        writeAndFlush(arg0: object, arg1: Internal.ChannelPromise): Internal.ChannelFuture;
        writeAndFlush(arg0: object): Internal.ChannelFuture;
        bind(arg0: Internal.SocketAddress): Internal.ChannelFuture;
        bind(arg0: Internal.SocketAddress, arg1: Internal.ChannelPromise): Internal.ChannelFuture;
        isRemoved(): boolean;
        flush(): Internal.ChannelHandlerContext;
        flush(): Internal.ChannelOutboundInvoker;
        executor(): Internal.EventExecutor;
        attr<T>(arg0: Internal.AttributeKey<T>): io.netty.util.Attribute<T>;
        close(arg0: Internal.ChannelPromise): Internal.ChannelFuture;
        close(): Internal.ChannelFuture;
        write(arg0: object): Internal.ChannelFuture;
        write(arg0: object, arg1: Internal.ChannelPromise): Internal.ChannelFuture;
        connect(arg0: Internal.SocketAddress, arg1: Internal.SocketAddress, arg2: Internal.ChannelPromise): Internal.ChannelFuture;
        connect(arg0: Internal.SocketAddress, arg1: Internal.ChannelPromise): Internal.ChannelFuture;
        connect(arg0: Internal.SocketAddress): Internal.ChannelFuture;
        connect(arg0: Internal.SocketAddress, arg1: Internal.SocketAddress): Internal.ChannelFuture;
        newPromise(): Internal.ChannelPromise;
        fireChannelInactive(): Internal.ChannelHandlerContext;
        fireChannelInactive(): Internal.ChannelInboundInvoker;
        read(): Internal.ChannelHandlerContext;
        read(): Internal.ChannelOutboundInvoker;
        fireChannelReadComplete(): Internal.ChannelHandlerContext;
        fireChannelReadComplete(): Internal.ChannelInboundInvoker;
        deregister(): Internal.ChannelFuture;
        deregister(arg0: Internal.ChannelPromise): Internal.ChannelFuture;
        newFailedFuture(arg0: Internal.Throwable): Internal.ChannelFuture;
        hasAttr<T>(arg0: Internal.AttributeKey<T>): boolean;
        fireChannelRegistered(): Internal.ChannelHandlerContext;
        fireChannelRegistered(): Internal.ChannelInboundInvoker;
        pipeline(): Internal.ChannelPipeline;
        fireChannelRead(arg0: object): Internal.ChannelHandlerContext;
        fireChannelRead(arg0: object): Internal.ChannelInboundInvoker;
        newSucceededFuture(): Internal.ChannelFuture;
        voidPromise(): Internal.ChannelPromise;
        name(): string;
        fireUserEventTriggered(arg0: object): Internal.ChannelHandlerContext;
        fireUserEventTriggered(arg0: object): Internal.ChannelInboundInvoker;
        fireChannelUnregistered(): Internal.ChannelHandlerContext;
        fireChannelUnregistered(): Internal.ChannelInboundInvoker;
        alloc(): Internal.ByteBufAllocator;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface CoordinateConsumer {
        consume(arg0: number, arg1: number, arg2: number): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Explosion implements Internal.ExplosionAccess {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        static callAddBlockDrops_$md$85ada3$0(arg0: Internal.ObjectArrayList<any>, arg1: Internal.ItemStack, arg2: BlockPos): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        constant$bil000$skipLoop(prevValue: number): number;
        redirect$bil000$skipNewHashSet(): Internal.HashSet<any>;
        notify(): void;
        redirect$bil000$collectBlocks(affectedBlocks: Internal.List<any>, collection: Internal.Collection<any>): boolean;
        get position(): Vec3;
        get exploder(): Internal.Entity;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface SimpleTask implements Internal.Task<Internal.SimpleTask> {
        isActive(): boolean;
        isCompleted(): boolean;
        set progress(arg0: number);
        set completed(completed: boolean);
        get progress(): number;
        get description(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class DataResult <R> implements Internal.App<Internal.DataResult$Mu, R> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        static instance(): Internal.DataResult$Instance;
        notifyAll(): void;
        addLifecycle(arg0: Internal.Lifecycle): Internal.DataResult<R>;
        static partialGet<K, V>(arg0: (arg0: K) => V, arg1: () => string): (arg0: K) => Internal.DataResult<V>;
        static error<R>(arg0: string, arg1: R, arg2: Internal.Lifecycle): Internal.DataResult<R>;
        error(): Internal.Optional<Internal.DataResult$PartialResult<R>>;
        static error<R>(arg0: string): Internal.DataResult<R>;
        static error<R>(arg0: string, arg1: Internal.Lifecycle): Internal.DataResult<R>;
        static error<R>(arg0: string, arg1: R): Internal.DataResult<R>;
        notify(): void;
        promotePartial(arg0: (arg0: string) => void): Internal.DataResult<R>;
        lifecycle(): Internal.Lifecycle;
        result(): Internal.Optional<R>;
        setLifecycle(arg0: Internal.Lifecycle): Internal.DataResult<R>;
        hashCode(): number;
        get(): Internal.Either<R, Internal.DataResult$PartialResult<R>>;
        map<T>(arg0: (arg0: R) => T): Internal.DataResult<T>;
        resultOrPartial(arg0: (arg0: string) => void): Internal.Optional<R>;
        apply2<R2, S>(arg0: (arg0: R, arg1: R2) => S, arg1: Internal.DataResult<R2>): Internal.DataResult<S>;
        apply3<R2, R3, S>(arg0: Internal.Function3<R, R2, R3, S>, arg1: Internal.DataResult<R2>, arg2: Internal.DataResult<R3>): Internal.DataResult<S>;
        apply2stable<R2, S>(arg0: (arg0: R, arg1: R2) => S, arg1: Internal.DataResult<R2>): Internal.DataResult<S>;
        ap<R2>(arg0: Internal.DataResult<(arg0: R) => R2>): Internal.DataResult<R2>;
        flatMap<R2>(arg0: (arg0: R) => Internal.DataResult<R2>): Internal.DataResult<R2>;
        mapError(arg0: Internal.UnaryOperator<string>): Internal.DataResult<R>;
        static success<R>(arg0: R): Internal.DataResult<R>;
        static success<R>(arg0: R, arg1: Internal.Lifecycle): Internal.DataResult<R>;
        static unbox<R>(arg0: Internal.App<Internal.DataResult$Mu, R>): Internal.DataResult<R>;
        getOrThrow(arg0: boolean, arg1: (arg0: string) => void): R;
        equals(arg0: object): boolean;
        toString(): string;
        set partial(arg0: () => R);
        set partial(arg0: R);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ClickEvent {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Spliterator$OfInt implements Internal.Spliterator$OfPrimitive<number, Internal.IntConsumer, Internal.Spliterator$OfInt> {
        trySplit(): Internal.Spliterator$OfPrimitive<any, any, any>;
        trySplit(): Internal.Spliterator<any>;
        trySplit(): Internal.Spliterator$OfInt;
        characteristics(): number;
        tryAdvance(arg0: Internal.IntConsumer): boolean;
        tryAdvance(arg0: (arg0: number) => void): boolean;
        tryAdvance(arg0: object): boolean;
        estimateSize(): number;
        hasCharacteristics(arg0: number): boolean;
        forEachRemaining(arg0: object): void;
        forEachRemaining(arg0: Internal.IntConsumer): void;
        forEachRemaining(arg0: (arg0: number) => void): void;
        get exactSizeIfKnown(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class OutputStream implements Internal.Closeable, Internal.Flushable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        flush(): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        static nullOutputStream(): Internal.OutputStream;
        close(): void;
        write(arg0: number[]): void;
        write(arg0: number[], arg1: number, arg2: number): void;
        write(arg0: number): void;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ConfiguredEndimationEaser <C, E> implements Internal.Function<number, number> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        compose<V>(arg0: (arg0: V) => T): (arg0: V) => R;
        apply(arg0: object): object;
        apply(arg0: number): number;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        andThen<V>(arg0: (arg0: R) => V): (arg0: T) => V;
        notify(): void;
        static readonly CODEC : Internal.Codec<Internal.Either<(arg0: object) => object, (arg0: object) => object>>;
        static readonly LINEAR : (arg0: com.mojang.datafixers.util.Unit) => Internal.EndimationEaser<com.mojang.datafixers.util.Unit>;
        get easer(): E;
        get config(): C;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface EntityTypeExtension <T> {
        flywheel$setInstancingController(arg0: Internal.EntityInstancingController<T>): void;
        flywheel$getInstancingController(): Internal.EntityInstancingController<T>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface TriPredicate <T, U, V> {
        or(arg0: Internal.TriPredicate<T, U, V>): Internal.TriPredicate<T, U, V>;
        test(arg0: T, arg1: U, arg2: V): boolean;
        and(arg0: Internal.TriPredicate<T, U, V>): Internal.TriPredicate<T, U, V>;
        negate(): Internal.TriPredicate<T, U, V>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ModuleLayer {
        static defineModulesWithManyLoaders(arg0: Internal.Configuration, arg1: Internal.List<Internal.ModuleLayer>, arg2: Internal.ClassLoader): Internal.ModuleLayer$Controller;
        defineModulesWithManyLoaders(arg0: Internal.Configuration, arg1: Internal.ClassLoader): Internal.ModuleLayer;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        configuration(): Internal.Configuration;
        notifyAll(): void;
        static defineModulesWithOneLoader(arg0: Internal.Configuration, arg1: Internal.List<Internal.ModuleLayer>, arg2: Internal.ClassLoader): Internal.ModuleLayer$Controller;
        defineModulesWithOneLoader(arg0: Internal.Configuration, arg1: Internal.ClassLoader): Internal.ModuleLayer;
        notify(): void;
        modules(): Internal.Set<Internal.Module>;
        defineModules(arg0: Internal.Configuration, arg1: (arg0: string) => Internal.ClassLoader): Internal.ModuleLayer;
        static defineModules(arg0: Internal.Configuration, arg1: Internal.List<Internal.ModuleLayer>, arg2: (arg0: string) => Internal.ClassLoader): Internal.ModuleLayer$Controller;
        static empty(): Internal.ModuleLayer;
        findModule(arg0: string): Internal.Optional<Internal.Module>;
        findLoader(arg0: string): Internal.ClassLoader;
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        static boot(): Internal.ModuleLayer;
        parents(): Internal.List<Internal.ModuleLayer>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IExtensibleEnum {
        init(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ObjectSet <K> implements Internal.ObjectCollection<K>, Internal.Set<K> {
        add(arg0: E): boolean;
        contains(arg0: object): boolean;
        iterator(): Internal.Iterator<any>;
        iterator(): Internal.ObjectIterator<K>;
        size(): number;
        spliterator(): Internal.Spliterator<any>;
        spliterator(): Internal.ObjectSpliterator<K>;
        hashCode(): number;
        equals(arg0: object): boolean;
        toArray<T>(arg0: T[]): T[];
        toArray(): object[];
        isEmpty(): boolean;
        clear(): void;
        remove(arg0: object): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Function16 <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R> {
        curry12(): Internal.Function12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Internal.Function4<T13, T14, T15, T16, R>>;
        curry9(): Internal.Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, Internal.Function7<T10, T11, T12, T13, T14, T15, T16, R>>;
        curry13(): Internal.Function13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, Internal.Function3<T14, T15, T16, R>>;
        apply(arg0: T1, arg1: T2, arg2: T3, arg3: T4, arg4: T5, arg5: T6, arg6: T7, arg7: T8, arg8: T9, arg9: T10, arg10: T11, arg11: T12, arg12: T13, arg13: T14, arg14: T15, arg15: T16): R;
        curry7(): Internal.Function7<T1, T2, T3, T4, T5, T6, T7, Internal.Function9<T8, T9, T10, T11, T12, T13, T14, T15, T16, R>>;
        curry14(): Internal.Function14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, (arg0: T15, arg1: T16) => R>;
        curry8(): Internal.Function8<T1, T2, T3, T4, T5, T6, T7, T8, Internal.Function8<T9, T10, T11, T12, T13, T14, T15, T16, R>>;
        curry15(): Internal.Function15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, (arg0: T16) => R>;
        curry10(): Internal.Function10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Internal.Function6<T11, T12, T13, T14, T15, T16, R>>;
        curry11(): Internal.Function11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Internal.Function5<T12, T13, T14, T15, T16, R>>;
        curry(): (arg0: T1) => Internal.Function15<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R>;
        curry5(): Internal.Function5<T1, T2, T3, T4, T5, Internal.Function11<T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R>>;
        curry6(): Internal.Function6<T1, T2, T3, T4, T5, T6, Internal.Function10<T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R>>;
        curry3(): Internal.Function3<T1, T2, T3, Internal.Function13<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R>>;
        curry4(): Internal.Function4<T1, T2, T3, T4, Internal.Function12<T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R>>;
        curry2(): (arg0: T1, arg1: T2) => Internal.Function14<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ModelGenerator {
        parent(s: string): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        toJson(): Internal.JsonObject;
        textures(json: Internal.JsonObject): void;
        hashCode(): number;
        texture(name: string, texture: string): void;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        element(consumer: (arg0: Internal.ModelGenerator$Element) => void): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Char2DoubleFunction implements it.unimi.dsi.fastutil.Function<string, number>, Internal.IntToDoubleFunction {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: string, arg1: number): number;
        applyAsDouble(arg0: number): number;
        andThenShort(arg0: Internal.Double2ShortFunction): Internal.Char2ShortFunction;
        composeByte(arg0: Internal.Byte2CharFunction): Internal.Byte2DoubleFunction;
        andThenInt(arg0: Internal.Double2IntFunction): Internal.Char2IntFunction;
        composeReference<T>(arg0: Internal.Reference2CharFunction<T>): Internal.Reference2DoubleFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: string) => T;
        put(arg0: object, arg1: object): object;
        put(arg0: string, arg1: number): number;
        put(arg0: string, arg1: number): number;
        remove(arg0: string): number;
        remove(arg0: object): object;
        remove(arg0: object): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Double2DoubleFunction): Internal.Char2DoubleFunction;
        andThenObject<T>(arg0: Internal.Double2ObjectFunction<T>): Internal.Char2ObjectFunction<T>;
        get(arg0: object): number;
        get(arg0: object): object;
        get(arg0: string): number;
        andThenLong(arg0: Internal.Double2LongFunction): Internal.Char2LongFunction;
        composeLong(arg0: Internal.Long2CharFunction): Internal.Long2DoubleFunction;
        andThenByte(arg0: Internal.Double2ByteFunction): Internal.Char2ByteFunction;
        andThenFloat(arg0: Internal.Double2FloatFunction): Internal.Char2FloatFunction;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: string): boolean;
        composeInt(arg0: Internal.Int2CharFunction): Internal.Int2DoubleFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2CharFunction): Internal.Float2DoubleFunction;
        andThenChar(arg0: Internal.Double2CharFunction): Internal.Char2CharFunction;
        composeObject<T>(arg0: Internal.Object2CharFunction<T>): Internal.Object2DoubleFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => string): (arg0: T) => number;
        composeShort(arg0: Internal.Short2CharFunction): Internal.Short2DoubleFunction;
        andThenReference<T>(arg0: Internal.Double2ReferenceFunction<T>): Internal.Char2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2CharFunction): Internal.Char2DoubleFunction;
        composeDouble(arg0: Internal.Double2CharFunction): Internal.Double2DoubleFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class HashMap <K, V> extends Internal.AbstractMap<K, V> implements Map<K, V>, Internal.Cloneable, Internal.Serializable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        getOrDefault(arg0: object, arg1: V): V;
        notifyAll(): void;
        computeIfAbsent(arg0: K, arg1: (arg0: K) => V): V;
        values(): Internal.Collection<V>;
        replace(arg0: K, arg1: V): V;
        replace(arg0: K, arg1: V, arg2: V): boolean;
        replaceAll(arg0: (arg0: K, arg1: V) => V): void;
        notify(): void;
        containsValue(arg0: object): boolean;
        put(arg0: K, arg1: V): V;
        remove(arg0: object, arg1: object): boolean;
        remove(arg0: object): V;
        compute(arg0: K, arg1: (arg0: K, arg1: V) => V): V;
        hashCode(): number;
        putAll(arg0: Map<K, V>): void;
        merge(arg0: K, arg1: V, arg2: (arg0: V, arg1: V) => V): V;
        get(arg0: object): V;
        keySet(): Internal.Set<K>;
        entrySet(): Internal.Set<Internal.Map$Entry<K, V>>;
        containsKey(arg0: object): boolean;
        forEach(arg0: (arg0: K, arg1: V) => void): void;
        isEmpty(): boolean;
        clear(): void;
        computeIfPresent(arg0: K, arg1: (arg0: K, arg1: V) => V): V;
        size(): number;
        equals(arg0: object): boolean;
        clone(): object;
        toString(): string;
        putIfAbsent(arg0: K, arg1: V): V;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class Property <T> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface WithAttachedData {
        get data(): Internal.AttachedData;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class LinkOption extends Internal.Enum<Internal.LinkOption> implements Internal.OpenOption, Internal.CopyOption {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(arg0: string): Internal.LinkOption;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.LinkOption[];
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly NOFOLLOW_LINKS : Internal.LinkOption;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Consumer <T> {
        andThen(arg0: (arg0: T) => void): (arg0: T) => void;
        accept(arg0: T): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface EntityGetter {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface PathMatcher {
        matches(arg0: Internal.Path): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Thread$State extends Internal.Enum<Internal.Thread$State> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(arg0: string): Internal.Thread$State;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.Thread$State[];
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly NEW : Internal.Thread$State;
        static readonly TERMINATED : Internal.Thread$State;
        static readonly RUNNABLE : Internal.Thread$State;
        static readonly BLOCKED : Internal.Thread$State;
        static readonly WAITING : Internal.Thread$State;
        static readonly TIMED_WAITING : Internal.Thread$State;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ItemSupplier {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ModelBakery implements Internal.ModelBakeryStub {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        betterloadingscreen$setItemTask(task: Internal.SteppedTask): void;
        hashCode(): number;
        betterloadingscreen$getItemTask(): Internal.SteppedTask;
        notifyAll(): void;
        equals(arg0: object): boolean;
        bake(arg0: ResourceLocation, arg1: Internal.ModelState, arg2: (arg0: Internal.Material) => Internal.TextureAtlasSprite): Internal.BakedModel;
        betterloadingscreen$setBlockTask(task: Internal.SteppedTask): void;
        toString(): string;
        notify(): void;
        betterloadingscreen$getBlockTask(): Internal.SteppedTask;
        get spriteMap(): Internal.AtlasSet;
        get specialModels(): Internal.Set<ResourceLocation>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Object2ObjectArrayMap <K, V> extends Internal.AbstractObject2ObjectMap<K, V> implements Internal.Serializable, Internal.Cloneable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        object2ObjectEntrySet(): Internal.ObjectSet<any>;
        object2ObjectEntrySet(): Internal.Object2ObjectMap$FastEntrySet<K, V>;
        getOrDefault(arg0: object, arg1: V): V;
        entrySet(): Internal.Set<any>;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        notifyAll(): void;
        values(): Internal.Collection<any>;
        values(): Internal.ObjectCollection<V>;
        replace(arg0: K, arg1: V, arg2: V): boolean;
        replace(arg0: K, arg1: V): V;
        isEmpty(): boolean;
        clear(): void;
        notify(): void;
        containsValue(arg0: object): boolean;
        put(arg0: K, arg1: V): V;
        remove(arg0: object): V;
        remove(arg0: object, arg1: object): boolean;
        defaultReturnValue(arg0: V): void;
        defaultReturnValue(): V;
        size(): number;
        hashCode(): number;
        equals(arg0: object): boolean;
        get(arg0: object): V;
        clone(): object;
        clone(): (arg0: K) => V;
        toString(): string;
        putIfAbsent(arg0: K, arg1: V): V;
        keySet(): Internal.ObjectSet<K>;
        keySet(): Internal.Set<any>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface BakedModel implements Internal.IForgeBakedModel {
        doesHandlePerspectives(): boolean;
        getModelData(arg0: Internal.BlockAndTintGetter, arg1: BlockPos, arg2: Internal.BlockState, arg3: Internal.IModelData): Internal.IModelData;
        isLayered(): boolean;
        handlePerspective(arg0: Internal.ItemTransforms$TransformType, arg1: Internal.PoseStack): Internal.BakedModel;
        useAmbientOcclusion(arg0: Internal.BlockState): boolean;
        getParticleIcon(arg0: Internal.IModelData): Internal.TextureAtlasSprite;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Long2ByteFunction implements it.unimi.dsi.fastutil.Function<number, number>, Internal.LongToIntFunction {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        andThenShort(arg0: Internal.Byte2ShortFunction): Internal.Long2ShortFunction;
        composeByte(arg0: Internal.Byte2LongFunction): Internal.Byte2ByteFunction;
        andThenInt(arg0: Internal.Byte2IntFunction): Internal.Long2IntFunction;
        composeReference<T>(arg0: Internal.Reference2LongFunction<T>): Internal.Reference2ByteFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: number) => T;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: number): number;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: object): object;
        remove(arg0: object): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Byte2DoubleFunction): Internal.Long2DoubleFunction;
        andThenObject<T>(arg0: Internal.Byte2ObjectFunction<T>): Internal.Long2ObjectFunction<T>;
        get(arg0: object): number;
        get(arg0: object): object;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Byte2LongFunction): Internal.Long2LongFunction;
        composeLong(arg0: Internal.Long2LongFunction): Internal.Long2ByteFunction;
        andThenByte(arg0: Internal.Byte2ByteFunction): Internal.Long2ByteFunction;
        andThenFloat(arg0: Internal.Byte2FloatFunction): Internal.Long2FloatFunction;
        applyAsInt(arg0: number): number;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2LongFunction): Internal.Int2ByteFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2LongFunction): Internal.Float2ByteFunction;
        andThenChar(arg0: Internal.Byte2CharFunction): Internal.Long2CharFunction;
        composeObject<T>(arg0: Internal.Object2LongFunction<T>): Internal.Object2ByteFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => number;
        composeShort(arg0: Internal.Short2LongFunction): Internal.Short2ByteFunction;
        andThenReference<T>(arg0: Internal.Byte2ReferenceFunction<T>): Internal.Long2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2LongFunction): Internal.Char2ByteFunction;
        composeDouble(arg0: Internal.Double2LongFunction): Internal.Double2ByteFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface FileNameMap {
        getContentTypeFor(arg0: string): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface RemovableBlockEntity {
        increaseRemoveCounter(): void;
        get removedCountLithium(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ModuleDescriptor$Requires implements Internal.Comparable<Internal.ModuleDescriptor$Requires> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        compiledVersion(): Internal.Optional<Internal.ModuleDescriptor$Version>;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        rawCompiledVersion(): Internal.Optional<string>;
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: Internal.ModuleDescriptor$Requires): number;
        modifiers(): Internal.Set<Internal.ModuleDescriptor$Requires$Modifier>;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ICapabilityProviderImpl <B> implements Internal.ICapabilityProvider {
        invalidateCaps(): void;
        areCapsCompatible(arg0: Internal.CapabilityProvider<B>): boolean;
        areCapsCompatible(arg0: Internal.CapabilityDispatcher): boolean;
        reviveCaps(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ServerLevel extends Internal.Level implements Internal.WorldGenLevel, Internal.WorldEntityByChunkAccess, Internal.ServerWorldAccessor, me.jellysquid.mods.lithium.mixin.chunk.entity_class_groups.ServerWorldAccessor, Internal.ServerWorldExtended, Internal.ExtendedWorld {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        getChunkAtImmediately(arg0: number, arg1: number): Internal.LevelChunk;
        notifyAll(): void;
        redirect$zon000$onTickLiquid(state: Internal.FluidState, level: Internal.Level, pos: BlockPos): void;
        getLoadedExistingBlockEntity(pos: BlockPos): Internal.BlockEntity;
        notify(): void;
        removePlayer(arg0: Internal.ServerPlayer, arg1: boolean): void;
        getEntitiesInChunk(chunkX: number, chunkZ: number): Internal.Collection<any>;
        markAndNotifyBlock(arg0: BlockPos, arg1: Internal.LevelChunk, arg2: Internal.BlockState, arg3: Internal.BlockState, arg4: number, arg5: number): void;
        invalidateCaps(): void;
        hashCode(): number;
        increaseMaxEntityRadius(arg0: number): number;
        redirect$zom000$redirectTick(blockEntity: Internal.TickingBlockEntity): void;
        removeEntityComplete(arg0: Internal.Entity, arg1: boolean): void;
        close(): void;
        areCapsCompatible(arg0: Internal.CapabilityDispatcher): boolean;
        redirect$zon000$onTickBlock(state: Internal.BlockState, level: Internal.ServerLevel, pos: BlockPos, random: Internal.Random): void;
        removeEntity(arg0: Internal.Entity): void;
        removeEntity(arg0: Internal.Entity, arg1: boolean): void;
        asKJS(): object;
        reviveCaps(): void;
        getAnyChunkImmediately(arg0: number, arg1: number): Internal.ChunkAccess;
        equals(arg0: object): boolean;
        handler$zkp000$wireBlockCallback(arg0: BlockPos, arg1: Internal.BlockState, arg2: Internal.BlockState, arg3: number, arg4: Internal.CallbackInfo): void;
        isAreaLoaded(arg0: BlockPos, arg1: number): boolean;
        toString(): string;
        getRandomPosInChunk(x: number, y: number, z: number, mask: number, out: Internal.BlockPos$MutableBlockPos): void;
        isConsistent(): boolean;
        restoringBlockSnapshots : boolean;
        capturedBlockSnapshots : Internal.ArrayList<Internal.BlockSnapshot>;
        captureBlockSnapshots : boolean;
        set navigationActive(mobEntity: Internal.Mob);
        get entityManager(): Internal.PersistentEntitySectionManager<any>;
        get lunarContext(): Internal.LunarContext;
        get maxEntityRadius(): number;
        set navigationInactive(mobEntity: Internal.Mob);
        set lunarContext(arg0: Internal.LunarContext);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class FluidIngredient implements Internal.Predicate<Internal.FluidStack> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        or(arg0: (arg0: T) => boolean): (arg0: T) => boolean;
        static fromTag(arg0: Internal.Tag$Named<Internal.Fluid>, arg1: number): Internal.FluidIngredient;
        static read(arg0: Internal.FriendlyByteBuf): Internal.FluidIngredient;
        test(arg0: Internal.FluidStack): boolean;
        test(arg0: object): boolean;
        notifyAll(): void;
        static isFluidIngredient(arg0: Internal.JsonElement): boolean;
        static fromFluid(arg0: Internal.Fluid, arg1: number): Internal.FluidIngredient;
        notify(): void;
        getMatchingFluidStacks(): Internal.List<Internal.FluidStack>;
        serialize(): Internal.JsonObject;
        and(arg0: (arg0: T) => boolean): (arg0: T) => boolean;
        negate(): (arg0: T) => boolean;
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        write(arg0: Internal.FriendlyByteBuf): void;
        static fromFluidStack(arg0: Internal.FluidStack): Internal.FluidIngredient;
        static deserialize(arg0: Internal.JsonElement): Internal.FluidIngredient;
        matchingFluidStacks : Internal.List<Internal.FluidStack>;
        static readonly EMPTY : Internal.FluidIngredient;
        get requiredAmount(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ContextAwareComponent {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Double2LongFunction implements it.unimi.dsi.fastutil.Function<number, number>, Internal.DoubleToLongFunction {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        andThenShort(arg0: Internal.Long2ShortFunction): Internal.Double2ShortFunction;
        composeByte(arg0: Internal.Byte2DoubleFunction): Internal.Byte2LongFunction;
        andThenInt(arg0: Internal.Long2IntFunction): Internal.Double2IntFunction;
        composeReference<T>(arg0: Internal.Reference2DoubleFunction<T>): Internal.Reference2LongFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: number) => T;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: number): number;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: object): object;
        remove(arg0: object): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Long2DoubleFunction): Internal.Double2DoubleFunction;
        andThenObject<T>(arg0: Internal.Long2ObjectFunction<T>): Internal.Double2ObjectFunction<T>;
        get(arg0: object): number;
        get(arg0: object): object;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Long2LongFunction): Internal.Double2LongFunction;
        composeLong(arg0: Internal.Long2DoubleFunction): Internal.Long2LongFunction;
        andThenByte(arg0: Internal.Long2ByteFunction): Internal.Double2ByteFunction;
        andThenFloat(arg0: Internal.Long2FloatFunction): Internal.Double2FloatFunction;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2DoubleFunction): Internal.Int2LongFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2DoubleFunction): Internal.Float2LongFunction;
        andThenChar(arg0: Internal.Long2CharFunction): Internal.Double2CharFunction;
        applyAsLong(arg0: number): number;
        composeObject<T>(arg0: Internal.Object2DoubleFunction<T>): Internal.Object2LongFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => number;
        composeShort(arg0: Internal.Short2DoubleFunction): Internal.Short2LongFunction;
        andThenReference<T>(arg0: Internal.Long2ReferenceFunction<T>): Internal.Double2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2DoubleFunction): Internal.Char2LongFunction;
        composeDouble(arg0: Internal.Double2DoubleFunction): Internal.Double2LongFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ProgressiveFuture <V> implements Internal.Future<V> {
        cancel(arg0: boolean): boolean;
        isCancelled(): boolean;
        removeListeners(arg0: Internal.GenericFutureListener<Internal.Future<V>>[]): Internal.ProgressiveFuture<V>;
        cause(): Internal.Throwable;
        awaitUninterruptibly(): Internal.ProgressiveFuture<V>;
        awaitUninterruptibly(arg0: number): boolean;
        awaitUninterruptibly(arg0: number, arg1: Internal.TimeUnit): boolean;
        removeListener(arg0: Internal.GenericFutureListener<Internal.Future<V>>): Internal.ProgressiveFuture<V>;
        isDone(): boolean;
        sync(): Internal.ProgressiveFuture<V>;
        syncUninterruptibly(): Internal.ProgressiveFuture<V>;
        get(arg0: number, arg1: Internal.TimeUnit): V;
        get(): V;
        isCancellable(): boolean;
        await(): Internal.ProgressiveFuture<V>;
        await(arg0: number, arg1: Internal.TimeUnit): boolean;
        await(arg0: number): boolean;
        addListeners(arg0: Internal.GenericFutureListener<Internal.Future<V>>[]): Internal.ProgressiveFuture<V>;
        isSuccess(): boolean;
        addListener(arg0: Internal.GenericFutureListener<Internal.Future<V>>): Internal.ProgressiveFuture<V>;
        get now(): V;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class NativeJavaObject implements Internal.Scriptable, Internal.SymbolScriptable, Internal.Wrapper, Internal.Serializable {
        enumerationIteratorNext(cx: Internal.Context, currentId: (arg0: object) => void): boolean;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hasInstance(value: Internal.Scriptable): boolean;
        static canConvert(cx: Internal.Context, fromObj: object, to: Internal.Class<object>): boolean;
        notifyAll(): void;
        addCustomProperty(name: string, getter: Internal.CustomProperty): void;
        delete(index: number): void;
        delete(key: Internal.Symbol): void;
        delete(name: string): void;
        notify(): void;
        put(index: number, start: Internal.Scriptable, value: object): void;
        put(name: string, start: Internal.Scriptable, value: object): void;
        put(symbol: Internal.Symbol, start: Internal.Scriptable, value: object): void;
        unwrap(): object;
        getDefaultValue(hint: Internal.Class<object>): object;
        hashCode(): number;
        equals(arg0: object): boolean;
        get(key: Internal.Symbol, start: Internal.Scriptable): object;
        get(index: number, start: Internal.Scriptable): object;
        get(name: string, start: Internal.Scriptable): object;
        toString(): string;
        enumerationIteratorHasNext(cx: Internal.Context, currentId: (arg0: object) => void): boolean;
        has(index: number, start: Internal.Scriptable): boolean;
        has(key: Internal.Symbol, start: Internal.Scriptable): boolean;
        has(name: string, start: Internal.Scriptable): boolean;
        static readonly NOT_FOUND : object;
        set parentScope(m: Internal.Scriptable);
        get ids(): object[];
        get allIds(): object[];
        set prototype(m: Internal.Scriptable);
        get prototype(): Internal.Scriptable;
        get className(): string;
        get parentScope(): Internal.Scriptable;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class NamedPackage {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class Fluid extends Internal.ForgeRegistryEntry<Internal.Fluid> implements Internal.IForgeFluid, Internal.FluidInvokerMixin {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        getExplosionResistance(arg0: Internal.FluidState, arg1: Internal.BlockGetter, arg2: BlockPos, arg3: Internal.Explosion): number;
        notifyAll(): void;
        setRegistryName(arg0: string, arg1: string): V;
        isAABBInsideMaterial(arg0: Internal.FluidState, arg1: Internal.LevelReader, arg2: BlockPos, arg3: Internal.AABB, arg4: net.minecraft.world.level.material.Material): boolean;
        isEntityInside(arg0: Internal.FluidState, arg1: Internal.LevelReader, arg2: BlockPos, arg3: Internal.Entity, arg4: number, arg5: Internal.SetTag<Internal.Fluid>, arg6: boolean): boolean;
        notify(): void;
        isAABBInsideLiquid(arg0: Internal.FluidState, arg1: Internal.LevelReader, arg2: BlockPos, arg3: Internal.AABB): boolean;
        callAnimateTick(arg0: Internal.Level, arg1: BlockPos, arg2: Internal.FluidState, arg3: Internal.Random): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        readonly delegate : () => V;
        get attributes(): Internal.FluidAttributes;
        get registryName(): ResourceLocation;
        set registryName(arg0: ResourceLocation);
        set registryName(arg0: ResourceLocation);
        set registryName(arg0: string);
        get tags(): Internal.Set<ResourceLocation>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class MobEffectInstance implements Internal.Comparable<Internal.MobEffectInstance>, Internal.IForgeMobEffectInstance, Internal.EffectInstanceAccess {
        writeCurativeItems(arg0: Internal.CompoundTag): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        addCurativeItem(arg0: Internal.ItemStack): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: Internal.MobEffectInstance): number;
        isCurativeItem(arg0: Internal.ItemStack): boolean;
        notify(): void;
        set curativeItems(arg0: Internal.List<Internal.ItemStack>);
        get effect(): Internal.MobEffect;
        get curativeItems(): Internal.List<Internal.ItemStack>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Frustum implements Internal.FrustumAdapter {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        handler$bjl000$init(modelViewMatrix: Internal.Matrix4f, projectionMatrix: Internal.Matrix4f, ci: Internal.CallbackInfo): void;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        sodium$createFrustum(): me.jellysquid.mods.sodium.client.util.frustum.Frustum;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class BlockIDPredicate$PropertyObject {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class IndexedBlockStatePredicate implements Internal.Predicate<Internal.BlockState> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        or(arg0: (arg0: T) => boolean): (arg0: T) => boolean;
        test(arg0: T): boolean;
        and(arg0: (arg0: T) => boolean): (arg0: T) => boolean;
        negate(): (arg0: T) => boolean;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        static readonly ALL_FLAGS : Internal.IndexedBlockStatePredicate[];
        static readonly FULLY_INITIALIZED : Internal.AtomicBoolean;
        get index(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class UnmodifiableListIterator <E> extends Internal.UnmodifiableIterator<E> implements Internal.ListIterator<E> {
        next(): E;
        add(arg0: E): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        set(arg0: E): void;
        previous(): E;
        notifyAll(): void;
        hasNext(): boolean;
        nextIndex(): number;
        notify(): void;
        remove(): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        hasPrevious(): boolean;
        toString(): string;
        previousIndex(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface EquipmentEntity$EquipmentTrackingEntity {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class AgeableListModel <E> extends Internal.EntityModel<E> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Destroyable {
        isDestroyed(): boolean;
        destroy(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface AsynchronousChannel implements Internal.Channel {
        isOpen(): boolean;
        close(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Endimation$Builder {
        keyframes(arg0: Internal.Endimation$Builder$Keyframes): Internal.Endimation$Builder;
        keyframes(arg0: (arg0: string) => Internal.Endimation$PartKeyframes): Internal.Endimation$Builder;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        effects(arg0: Internal.ConfiguredEndimationEffect<object, object>[]): Internal.Endimation$Builder;
        build(): Internal.Endimation;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        blendWeight(arg0: number): Internal.Endimation$Builder;
        length(arg0: number): Internal.Endimation$Builder;
        toString(): string;
        addEffects(arg0: Internal.ConfiguredEndimationEffect<object, object>[]): Internal.Endimation$Builder;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Temporal implements Internal.TemporalAccessor {
        getLong(arg0: Internal.TemporalField): number;
        minus(arg0: Internal.TemporalAmount): Internal.Temporal;
        minus(arg0: number, arg1: Internal.TemporalUnit): Internal.Temporal;
        with(arg0: Internal.TemporalField, arg1: number): Internal.Temporal;
        with(arg0: Internal.TemporalAdjuster): Internal.Temporal;
        get(arg0: Internal.TemporalField): number;
        range(arg0: Internal.TemporalField): Internal.ValueRange;
        until(arg0: Internal.Temporal, arg1: Internal.TemporalUnit): number;
        isSupported(arg0: Internal.TemporalUnit): boolean;
        isSupported(arg0: Internal.TemporalField): boolean;
        plus(arg0: number, arg1: Internal.TemporalUnit): Internal.Temporal;
        plus(arg0: Internal.TemporalAmount): Internal.Temporal;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class PlayerStatsJS {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        getItemsPickedUp(item: Internal.Item): number;
        notify(): void;
        getBlocksMined(block: Internal.Block): number;
        getItemsCrafted(item: Internal.Item): number;
        hashCode(): number;
        get(id: ResourceLocation): number;
        getKilled(entity: Internal.EntityType<object>): number;
        add(id: ResourceLocation, value: number): void;
        getItemsDropped(item: Internal.Item): number;
        set(id: ResourceLocation, value: number): void;
        getItemsBroken(item: Internal.Item): number;
        equals(arg0: object): boolean;
        getKilledBy(entity: Internal.EntityType<object>): number;
        toString(): string;
        getItemsUsed(item: Internal.Item): number;
        get playTime(): number;
        get player(): Internal.PlayerJS<object>;
        get crouchDistance(): number;
        get damageAbsorbed(): number;
        get walkDistance(): number;
        get damageDealt_absorbed(): number;
        get fishCaught(): number;
        get deaths(): number;
        get swimDistance(): number;
        get damageDealt_resisted(): number;
        get playerKills(): number;
        get timeSinceDeath(): number;
        get damageBlocked_by_shield(): number;
        get timeCrouchTime(): number;
        get damageTaken(): number;
        get jumps(): number;
        get damageResisted(): number;
        get animalsBred(): number;
        get mobKills(): number;
        get sprintDistance(): number;
        get timeSinceRest(): number;
        get damageDealt(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IVertexProducer {
        pipe(arg0: Internal.IVertexConsumer): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Function8 <T1, T2, T3, T4, T5, T6, T7, T8, R> {
        apply(arg0: T1, arg1: T2, arg2: T3, arg3: T4, arg4: T5, arg5: T6, arg6: T7, arg7: T8): R;
        curry7(): Internal.Function7<T1, T2, T3, T4, T5, T6, T7, (arg0: T8) => R>;
        curry5(): Internal.Function5<T1, T2, T3, T4, T5, Internal.Function3<T6, T7, T8, R>>;
        curry6(): Internal.Function6<T1, T2, T3, T4, T5, T6, (arg0: T7, arg1: T8) => R>;
        curry3(): Internal.Function3<T1, T2, T3, Internal.Function5<T4, T5, T6, T7, T8, R>>;
        curry4(): Internal.Function4<T1, T2, T3, T4, Internal.Function4<T5, T6, T7, T8, R>>;
        curry2(): (arg0: T1, arg1: T2) => Internal.Function6<T3, T4, T5, T6, T7, T8, R>;
        curry(): (arg0: T1) => Internal.Function7<T2, T3, T4, T5, T6, T7, T8, R>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Products$P8 <F, T1, T2, T3, T4, T5, T6, T7, T8> {
        t4(): Internal.App<F, T4>;
        t5(): Internal.App<F, T5>;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        t6(): Internal.App<F, T6>;
        t7(): Internal.App<F, T7>;
        t8(): Internal.App<F, T8>;
        apply<R>(arg0: Internal.Applicative<F, object>, arg1: Internal.Function8<T1, T2, T3, T4, T5, T6, T7, T8, R>): Internal.App<F, R>;
        apply<R>(arg0: Internal.Applicative<F, object>, arg1: Internal.App<F, Internal.Function8<T1, T2, T3, T4, T5, T6, T7, T8, R>>): Internal.App<F, R>;
        notifyAll(): void;
        notify(): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        t1(): Internal.App<F, T1>;
        t2(): Internal.App<F, T2>;
        t3(): Internal.App<F, T3>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Task <T> implements Internal.HasProgress {
        isActive(): boolean;
        isCompleted(): boolean;
        get parent(): Internal.MultiTask<object>;
        get identifier(): Internal.StatusIdentifier<T>;
        get progress(): number;
        get description(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class AssetJsonGenerator extends Internal.JsonGenerator {
        multipartState(id: ResourceLocation, consumer: (arg0: Internal.MultipartBlockStateGenerator) => void): void;
        blockState(id: ResourceLocation, consumer: (arg0: Internal.VariantBlockStateGenerator) => void): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        blockModel(id: ResourceLocation, consumer: (arg0: Internal.ModelGenerator) => void): void;
        hashCode(): number;
        itemModel(id: ResourceLocation, consumer: (arg0: Internal.ModelGenerator) => void): void;
        notifyAll(): void;
        equals(arg0: object): boolean;
        json(id: ResourceLocation, json: Internal.JsonElement): void;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Decoder$Boxed <A> {
        decoder(): Internal.Decoder<A>;
        decode<T>(arg0: Internal.Dynamic<T>): Internal.DataResult<Internal.Pair<A, T>>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class CoderResult {
        static malformedForLength(arg0: number): Internal.CoderResult;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isMalformed(): boolean;
        isOverflow(): boolean;
        notifyAll(): void;
        isUnmappable(): boolean;
        length(): number;
        throwException(): void;
        notify(): void;
        isError(): boolean;
        static unmappableForLength(arg0: number): Internal.CoderResult;
        hashCode(): number;
        equals(arg0: object): boolean;
        isUnderflow(): boolean;
        toString(): string;
        static readonly OVERFLOW : Internal.CoderResult;
        static readonly UNDERFLOW : Internal.CoderResult;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class BigDecimal extends Internal.Number implements Internal.Comparable<Internal.BigDecimal> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        longValueExact(): number;
        movePointLeft(arg0: number): Internal.BigDecimal;
        notifyAll(): void;
        precision(): number;
        byteValueExact(): number;
        toBigInteger(): Internal.BigInteger;
        scale(): number;
        toPlainString(): string;
        compareTo(arg0: Internal.BigDecimal): number;
        compareTo(arg0: object): number;
        shortValueExact(): number;
        notify(): void;
        longValue(): number;
        min(arg0: Internal.BigDecimal): Internal.BigDecimal;
        unscaledValue(): Internal.BigInteger;
        sqrt(arg0: Internal.MathContext): Internal.BigDecimal;
        scaleByPowerOfTen(arg0: number): Internal.BigDecimal;
        hashCode(): number;
        pow(arg0: number, arg1: Internal.MathContext): Internal.BigDecimal;
        pow(arg0: number): Internal.BigDecimal;
        shortValue(): number;
        divide(arg0: Internal.BigDecimal): Internal.BigDecimal;
        divide(arg0: Internal.BigDecimal, arg1: Internal.MathContext): Internal.BigDecimal;
        divide(arg0: Internal.BigDecimal, arg1: number): Internal.BigDecimal;
        divide(arg0: Internal.BigDecimal, arg1: Internal.RoundingMode): Internal.BigDecimal;
        divide(arg0: Internal.BigDecimal, arg1: number, arg2: number): Internal.BigDecimal;
        divide(arg0: Internal.BigDecimal, arg1: number, arg2: Internal.RoundingMode): Internal.BigDecimal;
        multiply(arg0: Internal.BigDecimal, arg1: Internal.MathContext): Internal.BigDecimal;
        multiply(arg0: Internal.BigDecimal): Internal.BigDecimal;
        signum(): number;
        add(arg0: Internal.BigDecimal, arg1: Internal.MathContext): Internal.BigDecimal;
        add(arg0: Internal.BigDecimal): Internal.BigDecimal;
        toBigIntegerExact(): Internal.BigInteger;
        toEngineeringString(): string;
        max(arg0: Internal.BigDecimal): Internal.BigDecimal;
        setScale(arg0: number): Internal.BigDecimal;
        setScale(arg0: number, arg1: Internal.RoundingMode): Internal.BigDecimal;
        setScale(arg0: number, arg1: number): Internal.BigDecimal;
        static valueOf(arg0: number): Internal.BigDecimal;
        static valueOf(arg0: number): Internal.BigDecimal;
        static valueOf(arg0: number, arg1: number): Internal.BigDecimal;
        intValue(): number;
        subtract(arg0: Internal.BigDecimal): Internal.BigDecimal;
        subtract(arg0: Internal.BigDecimal, arg1: Internal.MathContext): Internal.BigDecimal;
        floatValue(): number;
        doubleValue(): number;
        divideToIntegralValue(arg0: Internal.BigDecimal): Internal.BigDecimal;
        divideToIntegralValue(arg0: Internal.BigDecimal, arg1: Internal.MathContext): Internal.BigDecimal;
        plus(arg0: Internal.MathContext): Internal.BigDecimal;
        plus(): Internal.BigDecimal;
        abs(): Internal.BigDecimal;
        abs(arg0: Internal.MathContext): Internal.BigDecimal;
        round(arg0: Internal.MathContext): Internal.BigDecimal;
        divideAndRemainder(arg0: Internal.BigDecimal, arg1: Internal.MathContext): Internal.BigDecimal[];
        divideAndRemainder(arg0: Internal.BigDecimal): Internal.BigDecimal[];
        negate(arg0: Internal.MathContext): Internal.BigDecimal;
        negate(): Internal.BigDecimal;
        movePointRight(arg0: number): Internal.BigDecimal;
        equals(arg0: object): boolean;
        ulp(): Internal.BigDecimal;
        toString(): string;
        stripTrailingZeros(): Internal.BigDecimal;
        remainder(arg0: Internal.BigDecimal, arg1: Internal.MathContext): Internal.BigDecimal;
        remainder(arg0: Internal.BigDecimal): Internal.BigDecimal;
        intValueExact(): number;
        byteValue(): number;
        static readonly ZERO : Internal.BigDecimal;
        static readonly ROUND_DOWN : 1;
        static readonly ROUND_UNNECESSARY : 7;
        static readonly ROUND_CEILING : 2;
        static readonly ROUND_HALF_DOWN : 5;
        static readonly ROUND_HALF_UP : 4;
        static readonly ONE : Internal.BigDecimal;
        static readonly ROUND_UP : 0;
        static readonly ROUND_FLOOR : 3;
        static readonly ROUND_HALF_EVEN : 6;
        static readonly TEN : Internal.BigDecimal;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Int2ReferenceFunction <V> implements it.unimi.dsi.fastutil.Function<number, V>, Internal.IntFunction<V> {
        getOrDefault(arg0: object, arg1: V): V;
        getOrDefault(arg0: number, arg1: V): V;
        andThenShort(arg0: Internal.Reference2ShortFunction<V>): Internal.Int2ShortFunction;
        composeByte(arg0: Internal.Byte2IntFunction): Internal.Byte2ReferenceFunction<V>;
        andThenInt(arg0: Internal.Reference2IntFunction<V>): Internal.Int2IntFunction;
        composeReference<T>(arg0: Internal.Reference2IntFunction<T>): (arg0: T) => V;
        put(arg0: number, arg1: V): V;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: V): V;
        remove(arg0: number): V;
        remove(arg0: object): V;
        defaultReturnValue(): V;
        defaultReturnValue(arg0: V): void;
        andThenDouble(arg0: Internal.Reference2DoubleFunction<V>): Internal.Int2DoubleFunction;
        andThenObject<T>(arg0: (arg0: V) => T): Internal.Int2ObjectFunction<T>;
        get(arg0: object): V;
        get(arg0: number): V;
        andThenLong(arg0: Internal.Reference2LongFunction<V>): Internal.Int2LongFunction;
        composeLong(arg0: Internal.Long2IntFunction): Internal.Long2ReferenceFunction<V>;
        andThenByte(arg0: Internal.Reference2ByteFunction<V>): Internal.Int2ByteFunction;
        andThenFloat(arg0: Internal.Reference2FloatFunction<V>): Internal.Int2FloatFunction;
        apply(arg0: number): V;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2IntFunction): Internal.Int2ReferenceFunction<V>;
        clear(): void;
        composeFloat(arg0: Internal.Float2IntFunction): Internal.Float2ReferenceFunction<V>;
        andThenChar(arg0: Internal.Reference2CharFunction<V>): Internal.Int2CharFunction;
        composeObject<T>(arg0: Internal.Object2IntFunction<T>): (arg0: T) => V;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => V;
        composeShort(arg0: Internal.Short2IntFunction): Internal.Short2ReferenceFunction<V>;
        andThenReference<T>(arg0: (arg0: V) => T): Internal.Int2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2IntFunction): Internal.Char2ReferenceFunction<V>;
        composeDouble(arg0: Internal.Double2IntFunction): Internal.Double2ReferenceFunction<V>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface MinecraftServerAccessorMixin {
        get tickables(): Internal.List<Internal.Runnable>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class BufferLayout {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static builder(): Internal.BufferLayout$Builder;
        toString(): string;
        notify(): void;
        get stride(): number;
        get layoutItems(): Internal.List<Internal.LayoutItem>;
        get attributeCount(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Scale <Self> {
        scale(arg0: number, arg1: number, arg2: number): Self;
        scale(arg0: number): Self;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface CustomJavaObjectWrapper$AsMap implements Internal.CustomJavaObjectWrapper {
        wrapAsJavaObject(cx: Internal.Context, scope: Internal.Scriptable, staticType: Internal.Class<object>): Internal.Scriptable;
        wrapAsJavaMap(): Map<object, object>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface RandomAccess {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ChronoField extends Internal.Enum<Internal.ChronoField> implements Internal.TemporalField {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        resolve(arg0: Map<Internal.TemporalField, number>, arg1: Internal.TemporalAccessor, arg2: Internal.ResolverStyle): Internal.TemporalAccessor;
        static valueOf(arg0: string): Internal.ChronoField;
        notifyAll(): void;
        static values(): Internal.ChronoField[];
        adjustInto<R>(arg0: R, arg1: number): R;
        range(): Internal.ValueRange;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        rangeRefinedBy(arg0: Internal.TemporalAccessor): Internal.ValueRange;
        getDisplayName(arg0: Internal.Locale): string;
        hashCode(): number;
        equals(arg0: object): boolean;
        isTimeBased(): boolean;
        name(): string;
        checkValidIntValue(arg0: number): number;
        checkValidValue(arg0: number): number;
        toString(): string;
        isDateBased(): boolean;
        ordinal(): number;
        getFrom(arg0: Internal.TemporalAccessor): number;
        isSupportedBy(arg0: Internal.TemporalAccessor): boolean;
        static readonly CLOCK_HOUR_OF_AMPM : Internal.ChronoField;
        static readonly DAY_OF_YEAR : Internal.ChronoField;
        static readonly MICRO_OF_DAY : Internal.ChronoField;
        static readonly ALIGNED_DAY_OF_WEEK_IN_MONTH : Internal.ChronoField;
        static readonly DAY_OF_MONTH : Internal.ChronoField;
        static readonly SECOND_OF_MINUTE : Internal.ChronoField;
        static readonly PROLEPTIC_MONTH : Internal.ChronoField;
        static readonly MILLI_OF_SECOND : Internal.ChronoField;
        static readonly NANO_OF_DAY : Internal.ChronoField;
        static readonly CLOCK_HOUR_OF_DAY : Internal.ChronoField;
        static readonly MINUTE_OF_DAY : Internal.ChronoField;
        static readonly ALIGNED_WEEK_OF_MONTH : Internal.ChronoField;
        static readonly YEAR : Internal.ChronoField;
        static readonly HOUR_OF_DAY : Internal.ChronoField;
        static readonly MILLI_OF_DAY : Internal.ChronoField;
        static readonly ALIGNED_DAY_OF_WEEK_IN_YEAR : Internal.ChronoField;
        static readonly YEAR_OF_ERA : Internal.ChronoField;
        static readonly AMPM_OF_DAY : Internal.ChronoField;
        static readonly NANO_OF_SECOND : Internal.ChronoField;
        static readonly SECOND_OF_DAY : Internal.ChronoField;
        static readonly MICRO_OF_SECOND : Internal.ChronoField;
        static readonly MONTH_OF_YEAR : Internal.ChronoField;
        static readonly EPOCH_DAY : Internal.ChronoField;
        static readonly ERA : Internal.ChronoField;
        static readonly OFFSET_SECONDS : Internal.ChronoField;
        static readonly HOUR_OF_AMPM : Internal.ChronoField;
        static readonly MINUTE_OF_HOUR : Internal.ChronoField;
        static readonly INSTANT_SECONDS : Internal.ChronoField;
        static readonly ALIGNED_WEEK_OF_YEAR : Internal.ChronoField;
        static readonly DAY_OF_WEEK : Internal.ChronoField;
        get rangeUnit(): Internal.TemporalUnit;
        get baseUnit(): Internal.TemporalUnit;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IForgeEntity implements Internal.ICapabilitySerializable<Internal.CompoundTag> {
        shouldRiderSit(): boolean;
        getPickedResult(arg0: Internal.HitResult): Internal.ItemStack;
        canUpdate(): boolean;
        canUpdate(arg0: boolean): void;
        onRemovedFromWorld(): void;
        captureDrops(): Internal.Collection<Internal.ItemEntity>;
        captureDrops(arg0: Internal.Collection<Internal.ItemEntity>): Internal.Collection<Internal.ItemEntity>;
        isMultipartEntity(): boolean;
        canBeRiddenInWater(arg0: Internal.Entity): boolean;
        deserializeNBT(arg0: Internal.CompoundTag): void;
        deserializeNBT(arg0: Internal.Tag): void;
        canRiderInteract(): boolean;
        serializeNBT(): Internal.Tag;
        serializeNBT(): Internal.CompoundTag;
        onAddedToWorld(): void;
        canTrample(arg0: Internal.BlockState, arg1: BlockPos, arg2: number): boolean;
        revive(): void;
        isAddedToWorld(): boolean;
        getClassification(arg0: boolean): Internal.MobCategory;
        get persistentData(): Internal.CompoundTag;
        get parts(): Internal.PartEntity<object>[];
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface TypeDescriptor$OfField <F> implements Internal.TypeDescriptor {
        componentType(): F;
        arrayType(): F;
        descriptorString(): string;
        isArray(): boolean;
        isPrimitive(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface MaterialGroup {
        material<D>(arg0: Internal.StructType<D>): com.jozufozu.flywheel.api.Material<D>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface LongToDoubleFunction {
        applyAsDouble(arg0: number): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Configuration {
        findModule(arg0: string): Internal.Optional<Internal.ResolvedModule>;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        resolve(arg0: Internal.ModuleFinder, arg1: Internal.ModuleFinder, arg2: Internal.Collection<string>): Internal.Configuration;
        static resolve(arg0: Internal.ModuleFinder, arg1: Internal.List<Internal.Configuration>, arg2: Internal.ModuleFinder, arg3: Internal.Collection<string>): Internal.Configuration;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        static resolveAndBind(arg0: Internal.ModuleFinder, arg1: Internal.List<Internal.Configuration>, arg2: Internal.ModuleFinder, arg3: Internal.Collection<string>): Internal.Configuration;
        resolveAndBind(arg0: Internal.ModuleFinder, arg1: Internal.ModuleFinder, arg2: Internal.Collection<string>): Internal.Configuration;
        notify(): void;
        modules(): Internal.Set<Internal.ResolvedModule>;
        parents(): Internal.List<Internal.Configuration>;
        static empty(): Internal.Configuration;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ChannelInboundHandlerAdapter extends Internal.ChannelHandlerAdapter implements Internal.ChannelInboundHandler {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        channelReadComplete(arg0: Internal.ChannelHandlerContext): void;
        notifyAll(): void;
        exceptionCaught(arg0: Internal.ChannelHandlerContext, arg1: Internal.Throwable): void;
        channelActive(arg0: Internal.ChannelHandlerContext): void;
        handlerAdded(arg0: Internal.ChannelHandlerContext): void;
        isSharable(): boolean;
        notify(): void;
        handlerRemoved(arg0: Internal.ChannelHandlerContext): void;
        channelWritabilityChanged(arg0: Internal.ChannelHandlerContext): void;
        channelRead(arg0: Internal.ChannelHandlerContext, arg1: object): void;
        channelInactive(arg0: Internal.ChannelHandlerContext): void;
        channelUnregistered(arg0: Internal.ChannelHandlerContext): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        userEventTriggered(arg0: Internal.ChannelHandlerContext, arg1: object): void;
        channelRegistered(arg0: Internal.ChannelHandlerContext): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Tag {
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface SerializableTickContainer <T> {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Keyable {
        keys<T>(arg0: Internal.DynamicOps<T>): Internal.Stream<T>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class FastMapKey <T> {
        getValue(arg0: number): T;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        numValues(): number;
        notify(): void;
        get property(): Internal.Property<T>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface BlockAccessor {
        get material(): net.minecraft.world.level.material.Material;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class DataPackEventJS extends Internal.ServerEventJS {
        cancel(): void;
        add(id: ResourceLocation, content: string): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isCancelled(): boolean;
        post(t: Internal.ScriptType, id: string, sub: string): boolean;
        post(t: Internal.ScriptType, id: string): boolean;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        addJson(id: ResourceLocation, json: Internal.JsonElement): void;
        notify(): void;
        canCancel(): boolean;
        get server(): Internal.ServerJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IItemRenderProperties {
        getBaseArmorModel(arg0: Internal.LivingEntity, arg1: Internal.ItemStack, arg2: EquipmentSlot, arg3: Internal.HumanoidModel<object>): net.minecraft.client.model.Model;
        getFont(arg0: Internal.ItemStack): Internal.Font;
        getArmorModel(arg0: Internal.LivingEntity, arg1: Internal.ItemStack, arg2: EquipmentSlot, arg3: Internal.HumanoidModel<object>): Internal.HumanoidModel<object>;
        renderHelmetOverlay(arg0: Internal.ItemStack, arg1: Internal.Player, arg2: number, arg3: number, arg4: number): void;
        get itemStackRenderer(): Internal.BlockEntityWithoutLevelRenderer;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface CustomProperty {
        get(): object;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class PlayMessages$SpawnEntity {
        static encode(arg0: Internal.PlayMessages$SpawnEntity, arg1: Internal.FriendlyByteBuf): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        static handle(arg0: Internal.PlayMessages$SpawnEntity, arg1: () => Internal.NetworkEvent$Context): void;
        static decode(arg0: Internal.FriendlyByteBuf): Internal.PlayMessages$SpawnEntity;
        notify(): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        get additionalData(): Internal.FriendlyByteBuf;
        get entity(): Internal.Entity;
        get typeId(): number;
        get headYaw(): number;
        get yaw(): number;
        get pitch(): number;
        get velY(): number;
        get velZ(): number;
        get uuid(): Internal.UUID;
        get velX(): number;
        get posZ(): number;
        get entityId(): number;
        get posX(): number;
        get posY(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface PrimitiveIterator$OfInt implements Internal.PrimitiveIterator<number, Internal.IntConsumer> {
        next(): object;
        next(): number;
        hasNext(): boolean;
        nextInt(): number;
        forEachRemaining(arg0: object): void;
        forEachRemaining(arg0: Internal.IntConsumer): void;
        forEachRemaining(arg0: (arg0: number) => void): void;
        remove(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Reference2ShortFunction <K> implements it.unimi.dsi.fastutil.Function<K, number>, Internal.ToIntFunction<K> {
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        andThenShort(arg0: Internal.Short2ShortFunction): Internal.Reference2ShortFunction<K>;
        removeShort(arg0: object): number;
        composeByte(arg0: Internal.Byte2ReferenceFunction<K>): Internal.Byte2ShortFunction;
        andThenInt(arg0: Internal.Short2IntFunction): Internal.Reference2IntFunction<K>;
        composeReference<T>(arg0: (arg0: T) => K): Internal.Reference2ShortFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: K) => T;
        put(arg0: K, arg1: number): number;
        put(arg0: K, arg1: number): number;
        put(arg0: object, arg1: object): object;
        remove(arg0: object): number;
        remove(arg0: object): object;
        defaultReturnValue(): number;
        defaultReturnValue(arg0: number): void;
        andThenDouble(arg0: Internal.Short2DoubleFunction): Internal.Reference2DoubleFunction<K>;
        andThenObject<T>(arg0: Internal.Short2ObjectFunction<T>): (arg0: K) => T;
        get(arg0: object): object;
        get(arg0: object): number;
        andThenLong(arg0: Internal.Short2LongFunction): Internal.Reference2LongFunction<K>;
        composeLong(arg0: Internal.Long2ReferenceFunction<K>): Internal.Long2ShortFunction;
        andThenByte(arg0: Internal.Short2ByteFunction): Internal.Reference2ByteFunction<K>;
        andThenFloat(arg0: Internal.Short2FloatFunction): Internal.Reference2FloatFunction<K>;
        applyAsInt(arg0: K): number;
        apply(arg0: K): V;
        getShort(arg0: object): number;
        containsKey(arg0: object): boolean;
        composeInt(arg0: Internal.Int2ReferenceFunction<K>): Internal.Int2ShortFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2ReferenceFunction<K>): Internal.Float2ShortFunction;
        andThenChar(arg0: Internal.Short2CharFunction): Internal.Reference2CharFunction<K>;
        composeObject<T>(arg0: (arg0: T) => K): Internal.Object2ShortFunction<T>;
        size(): number;
        composeShort(arg0: Internal.Short2ReferenceFunction<K>): Internal.Short2ShortFunction;
        andThenReference<T>(arg0: Internal.Short2ReferenceFunction<T>): (arg0: K) => T;
        composeChar(arg0: Internal.Char2ReferenceFunction<K>): Internal.Char2ShortFunction;
        composeDouble(arg0: Internal.Double2ReferenceFunction<K>): Internal.Double2ShortFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class LocalDate implements Internal.Temporal, Internal.TemporalAdjuster, Internal.ChronoLocalDate, Internal.Serializable {
        atStartOfDay(arg0: Internal.ZoneId): Internal.ZonedDateTime;
        atStartOfDay(): Internal.LocalDateTime;
        toEpochDay(): number;
        isEqual(arg0: Internal.ChronoLocalDate): boolean;
        compareTo(arg0: object): number;
        compareTo(arg0: Internal.ChronoLocalDate): number;
        lengthOfMonth(): number;
        static from(arg0: Internal.TemporalAccessor): Internal.LocalDate;
        static ofYearDay(arg0: number, arg1: number): Internal.LocalDate;
        plusMonths(arg0: number): Internal.LocalDate;
        plusYears(arg0: number): Internal.LocalDate;
        query<R>(arg0: Internal.TemporalQuery<R>): R;
        format(arg0: Internal.DateTimeFormatter): string;
        isSupported(arg0: Internal.TemporalUnit): boolean;
        isSupported(arg0: Internal.TemporalField): boolean;
        plus(arg0: Internal.TemporalAmount): Internal.Temporal;
        plus(arg0: Internal.TemporalAmount): Internal.ChronoLocalDate;
        plus(arg0: Internal.TemporalAmount): Internal.LocalDate;
        plus(arg0: number, arg1: Internal.TemporalUnit): Internal.Temporal;
        plus(arg0: number, arg1: Internal.TemporalUnit): Internal.ChronoLocalDate;
        plus(arg0: number, arg1: Internal.TemporalUnit): Internal.LocalDate;
        atTime(arg0: Internal.LocalTime): Internal.ChronoLocalDateTime<any>;
        atTime(arg0: Internal.LocalTime): Internal.LocalDateTime;
        atTime(arg0: number, arg1: number, arg2: number, arg3: number): Internal.LocalDateTime;
        atTime(arg0: Internal.OffsetTime): Internal.OffsetDateTime;
        atTime(arg0: number, arg1: number): Internal.LocalDateTime;
        atTime(arg0: number, arg1: number, arg2: number): Internal.LocalDateTime;
        toEpochSecond(arg0: Internal.LocalTime, arg1: Internal.ZoneOffset): number;
        withDayOfMonth(arg0: number): Internal.LocalDate;
        withMonth(arg0: number): Internal.LocalDate;
        isAfter(arg0: Internal.ChronoLocalDate): boolean;
        static ofInstant(arg0: Internal.Instant, arg1: Internal.ZoneId): Internal.LocalDate;
        minus(arg0: number, arg1: Internal.TemporalUnit): Internal.ChronoLocalDate;
        minus(arg0: number, arg1: Internal.TemporalUnit): Internal.Temporal;
        minus(arg0: number, arg1: Internal.TemporalUnit): Internal.LocalDate;
        minus(arg0: Internal.TemporalAmount): Internal.ChronoLocalDate;
        minus(arg0: Internal.TemporalAmount): Internal.Temporal;
        minus(arg0: Internal.TemporalAmount): Internal.LocalDate;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        datesUntil(arg0: Internal.LocalDate, arg1: Internal.Period): Internal.Stream<Internal.LocalDate>;
        datesUntil(arg0: Internal.LocalDate): Internal.Stream<Internal.LocalDate>;
        notifyAll(): void;
        adjustInto(arg0: Internal.Temporal): Internal.Temporal;
        range(arg0: Internal.TemporalField): Internal.ValueRange;
        withYear(arg0: number): Internal.LocalDate;
        notify(): void;
        lengthOfYear(): number;
        plusDays(arg0: number): Internal.LocalDate;
        hashCode(): number;
        static now(arg0: Internal.Clock): Internal.LocalDate;
        static now(): Internal.LocalDate;
        static now(arg0: Internal.ZoneId): Internal.LocalDate;
        static of(arg0: number, arg1: number, arg2: number): Internal.LocalDate;
        static of(arg0: number, arg1: Internal.Month, arg2: number): Internal.LocalDate;
        get(arg0: Internal.TemporalField): number;
        plusWeeks(arg0: number): Internal.LocalDate;
        static ofEpochDay(arg0: number): Internal.LocalDate;
        minusYears(arg0: number): Internal.LocalDate;
        minusWeeks(arg0: number): Internal.LocalDate;
        withDayOfYear(arg0: number): Internal.LocalDate;
        isLeapYear(): boolean;
        static parse(arg0: Internal.CharSequence): Internal.LocalDate;
        static parse(arg0: Internal.CharSequence, arg1: Internal.DateTimeFormatter): Internal.LocalDate;
        isBefore(arg0: Internal.ChronoLocalDate): boolean;
        minusDays(arg0: number): Internal.LocalDate;
        getLong(arg0: Internal.TemporalField): number;
        minusMonths(arg0: number): Internal.LocalDate;
        with(arg0: Internal.TemporalAdjuster): Internal.Temporal;
        with(arg0: Internal.TemporalAdjuster): Internal.ChronoLocalDate;
        with(arg0: Internal.TemporalAdjuster): Internal.LocalDate;
        with(arg0: Internal.TemporalField, arg1: number): Internal.Temporal;
        with(arg0: Internal.TemporalField, arg1: number): Internal.ChronoLocalDate;
        with(arg0: Internal.TemporalField, arg1: number): Internal.LocalDate;
        equals(arg0: object): boolean;
        until(arg0: Internal.Temporal, arg1: Internal.TemporalUnit): number;
        until(arg0: Internal.ChronoLocalDate): Internal.ChronoPeriod;
        until(arg0: Internal.ChronoLocalDate): Internal.Period;
        toString(): string;
        static readonly MIN : Internal.LocalDate;
        static readonly MAX : Internal.LocalDate;
        static readonly EPOCH : Internal.LocalDate;
        get dayOfWeek(): Internal.DayOfWeek;
        get era(): Internal.IsoEra;
        get era(): Internal.Era;
        get month(): Internal.Month;
        get year(): number;
        get dayOfYear(): number;
        get chronology(): Internal.Chronology;
        get chronology(): Internal.IsoChronology;
        get monthValue(): number;
        get dayOfMonth(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface StringRepresentable {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface BlockCountingSection {
        anyMatch(arg0: Internal.IndexedBlockStatePredicate): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Painter {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        getObject(key: string): Internal.PainterObject;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        clear(): void;
        paint(root: Internal.CompoundTag): void;
        setVariable(key: string, variable: Internal.Unit): void;
        toString(): string;
        make(type: string): Internal.PainterObject;
        notify(): void;
        readonly unitStorage : Internal.UnitStorage;
        static readonly LEFT : -1;
        static readonly RANDOM : Internal.Random;
        static readonly DRAW_INGAME : 1;
        static readonly INSTANCE : Internal.Painter;
        static readonly BOTTOM : 1;
        readonly screenHeightUnit : Internal.MutableUnit;
        static readonly DRAW_GUI : 2;
        static readonly CENTER : 0;
        readonly screenWidthUnit : Internal.MutableUnit;
        static readonly DRAW_ALWAYS : 0;
        static readonly TOP : -1;
        readonly mouseXUnit : Internal.MutableUnit;
        readonly mouseYUnit : Internal.MutableUnit;
        readonly deltaUnit : Internal.MutableUnit;
        static readonly RIGHT : 1;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Table <R, C, V> {
        cellSet(): Internal.Set<Internal.Table$Cell<R, C, V>>;
        values(): Internal.Collection<V>;
        column(arg0: C): Map<R, V>;
        isEmpty(): boolean;
        clear(): void;
        containsValue(arg0: object): boolean;
        put(arg0: R, arg1: C, arg2: V): V;
        remove(arg0: object, arg1: object): V;
        columnMap(): Map<C, Map<R, V>>;
        contains(arg0: object, arg1: object): boolean;
        containsColumn(arg0: object): boolean;
        size(): number;
        columnKeySet(): Internal.Set<C>;
        hashCode(): number;
        putAll(arg0: Internal.Table<R, C, V>): void;
        equals(arg0: object): boolean;
        get(arg0: object, arg1: object): V;
        rowKeySet(): Internal.Set<R>;
        rowMap(): Map<R, Map<C, V>>;
        row(arg0: R): Map<C, V>;
        containsRow(arg0: object): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Enemy {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class CodeSigner implements Internal.Serializable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        get signerCertPath(): Internal.CertPath;
        get timestamp(): Internal.Timestamp;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ObjectIterable <K> implements Internal.Iterable<K> {
        iterator(): Internal.Iterator<any>;
        iterator(): Internal.ObjectIterator<K>;
        spliterator(): Internal.ObjectSpliterator<K>;
        spliterator(): Internal.Spliterator<any>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class InputStream implements Internal.Closeable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        read(arg0: number[], arg1: number, arg2: number): number;
        read(arg0: number[]): number;
        read(): number;
        markSupported(): boolean;
        notifyAll(): void;
        available(): number;
        static nullInputStream(): Internal.InputStream;
        skip(arg0: number): number;
        transferTo(arg0: Internal.OutputStream): number;
        notify(): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        readAllBytes(): number[];
        reset(): void;
        readNBytes(arg0: number): number[];
        readNBytes(arg0: number[], arg1: number, arg2: number): number;
        toString(): string;
        close(): void;
        skipNBytes(arg0: number): void;
        mark(arg0: number): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ServerPlayerJS extends Internal.PlayerJS<Internal.ServerPlayer> {
        isOnScoreboardTeam(teamID: string): boolean;
        isLiving(): boolean;
        isSprinting(): boolean;
        paint(renderer: Internal.CompoundTag): void;
        ban(banner: string, reason: string, expiresInMillis: number): void;
        runCommandSilent(command: string): number;
        getDistanceSq(pos: BlockPos): number;
        getDistanceSq(x: number, y: number, z: number): number;
        isBoss(): boolean;
        isGlowing(): boolean;
        isAdvancementDone(id: ResourceLocation): boolean;
        setMotion(x: number, y: number, z: number): void;
        setRotation(yaw: number, pitch: number): void;
        isMiningBlock(): boolean;
        isOnSameTeam(e: Internal.EntityJS): boolean;
        isAnimal(): boolean;
        addMotion(x: number, y: number, z: number): void;
        isFake(): boolean;
        damageHeldItem(hand: Hand, amount: number): void;
        damageHeldItem(): void;
        attack(hp: number): void;
        attack(source: string, hp: number): void;
        isUndead(): boolean;
        getDistance(x: number, y: number, z: number): number;
        getDistance(pos: BlockPos): number;
        setPositionAndRotation(x: number, y: number, z: number, yaw: number, pitch: number): void;
        kick(): void;
        kick(reason: Internal.Component): void;
        isMonster(): boolean;
        addItemCooldown(item: Internal.Item, ticks: number): void;
        isOnGround(): boolean;
        toString(): string;
        isSilent(): boolean;
        isWaterCreature(): boolean;
        setPosition(x: number, y: number, z: number): void;
        closeInventory(): void;
        extinguish(): void;
        isOp(): boolean;
        isChild(): boolean;
        setEquipment(slot: EquipmentSlot, item: Internal.ItemStackJS): void;
        giveInHand(item: Internal.ItemStackJS): void;
        isCreativeMode(): boolean;
        setHeldItem(hand: Hand, item: Internal.ItemStackJS): void;
        notifyAll(): void;
        unlockAdvancement(id: ResourceLocation): void;
        addXPLevels(l: number): void;
        hashCode(): number;
        isFrame(): boolean;
        startRiding(e: Internal.EntityJS, force: boolean): boolean;
        runCommand(command: string): number;
        addXP(xp: number): void;
        isElytraFlying(): boolean;
        isInWater(): boolean;
        dismountRidingEntity(): void;
        isSleeping(): boolean;
        swingArm(hand: Hand): void;
        isInvulnerable(): boolean;
        revokeAdvancement(id: ResourceLocation): void;
        isPeacefulCreature(): boolean;
        sendData(channel: string, data: Internal.CompoundTag): void;
        addFood(f: number, m: number): void;
        getServer(): Internal.ServerJS;
        give(item: Internal.ItemStackJS): void;
        isSpectator(): boolean;
        addExhaustion(exhaustion: number): void;
        isInvisible(): boolean;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isUnderWater(): boolean;
        getHeldItem(hand: Hand): Internal.ItemStackJS;
        getEquipment(slot: EquipmentSlot): Internal.ItemStackJS;
        notify(): void;
        removePassengers(): void;
        isOnLadder(): boolean;
        playSound(id: Internal.SoundEvent): void;
        playSound(id: Internal.SoundEvent, volume: number, pitch: number): void;
        boostElytraFlight(): void;
        isSwimming(): boolean;
        mergeFullNBT(tag: Internal.CompoundTag): Internal.EntityJS;
        kill(): void;
        equals(arg0: object): boolean;
        isPassenger(e: Internal.EntityJS): boolean;
        sendInventoryUpdate(): void;
        tell(message: Internal.Component): void;
        isHoldingInAnyHand(ingredient: object): boolean;
        damageEquipment(slot: EquipmentSlot): void;
        damageEquipment(slot: EquipmentSlot, amount: number): void;
        isAlive(): boolean;
        isPlayer(): boolean;
        isCrouching(): boolean;
        heal(hp: number): void;
        isAmbientCreature(): boolean;
        rayTrace(): Internal.RayTraceResultJS;
        rayTrace(distance: number): Internal.RayTraceResultJS;
        canEntityBeSeen(entity: Internal.LivingEntityJS): boolean;
        spawn(): void;
        readonly server : Internal.ServerJS;
        readonly persistentData : Internal.CompoundTag;
        readonly minecraftPlayer : E;
        readonly minecraftEntity : Internal.Entity;
        readonly minecraftLivingEntity : Internal.LivingEntity;
        get xpLevel(): number;
        get lastAttackedEntity(): Internal.LivingEntityJS;
        set y(y: number);
        set x(x: number);
        get item(): Internal.ItemStackJS;
        get offHandItem(): Internal.ItemStackJS;
        set glowing(glowing: boolean);
        set z(z: number);
        set xpLevel(l: number);
        get hasCustomName(): boolean;
        set selectedSlot(index: number);
        get horizontalFacing(): Internal.Direction;
        set legsArmorItem(item: Internal.ItemStackJS);
        get profile(): Internal.GameProfile;
        set gameMode(mode: string);
        set absorptionAmount(amount: number);
        get type(): string;
        set customNameAlwaysVisible(b: boolean);
        set creativeMode(mode: boolean);
        get fallDistance(): number;
        set onFire(seconds: number);
        get inventory(): Internal.InventoryJS;
        get reachDistance(): number;
        get customName(): Internal.Text;
        get stepHeight(): number;
        get ridingEntity(): Internal.EntityJS;
        get lastAttackedEntityTime(): number;
        set pitch(pitch: number);
        get facing(): Internal.Direction;
        set xp(xp: number);
        get maxAirSupply(): number;
        get name(): Internal.Text;
        get feetArmorItem(): Internal.ItemStackJS;
        get hasClientMod(): boolean;
        set stepHeight(stepHeight: number);
        set position(block: Internal.BlockContainerJS);
        set invulnerable(invulnerable: boolean);
        set movementSpeed(speed: number);
        get legsArmorItem(): Internal.ItemStackJS;
        set yaw(yaw: number);
        get fullNBT(): Internal.CompoundTag;
        get noClip(): boolean;
        get yaw(): number;
        set noGravity(noGravity: boolean);
        get revengeTimer(): number;
        get id(): Internal.UUID;
        get openInventory(): Internal.AbstractContainerMenu;
        get chestArmorItem(): Internal.ItemStackJS;
        set chestArmorItem(item: Internal.ItemStackJS);
        get customNameAlwaysVisible(): boolean;
        get mainHandItem(): Internal.ItemStackJS;
        set health(hp: number);
        get block(): Internal.BlockContainerJS;
        get potionEffects(): Internal.EntityPotionEffectsJS;
        set headArmorItem(item: Internal.ItemStackJS);
        get mouseItem(): Internal.ItemStackJS;
        get motionZ(): number;
        get motionX(): number;
        get motionY(): number;
        get revengeTarget(): Internal.LivingEntityJS;
        set invisible(invisible: boolean);
        get idleTime(): number;
        get movementSpeed(): number;
        get health(): number;
        set feetArmorItem(item: Internal.ItemStackJS);
        set maxHealth(hp: number);
        set spawnLocation(c: Internal.BlockContainerJS);
        get displayName(): Internal.Text;
        get xp(): number;
        set offHandItem(item: Internal.ItemStackJS);
        get foodLevel(): number;
        get maxHealth(): number;
        get eyeHeight(): number;
        set airSupply(air: number);
        get data(): Internal.AttachedData;
        get lastDamageSource(): Internal.DamageSourceJS;
        set statusMessage(message: Internal.Component);
        get level(): Internal.LevelJS;
        get pitch(): number;
        get passengers(): Internal.EntityArrayList;
        get recursivePassengers(): Internal.EntityArrayList;
        get nbt(): Internal.CompoundTag;
        set fallDistance(fallDistance: number);
        set customName(name: Internal.Component);
        set mainHandItem(item: Internal.ItemStackJS);
        get teamId(): string;
        set noClip(noClip: boolean);
        set revengeTarget(target: Internal.LivingEntityJS);
        get airSupply(): number;
        set fullNBT(nbt: Internal.CompoundTag);
        get attackingEntity(): Internal.LivingEntityJS;
        get headArmorItem(): Internal.ItemStackJS;
        set mouseItem(item: Internal.ItemStackJS);
        get stats(): Internal.PlayerStatsJS;
        get absorptionAmount(): number;
        get spawnLocation(): Internal.BlockContainerJS;
        get ticksExisted(): number;
        get stages(): Internal.Stages;
        set silent(isSilent: boolean);
        set motionZ(z: number);
        set motionY(y: number);
        set motionX(x: number);
        get selectedSlot(): number;
        get x(): number;
        get y(): number;
        get z(): number;
        set foodLevel(foodLevel: number);
        get noGravity(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class InvertedLootItemCondition implements Internal.LootItemCondition {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        or(arg0: (arg0: T) => boolean): (arg0: T) => boolean;
        test(arg0: Internal.LootContext): boolean;
        test(arg0: object): boolean;
        and(arg0: (arg0: T) => boolean): (arg0: T) => boolean;
        negate(): (arg0: T) => boolean;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class AttributeModifier {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface VertexList {
        getLight(arg0: number): number;
        getG(arg0: number): number;
        isEmpty(): boolean;
        getR(arg0: number): number;
        getU(arg0: number): number;
        getV(arg0: number): number;
        getX(arg0: number): number;
        getY(arg0: number): number;
        getZ(arg0: number): number;
        getNZ(arg0: number): number;
        getNY(arg0: number): number;
        getNX(arg0: number): number;
        getA(arg0: number): number;
        getB(arg0: number): number;
        get vertexCount(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class EntityJS implements Internal.MessageSender, Internal.WrappedJS {
        isOnScoreboardTeam(teamID: string): boolean;
        isLiving(): boolean;
        isSprinting(): boolean;
        runCommandSilent(command: string): number;
        getDistanceSq(pos: BlockPos): number;
        getDistanceSq(x: number, y: number, z: number): number;
        isBoss(): boolean;
        isGlowing(): boolean;
        setMotion(x: number, y: number, z: number): void;
        setRotation(yaw: number, pitch: number): void;
        isOnSameTeam(e: Internal.EntityJS): boolean;
        isAnimal(): boolean;
        addMotion(x: number, y: number, z: number): void;
        isInvisible(): boolean;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isUnderWater(): boolean;
        notify(): void;
        removePassengers(): void;
        attack(hp: number): void;
        attack(source: string, hp: number): void;
        playSound(id: Internal.SoundEvent): void;
        playSound(id: Internal.SoundEvent, volume: number, pitch: number): void;
        getDistance(x: number, y: number, z: number): number;
        getDistance(pos: BlockPos): number;
        isSwimming(): boolean;
        mergeFullNBT(tag: Internal.CompoundTag): Internal.EntityJS;
        kill(): void;
        setPositionAndRotation(x: number, y: number, z: number, yaw: number, pitch: number): void;
        isMonster(): boolean;
        equals(arg0: object): boolean;
        isOnGround(): boolean;
        toString(): string;
        isSilent(): boolean;
        isPassenger(e: Internal.EntityJS): boolean;
        tell(message: Internal.Component): void;
        isWaterCreature(): boolean;
        setPosition(x: number, y: number, z: number): void;
        extinguish(): void;
        isAlive(): boolean;
        isPlayer(): boolean;
        isCrouching(): boolean;
        notifyAll(): void;
        hashCode(): number;
        isFrame(): boolean;
        startRiding(e: Internal.EntityJS, force: boolean): boolean;
        runCommand(command: string): number;
        isInWater(): boolean;
        dismountRidingEntity(): void;
        isAmbientCreature(): boolean;
        rayTrace(distance: number): Internal.RayTraceResultJS;
        isInvulnerable(): boolean;
        spawn(): void;
        isPeacefulCreature(): boolean;
        readonly persistentData : Internal.CompoundTag;
        readonly minecraftEntity : Internal.Entity;
        set y(y: number);
        set x(x: number);
        get item(): Internal.ItemStackJS;
        get tags(): Internal.Set<string>;
        set glowing(glowing: boolean);
        set z(z: number);
        get hasCustomName(): boolean;
        set invisible(invisible: boolean);
        get horizontalFacing(): Internal.Direction;
        get server(): Internal.ServerJS;
        get profile(): Internal.GameProfile;
        get displayName(): Internal.Text;
        get type(): string;
        set customNameAlwaysVisible(b: boolean);
        get eyeHeight(): number;
        get fallDistance(): number;
        set onFire(seconds: number);
        set statusMessage(message: Internal.Component);
        get customName(): Internal.Text;
        get stepHeight(): number;
        get ridingEntity(): Internal.EntityJS;
        get level(): Internal.LevelJS;
        get pitch(): number;
        get passengers(): Internal.EntityArrayList;
        set pitch(pitch: number);
        get facing(): Internal.Direction;
        get recursivePassengers(): Internal.EntityArrayList;
        get nbt(): Internal.CompoundTag;
        set fallDistance(fallDistance: number);
        get name(): Internal.Text;
        set customName(name: Internal.Component);
        set stepHeight(stepHeight: number);
        get teamId(): string;
        set noClip(noClip: boolean);
        set position(block: Internal.BlockContainerJS);
        set invulnerable(invulnerable: boolean);
        set fullNBT(nbt: Internal.CompoundTag);
        set yaw(yaw: number);
        get fullNBT(): Internal.CompoundTag;
        get noClip(): boolean;
        get yaw(): number;
        set noGravity(noGravity: boolean);
        get id(): Internal.UUID;
        get ticksExisted(): number;
        set silent(isSilent: boolean);
        get customNameAlwaysVisible(): boolean;
        set motionZ(z: number);
        set motionY(y: number);
        get block(): Internal.BlockContainerJS;
        set motionX(x: number);
        get x(): number;
        get y(): number;
        get z(): number;
        get motionZ(): number;
        get motionX(): number;
        get noGravity(): boolean;
        get motionY(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class SoundEvent extends Internal.ForgeRegistryEntry<Internal.SoundEvent> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        setRegistryName(arg0: string, arg1: string): V;
        notify(): void;
        readonly delegate : () => V;
        get registryName(): ResourceLocation;
        set registryName(arg0: ResourceLocation);
        set registryName(arg0: ResourceLocation);
        set registryName(arg0: string);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ScatteringByteChannel implements Internal.ReadableByteChannel {
        isOpen(): boolean;
        read(arg0: Internal.ByteBuffer[], arg1: number, arg2: number): number;
        read(arg0: Internal.ByteBuffer[]): number;
        read(arg0: Internal.ByteBuffer): number;
        close(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface DirectoryStream <T> implements Internal.Closeable, Internal.Iterable<T> {
        iterator(): Internal.Iterator<T>;
        close(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class DoubleSummaryStatistics implements Internal.DoubleConsumer {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        andThen(arg0: Internal.DoubleConsumer): Internal.DoubleConsumer;
        notify(): void;
        accept(arg0: number): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        combine(arg0: Internal.DoubleSummaryStatistics): void;
        get max(): number;
        get average(): number;
        get min(): number;
        get sum(): number;
        get count(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface MovementTrackerCache {
        deduplicate<S>(arg0: S): S;
        remove(arg0: Internal.SectionedEntityMovementTracker<object, object>): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface DiscreteVSAccess {
        get zSize(): number;
        get ySize(): number;
        get xSize(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ImmutableMap$Builder <K, V> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        buildOrThrow(): Internal.ImmutableMap<K, V>;
        build(): Internal.ImmutableMap<K, V>;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        putAll(arg0: Internal.Iterable<Internal.Map$Entry<K, V>>): Internal.ImmutableMap$Builder<K, V>;
        putAll(arg0: Map<K, V>): Internal.ImmutableMap$Builder<K, V>;
        toString(): string;
        orderEntriesByValue(arg0: Internal.Comparator<V>): Internal.ImmutableMap$Builder<K, V>;
        notify(): void;
        put(arg0: K, arg1: V): Internal.ImmutableMap$Builder<K, V>;
        put(arg0: Internal.Map$Entry<K, V>): Internal.ImmutableMap$Builder<K, V>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface BaseStream <T, S> implements Internal.AutoCloseable {
        unordered(): S;
        onClose(arg0: Internal.Runnable): S;
        iterator(): Internal.Iterator<T>;
        parallel(): S;
        spliterator(): Internal.Spliterator<T>;
        sequential(): S;
        isParallel(): boolean;
        close(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface TemporalAdjuster {
        adjustInto(arg0: Internal.Temporal): Internal.Temporal;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Component implements com.mojang.brigadier.Message, Internal.FormattedText {
        get string(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class EffectRenderingInventoryScreen <T> extends Internal.AbstractContainerScreen<T> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        notify(): void;
        balm_getNarratables(): Internal.List<any>;
        invokeFindSlot(arg0: number, arg1: number): Internal.Slot;
        static renderSlotHighlight(arg0: Internal.PoseStack, arg1: number, arg2: number, arg3: number, arg4: number): void;
        handler$zjm000$renderSlot(arg0: Internal.PoseStack, arg1: Internal.Slot, arg2: Internal.CallbackInfo): void;
        hashCode(): number;
        getSlotColor(arg0: number): number;
        callIsHovering(arg0: Internal.Slot, arg1: number, arg2: number): boolean;
        localvar$bjk000$modifyBl(bl: boolean): boolean;
        callRenderSlot(arg0: Internal.PoseStack, arg1: Internal.Slot): void;
        invokeSlotClicked(arg0: Internal.Slot, arg1: number, arg2: number, arg3: Internal.ClickType): void;
        balm_getChildren(): Internal.List<any>;
        balm_getRenderables(): Internal.List<any>;
        equals(arg0: object): boolean;
        toString(): string;
        localvar$bjk000$modifyK(k: number): number;
        tooltipStack : Internal.ItemStack;
        get hoveredSlot(): Internal.Slot;
        get ySize(): number;
        get isQuickCrafting(): boolean;
        get leftPos(): number;
        get imageHeight(): number;
        set isQuickCrafting(arg0: boolean);
        get quickCraftingButton(): number;
        set skipNextRelease(arg0: boolean);
        get renderables(): Internal.List<any>;
        get imageWidth(): number;
        get minecraft(): Internal.Minecraft;
        get guiTop(): number;
        get topPos(): number;
        get guiLeft(): number;
        get slotUnderMouse(): Internal.Slot;
        get xSize(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class AbstractIntSet extends Internal.AbstractIntCollection implements Internal.Cloneable, Internal.IntSet {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        intIterator(): Internal.IntIterator;
        intSpliterator(): Internal.IntSpliterator;
        notify(): void;
        remove(arg0: number): boolean;
        remove(arg0: object): boolean;
        intStream(): Internal.IntStream;
        removeAll(arg0: Internal.IntCollection): boolean;
        iterator(): Internal.IntIterator;
        iterator(): Internal.Iterator<any>;
        hashCode(): number;
        toIntArray(arg0: number[]): number[];
        toIntArray(): number[];
        toArray(arg0: number[]): number[];
        toArray(): object[];
        toArray<T>(arg0: T[]): T[];
        rem(arg0: number): boolean;
        add(arg0: number): boolean;
        add(arg0: number): boolean;
        add(arg0: object): boolean;
        spliterator(): Internal.IntSpliterator;
        spliterator(): Internal.Spliterator<any>;
        forEach(arg0: it.unimi.dsi.fastutil.ints.IntConsumer): void;
        forEach(arg0: Internal.IntConsumer): void;
        containsAll(arg0: Internal.IntCollection): boolean;
        isEmpty(): boolean;
        clear(): void;
        removeIf(arg0: it.unimi.dsi.fastutil.ints.IntPredicate): boolean;
        removeIf(arg0: Internal.IntPredicate): boolean;
        contains(arg0: number): boolean;
        contains(arg0: object): boolean;
        size(): number;
        addAll(arg0: Internal.IntCollection): boolean;
        equals(arg0: object): boolean;
        toString(): string;
        intParallelStream(): Internal.IntStream;
        retainAll(arg0: Internal.IntCollection): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ToolAction {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static get(arg0: string): Internal.ToolAction;
        name(): string;
        toString(): string;
        notify(): void;
        get actions(): Internal.Collection<Internal.ToolAction>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Watchable {
        register(arg0: Internal.WatchService, arg1: Internal.WatchEvent$Kind<object>[], arg2: Internal.WatchEvent$Modifier[]): Internal.WatchKey;
        register(arg0: Internal.WatchService, arg1: Internal.WatchEvent$Kind<object>[]): Internal.WatchKey;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class RegistryAccess {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class CompositeByteBuf extends Internal.AbstractReferenceCountedByteBuf implements Internal.Iterable<Internal.ByteBuf> {
        asReadOnly(): Internal.ByteBuf;
        markReaderIndex(): Internal.ByteBuf;
        markReaderIndex(): Internal.CompositeByteBuf;
        getByte(arg0: number): number;
        release(): boolean;
        release(arg0: number): boolean;
        readDoubleLE(): number;
        writeZero(arg0: number): Internal.CompositeByteBuf;
        writeZero(arg0: number): Internal.ByteBuf;
        addComponent(arg0: Internal.ByteBuf): Internal.CompositeByteBuf;
        addComponent(arg0: number, arg1: Internal.ByteBuf): Internal.CompositeByteBuf;
        addComponent(arg0: boolean, arg1: Internal.ByteBuf): Internal.CompositeByteBuf;
        addComponent(arg0: boolean, arg1: number, arg2: Internal.ByteBuf): Internal.CompositeByteBuf;
        resetReaderIndex(): Internal.ByteBuf;
        resetReaderIndex(): Internal.CompositeByteBuf;
        writeFloat(arg0: number): Internal.CompositeByteBuf;
        writeFloat(arg0: number): Internal.ByteBuf;
        setLongLE(arg0: number, arg1: number): Internal.ByteBuf;
        addComponents(arg0: Internal.Iterable<Internal.ByteBuf>): Internal.CompositeByteBuf;
        addComponents(arg0: boolean, arg1: Internal.Iterable<Internal.ByteBuf>): Internal.CompositeByteBuf;
        addComponents(arg0: number, arg1: Internal.Iterable<Internal.ByteBuf>): Internal.CompositeByteBuf;
        addComponents(arg0: number, arg1: Internal.ByteBuf[]): Internal.CompositeByteBuf;
        addComponents(arg0: Internal.ByteBuf[]): Internal.CompositeByteBuf;
        addComponents(arg0: boolean, arg1: Internal.ByteBuf[]): Internal.CompositeByteBuf;
        iterator(): Internal.Iterator<Internal.ByteBuf>;
        readRetainedSlice(arg0: number): Internal.ByteBuf;
        slice(): Internal.ByteBuf;
        slice(arg0: number, arg1: number): Internal.ByteBuf;
        setDoubleLE(arg0: number, arg1: number): Internal.ByteBuf;
        getMediumLE(arg0: number): number;
        readUnsignedIntLE(): number;
        writeFloatLE(arg0: number): Internal.ByteBuf;
        readInt(): number;
        toByteIndex(arg0: number): number;
        order(): Internal.ByteOrder;
        order(arg0: Internal.ByteOrder): Internal.ByteBuf;
        writeMedium(arg0: number): Internal.ByteBuf;
        writeMedium(arg0: number): Internal.CompositeByteBuf;
        resetWriterIndex(): Internal.CompositeByteBuf;
        resetWriterIndex(): Internal.ByteBuf;
        spliterator(): Internal.Spliterator<T>;
        writableBytes(): number;
        getUnsignedShort(arg0: number): number;
        maxCapacity(): number;
        internalComponentAtOffset(arg0: number): Internal.ByteBuf;
        bytesBefore(arg0: number): number;
        bytesBefore(arg0: number, arg1: number): number;
        bytesBefore(arg0: number, arg1: number, arg2: number): number;
        nioBufferCount(): number;
        discardReadComponents(): Internal.CompositeByteBuf;
        setInt(arg0: number, arg1: number): Internal.ByteBuf;
        setInt(arg0: number, arg1: number): Internal.CompositeByteBuf;
        getInt(arg0: number): number;
        markWriterIndex(): Internal.CompositeByteBuf;
        markWriterIndex(): Internal.ByteBuf;
        isReadable(arg0: number): boolean;
        isReadable(): boolean;
        writeBoolean(arg0: boolean): Internal.ByteBuf;
        writeBoolean(arg0: boolean): Internal.CompositeByteBuf;
        numComponents(): number;
        setIntLE(arg0: number, arg1: number): Internal.ByteBuf;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        writeLongLE(arg0: number): Internal.ByteBuf;
        setShortLE(arg0: number, arg1: number): Internal.ByteBuf;
        retain(arg0: number): Internal.CompositeByteBuf;
        retain(arg0: number): Internal.ByteBuf;
        retain(arg0: number): Internal.ReferenceCounted;
        retain(): Internal.ByteBuf;
        retain(): Internal.CompositeByteBuf;
        retain(): Internal.ReferenceCounted;
        isWritable(arg0: number): boolean;
        isWritable(): boolean;
        notify(): void;
        readChar(): string;
        hasMemoryAddress(): boolean;
        capacity(arg0: number): Internal.CompositeByteBuf;
        capacity(arg0: number): Internal.ByteBuf;
        capacity(): number;
        readCharSequence(arg0: number, arg1: Internal.Charset): Internal.CharSequence;
        isReadOnly(): boolean;
        readUnsignedShortLE(): number;
        readDouble(): number;
        readFloat(): number;
        internalComponent(arg0: number): Internal.ByteBuf;
        getLongLE(arg0: number): number;
        getBoolean(arg0: number): boolean;
        copy(arg0: number, arg1: number): Internal.ByteBuf;
        copy(): Internal.ByteBuf;
        readShortLE(): number;
        readUnsignedMedium(): number;
        ensureWritable(arg0: number): Internal.CompositeByteBuf;
        ensureWritable(arg0: number): Internal.ByteBuf;
        ensureWritable(arg0: number, arg1: boolean): number;
        writeInt(arg0: number): Internal.ByteBuf;
        writeInt(arg0: number): Internal.CompositeByteBuf;
        readFloatLE(): number;
        getDoubleLE(arg0: number): number;
        hasArray(): boolean;
        memoryAddress(): number;
        maxFastWritableBytes(): number;
        consolidate(): Internal.CompositeByteBuf;
        consolidate(arg0: number, arg1: number): Internal.CompositeByteBuf;
        readableBytes(): number;
        readSlice(arg0: number): Internal.ByteBuf;
        getIntLE(arg0: number): number;
        forEachByteDesc(arg0: number, arg1: number, arg2: Internal.ByteProcessor): number;
        forEachByteDesc(arg0: Internal.ByteProcessor): number;
        nioBuffers(): Internal.ByteBuffer[];
        nioBuffers(arg0: number, arg1: number): Internal.ByteBuffer[];
        skipBytes(arg0: number): Internal.ByteBuf;
        skipBytes(arg0: number): Internal.CompositeByteBuf;
        getLong(arg0: number): number;
        component(arg0: number): Internal.ByteBuf;
        readLong(): number;
        readShort(): number;
        equals(arg0: object): boolean;
        getUnsignedMedium(arg0: number): number;
        setZero(arg0: number, arg1: number): Internal.ByteBuf;
        setZero(arg0: number, arg1: number): Internal.CompositeByteBuf;
        readBytes(arg0: Internal.ByteBuf, arg1: number, arg2: number): Internal.CompositeByteBuf;
        readBytes(arg0: Internal.ByteBuf, arg1: number, arg2: number): Internal.ByteBuf;
        readBytes(arg0: Internal.ByteBuf): Internal.CompositeByteBuf;
        readBytes(arg0: Internal.ByteBuf): Internal.ByteBuf;
        readBytes(arg0: Internal.ByteBuf, arg1: number): Internal.CompositeByteBuf;
        readBytes(arg0: Internal.ByteBuf, arg1: number): Internal.ByteBuf;
        readBytes(arg0: Internal.ByteBuffer): Internal.ByteBuf;
        readBytes(arg0: Internal.ByteBuffer): Internal.CompositeByteBuf;
        readBytes(arg0: Internal.OutputStream, arg1: number): Internal.ByteBuf;
        readBytes(arg0: Internal.OutputStream, arg1: number): Internal.CompositeByteBuf;
        readBytes(arg0: number[], arg1: number, arg2: number): Internal.ByteBuf;
        readBytes(arg0: number[], arg1: number, arg2: number): Internal.CompositeByteBuf;
        readBytes(arg0: number[]): Internal.CompositeByteBuf;
        readBytes(arg0: number[]): Internal.ByteBuf;
        readBytes(arg0: number): Internal.ByteBuf;
        readBytes(arg0: Internal.GatheringByteChannel, arg1: number): number;
        readBytes(arg0: Internal.FileChannel, arg1: number, arg2: number): number;
        readBoolean(): boolean;
        toString(): string;
        toString(arg0: Internal.Charset): string;
        toString(arg0: number, arg1: number, arg2: Internal.Charset): string;
        retainedSlice(arg0: number, arg1: number): Internal.ByteBuf;
        retainedSlice(): Internal.ByteBuf;
        readMediumLE(): number;
        setMedium(arg0: number, arg1: number): Internal.CompositeByteBuf;
        setMedium(arg0: number, arg1: number): Internal.ByteBuf;
        isDirect(): boolean;
        setBoolean(arg0: number, arg1: boolean): Internal.CompositeByteBuf;
        setBoolean(arg0: number, arg1: boolean): Internal.ByteBuf;
        getFloatLE(arg0: number): number;
        readerIndex(arg0: number): Internal.ByteBuf;
        readerIndex(arg0: number): Internal.CompositeByteBuf;
        readerIndex(): number;
        getCharSequence(arg0: number, arg1: number, arg2: Internal.Charset): Internal.CharSequence;
        compareTo(arg0: Internal.ByteBuf): number;
        compareTo(arg0: object): number;
        setShort(arg0: number, arg1: number): Internal.ByteBuf;
        setShort(arg0: number, arg1: number): Internal.CompositeByteBuf;
        getBytes(arg0: number, arg1: Internal.OutputStream, arg2: number): Internal.CompositeByteBuf;
        getBytes(arg0: number, arg1: Internal.OutputStream, arg2: number): Internal.ByteBuf;
        getBytes(arg0: number, arg1: Internal.ByteBuf, arg2: number): Internal.CompositeByteBuf;
        getBytes(arg0: number, arg1: Internal.ByteBuf, arg2: number): Internal.ByteBuf;
        getBytes(arg0: number, arg1: number[]): Internal.CompositeByteBuf;
        getBytes(arg0: number, arg1: number[]): Internal.ByteBuf;
        getBytes(arg0: number, arg1: Internal.ByteBuf): Internal.CompositeByteBuf;
        getBytes(arg0: number, arg1: Internal.ByteBuf): Internal.ByteBuf;
        getBytes(arg0: number, arg1: number[], arg2: number, arg3: number): Internal.CompositeByteBuf;
        getBytes(arg0: number, arg1: number[], arg2: number, arg3: number): Internal.ByteBuf;
        getBytes(arg0: number, arg1: Internal.ByteBuffer): Internal.CompositeByteBuf;
        getBytes(arg0: number, arg1: Internal.ByteBuffer): Internal.ByteBuf;
        getBytes(arg0: number, arg1: Internal.ByteBuf, arg2: number, arg3: number): Internal.CompositeByteBuf;
        getBytes(arg0: number, arg1: Internal.ByteBuf, arg2: number, arg3: number): Internal.ByteBuf;
        getBytes(arg0: number, arg1: Internal.GatheringByteChannel, arg2: number): number;
        getBytes(arg0: number, arg1: Internal.FileChannel, arg2: number, arg3: number): number;
        unwrap(): Internal.ByteBuf;
        setDouble(arg0: number, arg1: number): Internal.ByteBuf;
        setDouble(arg0: number, arg1: number): Internal.CompositeByteBuf;
        setChar(arg0: number, arg1: number): Internal.CompositeByteBuf;
        setChar(arg0: number, arg1: number): Internal.ByteBuf;
        refCnt(): number;
        getUnsignedIntLE(arg0: number): number;
        setFloatLE(arg0: number, arg1: number): Internal.ByteBuf;
        getUnsignedInt(arg0: number): number;
        indexOf(arg0: number, arg1: number, arg2: number): number;
        writeByte(arg0: number): Internal.ByteBuf;
        writeByte(arg0: number): Internal.CompositeByteBuf;
        nioBuffer(arg0: number, arg1: number): Internal.ByteBuffer;
        nioBuffer(): Internal.ByteBuffer;
        touch(): Internal.ReferenceCounted;
        touch(): Internal.CompositeByteBuf;
        touch(): Internal.ByteBuf;
        touch(arg0: object): Internal.CompositeByteBuf;
        touch(arg0: object): Internal.ByteBuf;
        touch(arg0: object): Internal.ReferenceCounted;
        discardSomeReadBytes(): Internal.CompositeByteBuf;
        discardSomeReadBytes(): Internal.ByteBuf;
        duplicate(): Internal.ByteBuf;
        writerIndex(arg0: number): Internal.ByteBuf;
        writerIndex(arg0: number): Internal.CompositeByteBuf;
        writerIndex(): number;
        readUnsignedInt(): number;
        getUnsignedShortLE(arg0: number): number;
        writeCharSequence(arg0: Internal.CharSequence, arg1: Internal.Charset): number;
        retainedDuplicate(): Internal.ByteBuf;
        getChar(arg0: number): string;
        removeComponent(arg0: number): Internal.CompositeByteBuf;
        setLong(arg0: number, arg1: number): Internal.ByteBuf;
        setLong(arg0: number, arg1: number): Internal.CompositeByteBuf;
        readMedium(): number;
        componentAtOffset(arg0: number): Internal.ByteBuf;
        writeBytes(arg0: Internal.ByteBuf, arg1: number, arg2: number): Internal.ByteBuf;
        writeBytes(arg0: Internal.ByteBuf, arg1: number, arg2: number): Internal.CompositeByteBuf;
        writeBytes(arg0: Internal.ByteBuf): Internal.ByteBuf;
        writeBytes(arg0: Internal.ByteBuf): Internal.CompositeByteBuf;
        writeBytes(arg0: Internal.ByteBuffer): Internal.ByteBuf;
        writeBytes(arg0: Internal.ByteBuffer): Internal.CompositeByteBuf;
        writeBytes(arg0: Internal.ByteBuf, arg1: number): Internal.ByteBuf;
        writeBytes(arg0: Internal.ByteBuf, arg1: number): Internal.CompositeByteBuf;
        writeBytes(arg0: number[]): Internal.CompositeByteBuf;
        writeBytes(arg0: number[]): Internal.ByteBuf;
        writeBytes(arg0: number[], arg1: number, arg2: number): Internal.CompositeByteBuf;
        writeBytes(arg0: number[], arg1: number, arg2: number): Internal.ByteBuf;
        writeBytes(arg0: Internal.ScatteringByteChannel, arg1: number): number;
        writeBytes(arg0: Internal.InputStream, arg1: number): number;
        writeBytes(arg0: Internal.FileChannel, arg1: number, arg2: number): number;
        forEachByte(arg0: number, arg1: number, arg2: Internal.ByteProcessor): number;
        forEachByte(arg0: Internal.ByteProcessor): number;
        setIndex(arg0: number, arg1: number): Internal.ByteBuf;
        setIndex(arg0: number, arg1: number): Internal.CompositeByteBuf;
        writeShort(arg0: number): Internal.CompositeByteBuf;
        writeShort(arg0: number): Internal.ByteBuf;
        getShortLE(arg0: number): number;
        alloc(): Internal.ByteBufAllocator;
        removeComponents(arg0: number, arg1: number): Internal.CompositeByteBuf;
        getMedium(arg0: number): number;
        readUnsignedShort(): number;
        addFlattenedComponents(arg0: boolean, arg1: Internal.ByteBuf): Internal.CompositeByteBuf;
        setByte(arg0: number, arg1: number): Internal.CompositeByteBuf;
        setByte(arg0: number, arg1: number): Internal.ByteBuf;
        maxWritableBytes(): number;
        writeShortLE(arg0: number): Internal.ByteBuf;
        notifyAll(): void;
        toComponentIndex(arg0: number): number;
        decompose(arg0: number, arg1: number): Internal.List<Internal.ByteBuf>;
        getDouble(arg0: number): number;
        getFloat(arg0: number): number;
        writeLong(arg0: number): Internal.CompositeByteBuf;
        writeLong(arg0: number): Internal.ByteBuf;
        writeIntLE(arg0: number): Internal.ByteBuf;
        array(): number[];
        setCharSequence(arg0: number, arg1: Internal.CharSequence, arg2: Internal.Charset): number;
        hashCode(): number;
        internalNioBuffer(arg0: number, arg1: number): Internal.ByteBuffer;
        arrayOffset(): number;
        readIntLE(): number;
        setMediumLE(arg0: number, arg1: number): Internal.ByteBuf;
        readUnsignedByte(): number;
        readLongLE(): number;
        readUnsignedMediumLE(): number;
        writeDouble(arg0: number): Internal.ByteBuf;
        writeDouble(arg0: number): Internal.CompositeByteBuf;
        maxNumComponents(): number;
        setBytes(arg0: number, arg1: number[], arg2: number, arg3: number): Internal.ByteBuf;
        setBytes(arg0: number, arg1: number[], arg2: number, arg3: number): Internal.CompositeByteBuf;
        setBytes(arg0: number, arg1: Internal.ByteBuffer): Internal.ByteBuf;
        setBytes(arg0: number, arg1: Internal.ByteBuffer): Internal.CompositeByteBuf;
        setBytes(arg0: number, arg1: Internal.ScatteringByteChannel, arg2: number): number;
        setBytes(arg0: number, arg1: Internal.ByteBuf, arg2: number, arg3: number): Internal.ByteBuf;
        setBytes(arg0: number, arg1: Internal.ByteBuf, arg2: number, arg3: number): Internal.CompositeByteBuf;
        setBytes(arg0: number, arg1: Internal.ByteBuf): Internal.ByteBuf;
        setBytes(arg0: number, arg1: Internal.ByteBuf): Internal.CompositeByteBuf;
        setBytes(arg0: number, arg1: number[]): Internal.ByteBuf;
        setBytes(arg0: number, arg1: number[]): Internal.CompositeByteBuf;
        setBytes(arg0: number, arg1: Internal.ByteBuf, arg2: number): Internal.ByteBuf;
        setBytes(arg0: number, arg1: Internal.ByteBuf, arg2: number): Internal.CompositeByteBuf;
        setBytes(arg0: number, arg1: Internal.InputStream, arg2: number): number;
        setBytes(arg0: number, arg1: Internal.FileChannel, arg2: number, arg3: number): number;
        setFloat(arg0: number, arg1: number): Internal.ByteBuf;
        setFloat(arg0: number, arg1: number): Internal.CompositeByteBuf;
        getShort(arg0: number): number;
        forEach(arg0: (arg0: T) => void): void;
        writeMediumLE(arg0: number): Internal.ByteBuf;
        clear(): Internal.CompositeByteBuf;
        clear(): Internal.ByteBuf;
        getUnsignedByte(arg0: number): number;
        discardReadBytes(): Internal.ByteBuf;
        discardReadBytes(): Internal.CompositeByteBuf;
        writeChar(arg0: number): Internal.ByteBuf;
        writeChar(arg0: number): Internal.CompositeByteBuf;
        writeDoubleLE(arg0: number): Internal.ByteBuf;
        isContiguous(): boolean;
        getUnsignedMediumLE(arg0: number): number;
        readByte(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class LevelChunkSection implements Internal.BlockCountingSection {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        anyMatch(indexedBlockStatePredicate: Internal.IndexedBlockStatePredicate): boolean;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface DirectoryStream$Filter <T> {
        accept(arg0: T): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class FireworkRocketEntity extends Internal.Projectile implements Internal.ItemSupplier, Internal.FireworkRocketEntityKJS {
        backpackedMoved(): boolean;
        onEndimationEnd(arg0: Internal.PlayableEndimation, arg1: Internal.PlayableEndimation): void;
        canBeRiddenInWater(arg0: Internal.Entity): boolean;
        handler$zzo000$tickHead(arg0: Internal.CallbackInfo): void;
        isEndimationPlaying(arg0: Internal.PlayableEndimation): boolean;
        isActive(): boolean;
        handler$zgm001$tick(arg0: Internal.CallbackInfo): void;
        handler$zjn000$onUpdateFluidOnEyes(arg0: Internal.CallbackInfo): void;
        changeDimension(arg0: Internal.ServerLevel, arg1: Internal.ITeleporter): Internal.Entity;
        serializeNBT(): Internal.Tag;
        serializeNBT(): Internal.CompoundTag;
        invalidateCaps(): void;
        revive(): void;
        canUpdate(): boolean;
        canUpdate(arg0: boolean): void;
        handler$bgc000$tryShortcutFluidPushing(tag: net.minecraft.tags.Tag<any>, speed: number, cir: Internal.CallbackInfoReturnable<any>, box: Internal.AABB, x1: number, x2: number, y1: number, y2: number, z1: number, z2: number, zero: number): void;
        resetEndimation(): void;
        areCapsCompatible(arg0: Internal.CapabilityDispatcher): boolean;
        getEyeHeightAccess(arg0: Internal.Pose, arg1: Internal.EntityDimensions): number;
        reviveCaps(): void;
        lithiumOnBlockCacheDeleted(): void;
        canRiderInteract(): boolean;
        getEntries(arg0: boolean): Internal.Set<any>;
        onAddedToWorld(): void;
        handler$zcp000$read(arg0: Internal.CompoundTag, arg1: Internal.CallbackInfo): void;
        canTrample(arg0: Internal.BlockState, arg1: BlockPos, arg2: number): boolean;
        getClassification(arg0: boolean): Internal.MobCategory;
        lithiumSetClimbingMobCachingSectionUpdateBehavior(listening: boolean): void;
        onEndimationStart(arg0: Internal.PlayableEndimation, arg1: Internal.PlayableEndimation): void;
        isNoEndimationPlaying(): boolean;
        shouldRiderSit(): boolean;
        getPickedResult(arg0: Internal.HitResult): Internal.ItemStack;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        lithiumOnBlockCacheSet(newState: Internal.BlockState): void;
        handler$zjn000$onUpdateFluidOnEyeAssign(arg0: Internal.CallbackInfo): void;
        notify(): void;
        handler$zzo000$moveStep(arg0: Internal.MoverType, arg1: Vec3, arg2: Internal.CallbackInfo): void;
        endimateTick(): void;
        isDirty(): boolean;
        hashCode(): number;
        isAddedToWorld(): boolean;
        addListener(listener: Internal.NearbyEntityListener): void;
        onRemovedFromWorld(): void;
        isMultipartEntity(): boolean;
        deserializeNBT(arg0: Internal.CompoundTag): void;
        deserializeNBT(arg0: Internal.Tag): void;
        clean(): void;
        asKJS(): object;
        getValue(arg0: Internal.TrackedData<any>): object;
        setValue(arg0: Internal.TrackedData<any>, arg1: object): void;
        equals(arg0: object): boolean;
        toString(): string;
        set lifetimeKJS(arg0: number);
        get cachedFeetBlockState(): Internal.BlockState;
        get pos(): Internal.Position;
        get persistentDataKJS(): Internal.CompoundTag;
        get endimatedState(): Internal.Endimatable$EndimatedState;
        get effectHandler(): Internal.EndimationEffectHandler;
        set animationTick(arg0: number);
        get listener(): Internal.NearbyEntityListenerMulti;
        get isInsidePortal(): boolean;
        get persistentData(): Internal.CompoundTag;
        get remainingFireTicks(): number;
        get dataMap(): Map<any, any>;
        get entityChangeListener(): Internal.EntityInLevelCallback;
        set dataMap(arg0: Map<any, any>);
        get parts(): Internal.PartEntity<object>[];
        get playingEndimation(): Internal.PlayableEndimation;
        get dirtyEntries(): Internal.Set<any>;
        set playingEndimation(arg0: Internal.PlayableEndimation);
        get animationTick(): number;
        set remainingFireTicks(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface LayoutItem {
        size(): number;
        attributeCount(): number;
        vertexAttribPointer(arg0: number, arg1: number, arg2: number): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Position {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface SymbolScriptable {
        get(arg0: Internal.Symbol, arg1: Internal.Scriptable): object;
        has(arg0: Internal.Symbol, arg1: Internal.Scriptable): boolean;
        delete(arg0: Internal.Symbol): void;
        put(arg0: Internal.Symbol, arg1: Internal.Scriptable, arg2: object): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class AbstractInterruptibleChannel implements Internal.Channel, Internal.InterruptibleChannel {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isOpen(): boolean;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        close(): void;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ZoneOffsetTransition implements Internal.Comparable<Internal.ZoneOffsetTransition>, Internal.Serializable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        compareTo(arg0: Internal.ZoneOffsetTransition): number;
        compareTo(arg0: object): number;
        notify(): void;
        isGap(): boolean;
        toEpochSecond(): number;
        hashCode(): number;
        static of(arg0: Internal.LocalDateTime, arg1: Internal.ZoneOffset, arg2: Internal.ZoneOffset): Internal.ZoneOffsetTransition;
        equals(arg0: object): boolean;
        isOverlap(): boolean;
        toString(): string;
        isValidOffset(arg0: Internal.ZoneOffset): boolean;
        get dateTimeAfter(): Internal.LocalDateTime;
        get dateTimeBefore(): Internal.LocalDateTime;
        get offsetBefore(): Internal.ZoneOffset;
        get offsetAfter(): Internal.ZoneOffset;
        get instant(): Internal.Instant;
        get duration(): Internal.Duration;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface NumberProvider implements Internal.LootContextUser {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ServerLevelJS extends Internal.LevelJS {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        getPlayer(entity: Internal.Entity): Internal.PlayerJS<any>;
        getEntitiesWithin(aabb: Internal.AABB): Internal.EntityArrayList;
        getPlayerData(arg0: Internal.Player): Internal.PlayerDataJS<any, any>;
        getPlayerData(player: Internal.Player): Internal.ServerPlayerDataJS;
        spawnFireworks(x: number, y: number, z: number, f: Internal.FireworksJS): void;
        notifyAll(): void;
        notify(): void;
        hashCode(): number;
        isDaytime(): boolean;
        getMinecraftLevel(): Internal.ServerLevel;
        getMinecraftLevel(): Internal.Level;
        getLivingEntity(entity: Internal.Entity): Internal.LivingEntityJS;
        getBlock(x: number, y: number, z: number): Internal.BlockContainerJS;
        getBlock(pos: BlockPos): Internal.BlockContainerJS;
        getBlock(blockEntity: Internal.BlockEntity): Internal.BlockContainerJS;
        isOverworld(): boolean;
        createExplosion(x: number, y: number, z: number): Internal.ExplosionJS;
        getEntity(e: Internal.Entity): Internal.EntityJS;
        createEntity(id: ResourceLocation): Internal.EntityJS;
        spawnLightning(x: number, y: number, z: number, effectOnly: boolean): void;
        spawnLightning(x: number, y: number, z: number, effectOnly: boolean, player: Internal.EntityJS): void;
        equals(arg0: object): boolean;
        isThundering(): boolean;
        getEntities(filter: string): Internal.EntityArrayList;
        toString(): string;
        isRaining(): boolean;
        readonly persistentData : Internal.CompoundTag;
        readonly minecraftLevel : Internal.Level;
        get time(): number;
        get side(): Internal.ScriptType;
        get gameRules(): Internal.GameRulesJS;
        set rainStrength(strength: number);
        get dimension(): string;
        get players(): Internal.EntityArrayList;
        get data(): Internal.AttachedData;
        set time(time: number);
        get server(): Internal.ServerJS;
        get seed(): number;
        get localTime(): number;
        get entities(): Internal.EntityArrayList;
        set localTime(time: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class DataJsonGenerator extends Internal.JsonGenerator {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        json(id: ResourceLocation, json: Internal.JsonElement): void;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Reference2LongFunction <K> implements it.unimi.dsi.fastutil.Function<K, number>, Internal.ToLongFunction<K> {
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        andThenShort(arg0: Internal.Long2ShortFunction): Internal.Reference2ShortFunction<K>;
        composeByte(arg0: Internal.Byte2ReferenceFunction<K>): Internal.Byte2LongFunction;
        andThenInt(arg0: Internal.Long2IntFunction): Internal.Reference2IntFunction<K>;
        composeReference<T>(arg0: (arg0: T) => K): Internal.Reference2LongFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: K) => T;
        put(arg0: K, arg1: number): number;
        put(arg0: K, arg1: number): number;
        put(arg0: object, arg1: object): object;
        remove(arg0: object): number;
        remove(arg0: object): object;
        defaultReturnValue(): number;
        defaultReturnValue(arg0: number): void;
        andThenDouble(arg0: Internal.Long2DoubleFunction): Internal.Reference2DoubleFunction<K>;
        andThenObject<T>(arg0: Internal.Long2ObjectFunction<T>): (arg0: K) => T;
        removeLong(arg0: object): number;
        get(arg0: object): object;
        get(arg0: object): number;
        andThenLong(arg0: Internal.Long2LongFunction): Internal.Reference2LongFunction<K>;
        composeLong(arg0: Internal.Long2ReferenceFunction<K>): Internal.Long2LongFunction;
        andThenByte(arg0: Internal.Long2ByteFunction): Internal.Reference2ByteFunction<K>;
        andThenFloat(arg0: Internal.Long2FloatFunction): Internal.Reference2FloatFunction<K>;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        composeInt(arg0: Internal.Int2ReferenceFunction<K>): Internal.Int2LongFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2ReferenceFunction<K>): Internal.Float2LongFunction;
        andThenChar(arg0: Internal.Long2CharFunction): Internal.Reference2CharFunction<K>;
        getLong(arg0: object): number;
        applyAsLong(arg0: K): number;
        composeObject<T>(arg0: (arg0: T) => K): Internal.Object2LongFunction<T>;
        size(): number;
        composeShort(arg0: Internal.Short2ReferenceFunction<K>): Internal.Short2LongFunction;
        andThenReference<T>(arg0: Internal.Long2ReferenceFunction<T>): (arg0: K) => T;
        composeChar(arg0: Internal.Char2ReferenceFunction<K>): Internal.Char2LongFunction;
        composeDouble(arg0: Internal.Double2ReferenceFunction<K>): Internal.Double2LongFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface NarrationSupplier {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class IngredientAction extends Internal.IngredientActionFilter {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        checkFilter(index: number, stack: Internal.ItemStack): boolean;
        static getRemaining(container: Internal.CraftingContainer, index: number, ingredientActions: Internal.List<Internal.IngredientAction>): Internal.ItemStack;
        notifyAll(): void;
        static parseList(json: Internal.JsonElement): Internal.List<Internal.IngredientAction>;
        static filterOf(o: object): Internal.IngredientActionFilter;
        notify(): void;
        copyFrom(filter: Internal.IngredientActionFilter): void;
        static readList(buf: Internal.FriendlyByteBuf): Internal.List<Internal.IngredientAction>;
        toJson(json: Internal.JsonObject): void;
        toJson(): Internal.JsonObject;
        transform(arg0: Internal.ItemStack, arg1: number, arg2: Internal.CraftingContainer): Internal.ItemStack;
        static writeList(buf: Internal.FriendlyByteBuf, list: Internal.List<Internal.IngredientAction>): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        static readonly FACTORY_MAP : Map<string, (arg0: Internal.JsonObject) => Internal.IngredientAction>;
        filterIndex : number;
        filterIngredient : Internal.IngredientJS;
        get type(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class NearbyEntityListenerMulti implements Internal.NearbyEntityListener {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        onSectionLeftRange<T>(entityTrackingSection: object, collection: Internal.ClassInstanceMultiMap<T>): void;
        onSectionEnteredRange<T>(entityTrackingSection: object, collection: Internal.ClassInstanceMultiMap<T>): void;
        onEntityLeftRange(entity: Internal.Entity): void;
        removeListener(listener: Internal.NearbyEntityListener): void;
        notify(): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        forEachChunkInRangeChange(entityCache: Internal.EntitySectionStorage<Internal.EntityAccess>, prevCenterPos: Internal.SectionPos, newCenterPos: Internal.SectionPos): void;
        onEntityEnteredRange(entity: Internal.Entity): void;
        addListener(listener: Internal.NearbyEntityListener): void;
        static readonly EMPTY_RANGE : Internal.Range6Int;
        get entityClass(): Internal.Class<Internal.Entity>;
        get chunkRange(): Internal.Range6Int;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IForgeBlockState {
        rotate(arg0: Internal.LevelAccessor, arg1: BlockPos, arg2: Internal.Rotation): Internal.BlockState;
        getStateAtViewpoint(arg0: Internal.BlockGetter, arg1: BlockPos, arg2: Vec3): Internal.BlockState;
        onBlockExploded(arg0: Internal.Level, arg1: BlockPos, arg2: Internal.Explosion): void;
        getBedDirection(arg0: Internal.LevelReader, arg1: BlockPos): Internal.Direction;
        getExpDrop(arg0: Internal.LevelReader, arg1: BlockPos, arg2: number, arg3: number): number;
        isConduitFrame(arg0: Internal.LevelReader, arg1: BlockPos, arg2: BlockPos): boolean;
        getLightEmission(arg0: Internal.BlockGetter, arg1: BlockPos): number;
        onDestroyedByPlayer(arg0: Internal.Level, arg1: BlockPos, arg2: Internal.Player, arg3: boolean, arg4: Internal.FluidState): boolean;
        isBed(arg0: Internal.BlockGetter, arg1: BlockPos, arg2: Internal.LivingEntity): boolean;
        shouldCheckWeakPower(arg0: Internal.LevelReader, arg1: BlockPos, arg2: Internal.Direction): boolean;
        canHarvestBlock(arg0: Internal.BlockGetter, arg1: BlockPos, arg2: Internal.Player): boolean;
        collisionExtendsVertically(arg0: Internal.BlockGetter, arg1: BlockPos, arg2: Internal.Entity): boolean;
        addLandingEffects(arg0: Internal.ServerLevel, arg1: BlockPos, arg2: Internal.BlockState, arg3: Internal.LivingEntity, arg4: number): boolean;
        isLadder(arg0: Internal.LevelReader, arg1: BlockPos, arg2: Internal.LivingEntity): boolean;
        shouldDisplayFluidOverlay(arg0: Internal.BlockAndTintGetter, arg1: BlockPos, arg2: Internal.FluidState): boolean;
        getSoundType(arg0: Internal.LevelReader, arg1: BlockPos, arg2: Internal.Entity): Internal.SoundType;
        addRunningEffects(arg0: Internal.Level, arg1: BlockPos, arg2: Internal.Entity): boolean;
        onNeighborChange(arg0: Internal.LevelReader, arg1: BlockPos, arg2: BlockPos): void;
        canStickTo(arg0: Internal.BlockState): boolean;
        getWeakChanges(arg0: Internal.LevelReader, arg1: BlockPos): boolean;
        canEntityDestroy(arg0: Internal.BlockGetter, arg1: BlockPos, arg2: Internal.Entity): boolean;
        getCloneItemStack(arg0: Internal.HitResult, arg1: Internal.BlockGetter, arg2: BlockPos, arg3: Internal.Player): Internal.ItemStack;
        isBurning(arg0: Internal.BlockGetter, arg1: BlockPos): boolean;
        getFriction(arg0: Internal.LevelReader, arg1: BlockPos, arg2: Internal.Entity): number;
        isFlammable(arg0: Internal.BlockGetter, arg1: BlockPos, arg2: Internal.Direction): boolean;
        isValidSpawn(arg0: Internal.LevelReader, arg1: BlockPos, arg2: Internal.SpawnPlacements$Type, arg3: Internal.EntityType<object>): boolean;
        isPortalFrame(arg0: Internal.BlockGetter, arg1: BlockPos): boolean;
        getExplosionResistance(arg0: Internal.BlockGetter, arg1: BlockPos, arg2: Internal.Explosion): number;
        getBlockPathType(arg0: Internal.BlockGetter, arg1: BlockPos): Internal.BlockPathTypes;
        getBlockPathType(arg0: Internal.BlockGetter, arg1: BlockPos, arg2: Internal.Mob): Internal.BlockPathTypes;
        isScaffolding(arg0: Internal.LivingEntity): boolean;
        canSustainPlant(arg0: Internal.BlockGetter, arg1: BlockPos, arg2: Internal.Direction, arg3: Internal.IPlantable): boolean;
        onCaughtFire(arg0: Internal.Level, arg1: BlockPos, arg2: Internal.Direction, arg3: Internal.LivingEntity): void;
        getEnchantPowerBonus(arg0: Internal.LevelReader, arg1: BlockPos): number;
        setBedOccupied(arg0: Internal.Level, arg1: BlockPos, arg2: Internal.LivingEntity, arg3: boolean): void;
        isFireSource(arg0: Internal.LevelReader, arg1: BlockPos, arg2: Internal.Direction): boolean;
        canDropFromExplosion(arg0: Internal.BlockGetter, arg1: BlockPos, arg2: Internal.Explosion): boolean;
        getRespawnPosition(arg0: Internal.EntityType<object>, arg1: Internal.LevelReader, arg2: BlockPos, arg3: number, arg4: Internal.LivingEntity): Internal.Optional<Vec3>;
        canRedstoneConnectTo(arg0: Internal.BlockGetter, arg1: BlockPos, arg2: Internal.Direction): boolean;
        isStickyBlock(): boolean;
        isFertile(arg0: Internal.BlockGetter, arg1: BlockPos): boolean;
        isSlimeBlock(): boolean;
        getFireSpreadSpeed(arg0: Internal.BlockGetter, arg1: BlockPos, arg2: Internal.Direction): number;
        getFlammability(arg0: Internal.BlockGetter, arg1: BlockPos, arg2: Internal.Direction): number;
        getToolModifiedState(arg0: Internal.Level, arg1: BlockPos, arg2: Internal.Player, arg3: Internal.ItemStack, arg4: Internal.ToolAction): Internal.BlockState;
        getBeaconColorMultiplier(arg0: Internal.LevelReader, arg1: BlockPos, arg2: BlockPos): number[];
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ForgeModelBakery extends Internal.ModelBakery {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        static defaultTextureGetter(): (arg0: Internal.Material) => Internal.TextureAtlasSprite;
        static instance(): Internal.ForgeModelBakery;
        betterloadingscreen$getItemTask(): Internal.SteppedTask;
        notifyAll(): void;
        notify(): void;
        isLoading(): boolean;
        static addSpecialModel(arg0: ResourceLocation): void;
        betterloadingscreen$setItemTask(task: Internal.SteppedTask): void;
        getModelOrLogError(arg0: ResourceLocation, arg1: string): Internal.UnbakedModel;
        static getInventoryVariant(arg0: string): Internal.ModelResourceLocation;
        hashCode(): number;
        equals(arg0: object): boolean;
        betterloadingscreen$setBlockTask(task: Internal.SteppedTask): void;
        onPostBakeEvent(arg0: Map<ResourceLocation, Internal.BakedModel>): void;
        toString(): string;
        static defaultModelGetter(): (arg0: ResourceLocation) => Internal.UnbakedModel;
        getModelOrMissing(arg0: ResourceLocation): Internal.UnbakedModel;
        betterloadingscreen$getBlockTask(): Internal.SteppedTask;
        get specialModels(): Internal.Set<ResourceLocation>;
        get spriteMap(): Internal.AtlasSet;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Period implements Internal.ChronoPeriod, Internal.Serializable {
        minus(arg0: Internal.TemporalAmount): Internal.Period;
        minus(arg0: Internal.TemporalAmount): Internal.ChronoPeriod;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        negated(): Internal.Period;
        negated(): Internal.ChronoPeriod;
        normalized(): Internal.ChronoPeriod;
        normalized(): Internal.Period;
        notifyAll(): void;
        static ofYears(arg0: number): Internal.Period;
        notify(): void;
        plusDays(arg0: number): Internal.Period;
        multipliedBy(arg0: number): Internal.ChronoPeriod;
        multipliedBy(arg0: number): Internal.Period;
        hashCode(): number;
        static of(arg0: number, arg1: number, arg2: number): Internal.Period;
        get(arg0: Internal.TemporalUnit): number;
        isZero(): boolean;
        static from(arg0: Internal.TemporalAmount): Internal.Period;
        withDays(arg0: number): Internal.Period;
        static between(arg0: Internal.LocalDate, arg1: Internal.LocalDate): Internal.Period;
        isNegative(): boolean;
        withMonths(arg0: number): Internal.Period;
        minusYears(arg0: number): Internal.Period;
        plusMonths(arg0: number): Internal.Period;
        plusYears(arg0: number): Internal.Period;
        static ofDays(arg0: number): Internal.Period;
        static parse(arg0: Internal.CharSequence): Internal.Period;
        toTotalMonths(): number;
        plus(arg0: Internal.TemporalAmount): Internal.ChronoPeriod;
        plus(arg0: Internal.TemporalAmount): Internal.Period;
        minusDays(arg0: number): Internal.Period;
        minusMonths(arg0: number): Internal.Period;
        static ofWeeks(arg0: number): Internal.Period;
        subtractFrom(arg0: Internal.Temporal): Internal.Temporal;
        equals(arg0: object): boolean;
        static ofMonths(arg0: number): Internal.Period;
        addTo(arg0: Internal.Temporal): Internal.Temporal;
        toString(): string;
        withYears(arg0: number): Internal.Period;
        static readonly ZERO : Internal.Period;
        get months(): number;
        get years(): number;
        get chronology(): Internal.IsoChronology;
        get chronology(): Internal.Chronology;
        get days(): number;
        get units(): Internal.List<Internal.TemporalUnit>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class AbstractMap <K, V> implements Map<K, V> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        getOrDefault(arg0: object, arg1: V): V;
        computeIfAbsent(arg0: K, arg1: (arg0: K) => V): V;
        notifyAll(): void;
        values(): Internal.Collection<V>;
        replace(arg0: K, arg1: V): V;
        replace(arg0: K, arg1: V, arg2: V): boolean;
        replaceAll(arg0: (arg0: K, arg1: V) => V): void;
        notify(): void;
        containsValue(arg0: object): boolean;
        put(arg0: K, arg1: V): V;
        remove(arg0: object): V;
        remove(arg0: object, arg1: object): boolean;
        compute(arg0: K, arg1: (arg0: K, arg1: V) => V): V;
        hashCode(): number;
        merge(arg0: K, arg1: V, arg2: (arg0: V, arg1: V) => V): V;
        putAll(arg0: Map<K, V>): void;
        get(arg0: object): V;
        keySet(): Internal.Set<K>;
        entrySet(): Internal.Set<Internal.Map$Entry<K, V>>;
        forEach(arg0: (arg0: K, arg1: V) => void): void;
        containsKey(arg0: object): boolean;
        isEmpty(): boolean;
        clear(): void;
        computeIfPresent(arg0: K, arg1: (arg0: K, arg1: V) => V): V;
        size(): number;
        equals(arg0: object): boolean;
        toString(): string;
        putIfAbsent(arg0: K, arg1: V): V;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Event {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isCanceled(): boolean;
        notifyAll(): void;
        hasResult(): boolean;
        notify(): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        isCancelable(): boolean;
        set canceled(arg0: boolean);
        set result(arg0: Internal.Event$Result);
        get listenerList(): Internal.ListenerList;
        get result(): Internal.Event$Result;
        get phase(): Internal.EventPriority;
        set phase(arg0: Internal.EventPriority);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ServerEntityManagerAccessor <T> {
        get cache(): Internal.EntitySectionStorage<T>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ChannelInboundInvoker {
        fireChannelRead(arg0: object): Internal.ChannelInboundInvoker;
        fireChannelInactive(): Internal.ChannelInboundInvoker;
        fireChannelReadComplete(): Internal.ChannelInboundInvoker;
        fireChannelWritabilityChanged(): Internal.ChannelInboundInvoker;
        fireExceptionCaught(arg0: Internal.Throwable): Internal.ChannelInboundInvoker;
        fireUserEventTriggered(arg0: object): Internal.ChannelInboundInvoker;
        fireChannelActive(): Internal.ChannelInboundInvoker;
        fireChannelUnregistered(): Internal.ChannelInboundInvoker;
        fireChannelRegistered(): Internal.ChannelInboundInvoker;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ITeleporter {
        getPortalInfo(arg0: Internal.Entity, arg1: Internal.ServerLevel, arg2: (arg0: Internal.ServerLevel) => Internal.PortalInfo): Internal.PortalInfo;
        isVanilla(): boolean;
        playTeleportSound(arg0: Internal.ServerPlayer, arg1: Internal.ServerLevel, arg2: Internal.ServerLevel): boolean;
        placeEntity(arg0: Internal.Entity, arg1: Internal.ServerLevel, arg2: Internal.ServerLevel, arg3: number, arg4: (arg0: boolean) => Internal.Entity): Internal.Entity;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface LongStream$Builder implements Internal.LongConsumer {
        add(arg0: number): Internal.LongStream$Builder;
        build(): Internal.LongStream;
        andThen(arg0: Internal.LongConsumer): Internal.LongConsumer;
        accept(arg0: number): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class FluidAttributes {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isLighterThanAir(): boolean;
        notifyAll(): void;
        getRarity(arg0: Internal.BlockAndTintGetter, arg1: BlockPos): Internal.Rarity;
        getRarity(arg0: Internal.FluidStack): Internal.Rarity;
        isGaseous(): boolean;
        isGaseous(arg0: Internal.BlockAndTintGetter, arg1: BlockPos): boolean;
        isGaseous(arg0: Internal.FluidStack): boolean;
        getEmptySound(arg0: Internal.FluidStack): Internal.SoundEvent;
        getEmptySound(arg0: Internal.BlockAndTintGetter, arg1: BlockPos): Internal.SoundEvent;
        notify(): void;
        getBucket(arg0: Internal.FluidStack): Internal.ItemStack;
        getFlowingTexture(arg0: Internal.BlockAndTintGetter, arg1: BlockPos): ResourceLocation;
        getFlowingTexture(arg0: Internal.FluidStack): ResourceLocation;
        hashCode(): number;
        static builder(arg0: ResourceLocation, arg1: ResourceLocation): Internal.FluidAttributes$Builder;
        getStillTexture(arg0: Internal.FluidStack): ResourceLocation;
        getStillTexture(arg0: Internal.BlockAndTintGetter, arg1: BlockPos): ResourceLocation;
        getBlock(arg0: Internal.BlockAndTintGetter, arg1: BlockPos, arg2: Internal.FluidState): Internal.BlockState;
        getStateForPlacement(arg0: Internal.BlockAndTintGetter, arg1: BlockPos, arg2: Internal.FluidStack): Internal.FluidState;
        getTranslationKey(arg0: Internal.FluidStack): string;
        getColor(arg0: Internal.BlockAndTintGetter, arg1: BlockPos): number;
        getColor(arg0: Internal.FluidStack): number;
        getFillSound(arg0: Internal.FluidStack): Internal.SoundEvent;
        getFillSound(arg0: Internal.BlockAndTintGetter, arg1: BlockPos): Internal.SoundEvent;
        getDensity(arg0: Internal.BlockAndTintGetter, arg1: BlockPos): number;
        getDensity(arg0: Internal.FluidStack): number;
        getLuminosity(arg0: Internal.FluidStack): number;
        getLuminosity(arg0: Internal.BlockAndTintGetter, arg1: BlockPos): number;
        doesVaporize(arg0: Internal.BlockAndTintGetter, arg1: BlockPos, arg2: Internal.FluidStack): boolean;
        getViscosity(arg0: Internal.FluidStack): number;
        getViscosity(arg0: Internal.BlockAndTintGetter, arg1: BlockPos): number;
        canBePlacedInWorld(arg0: Internal.BlockAndTintGetter, arg1: BlockPos, arg2: Internal.FluidStack): boolean;
        canBePlacedInWorld(arg0: Internal.BlockAndTintGetter, arg1: BlockPos, arg2: Internal.FluidState): boolean;
        getDisplayName(arg0: Internal.FluidStack): Internal.Component;
        equals(arg0: object): boolean;
        toString(): string;
        vaporize(arg0: Internal.Player, arg1: Internal.Level, arg2: BlockPos, arg3: Internal.FluidStack): void;
        getTemperature(arg0: Internal.BlockAndTintGetter, arg1: BlockPos): number;
        getTemperature(arg0: Internal.FluidStack): number;
        static readonly BUCKET_VOLUME : 1000;
        get overlayTexture(): ResourceLocation;
        get rarity(): Internal.Rarity;
        get emptySound(): Internal.SoundEvent;
        get flowingTexture(): ResourceLocation;
        get stillTexture(): ResourceLocation;
        get translationKey(): string;
        get color(): number;
        get fillSound(): Internal.SoundEvent;
        get density(): number;
        get luminosity(): number;
        get viscosity(): number;
        get textures(): Internal.Stream<ResourceLocation>;
        get temperature(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Pair <F, S> implements Internal.App<Internal.Pair$Mu<S>, F> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        swap(): Internal.Pair<S, F>;
        notifyAll(): void;
        notify(): void;
        mapFirst<F2>(arg0: (arg0: F) => F2): Internal.Pair<F2, S>;
        static unbox<F, S>(arg0: Internal.App<Internal.Pair$Mu<S>, F>): Internal.Pair<F, S>;
        hashCode(): number;
        static toMap<F, S>(): Internal.Collector<Internal.Pair<F, S>, object, Map<F, S>>;
        static of<F, S>(arg0: F, arg1: S): Internal.Pair<F, S>;
        equals(arg0: object): boolean;
        toString(): string;
        mapSecond<S2>(arg0: (arg0: S) => S2): Internal.Pair<F, S2>;
        get first(): F;
        get second(): S;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ClientboundBlockEntityDataPacket implements Internal.Packet<Unknown> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ObjectIterator <K> implements Internal.Iterator<K> {
        next(): E;
        hasNext(): boolean;
        skip(arg0: number): number;
        remove(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ContainerAccess {
        get remoteSlots(): Internal.NonNullList<Internal.ItemStack>;
        get lastSlots(): Internal.NonNullList<Internal.ItemStack>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class FluidAttributes$Builder {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        density(arg0: number): Internal.FluidAttributes$Builder;
        translationKey(arg0: string): Internal.FluidAttributes$Builder;
        overlay(arg0: ResourceLocation): Internal.FluidAttributes$Builder;
        color(arg0: number): Internal.FluidAttributes$Builder;
        notifyAll(): void;
        sound(arg0: Internal.SoundEvent, arg1: Internal.SoundEvent): Internal.FluidAttributes$Builder;
        sound(arg0: Internal.SoundEvent): Internal.FluidAttributes$Builder;
        gaseous(): Internal.FluidAttributes$Builder;
        notify(): void;
        viscosity(arg0: number): Internal.FluidAttributes$Builder;
        build(arg0: Internal.Fluid): Internal.FluidAttributes;
        hashCode(): number;
        equals(arg0: object): boolean;
        temperature(arg0: number): Internal.FluidAttributes$Builder;
        luminosity(arg0: number): Internal.FluidAttributes$Builder;
        toString(): string;
        rarity(arg0: Internal.Rarity): Internal.FluidAttributes$Builder;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class LootEventJS extends Internal.EventJS {
        cancel(): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isCancelled(): boolean;
        notifyAll(): void;
        addJson(id: ResourceLocation, json: Internal.JsonObject): void;
        notify(): void;
        modify(id: ResourceLocation, b: (arg0: Internal.LootBuilder) => void): void;
        removeAll(): void;
        post(t: Internal.ScriptType, id: string, sub: string): boolean;
        post(t: Internal.ScriptType, id: string): boolean;
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        canCancel(): boolean;
        get type(): string;
        get directory(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class GameRulesJS {
        getInt(rule: string): number;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        set(rule: string, value: object): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        getBoolean(rule: string): boolean;
        getString(rule: string): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Multiset <E> implements Internal.Collection<E> {
        add(arg0: E, arg1: number): number;
        add(arg0: E): boolean;
        forEachEntry(arg0: Internal.ObjIntConsumer<E>): void;
        entrySet(): Internal.Set<Internal.Multiset$Entry<E>>;
        spliterator(): Internal.Spliterator<E>;
        forEach(arg0: (arg0: E) => void): void;
        containsAll(arg0: Internal.Collection<object>): boolean;
        isEmpty(): boolean;
        clear(): void;
        count(arg0: object): number;
        remove(arg0: object, arg1: number): number;
        remove(arg0: object): boolean;
        removeAll(arg0: Internal.Collection<object>): boolean;
        contains(arg0: object): boolean;
        iterator(): Internal.Iterator<E>;
        size(): number;
        elementSet(): Internal.Set<E>;
        hashCode(): number;
        equals(arg0: object): boolean;
        toArray<T>(arg0: T[]): T[];
        toArray(): object[];
        toString(): string;
        setCount(arg0: E, arg1: number): number;
        setCount(arg0: E, arg1: number, arg2: number): boolean;
        retainAll(arg0: Internal.Collection<object>): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IForgeModelState {
        getPartTransformation(arg0: object): Internal.Transformation;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface BlockEntityPredicateDataCheck {
        checkData(arg0: Internal.CompoundTag): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface PreparableReloadListener {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class AirItem extends Internal.Item {
        canElytraFly(arg0: Internal.ItemStack, arg1: Internal.LivingEntity): boolean;
        setDamage(arg0: Internal.ItemStack, arg1: number): void;
        canPerformAction(arg0: Internal.ItemStack, arg1: Internal.ToolAction): boolean;
        getItemEnchantability(arg0: Internal.ItemStack): number;
        shouldCauseBlockBreakReset(arg0: Internal.ItemStack, arg1: Internal.ItemStack): boolean;
        shouldCauseReequipAnimation(arg0: Internal.ItemStack, arg1: Internal.ItemStack, arg2: boolean): boolean;
        getXpRepairRatio(arg0: Internal.ItemStack): number;
        readShareTag(arg0: Internal.ItemStack, arg1: Internal.CompoundTag): void;
        onEntityItemUpdate(arg0: Internal.ItemStack, arg1: Internal.ItemEntity): boolean;
        getDamage(arg0: Internal.ItemStack): number;
        isBookEnchantable(arg0: Internal.ItemStack, arg1: Internal.ItemStack): boolean;
        canDisableShield(arg0: Internal.ItemStack, arg1: Internal.ItemStack, arg2: Internal.LivingEntity, arg3: Internal.LivingEntity): boolean;
        onUsingTick(arg0: Internal.ItemStack, arg1: Internal.LivingEntity, arg2: number): void;
        createEntity(arg0: Internal.Level, arg1: Internal.Entity, arg2: Internal.ItemStack): Internal.Entity;
        isPiglinCurrency(arg0: Internal.ItemStack): boolean;
        callAllowdedIn(arg0: Internal.CreativeModeTab): boolean;
        getSweepHitBox(arg0: Internal.ItemStack, arg1: Internal.Player, arg2: Internal.Entity): Internal.AABB;
        isRepairable(arg0: Internal.ItemStack): boolean;
        getShareTag(arg0: Internal.ItemStack): Internal.CompoundTag;
        onDroppedByPlayer(arg0: Internal.ItemStack, arg1: Internal.Player): boolean;
        isDamageable(arg0: Internal.ItemStack): boolean;
        onEntitySwing(arg0: Internal.ItemStack, arg1: Internal.LivingEntity): boolean;
        elytraFlightTick(arg0: Internal.ItemStack, arg1: Internal.LivingEntity, arg2: number): boolean;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        onLeftClickEntity(arg0: Internal.ItemStack, arg1: Internal.Player, arg2: Internal.Entity): boolean;
        canEquip(arg0: Internal.ItemStack, arg1: EquipmentSlot, arg2: Internal.Entity): boolean;
        notifyAll(): void;
        notify(): void;
        onBlockStartBreak(arg0: Internal.ItemStack, arg1: BlockPos, arg2: Internal.Player): boolean;
        onHorseArmorTick(arg0: Internal.ItemStack, arg1: Internal.Level, arg2: Internal.Mob): void;
        handler$zkh000$getUseDuration(arg0: Internal.ItemStack, arg1: Internal.CallbackInfoReturnable<any>): void;
        canContinueUsing(arg0: Internal.ItemStack, arg1: Internal.ItemStack): boolean;
        getEntityLifespan(arg0: Internal.ItemStack, arg1: Internal.Level): number;
        handler$bao000$overrideOtherStackedOnMe(arg0: Internal.ItemStack, arg1: Internal.ItemStack, arg2: Internal.Slot, arg3: Internal.ClickAction, arg4: Internal.Player, arg5: Internal.SlotAccess, arg6: Internal.CallbackInfoReturnable<any>): void;
        getDefaultTooltipHideFlags(arg0: Internal.ItemStack): number;
        getArmorTexture(arg0: Internal.ItemStack, arg1: Internal.Entity, arg2: EquipmentSlot, arg3: string): string;
        hashCode(): number;
        hasCustomEntity(arg0: Internal.ItemStack): boolean;
        getHighlightTip(arg0: Internal.ItemStack, arg1: Internal.Component): Internal.Component;
        getMaxDamage(arg0: Internal.ItemStack): number;
        getCreatorModId(arg0: Internal.ItemStack): string;
        isDamaged(arg0: Internal.ItemStack): boolean;
        onArmorTick(arg0: Internal.ItemStack, arg1: Internal.Level, arg2: Internal.Player): void;
        addPlaceable(arg0: Internal.Block): void;
        hasContainerItem(arg0: Internal.ItemStack): boolean;
        doesSneakBypassUse(arg0: Internal.ItemStack, arg1: Internal.LevelReader, arg2: BlockPos, arg3: Internal.Player): boolean;
        onItemUseFirst(arg0: Internal.ItemStack, arg1: Internal.UseOnContext): Internal.InteractionResult;
        getContainerItem(arg0: Internal.ItemStack): Internal.ItemStack;
        setRegistryName(arg0: string, arg1: string): V;
        onDestroyed(arg0: Internal.ItemEntity, arg1: Internal.DamageSource): void;
        isCorrectToolForDrops(arg0: Internal.ItemStack, arg1: Internal.BlockState): boolean;
        handler$bao000$overrideStackedOnOther(arg0: Internal.ItemStack, arg1: Internal.Slot, arg2: Internal.ClickAction, arg3: Internal.Player, arg4: Internal.CallbackInfoReturnable<any>): void;
        getEquipmentSlot(arg0: Internal.ItemStack): EquipmentSlot;
        initCapabilities(arg0: Internal.ItemStack, arg1: Internal.CompoundTag): Internal.ICapabilityProvider;
        getItemStackLimit(arg0: Internal.ItemStack): number;
        equals(arg0: object): boolean;
        makesPiglinsNeutral(arg0: Internal.ItemStack, arg1: Internal.LivingEntity): boolean;
        toString(): string;
        isEnderMask(arg0: Internal.ItemStack, arg1: Internal.Player, arg2: Internal.EnderMan): boolean;
        canApplyAtEnchantingTable(arg0: Internal.ItemStack, arg1: Internal.Enchantment): boolean;
        readonly delegate : () => V;
        renderProperties : object;
        set burnTime(i: number);
        set fireResistantKJS(arg0: boolean);
        set category(arg0: Internal.CreativeModeTab);
        set foodPropertiesKJS(arg0: Internal.FoodProperties);
        get category(): Internal.CreativeModeTab;
        set itemBuilderKJS(b: Internal.ItemBuilder);
        get itemBuilderKJS(): Internal.ItemBuilder;
        get blockItemOverride(): Internal.BlockItem;
        set maxStackSizeKJS(arg0: number);
        get id(): string;
        get renderPropertiesInternal(): object;
        set craftingRemainderKJS(arg0: Internal.Item);
        set maxDamageKJS(arg0: number);
        set rarityKJS(arg0: Internal.Rarity);
        get registryName(): ResourceLocation;
        set registryName(arg0: ResourceLocation);
        set registryName(arg0: ResourceLocation);
        set registryName(arg0: string);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Message implements Internal.Serializable {
        get parameters(): object[];
        get formattedMessage(): string;
        get format(): string;
        get throwable(): Internal.Throwable;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class DamageSourceJS {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        readonly source : Internal.DamageSource;
        get level(): Internal.LevelJS;
        get actual(): Internal.EntityJS;
        get player(): Internal.PlayerJS<object>;
        get type(): string;
        get immediate(): Internal.EntityJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Ingredient implements Internal.Predicate<Internal.ItemStack>, Internal.IngredientKJS {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        or(arg0: (arg0: T) => boolean): (arg0: T) => boolean;
        test(arg0: object): boolean;
        test(arg0: Internal.ItemStack): boolean;
        checkInvalidation(): boolean;
        notifyAll(): void;
        isVanilla(): boolean;
        asKJS(): object;
        notify(): void;
        static invalidateAll(): void;
        and(arg0: (arg0: T) => boolean): (arg0: T) => boolean;
        negate(): (arg0: T) => boolean;
        hashCode(): number;
        equals(arg0: object): boolean;
        static merge(arg0: Internal.Collection<Internal.Ingredient>): Internal.Ingredient;
        isSimple(): boolean;
        toString(): string;
        get serializer(): Internal.IIngredientSerializer<Internal.Ingredient>;
        get itemsKJS(): Internal.ItemStack[];
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Callable {
        call(arg0: Internal.Context, arg1: Internal.Scriptable, arg2: Internal.Scriptable, arg3: object[]): object;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface StatusIdentifier <T> {
        get id(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface AbstractContainerScreenAccessor {
        callIsHovering(arg0: Internal.Slot, arg1: number, arg2: number): boolean;
        callRenderSlot(arg0: Internal.PoseStack, arg1: Internal.Slot): void;
        get hoveredSlot(): Internal.Slot;
        get imageWidth(): number;
        get leftPos(): number;
        get topPos(): number;
        get imageHeight(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface BiConsumer <T, U> {
        andThen(arg0: (arg0: T, arg1: U) => void): (arg0: T, arg1: U) => void;
        accept(arg0: T, arg1: U): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class Enchantment extends Internal.ForgeRegistryEntry<Internal.Enchantment> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        setRegistryName(arg0: string, arg1: string): V;
        isAllowedOnBooks(): boolean;
        is(arg0: net.minecraft.tags.Tag<Internal.Enchantment>): boolean;
        notify(): void;
        canApplyAtEnchantingTable(arg0: Internal.ItemStack): boolean;
        readonly delegate : () => V;
        get registryName(): ResourceLocation;
        set registryName(arg0: ResourceLocation);
        set registryName(arg0: ResourceLocation);
        set registryName(arg0: string);
        get tags(): Internal.Set<ResourceLocation>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class PacketFlow extends Internal.Enum<Internal.PacketFlow> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(arg0: string): Internal.PacketFlow;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.PacketFlow[];
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly CLIENTBOUND : Internal.PacketFlow;
        static readonly SERVERBOUND : Internal.PacketFlow;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class LunarEventSavedData extends Internal.SavedData {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        static load(arg0: Internal.CompoundTag): Internal.LunarEventSavedData;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static get(arg0: Internal.LevelAccessor): Internal.LunarEventSavedData;
        toString(): string;
        notify(): void;
        static readonly DATA_NAME : "enhancedcelestials:lunar_event_data";
        set forecast(arg0: Internal.LunarForecast);
        get forecast(): Internal.LunarForecast;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Gson {
        getAdapter<T>(arg0: Internal.Class<T>): Internal.TypeAdapter<T>;
        getAdapter<T>(arg0: Internal.TypeToken<T>): Internal.TypeAdapter<T>;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        excluder(): Internal.Excluder;
        notifyAll(): void;
        newBuilder(): Internal.GsonBuilder;
        notify(): void;
        newJsonReader(arg0: Internal.Reader): Internal.JsonReader;
        serializeNulls(): boolean;
        fieldNamingStrategy(): Internal.FieldNamingStrategy;
        toJson(arg0: Internal.JsonElement): string;
        toJson(arg0: object): string;
        toJson(arg0: Internal.JsonElement, arg1: Internal.JsonWriter): void;
        toJson(arg0: object, arg1: Internal.Type, arg2: Internal.Appendable): void;
        toJson(arg0: object, arg1: Internal.Type): string;
        toJson(arg0: Internal.JsonElement, arg1: Internal.Appendable): void;
        toJson(arg0: object, arg1: Internal.Type, arg2: Internal.JsonWriter): void;
        toJson(arg0: object, arg1: Internal.Appendable): void;
        newJsonWriter(arg0: Internal.Writer): Internal.JsonWriter;
        hashCode(): number;
        equals(arg0: object): boolean;
        toJsonTree(arg0: object): Internal.JsonElement;
        toJsonTree(arg0: object, arg1: Internal.Type): Internal.JsonElement;
        fromJson<T>(arg0: Internal.JsonElement, arg1: Internal.Type): T;
        fromJson<T>(arg0: Internal.Reader, arg1: Internal.Type): T;
        fromJson<T>(arg0: Internal.JsonReader, arg1: Internal.Type): T;
        fromJson<T>(arg0: Internal.JsonElement, arg1: Internal.Class<T>): T;
        fromJson<T>(arg0: Internal.Reader, arg1: Internal.Class<T>): T;
        fromJson<T>(arg0: string, arg1: Internal.Type): T;
        fromJson<T>(arg0: string, arg1: Internal.Class<T>): T;
        toString(): string;
        getDelegateAdapter<T>(arg0: Internal.TypeAdapterFactory, arg1: Internal.TypeToken<T>): Internal.TypeAdapter<T>;
        htmlSafe(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class File implements Internal.Serializable, Internal.Comparable<Internal.File> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        static listRoots(): Internal.File[];
        renameTo(arg0: Internal.File): boolean;
        setExecutable(arg0: boolean, arg1: boolean): boolean;
        canRead(): boolean;
        notifyAll(): void;
        compareTo(arg0: Internal.File): number;
        compareTo(arg0: object): number;
        delete(): boolean;
        notify(): void;
        setReadable(arg0: boolean, arg1: boolean): boolean;
        hashCode(): number;
        listFiles(arg0: Internal.FilenameFilter): Internal.File[];
        listFiles(arg0: Internal.FileFilter): Internal.File[];
        listFiles(): Internal.File[];
        mkdir(): boolean;
        deleteOnExit(): void;
        canExecute(): boolean;
        toURL(): Internal.URL;
        setWritable(arg0: boolean, arg1: boolean): boolean;
        isFile(): boolean;
        toURI(): Internal.URI;
        length(): number;
        canWrite(): boolean;
        static createTempFile(arg0: string, arg1: string, arg2: Internal.File): Internal.File;
        static createTempFile(arg0: string, arg1: string): Internal.File;
        list(): string[];
        list(arg0: Internal.FilenameFilter): string[];
        isHidden(): boolean;
        toPath(): Internal.Path;
        mkdirs(): boolean;
        equals(arg0: object): boolean;
        exists(): boolean;
        isAbsolute(): boolean;
        toString(): string;
        lastModified(): number;
        createNewFile(): boolean;
        setLastModified(arg0: number): boolean;
        isDirectory(): boolean;
        setReadOnly(): boolean;
        static readonly pathSeparator : ";";
        static readonly pathSeparatorChar : ";";
        static readonly separatorChar : "\\";
        static readonly separator : "\\";
        get usableSpace(): number;
        get name(): string;
        set executable(arg0: boolean);
        get canonicalFile(): Internal.File;
        set readable(arg0: boolean);
        get totalSpace(): number;
        get parentFile(): Internal.File;
        get path(): string;
        get absoluteFile(): Internal.File;
        get canonicalPath(): string;
        get parent(): string;
        set writable(arg0: boolean);
        get absolutePath(): string;
        get freeSpace(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class HashSet <E> extends Internal.AbstractSet<E> implements Internal.Set<E>, Internal.Cloneable, Internal.Serializable {
        add(arg0: E): boolean;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        spliterator(): Internal.Spliterator<E>;
        notifyAll(): void;
        isEmpty(): boolean;
        clear(): void;
        notify(): void;
        remove(arg0: object): boolean;
        contains(arg0: object): boolean;
        iterator(): Internal.Iterator<E>;
        size(): number;
        hashCode(): number;
        equals(arg0: object): boolean;
        toArray<T>(arg0: T[]): T[];
        toArray(): object[];
        clone(): object;
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ChannelPromise implements Internal.ChannelFuture, Internal.Promise<void> {
        cancel(arg0: boolean): boolean;
        unvoid(): Internal.ChannelPromise;
        isCancelled(): boolean;
        removeListeners(arg0: Internal.GenericFutureListener<Internal.Future<void>>[]): Internal.ChannelPromise;
        removeListeners(arg0: Internal.GenericFutureListener<Internal.Future<void>>[]): Internal.ChannelFuture;
        channel(): io.netty.channel.Channel;
        cause(): Internal.Throwable;
        awaitUninterruptibly(): Internal.ChannelPromise;
        awaitUninterruptibly(): Internal.ChannelFuture;
        awaitUninterruptibly(arg0: number): boolean;
        awaitUninterruptibly(arg0: number, arg1: Internal.TimeUnit): boolean;
        removeListener(arg0: Internal.GenericFutureListener<Internal.Future<void>>): Internal.ChannelPromise;
        tryFailure(arg0: Internal.Throwable): boolean;
        isDone(): boolean;
        sync(): Internal.ChannelPromise;
        sync(): Internal.ChannelFuture;
        setSuccess(): Internal.ChannelPromise;
        isVoid(): boolean;
        trySuccess(): boolean;
        trySuccess(arg0: V): boolean;
        syncUninterruptibly(): Internal.ChannelPromise;
        syncUninterruptibly(): Internal.ChannelFuture;
        get(arg0: number, arg1: Internal.TimeUnit): V;
        get(): V;
        isCancellable(): boolean;
        await(): Internal.ChannelPromise;
        await(): Internal.ChannelFuture;
        await(arg0: number, arg1: Internal.TimeUnit): boolean;
        await(arg0: number): boolean;
        addListeners(arg0: Internal.GenericFutureListener<Internal.Future<void>>[]): Internal.ChannelPromise;
        addListeners(arg0: Internal.GenericFutureListener<Internal.Future<void>>[]): Internal.ChannelFuture;
        setUncancellable(): boolean;
        isSuccess(): boolean;
        addListener(arg0: Internal.GenericFutureListener<Internal.Future<void>>): Internal.ChannelPromise;
        get now(): V;
        set success(arg0: void);
        set failure(arg0: Internal.Throwable);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Endimatable implements Internal.EndimationEffectSource {
        onEndimationEnd(arg0: Internal.PlayableEndimation, arg1: Internal.PlayableEndimation): void;
        resetEndimation(): void;
        isActive(): boolean;
        isEndimationPlaying(arg0: Internal.PlayableEndimation): boolean;
        endimateTick(): void;
        onEndimationStart(arg0: Internal.PlayableEndimation, arg1: Internal.PlayableEndimation): void;
        isNoEndimationPlaying(): boolean;
        get endimatedState(): Internal.Endimatable$EndimatedState;
        get playingEndimation(): Internal.PlayableEndimation;
        set playingEndimation(arg0: Internal.PlayableEndimation);
        get pos(): Internal.Position;
        get effectHandler(): Internal.EndimationEffectHandler;
        set animationTick(arg0: number);
        get animationTick(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class Dictionary <K, V> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        size(): number;
        hashCode(): number;
        keys(): Internal.Enumeration<K>;
        notifyAll(): void;
        equals(arg0: object): boolean;
        elements(): Internal.Enumeration<V>;
        get(arg0: object): V;
        isEmpty(): boolean;
        toString(): string;
        notify(): void;
        put(arg0: K, arg1: V): V;
        remove(arg0: object): V;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class ChunkAccess implements Internal.BlockGetter, Internal.BiomeManager$NoiseBiomeSource, Internal.FeatureAccess, Internal.ExtendedChunk {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        notify(): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        localvar$bnj000$modifyHeightmapType(arg0: Internal.Heightmap$Types): Internal.Heightmap$Types;
        toString(): string;
        get worldForge(): Internal.LevelAccessor;
        get blockNibbles(): Internal.SWMRNibbleArray[];
        set blockEmptinessMap(arg0: boolean[]);
        set skyNibbles(arg0: Internal.SWMRNibbleArray[]);
        get skyEmptinessMap(): boolean[];
        get skyNibbles(): Internal.SWMRNibbleArray[];
        set skyEmptinessMap(arg0: boolean[]);
        get blockEmptinessMap(): boolean[];
        set blockNibbles(arg0: Internal.SWMRNibbleArray[]);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface LivingEntityAccessor {
        get lastPos(): BlockPos;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ContextFactory {
        enterContext(cx: Internal.Context): Internal.Context;
        enterContext(): Internal.Context;
        isSealed(): boolean;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        seal(): void;
        removeListener(listener: Internal.ContextFactory$Listener): void;
        notify(): void;
        call<T>(action: Internal.ContextAction<T>): T;
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        addListener(listener: Internal.ContextFactory$Listener): void;
        get applicationClassLoader(): Internal.ClassLoader;
        get global(): Internal.ContextFactory;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ObjLongConsumer <T> {
        accept(arg0: T, arg1: number): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class BackpackInventory extends Internal.SimpleContainer {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        get backpackStack(): Internal.ItemStack;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class IngredientActionFilter {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        checkFilter(index: number, stack: Internal.ItemStack): boolean;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        static filterOf(o: object): Internal.IngredientActionFilter;
        notify(): void;
        copyFrom(filter: Internal.IngredientActionFilter): void;
        filterIndex : number;
        filterIngredient : Internal.IngredientJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class PartEntity <T> extends Internal.Entity {
        backpackedMoved(): boolean;
        onEndimationEnd(arg0: Internal.PlayableEndimation, arg1: Internal.PlayableEndimation): void;
        canBeRiddenInWater(arg0: Internal.Entity): boolean;
        handler$zzo000$tickHead(arg0: Internal.CallbackInfo): void;
        isEndimationPlaying(arg0: Internal.PlayableEndimation): boolean;
        isActive(): boolean;
        handler$zgm001$tick(arg0: Internal.CallbackInfo): void;
        handler$zjn000$onUpdateFluidOnEyes(arg0: Internal.CallbackInfo): void;
        changeDimension(arg0: Internal.ServerLevel, arg1: Internal.ITeleporter): Internal.Entity;
        serializeNBT(): Internal.Tag;
        serializeNBT(): Internal.CompoundTag;
        invalidateCaps(): void;
        revive(): void;
        canUpdate(): boolean;
        canUpdate(arg0: boolean): void;
        handler$bgc000$tryShortcutFluidPushing(tag: net.minecraft.tags.Tag<any>, speed: number, cir: Internal.CallbackInfoReturnable<any>, box: Internal.AABB, x1: number, x2: number, y1: number, y2: number, z1: number, z2: number, zero: number): void;
        resetEndimation(): void;
        areCapsCompatible(arg0: Internal.CapabilityDispatcher): boolean;
        getEyeHeightAccess(arg0: Internal.Pose, arg1: Internal.EntityDimensions): number;
        reviveCaps(): void;
        lithiumOnBlockCacheDeleted(): void;
        canRiderInteract(): boolean;
        getEntries(arg0: boolean): Internal.Set<any>;
        onAddedToWorld(): void;
        handler$zcp000$read(arg0: Internal.CompoundTag, arg1: Internal.CallbackInfo): void;
        canTrample(arg0: Internal.BlockState, arg1: BlockPos, arg2: number): boolean;
        getClassification(arg0: boolean): Internal.MobCategory;
        lithiumSetClimbingMobCachingSectionUpdateBehavior(listening: boolean): void;
        onEndimationStart(arg0: Internal.PlayableEndimation, arg1: Internal.PlayableEndimation): void;
        isNoEndimationPlaying(): boolean;
        shouldRiderSit(): boolean;
        getPickedResult(arg0: Internal.HitResult): Internal.ItemStack;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        lithiumOnBlockCacheSet(newState: Internal.BlockState): void;
        handler$zjn000$onUpdateFluidOnEyeAssign(arg0: Internal.CallbackInfo): void;
        notify(): void;
        handler$zzo000$moveStep(arg0: Internal.MoverType, arg1: Vec3, arg2: Internal.CallbackInfo): void;
        endimateTick(): void;
        isDirty(): boolean;
        hashCode(): number;
        isAddedToWorld(): boolean;
        addListener(listener: Internal.NearbyEntityListener): void;
        onRemovedFromWorld(): void;
        isMultipartEntity(): boolean;
        deserializeNBT(arg0: Internal.CompoundTag): void;
        deserializeNBT(arg0: Internal.Tag): void;
        clean(): void;
        asKJS(): object;
        getValue(arg0: Internal.TrackedData<any>): object;
        setValue(arg0: Internal.TrackedData<any>, arg1: object): void;
        equals(arg0: object): boolean;
        toString(): string;
        get cachedFeetBlockState(): Internal.BlockState;
        get pos(): Internal.Position;
        get persistentDataKJS(): Internal.CompoundTag;
        get endimatedState(): Internal.Endimatable$EndimatedState;
        get effectHandler(): Internal.EndimationEffectHandler;
        set animationTick(arg0: number);
        get listener(): Internal.NearbyEntityListenerMulti;
        get isInsidePortal(): boolean;
        get persistentData(): Internal.CompoundTag;
        get remainingFireTicks(): number;
        get dataMap(): Map<any, any>;
        get entityChangeListener(): Internal.EntityInLevelCallback;
        set dataMap(arg0: Map<any, any>);
        get parts(): Internal.PartEntity<object>[];
        get parent(): T;
        get playingEndimation(): Internal.PlayableEndimation;
        get dirtyEntries(): Internal.Set<any>;
        set playingEndimation(arg0: Internal.PlayableEndimation);
        get animationTick(): number;
        set remainingFireTicks(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Locale$LanguageRange {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static mapEquivalents(arg0: Internal.List<Internal.Locale$LanguageRange>, arg1: Map<string, Internal.List<string>>): Internal.List<Internal.Locale$LanguageRange>;
        toString(): string;
        static parse(arg0: string): Internal.List<Internal.Locale$LanguageRange>;
        static parse(arg0: string, arg1: Map<string, Internal.List<string>>): Internal.List<Internal.Locale$LanguageRange>;
        notify(): void;
        static readonly MAX_WEIGHT : 1.0;
        static readonly MIN_WEIGHT : 0.0;
        get weight(): number;
        get range(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class LunarTextComponents$NotificationType extends Internal.Enum<Internal.LunarTextComponents$NotificationType> implements Internal.StringRepresentable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(arg0: string): Internal.LunarTextComponents$NotificationType;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.LunarTextComponents$NotificationType[];
        name(): string;
        toString(): string;
        static byName(arg0: string): Internal.LunarTextComponents$NotificationType;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly CODEC : Internal.Codec<Internal.LunarTextComponents$NotificationType>;
        static readonly CHAT : Internal.LunarTextComponents$NotificationType;
        static readonly HOT_BAR : Internal.LunarTextComponents$NotificationType;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Capability <T> {
        orEmpty<R>(arg0: Internal.Capability<R>, arg1: Internal.LazyOptional<T>): Internal.LazyOptional<R>;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        isRegistered(): boolean;
        notify(): void;
        addListener(arg0: (arg0: Internal.Capability<T>) => void): Internal.Capability<T>;
        get name(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ResourceManager implements Internal.ResourceProvider {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Transformation implements Internal.IForgeTransformation {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        applyOrigin(arg0: Internal.Vector3f): Internal.Transformation;
        notifyAll(): void;
        rotateTransform(arg0: Internal.Direction): Internal.Direction;
        isIdentity(): boolean;
        push(arg0: Internal.PoseStack): void;
        notify(): void;
        blockCornerToCenter(): Internal.Transformation;
        hashCode(): number;
        equals(arg0: object): boolean;
        transformPosition(arg0: Internal.Vector4f): void;
        toString(): string;
        transformNormal(arg0: Internal.Vector3f): void;
        blockCenterToCorner(): Internal.Transformation;
        get normalMatrix(): Internal.Matrix3f;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class LinkedHashMap <K, V> extends Internal.HashMap<K, V> implements Map<K, V> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        getOrDefault(arg0: object, arg1: V): V;
        entrySet(): Internal.Set<Internal.Map$Entry<K, V>>;
        containsKey(arg0: object): boolean;
        forEach(arg0: (arg0: K, arg1: V) => void): void;
        notifyAll(): void;
        values(): Internal.Collection<V>;
        replace(arg0: K, arg1: V): V;
        replace(arg0: K, arg1: V, arg2: V): boolean;
        isEmpty(): boolean;
        clear(): void;
        replaceAll(arg0: (arg0: K, arg1: V) => V): void;
        notify(): void;
        put(arg0: K, arg1: V): V;
        remove(arg0: object, arg1: object): boolean;
        remove(arg0: object): V;
        containsValue(arg0: object): boolean;
        size(): number;
        hashCode(): number;
        equals(arg0: object): boolean;
        get(arg0: object): V;
        clone(): object;
        toString(): string;
        putIfAbsent(arg0: K, arg1: V): V;
        keySet(): Internal.Set<K>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class DiscreteVoxelShape implements Internal.DiscreteVSAccess {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        get zSize(): number;
        get ySize(): number;
        get xSize(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ClientLevelExtension {
        flywheel$getAllLoadedEntities(): Internal.Iterable<Internal.Entity>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IngredientJS implements Internal.JsonSerializable, Internal.WrappedJS, Internal.Copyable {
        anyStackMatches(ingredient: Internal.IngredientJS): boolean;
        testVanillaItem(item: Internal.Item): boolean;
        test(arg0: Internal.ItemStackJS): boolean;
        isEmpty(): boolean;
        isInvalidRecipeIngredient(): boolean;
        asIngredientStack(): Internal.IngredientStackJS;
        filter(filter: Internal.IngredientJS): Internal.IngredientJS;
        createVanillaIngredient(): Internal.Ingredient;
        toJson(): Internal.JsonElement;
        not(): Internal.IngredientJS;
        withCount(count: number): Internal.IngredientJS;
        unwrapStackIngredient(): Internal.List<Internal.IngredientJS>;
        testVanilla(stack: Internal.ItemStack): boolean;
        x(c: number): Internal.IngredientJS;
        copy(): Internal.IngredientJS;
        copy(): Internal.Copyable;
        get itemIds(): Internal.Set<string>;
        get stacks(): Internal.Set<Internal.ItemStackJS>;
        get vanillaItems(): Internal.Set<Internal.Item>;
        get vanillaPredicate(): (arg0: Internal.ItemStack) => boolean;
        get first(): Internal.ItemStackJS;
        get count(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IForgePackResources {
        isHidden(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface HasProgress {
        get progress(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Reference2DoubleFunction <K> implements it.unimi.dsi.fastutil.Function<K, number>, Internal.ToDoubleFunction<K> {
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        applyAsDouble(arg0: K): number;
        andThenShort(arg0: Internal.Double2ShortFunction): Internal.Reference2ShortFunction<K>;
        getDouble(arg0: object): number;
        composeByte(arg0: Internal.Byte2ReferenceFunction<K>): Internal.Byte2DoubleFunction;
        andThenInt(arg0: Internal.Double2IntFunction): Internal.Reference2IntFunction<K>;
        composeReference<T>(arg0: (arg0: T) => K): Internal.Reference2DoubleFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: K) => T;
        put(arg0: K, arg1: number): number;
        put(arg0: K, arg1: number): number;
        put(arg0: object, arg1: object): object;
        remove(arg0: object): number;
        remove(arg0: object): object;
        defaultReturnValue(): number;
        defaultReturnValue(arg0: number): void;
        andThenDouble(arg0: Internal.Double2DoubleFunction): Internal.Reference2DoubleFunction<K>;
        andThenObject<T>(arg0: Internal.Double2ObjectFunction<T>): (arg0: K) => T;
        get(arg0: object): object;
        get(arg0: object): number;
        andThenLong(arg0: Internal.Double2LongFunction): Internal.Reference2LongFunction<K>;
        composeLong(arg0: Internal.Long2ReferenceFunction<K>): Internal.Long2DoubleFunction;
        andThenByte(arg0: Internal.Double2ByteFunction): Internal.Reference2ByteFunction<K>;
        andThenFloat(arg0: Internal.Double2FloatFunction): Internal.Reference2FloatFunction<K>;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        composeInt(arg0: Internal.Int2ReferenceFunction<K>): Internal.Int2DoubleFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2ReferenceFunction<K>): Internal.Float2DoubleFunction;
        andThenChar(arg0: Internal.Double2CharFunction): Internal.Reference2CharFunction<K>;
        composeObject<T>(arg0: (arg0: T) => K): Internal.Object2DoubleFunction<T>;
        size(): number;
        removeDouble(arg0: object): number;
        composeShort(arg0: Internal.Short2ReferenceFunction<K>): Internal.Short2DoubleFunction;
        andThenReference<T>(arg0: Internal.Double2ReferenceFunction<T>): (arg0: K) => T;
        composeChar(arg0: Internal.Char2ReferenceFunction<K>): Internal.Char2DoubleFunction;
        composeDouble(arg0: Internal.Double2ReferenceFunction<K>): Internal.Double2DoubleFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Object2ShortFunction <K> implements it.unimi.dsi.fastutil.Function<K, number>, Internal.ToIntFunction<K> {
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        andThenShort(arg0: Internal.Short2ShortFunction): Internal.Object2ShortFunction<K>;
        removeShort(arg0: object): number;
        composeByte(arg0: Internal.Byte2ObjectFunction<K>): Internal.Byte2ShortFunction;
        andThenInt(arg0: Internal.Short2IntFunction): Internal.Object2IntFunction<K>;
        composeReference<T>(arg0: (arg0: T) => K): Internal.Reference2ShortFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: K) => T;
        put(arg0: K, arg1: number): number;
        put(arg0: K, arg1: number): number;
        put(arg0: object, arg1: object): object;
        remove(arg0: object): number;
        remove(arg0: object): object;
        defaultReturnValue(): number;
        defaultReturnValue(arg0: number): void;
        andThenDouble(arg0: Internal.Short2DoubleFunction): Internal.Object2DoubleFunction<K>;
        andThenObject<T>(arg0: Internal.Short2ObjectFunction<T>): (arg0: K) => T;
        get(arg0: object): object;
        get(arg0: object): number;
        andThenLong(arg0: Internal.Short2LongFunction): Internal.Object2LongFunction<K>;
        composeLong(arg0: Internal.Long2ObjectFunction<K>): Internal.Long2ShortFunction;
        andThenByte(arg0: Internal.Short2ByteFunction): Internal.Object2ByteFunction<K>;
        andThenFloat(arg0: Internal.Short2FloatFunction): Internal.Object2FloatFunction<K>;
        applyAsInt(arg0: K): number;
        apply(arg0: K): V;
        getShort(arg0: object): number;
        containsKey(arg0: object): boolean;
        composeInt(arg0: Internal.Int2ObjectFunction<K>): Internal.Int2ShortFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2ObjectFunction<K>): Internal.Float2ShortFunction;
        andThenChar(arg0: Internal.Short2CharFunction): Internal.Object2CharFunction<K>;
        composeObject<T>(arg0: (arg0: T) => K): Internal.Object2ShortFunction<T>;
        size(): number;
        composeShort(arg0: Internal.Short2ObjectFunction<K>): Internal.Short2ShortFunction;
        andThenReference<T>(arg0: Internal.Short2ReferenceFunction<T>): (arg0: K) => T;
        composeChar(arg0: Internal.Char2ObjectFunction<K>): Internal.Char2ShortFunction;
        composeDouble(arg0: Internal.Double2ObjectFunction<K>): Internal.Double2ShortFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class EntitySectionStorage <T> implements Internal.WorldEntityByChunkAccess, Internal.MovementTrackerCache {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        handler$bgp000$forEachInBox(box: Internal.AABB, action: Internal.Consumer<any>, ci: Internal.CallbackInfo, minX: number, minY: number, minZ: number, maxX: number, maxY: number, maxZ: number): void;
        deduplicate(tracker: Internal.SectionedEntityMovementTracker<any, any>): Internal.SectionedEntityMovementTracker<any, any>;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        getEntitiesInChunk(chunkX: number, chunkZ: number): Internal.Collection<any>;
        remove(tracker: Internal.SectionedEntityMovementTracker<any, any>): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ObjectListIterator <K> implements Internal.ObjectBidirectionalIterator<K>, Internal.ListIterator<K> {
        next(): E;
        add(arg0: K): void;
        set(arg0: K): void;
        previous(): K;
        previous(): E;
        hasPrevious(): boolean;
        hasPrevious(): boolean;
        back(arg0: number): number;
        hasNext(): boolean;
        skip(arg0: number): number;
        nextIndex(): number;
        previousIndex(): number;
        remove(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class EntityInstance <E> extends Internal.AbstractInstance implements Internal.LightListener, Internal.MovingListener {
        init(): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        onLightUpdate(arg0: Internal.LightProvider, arg1: Internal.LightLayer, arg2: Internal.ImmutableBox): void;
        notifyAll(): void;
        getInstancePosition(arg0: number): Internal.Vector3f;
        update(arg0: Internal.LightProvider): boolean;
        update(): void;
        updateLight(): void;
        notify(): void;
        remove(): void;
        hashCode(): number;
        onLightPacket(arg0: Internal.LightProvider, arg1: number, arg2: number): void;
        equals(arg0: object): boolean;
        toString(): string;
        shouldReset(): boolean;
        status(): Internal.ListenerStatus;
        readonly world : Internal.Level;
        get instancePosition(): Internal.Vector3f;
        get worldPosition(): BlockPos;
        get volume(): Internal.ImmutableBox;
        get volume(): Internal.GridAlignedBB;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class CodingErrorAction {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        static readonly REPORT : Internal.CodingErrorAction;
        static readonly IGNORE : Internal.CodingErrorAction;
        static readonly REPLACE : Internal.CodingErrorAction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ResourceManagerReloadListener implements Internal.PreparableReloadListener {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class EndimationKeyframe implements Internal.Comparable<Internal.EndimationKeyframe> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        apply(arg0: Internal.EndimationInterpolator$VecConsumer, arg1: Internal.EndimationKeyframe[], arg2: number, arg3: number, arg4: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        compareTo(arg0: Internal.EndimationKeyframe): number;
        compareTo(arg0: object): number;
        notify(): void;
        readonly preX : () => number;
        readonly preY : () => number;
        static readonly CODEC : Internal.Codec<Internal.EndimationKeyframe>;
        readonly preZ : () => number;
        static readonly PRE_POST_CODEC : Internal.Codec<Internal.EndimationKeyframe$Transform>;
        readonly postZ : () => number;
        readonly interpolator : Internal.ConfiguredEndimationInterpolator<object, object>;
        readonly postX : () => number;
        readonly postY : () => number;
        readonly time : number;
        static readonly PRE_AND_POST_CODEC : Internal.Codec<Internal.Pair<Internal.EndimationKeyframe$Transform, Internal.EndimationKeyframe$Transform>>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Reference2ByteFunction <K> implements it.unimi.dsi.fastutil.Function<K, number>, Internal.ToIntFunction<K> {
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        getByte(arg0: object): number;
        andThenShort(arg0: Internal.Byte2ShortFunction): Internal.Reference2ShortFunction<K>;
        composeByte(arg0: Internal.Byte2ReferenceFunction<K>): Internal.Byte2ByteFunction;
        andThenInt(arg0: Internal.Byte2IntFunction): Internal.Reference2IntFunction<K>;
        composeReference<T>(arg0: (arg0: T) => K): Internal.Reference2ByteFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: K) => T;
        put(arg0: K, arg1: number): number;
        put(arg0: K, arg1: number): number;
        put(arg0: object, arg1: object): object;
        remove(arg0: object): number;
        remove(arg0: object): object;
        defaultReturnValue(): number;
        defaultReturnValue(arg0: number): void;
        andThenDouble(arg0: Internal.Byte2DoubleFunction): Internal.Reference2DoubleFunction<K>;
        andThenObject<T>(arg0: Internal.Byte2ObjectFunction<T>): (arg0: K) => T;
        get(arg0: object): object;
        get(arg0: object): number;
        andThenLong(arg0: Internal.Byte2LongFunction): Internal.Reference2LongFunction<K>;
        composeLong(arg0: Internal.Long2ReferenceFunction<K>): Internal.Long2ByteFunction;
        removeByte(arg0: object): number;
        andThenByte(arg0: Internal.Byte2ByteFunction): Internal.Reference2ByteFunction<K>;
        andThenFloat(arg0: Internal.Byte2FloatFunction): Internal.Reference2FloatFunction<K>;
        applyAsInt(arg0: K): number;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        composeInt(arg0: Internal.Int2ReferenceFunction<K>): Internal.Int2ByteFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2ReferenceFunction<K>): Internal.Float2ByteFunction;
        andThenChar(arg0: Internal.Byte2CharFunction): Internal.Reference2CharFunction<K>;
        composeObject<T>(arg0: (arg0: T) => K): Internal.Object2ByteFunction<T>;
        size(): number;
        composeShort(arg0: Internal.Short2ReferenceFunction<K>): Internal.Short2ByteFunction;
        andThenReference<T>(arg0: Internal.Byte2ReferenceFunction<T>): (arg0: K) => T;
        composeChar(arg0: Internal.Char2ReferenceFunction<K>): Internal.Char2ByteFunction;
        composeDouble(arg0: Internal.Double2ReferenceFunction<K>): Internal.Double2ByteFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class PermissionCollection implements Internal.Serializable {
        add(arg0: Internal.Permission): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        elementsAsStream(): Internal.Stream<Internal.Permission>;
        isReadOnly(): boolean;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        elements(): Internal.Enumeration<Internal.Permission>;
        toString(): string;
        implies(arg0: Internal.Permission): boolean;
        notify(): void;
        setReadOnly(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Object2FloatFunction <K> implements it.unimi.dsi.fastutil.Function<K, number>, Internal.ToDoubleFunction<K> {
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        applyAsDouble(arg0: K): number;
        andThenShort(arg0: Internal.Float2ShortFunction): Internal.Object2ShortFunction<K>;
        composeByte(arg0: Internal.Byte2ObjectFunction<K>): Internal.Byte2FloatFunction;
        getFloat(arg0: object): number;
        andThenInt(arg0: Internal.Float2IntFunction): Internal.Object2IntFunction<K>;
        composeReference<T>(arg0: (arg0: T) => K): Internal.Reference2FloatFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: K) => T;
        put(arg0: K, arg1: number): number;
        put(arg0: K, arg1: number): number;
        put(arg0: object, arg1: object): object;
        remove(arg0: object): number;
        remove(arg0: object): object;
        defaultReturnValue(): number;
        defaultReturnValue(arg0: number): void;
        andThenDouble(arg0: Internal.Float2DoubleFunction): Internal.Object2DoubleFunction<K>;
        andThenObject<T>(arg0: Internal.Float2ObjectFunction<T>): (arg0: K) => T;
        get(arg0: object): object;
        get(arg0: object): number;
        andThenLong(arg0: Internal.Float2LongFunction): Internal.Object2LongFunction<K>;
        composeLong(arg0: Internal.Long2ObjectFunction<K>): Internal.Long2FloatFunction;
        andThenByte(arg0: Internal.Float2ByteFunction): Internal.Object2ByteFunction<K>;
        andThenFloat(arg0: Internal.Float2FloatFunction): Internal.Object2FloatFunction<K>;
        removeFloat(arg0: object): number;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        composeInt(arg0: Internal.Int2ObjectFunction<K>): Internal.Int2FloatFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2ObjectFunction<K>): Internal.Float2FloatFunction;
        andThenChar(arg0: Internal.Float2CharFunction): Internal.Object2CharFunction<K>;
        composeObject<T>(arg0: (arg0: T) => K): Internal.Object2FloatFunction<T>;
        size(): number;
        composeShort(arg0: Internal.Short2ObjectFunction<K>): Internal.Short2FloatFunction;
        andThenReference<T>(arg0: Internal.Float2ReferenceFunction<T>): (arg0: K) => T;
        composeChar(arg0: Internal.Char2ObjectFunction<K>): Internal.Char2FloatFunction;
        composeDouble(arg0: Internal.Double2ObjectFunction<K>): Internal.Double2FloatFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Rarity extends Internal.Enum<Internal.Rarity> implements Internal.IExtensibleEnum {
        init(): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(arg0: string): Internal.Rarity;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.Rarity[];
        name(): string;
        static create(arg0: string, arg1: Internal.ChatFormatting): Internal.Rarity;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly RARE : Internal.Rarity;
        static readonly EPIC : Internal.Rarity;
        static readonly UNCOMMON : Internal.Rarity;
        static readonly COMMON : Internal.Rarity;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class IdFunctionObject extends Internal.BaseFunction {
        isSealed(): boolean;
        static redefineProperty(obj: Internal.Scriptable, name: string, isConst: boolean): void;
        putConst(name: string, start: Internal.Scriptable, value: object): void;
        static getArrayPrototype(scope: Internal.Scriptable): Internal.Scriptable;
        construct(cx: Internal.Context, scope: Internal.Scriptable, args: object[]): Internal.Scriptable;
        put(key: Internal.Symbol, start: Internal.Scriptable, value: object): void;
        put(name: string, start: Internal.Scriptable, value: object): void;
        put(index: number, start: Internal.Scriptable, value: object): void;
        defineOwnProperties(cx: Internal.Context, props: Internal.ScriptableObject): void;
        static defineProperty(destination: Internal.Scriptable, propertyName: string, value: object, attributes: number): void;
        defineProperty(key: Internal.Symbol, value: object, attributes: number): void;
        defineProperty(propertyName: string, value: object, attributes: number): void;
        defineProperty(propertyName: string, delegateTo: object, getter: Internal.Method, setter: Internal.Method, attributes: number): void;
        hasPrototypeMap(): boolean;
        setGetterOrSetter(name: string, index: number, getterOrSetter: Internal.Callable, isSetter: boolean): void;
        avoidObjectDetection(): boolean;
        has(key: Internal.Symbol, start: Internal.Scriptable): boolean;
        has(name: string, start: Internal.Scriptable): boolean;
        has(index: number, start: Internal.Scriptable): boolean;
        getAttributes(name: string): number;
        getAttributes(key: Internal.Symbol): number;
        getAttributes(index: number): number;
        hasInstance(instance: Internal.Scriptable): boolean;
        hasTag(tag: object): boolean;
        getAssociatedValue(key: object): object;
        execIdCall(f: Internal.IdFunctionObject, cx: Internal.Context, scope: Internal.Scriptable, thisObj: Internal.Scriptable, args: object[]): object;
        static getPropertyIds(obj: Internal.Scriptable): object[];
        static hasProperty(obj: Internal.Scriptable, key: Internal.Symbol): boolean;
        static hasProperty(obj: Internal.Scriptable, index: number): boolean;
        static hasProperty(obj: Internal.Scriptable, name: string): boolean;
        size(): number;
        initPrototypeMethod(tag: object, id: number, key: Internal.Symbol, functionName: string, arity: number): Internal.IdFunctionObject;
        initPrototypeMethod(tag: object, id: number, propertyName: string, functionName: string, arity: number): Internal.IdFunctionObject;
        initPrototypeMethod(tag: object, id: number, name: string, arity: number): Internal.IdFunctionObject;
        defineOwnProperty(cx: Internal.Context, key: object, desc: Internal.ScriptableObject): void;
        initPrototypeValue(id: number, key: Internal.Symbol, value: object, attributes: number): void;
        initPrototypeValue(id: number, name: string, value: object, attributes: number): void;
        static getFunctionPrototype(scope: Internal.Scriptable): Internal.Scriptable;
        preventExtensions(): void;
        static callMethod(obj: Internal.Scriptable, methodName: string, args: object[]): object;
        static callMethod(cx: Internal.Context, obj: Internal.Scriptable, methodName: string, args: object[]): object;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        addAsProperty(target: Internal.Scriptable): void;
        static getTopScopeValue(scope: Internal.Scriptable, key: object): object;
        initPrototypeConstructor(f: Internal.IdFunctionObject): void;
        notifyAll(): void;
        methodId(): number;
        sealObject(): void;
        setAttributes(name: string, attributes: number): void;
        setAttributes(key: Internal.Symbol, attributes: number): void;
        setAttributes(index: number, attributes: number): void;
        static putProperty(obj: Internal.Scriptable, index: number, value: object): void;
        static putProperty(obj: Internal.Scriptable, name: string, value: object): void;
        static putProperty(obj: Internal.Scriptable, key: Internal.Symbol, value: object): void;
        delete(key: Internal.Symbol): void;
        delete(name: string): void;
        delete(index: number): void;
        notify(): void;
        associateValue(key: object, value: object): object;
        static deleteProperty(obj: Internal.Scriptable, name: string): boolean;
        static deleteProperty(obj: Internal.Scriptable, index: number): boolean;
        unknown(): Internal.RuntimeException;
        static getObjectPrototype(scope: Internal.Scriptable): Internal.Scriptable;
        isExtensible(): boolean;
        markAsConstructor(prototypeProperty: Internal.Scriptable): void;
        exportAsScopeProperty(): void;
        hashCode(): number;
        isConst(name: string): boolean;
        get(name: string, start: Internal.Scriptable): object;
        get(key: Internal.Symbol, start: Internal.Scriptable): object;
        get(index: number, start: Internal.Scriptable): object;
        get(key: object): object;
        static putConstProperty(obj: Internal.Scriptable, name: string, value: object): void;
        getGetterOrSetter(name: string, index: number, isSetter: boolean): object;
        static getTopLevelScope(obj: Internal.Scriptable): Internal.Scriptable;
        static getProperty(obj: Internal.Scriptable, key: Internal.Symbol): object;
        static getProperty(obj: Internal.Scriptable, index: number): object;
        static getProperty(obj: Internal.Scriptable, name: string): object;
        initFunction(name: string, scope: Internal.Scriptable): void;
        activatePrototypeMap(maxPrototypeId: number): void;
        isEmpty(): boolean;
        static getClassPrototype(scope: Internal.Scriptable, className: string): Internal.Scriptable;
        createObject(cx: Internal.Context, scope: Internal.Scriptable): Internal.Scriptable;
        exportAsJSClass(maxPrototypeId: number, scope: Internal.Scriptable, sealed: boolean): Internal.IdFunctionObject;
        call(cx: Internal.Context, scope: Internal.Scriptable, thisObj: Internal.Scriptable, args: object[]): object;
        defineConst(name: string, start: Internal.Scriptable): void;
        equals(arg0: object): boolean;
        static defineConstProperty(destination: Internal.Scriptable, propertyName: string): void;
        toString(): string;
        static getGeneratorFunctionPrototype(scope: Internal.Scriptable): Internal.Scriptable;
        static readonly DONTENUM : 2;
        static readonly CONST : 13;
        static readonly NOT_FOUND : object;
        static readonly UNINITIALIZED_CONST : 8;
        static readonly EMPTY : 0;
        static readonly READONLY : 1;
        static readonly PERMANENT : 4;
        set parentScope(m: Internal.Scriptable);
        get ids(): object[];
        get allIds(): object[];
        get arity(): number;
        get functionName(): string;
        get externalArrayLength(): object;
        set immunePrototypeProperty(value: object);
        get externalArrayData(): Internal.ExternalArrayData;
        get className(): string;
        get parentScope(): Internal.Scriptable;
        set externalArrayData(array: Internal.ExternalArrayData);
        get typeOf(): string;
        get prototype(): Internal.Scriptable;
        get tag(): object;
        set prototype(m: Internal.Scriptable);
        get length(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class URI implements Internal.Comparable<Internal.URI>, Internal.Serializable {
        toASCIIString(): string;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        resolve(arg0: string): Internal.URI;
        resolve(arg0: Internal.URI): Internal.URI;
        isOpaque(): boolean;
        notifyAll(): void;
        compareTo(arg0: Internal.URI): number;
        compareTo(arg0: object): number;
        notify(): void;
        hashCode(): number;
        normalize(): Internal.URI;
        static create(arg0: string): Internal.URI;
        relativize(arg0: Internal.URI): Internal.URI;
        toURL(): Internal.URL;
        parseServerAuthority(): Internal.URI;
        equals(arg0: object): boolean;
        isAbsolute(): boolean;
        toString(): string;
        get rawAuthority(): string;
        get path(): string;
        get query(): string;
        get host(): string;
        get scheme(): string;
        get authority(): string;
        get rawFragment(): string;
        get rawUserInfo(): string;
        get rawSchemeSpecificPart(): string;
        get rawQuery(): string;
        get port(): number;
        get fragment(): string;
        get rawPath(): string;
        get userInfo(): string;
        get schemeSpecificPart(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class Level extends Internal.CapabilityProvider<Internal.Level> implements Internal.LevelAccessor, Internal.AutoCloseable, Internal.IForgeLevel, Internal.EnhancedCelestialsWorldData, Internal.LevelKJS, Internal.ChunkRandomSource, Internal.BlockEntityGetter, Internal.LevelHeightAccessor, Internal.ExtendedWorld {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        getChunkAtImmediately(arg0: number, arg1: number): Internal.LevelChunk;
        notifyAll(): void;
        areCapsCompatible(arg0: Internal.CapabilityDispatcher): boolean;
        getLoadedExistingBlockEntity(pos: BlockPos): Internal.BlockEntity;
        addFreshBlockEntities(arg0: Internal.Collection<Internal.BlockEntity>): void;
        asKJS(): object;
        notify(): void;
        reviveCaps(): void;
        markAndNotifyBlock(arg0: BlockPos, arg1: Internal.LevelChunk, arg2: Internal.BlockState, arg3: Internal.BlockState, arg4: number, arg5: number): void;
        invalidateCaps(): void;
        getAnyChunkImmediately(arg0: number, arg1: number): Internal.ChunkAccess;
        hashCode(): number;
        increaseMaxEntityRadius(arg0: number): number;
        equals(arg0: object): boolean;
        redirect$zom000$redirectTick(blockEntity: Internal.TickingBlockEntity): void;
        isAreaLoaded(arg0: BlockPos, arg1: number): boolean;
        toString(): string;
        getRandomPosInChunk(x: number, y: number, z: number, mask: number, out: Internal.BlockPos$MutableBlockPos): void;
        close(): void;
        restoringBlockSnapshots : boolean;
        capturedBlockSnapshots : Internal.ArrayList<Internal.BlockSnapshot>;
        captureBlockSnapshots : boolean;
        get maxEntityRadius(): number;
        get lunarContext(): Internal.LunarContext;
        set lunarContext(arg0: Internal.LunarContext);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ServerWorldAccessor {
        get entityManager(): Internal.PersistentEntitySectionManager<Internal.Entity>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class RayTraceResultJS {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        readonly fromEntity : Internal.EntityJS;
        readonly distance : number;
        hitX : number;
        hitY : number;
        hitZ : number;
        facing : Internal.Direction;
        block : Internal.BlockContainerJS;
        readonly type : string;
        entity : Internal.EntityJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class StandardLevel extends Internal.Enum<Internal.StandardLevel> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static getStandardLevel(intLevel: number): Internal.StandardLevel;
        static valueOf(name: string): Internal.StandardLevel;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.StandardLevel[];
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        intLevel(): number;
        notify(): void;
        ordinal(): number;
        static readonly TRACE : Internal.StandardLevel;
        static readonly ALL : Internal.StandardLevel;
        static readonly ERROR : Internal.StandardLevel;
        static readonly INFO : Internal.StandardLevel;
        static readonly FATAL : Internal.StandardLevel;
        static readonly DEBUG : Internal.StandardLevel;
        static readonly OFF : Internal.StandardLevel;
        static readonly WARN : Internal.StandardLevel;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Char2ShortFunction implements it.unimi.dsi.fastutil.Function<string, number>, Internal.IntUnaryOperator {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: string, arg1: number): number;
        andThenShort(arg0: Internal.Short2ShortFunction): Internal.Char2ShortFunction;
        composeByte(arg0: Internal.Byte2CharFunction): Internal.Byte2ShortFunction;
        andThenInt(arg0: Internal.Short2IntFunction): Internal.Char2IntFunction;
        composeReference<T>(arg0: Internal.Reference2CharFunction<T>): Internal.Reference2ShortFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: string) => T;
        andThen(arg0: Internal.IntUnaryOperator): Internal.IntUnaryOperator;
        put(arg0: object, arg1: object): object;
        put(arg0: string, arg1: number): number;
        put(arg0: string, arg1: number): number;
        remove(arg0: string): number;
        remove(arg0: object): object;
        remove(arg0: object): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Short2DoubleFunction): Internal.Char2DoubleFunction;
        andThenObject<T>(arg0: Internal.Short2ObjectFunction<T>): Internal.Char2ObjectFunction<T>;
        get(arg0: object): number;
        get(arg0: object): object;
        get(arg0: string): number;
        andThenLong(arg0: Internal.Short2LongFunction): Internal.Char2LongFunction;
        composeLong(arg0: Internal.Long2CharFunction): Internal.Long2ShortFunction;
        andThenByte(arg0: Internal.Short2ByteFunction): Internal.Char2ByteFunction;
        andThenFloat(arg0: Internal.Short2FloatFunction): Internal.Char2FloatFunction;
        applyAsInt(arg0: number): number;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: string): boolean;
        composeInt(arg0: Internal.Int2CharFunction): Internal.Int2ShortFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2CharFunction): Internal.Float2ShortFunction;
        andThenChar(arg0: Internal.Short2CharFunction): Internal.Char2CharFunction;
        composeObject<T>(arg0: Internal.Object2CharFunction<T>): Internal.Object2ShortFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => string): (arg0: T) => number;
        compose(arg0: Internal.IntUnaryOperator): Internal.IntUnaryOperator;
        composeShort(arg0: Internal.Short2CharFunction): Internal.Short2ShortFunction;
        andThenReference<T>(arg0: Internal.Short2ReferenceFunction<T>): Internal.Char2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2CharFunction): Internal.Char2ShortFunction;
        composeDouble(arg0: Internal.Double2CharFunction): Internal.Double2ShortFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class DistancePredicate {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Endimation$PartKeyframes$Builder {
        rotate(arg0: Internal.EndimationKeyframe[]): Internal.Endimation$PartKeyframes$Builder;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        offset(arg0: Internal.EndimationKeyframe[]): Internal.Endimation$PartKeyframes$Builder;
        build(): Internal.Endimation$PartKeyframes;
        pos(arg0: Internal.EndimationKeyframe[]): Internal.Endimation$PartKeyframes$Builder;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        scale(arg0: Internal.EndimationKeyframe[]): Internal.Endimation$PartKeyframes$Builder;
        toString(): string;
        static partKeyframes(): Internal.Endimation$PartKeyframes$Builder;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class FluidTagInput implements Internal.Predicate<Internal.FluidStack> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        or(arg0: (arg0: T) => boolean): (arg0: T) => boolean;
        static read(arg0: Internal.FriendlyByteBuf): Internal.FluidTagInput;
        getRandomizedExampleStack(arg0: number): Internal.FluidStack;
        test(arg0: Internal.FluidStack): boolean;
        test(arg0: object): boolean;
        notifyAll(): void;
        extractFrom(arg0: Internal.IFluidHandler, arg1: Internal.IFluidHandler$FluidAction): boolean;
        notify(): void;
        serialize(): Internal.JsonElement;
        and(arg0: (arg0: T) => boolean): (arg0: T) => boolean;
        negate(): (arg0: T) => boolean;
        hashCode(): number;
        equals(arg0: object): boolean;
        testIgnoringAmount(arg0: Internal.FluidStack): boolean;
        toString(): string;
        withAmount(arg0: number): Internal.FluidTagInput;
        write(arg0: Internal.FriendlyByteBuf): void;
        static deserialize(arg0: Internal.JsonElement): Internal.FluidTagInput;
        get matchingFluidStacks(): Internal.List<Internal.FluidStack>;
        get amount(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class LootContext$EntityTarget extends Internal.Enum<Internal.LootContext$EntityTarget> implements Internal.EntityTargetKJS {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(arg0: string): Internal.LootContext$EntityTarget;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.LootContext$EntityTarget[];
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly DIRECT_KILLER : Internal.LootContext$EntityTarget;
        static readonly KILLER_PLAYER : Internal.LootContext$EntityTarget;
        static readonly KILLER : Internal.LootContext$EntityTarget;
        static readonly THIS : Internal.LootContext$EntityTarget;
        get nameKJS(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ICapabilityProvider {
        getCapability<T>(arg0: Internal.Capability<T>, arg1: Internal.Direction): Internal.LazyOptional<T>;
        getCapability<T>(arg0: Internal.Capability<T>): Internal.LazyOptional<T>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface LongSupplier {
        get asLong(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Float2FloatFunction implements it.unimi.dsi.fastutil.Function<number, number>, Internal.DoubleUnaryOperator {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: number, arg1: number): number;
        getOrDefault(arg0: object, arg1: number): number;
        applyAsDouble(arg0: number): number;
        andThenShort(arg0: Internal.Float2ShortFunction): Internal.Float2ShortFunction;
        composeByte(arg0: Internal.Byte2FloatFunction): Internal.Byte2FloatFunction;
        andThenInt(arg0: Internal.Float2IntFunction): Internal.Float2IntFunction;
        composeReference<T>(arg0: Internal.Reference2FloatFunction<T>): Internal.Reference2FloatFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: number) => T;
        andThen(arg0: Internal.DoubleUnaryOperator): Internal.DoubleUnaryOperator;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: number): number;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: object): object;
        remove(arg0: object): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Float2DoubleFunction): Internal.Float2DoubleFunction;
        andThenObject<T>(arg0: Internal.Float2ObjectFunction<T>): Internal.Float2ObjectFunction<T>;
        get(arg0: object): number;
        get(arg0: object): object;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Float2LongFunction): Internal.Float2LongFunction;
        composeLong(arg0: Internal.Long2FloatFunction): Internal.Long2FloatFunction;
        andThenByte(arg0: Internal.Float2ByteFunction): Internal.Float2ByteFunction;
        andThenFloat(arg0: Internal.Float2FloatFunction): Internal.Float2FloatFunction;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2FloatFunction): Internal.Int2FloatFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2FloatFunction): Internal.Float2FloatFunction;
        andThenChar(arg0: Internal.Float2CharFunction): Internal.Float2CharFunction;
        composeObject<T>(arg0: Internal.Object2FloatFunction<T>): Internal.Object2FloatFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => number;
        compose(arg0: Internal.DoubleUnaryOperator): Internal.DoubleUnaryOperator;
        composeShort(arg0: Internal.Short2FloatFunction): Internal.Short2FloatFunction;
        andThenReference<T>(arg0: Internal.Float2ReferenceFunction<T>): Internal.Float2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2FloatFunction): Internal.Char2FloatFunction;
        composeDouble(arg0: Internal.Double2FloatFunction): Internal.Double2FloatFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class MinMaxBounds$Ints extends Internal.MinMaxBounds<number> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class BlockBehaviour$Properties {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        lootFrom(arg0: () => Internal.Block): Internal.BlockBehaviour$Properties;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class AbstractClientPlayer extends Internal.Player {
        backpackedMoved(): boolean;
        handler$zbc000$onFallFlying(arg0: number, arg1: number, arg2: number, arg3: Internal.CallbackInfo): void;
        onEndimationEnd(arg0: Internal.PlayableEndimation, arg1: Internal.PlayableEndimation): void;
        canBeRiddenInWater(arg0: Internal.Entity): boolean;
        handler$zzo000$tickHead(arg0: Internal.CallbackInfo): void;
        isEndimationPlaying(arg0: Internal.PlayableEndimation): boolean;
        isActive(): boolean;
        handler$zgm001$tick(arg0: Internal.CallbackInfo): void;
        create$callSpawnItemParticles(arg0: Internal.ItemStack, arg1: number): void;
        handler$zjn000$onUpdateFluidOnEyes(arg0: Internal.CallbackInfo): void;
        changeDimension(arg0: Internal.ServerLevel, arg1: Internal.ITeleporter): Internal.Entity;
        serializeNBT(): Internal.Tag;
        serializeNBT(): Internal.CompoundTag;
        invalidateCaps(): void;
        foodEatenKJS(is: Internal.ItemStack): void;
        revive(): void;
        getDigSpeed(arg0: Internal.BlockState, arg1: BlockPos): number;
        canUpdate(): boolean;
        canUpdate(arg0: boolean): void;
        handler$bgc000$tryShortcutFluidPushing(tag: net.minecraft.tags.Tag<any>, speed: number, cir: Internal.CallbackInfoReturnable<any>, box: Internal.AABB, x1: number, x2: number, y1: number, y2: number, z1: number, z2: number, zero: number): void;
        resetEndimation(): void;
        areCapsCompatible(arg0: Internal.CapabilityDispatcher): boolean;
        getEyeHeightAccess(arg0: Internal.Pose, arg1: Internal.EntityDimensions): number;
        reviveCaps(): void;
        lithiumOnBlockCacheDeleted(): void;
        handler$zgd000$diet$constructPlayer(arg0: Internal.CallbackInfo): void;
        canRiderInteract(): boolean;
        handler$zbc000$locateAmmo(arg0: Internal.ItemStack, arg1: Internal.CallbackInfoReturnable<any>, arg2: Internal.Predicate<any>): void;
        getEntries(arg0: boolean): Internal.Set<any>;
        onAddedToWorld(): void;
        handler$zcp000$read(arg0: Internal.CompoundTag, arg1: Internal.CallbackInfo): void;
        canTrample(arg0: Internal.BlockState, arg1: BlockPos, arg2: number): boolean;
        getClassification(arg0: boolean): Internal.MobCategory;
        onEndimationStart(arg0: Internal.PlayableEndimation, arg1: Internal.PlayableEndimation): void;
        isNoEndimationPlaying(): boolean;
        lithiumSetClimbingMobCachingSectionUpdateBehavior(listenForCachedBlockChanges: boolean): void;
        shouldRiderSit(): boolean;
        getPickedResult(arg0: Internal.HitResult): Internal.ItemStack;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        handler$zeg000$onIsScoping(arg0: Internal.CallbackInfoReturnable<any>): void;
        notifyAll(): void;
        lithiumOnEquipmentChanged(): void;
        lithiumOnBlockCacheSet(newState: Internal.BlockState): void;
        handler$zjn000$onUpdateFluidOnEyeAssign(arg0: Internal.CallbackInfo): void;
        notify(): void;
        handler$zzo000$moveStep(arg0: Internal.MoverType, arg1: Vec3, arg2: Internal.CallbackInfo): void;
        endimateTick(): void;
        isDirty(): boolean;
        hashCode(): number;
        isAddedToWorld(): boolean;
        addListener(listener: Internal.NearbyEntityListener): void;
        onRemovedFromWorld(): void;
        handler$zed000$onGetFieldOfViewModifier(arg0: Internal.CallbackInfoReturnable<any>): void;
        isMultipartEntity(): boolean;
        deserializeNBT(arg0: Internal.CompoundTag): void;
        deserializeNBT(arg0: Internal.Tag): void;
        curePotionEffects(arg0: Internal.ItemStack): boolean;
        clean(): void;
        asKJS(): object;
        getValue(arg0: Internal.TrackedData<any>): object;
        shouldRiderFaceForward(arg0: Internal.Player): boolean;
        setValue(arg0: Internal.TrackedData<any>, arg1: object): void;
        equals(arg0: object): boolean;
        toString(): string;
        getBackpackedInventory(): Internal.BackpackInventory;
        refreshDisplayName(): void;
        backpackedInventory : Internal.BackpackInventory;
        static readonly PERSISTED_NBT_TAG : "PlayerPersisted";
        set citadelEntityData(arg0: Internal.CompoundTag);
        get cachedFeetBlockState(): Internal.BlockState;
        get pos(): Internal.Position;
        get persistentDataKJS(): Internal.CompoundTag;
        get endimatedState(): Internal.Endimatable$EndimatedState;
        set forcedPose(arg0: Internal.Pose);
        get effectHandler(): Internal.EndimationEffectHandler;
        get dataEffectColorId_$md$85ada3$1(): Internal.EntityDataAccessor<any>;
        set animationTick(arg0: number);
        get citadelEntityData(): Internal.CompoundTag;
        get listener(): Internal.NearbyEntityListenerMulti;
        get isInsidePortal(): boolean;
        get persistentData(): Internal.CompoundTag;
        get remainingFireTicks(): number;
        get stagesRawKJS(): Internal.Stages;
        get dataMap(): Map<any, any>;
        get stages(): Internal.Stages;
        get entityChangeListener(): Internal.EntityInLevelCallback;
        set dataMap(arg0: Map<any, any>);
        get dataEffectAmbienceId_$md$85ada3$0(): Internal.EntityDataAccessor<any>;
        get lastPos(): BlockPos;
        get parts(): Internal.PartEntity<object>[];
        get playingEndimation(): Internal.PlayableEndimation;
        get dirtyEntries(): Internal.Set<any>;
        set playingEndimation(arg0: Internal.PlayableEndimation);
        get animationTick(): number;
        set remainingFireTicks(arg0: number);
        get forcedPose(): Internal.Pose;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Long2ObjectFunction <V> implements it.unimi.dsi.fastutil.Function<number, V>, Internal.LongFunction<V> {
        getOrDefault(arg0: object, arg1: V): V;
        getOrDefault(arg0: number, arg1: V): V;
        andThenShort(arg0: Internal.Object2ShortFunction<V>): Internal.Long2ShortFunction;
        composeByte(arg0: Internal.Byte2LongFunction): Internal.Byte2ObjectFunction<V>;
        andThenInt(arg0: Internal.Object2IntFunction<V>): Internal.Long2IntFunction;
        composeReference<T>(arg0: Internal.Reference2LongFunction<T>): (arg0: T) => V;
        put(arg0: number, arg1: V): V;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: V): V;
        remove(arg0: number): V;
        remove(arg0: object): V;
        defaultReturnValue(): V;
        defaultReturnValue(arg0: V): void;
        andThenDouble(arg0: Internal.Object2DoubleFunction<V>): Internal.Long2DoubleFunction;
        andThenObject<T>(arg0: (arg0: V) => T): Internal.Long2ObjectFunction<T>;
        get(arg0: object): V;
        get(arg0: number): V;
        andThenLong(arg0: Internal.Object2LongFunction<V>): Internal.Long2LongFunction;
        composeLong(arg0: Internal.Long2LongFunction): Internal.Long2ObjectFunction<V>;
        andThenByte(arg0: Internal.Object2ByteFunction<V>): Internal.Long2ByteFunction;
        andThenFloat(arg0: Internal.Object2FloatFunction<V>): Internal.Long2FloatFunction;
        apply(arg0: number): V;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2LongFunction): Internal.Int2ObjectFunction<V>;
        clear(): void;
        composeFloat(arg0: Internal.Float2LongFunction): Internal.Float2ObjectFunction<V>;
        andThenChar(arg0: Internal.Object2CharFunction<V>): Internal.Long2CharFunction;
        composeObject<T>(arg0: Internal.Object2LongFunction<T>): (arg0: T) => V;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => V;
        composeShort(arg0: Internal.Short2LongFunction): Internal.Short2ObjectFunction<V>;
        andThenReference<T>(arg0: (arg0: V) => T): Internal.Long2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2LongFunction): Internal.Char2ObjectFunction<V>;
        composeDouble(arg0: Internal.Double2LongFunction): Internal.Double2ObjectFunction<V>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Marker implements Internal.Serializable {
        hasParents(): boolean;
        hashCode(): number;
        equals(obj: object): boolean;
        isInstanceOf(m: Internal.Marker): boolean;
        isInstanceOf(name: string): boolean;
        addParents(markers: Internal.Marker[]): Internal.Marker;
        remove(marker: Internal.Marker): boolean;
        get parents(): Internal.Marker[];
        set parents(markers: Internal.Marker[]);
        get name(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class LevelChunkTicks <T> implements Internal.SerializableTickContainer<T>, Internal.TickContainerAccess<T> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class CustomTranslationTextComponent extends Internal.TranslatableComponent {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        static readonly CODEC : Internal.Codec<Internal.CustomTranslationTextComponent>;
        static readonly DEFAULT : Internal.CustomTranslationTextComponent;
        get string(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Products$P7 <F, T1, T2, T3, T4, T5, T6, T7> {
        t4(): Internal.App<F, T4>;
        t5(): Internal.App<F, T5>;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        t6(): Internal.App<F, T6>;
        t7(): Internal.App<F, T7>;
        apply<R>(arg0: Internal.Applicative<F, object>, arg1: Internal.App<F, Internal.Function7<T1, T2, T3, T4, T5, T6, T7, R>>): Internal.App<F, R>;
        apply<R>(arg0: Internal.Applicative<F, object>, arg1: Internal.Function7<T1, T2, T3, T4, T5, T6, T7, R>): Internal.App<F, R>;
        notifyAll(): void;
        notify(): void;
        hashCode(): number;
        and<T8>(arg0: Internal.App<F, T8>): Internal.Products$P8<F, T1, T2, T3, T4, T5, T6, T7, T8>;
        equals(arg0: object): boolean;
        toString(): string;
        t1(): Internal.App<F, T1>;
        t2(): Internal.App<F, T2>;
        t3(): Internal.App<F, T3>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class MethodHandle implements Internal.Constable {
        asCollector(arg0: Internal.Class<object>, arg1: number): Internal.MethodHandle;
        asCollector(arg0: number, arg1: Internal.Class<object>, arg2: number): Internal.MethodHandle;
        asSpreader(arg0: number, arg1: Internal.Class<object>, arg2: number): Internal.MethodHandle;
        asSpreader(arg0: Internal.Class<object>, arg1: number): Internal.MethodHandle;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        withVarargs(arg0: boolean): Internal.MethodHandle;
        invokeExact(arg0: object[]): object;
        notifyAll(): void;
        invoke(arg0: object[]): object;
        type(): Internal.MethodType;
        describeConstable(): Internal.Optional<Internal.MethodHandleDesc>;
        notify(): void;
        bindTo(arg0: object): Internal.MethodHandle;
        asVarargsCollector(arg0: Internal.Class<object>): Internal.MethodHandle;
        asType(arg0: Internal.MethodType): Internal.MethodHandle;
        invokeWithArguments(arg0: object[]): object;
        invokeWithArguments(arg0: Internal.List<object>): object;
        hashCode(): number;
        equals(arg0: object): boolean;
        isVarargsCollector(): boolean;
        asFixedArity(): Internal.MethodHandle;
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class DyeColor extends Internal.Enum<Internal.DyeColor> implements Internal.StringRepresentable, Internal.Color {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        static valueOf(arg0: string): Internal.DyeColor;
        notifyAll(): void;
        static values(): Internal.DyeColor[];
        static getColor(arg0: Internal.ItemStack): Internal.DyeColor;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        name(): string;
        createTextColorKJS(): Internal.TextColor;
        toString(): string;
        specialEquals(o: object, shallow: boolean): boolean;
        ordinal(): number;
        static readonly WHITE : Internal.DyeColor;
        static readonly GRAY : Internal.DyeColor;
        static readonly BLUE : Internal.DyeColor;
        static readonly PURPLE : Internal.DyeColor;
        static readonly GREEN : Internal.DyeColor;
        static readonly RED : Internal.DyeColor;
        static readonly PINK : Internal.DyeColor;
        static readonly LIGHT_GRAY : Internal.DyeColor;
        static readonly LIGHT_BLUE : Internal.DyeColor;
        static readonly LIME : Internal.DyeColor;
        static readonly MAGENTA : Internal.DyeColor;
        static readonly BLACK : Internal.DyeColor;
        static readonly YELLOW : Internal.DyeColor;
        static readonly CYAN : Internal.DyeColor;
        static readonly BROWN : Internal.DyeColor;
        static readonly ORANGE : Internal.DyeColor;
        get rgbKJS(): number;
        get serializeKJS(): string;
        get tag(): Internal.Tags$IOptionalNamedTag<Internal.Item>;
        get hexKJS(): string;
        get argbKJS(): number;
        get fireworkColorKJS(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface MenuAccess <T> {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class PathNavigation {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class SWMRNibbleArray$SaveState {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        readonly data : number[];
        readonly state : number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class TextureAtlas extends Internal.AbstractTexture implements Internal.Tickable {
        restoreLastBlurMipmap(): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        setBlurMipmap(arg0: boolean, arg1: boolean): void;
        hashCode(): number;
        handler$zjg000$stealAtlasData(arg0: Internal.ResourceManager, arg1: Internal.Stream<any>, arg2: Internal.ProfilerFiller, arg3: number, arg4: Internal.CallbackInfoReturnable<any>): void;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        close(): void;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IntBinaryOperator implements Internal.BinaryOperator<number>, java_.util.function_.IntBinaryOperator {
        applyAsInt(arg0: number, arg1: number): number;
        apply(arg0: object, arg1: object): object;
        apply(arg0: number, arg1: number): number;
        apply(arg0: number, arg1: number): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Reference2CharFunction <K> implements it.unimi.dsi.fastutil.Function<K, string>, Internal.ToIntFunction<K> {
        getOrDefault(arg0: object, arg1: string): string;
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: string): string;
        andThenShort(arg0: Internal.Char2ShortFunction): Internal.Reference2ShortFunction<K>;
        removeChar(arg0: object): string;
        composeByte(arg0: Internal.Byte2ReferenceFunction<K>): Internal.Byte2CharFunction;
        andThenInt(arg0: Internal.Char2IntFunction): Internal.Reference2IntFunction<K>;
        composeReference<T>(arg0: (arg0: T) => K): Internal.Reference2CharFunction<T>;
        andThen<T>(arg0: (arg0: string) => T): (arg0: K) => T;
        put(arg0: K, arg1: string): string;
        put(arg0: K, arg1: string): string;
        put(arg0: object, arg1: object): object;
        remove(arg0: object): string;
        remove(arg0: object): object;
        defaultReturnValue(): string;
        defaultReturnValue(arg0: string): void;
        andThenDouble(arg0: Internal.Char2DoubleFunction): Internal.Reference2DoubleFunction<K>;
        andThenObject<T>(arg0: Internal.Char2ObjectFunction<T>): (arg0: K) => T;
        get(arg0: object): object;
        get(arg0: object): string;
        andThenLong(arg0: Internal.Char2LongFunction): Internal.Reference2LongFunction<K>;
        composeLong(arg0: Internal.Long2ReferenceFunction<K>): Internal.Long2CharFunction;
        andThenByte(arg0: Internal.Char2ByteFunction): Internal.Reference2ByteFunction<K>;
        andThenFloat(arg0: Internal.Char2FloatFunction): Internal.Reference2FloatFunction<K>;
        applyAsInt(arg0: K): number;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        composeInt(arg0: Internal.Int2ReferenceFunction<K>): Internal.Int2CharFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2ReferenceFunction<K>): Internal.Float2CharFunction;
        andThenChar(arg0: Internal.Char2CharFunction): Internal.Reference2CharFunction<K>;
        getChar(arg0: object): string;
        composeObject<T>(arg0: (arg0: T) => K): Internal.Object2CharFunction<T>;
        size(): number;
        composeShort(arg0: Internal.Short2ReferenceFunction<K>): Internal.Short2CharFunction;
        andThenReference<T>(arg0: Internal.Char2ReferenceFunction<T>): (arg0: K) => T;
        composeChar(arg0: Internal.Char2ReferenceFunction<K>): Internal.Char2CharFunction;
        composeDouble(arg0: Internal.Double2ReferenceFunction<K>): Internal.Double2CharFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IEventListener {
        listenerName(): string;
        invoke(arg0: Internal.Event): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class DataResult$Instance extends Internal.Enum<Internal.DataResult$Instance> implements Internal.Applicative<Internal.DataResult$Mu, Unknown> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        static values(): Internal.DataResult$Instance[];
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        point<A>(arg0: A): Internal.App<Internal.DataResult$Mu, A>;
        hashCode(): number;
        map<T, R>(arg0: (arg0: T) => R, arg1: Internal.App<Internal.DataResult$Mu, T>): Internal.App<Internal.DataResult$Mu, R>;
        group<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(arg0: Internal.App<F, T1>, arg1: Internal.App<F, T2>, arg2: Internal.App<F, T3>, arg3: Internal.App<F, T4>, arg4: Internal.App<F, T5>, arg5: Internal.App<F, T6>, arg6: Internal.App<F, T7>, arg7: Internal.App<F, T8>, arg8: Internal.App<F, T9>, arg9: Internal.App<F, T10>, arg10: Internal.App<F, T11>): Internal.Products$P11<F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>;
        group<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(arg0: Internal.App<F, T1>, arg1: Internal.App<F, T2>, arg2: Internal.App<F, T3>, arg3: Internal.App<F, T4>, arg4: Internal.App<F, T5>, arg5: Internal.App<F, T6>, arg6: Internal.App<F, T7>, arg7: Internal.App<F, T8>, arg8: Internal.App<F, T9>, arg9: Internal.App<F, T10>): Internal.Products$P10<F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>;
        group<T1, T2, T3, T4, T5, T6, T7, T8, T9>(arg0: Internal.App<F, T1>, arg1: Internal.App<F, T2>, arg2: Internal.App<F, T3>, arg3: Internal.App<F, T4>, arg4: Internal.App<F, T5>, arg5: Internal.App<F, T6>, arg6: Internal.App<F, T7>, arg7: Internal.App<F, T8>, arg8: Internal.App<F, T9>): Internal.Products$P9<F, T1, T2, T3, T4, T5, T6, T7, T8, T9>;
        group<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(arg0: Internal.App<F, T1>, arg1: Internal.App<F, T2>, arg2: Internal.App<F, T3>, arg3: Internal.App<F, T4>, arg4: Internal.App<F, T5>, arg5: Internal.App<F, T6>, arg6: Internal.App<F, T7>, arg7: Internal.App<F, T8>, arg8: Internal.App<F, T9>, arg9: Internal.App<F, T10>, arg10: Internal.App<F, T11>, arg11: Internal.App<F, T12>, arg12: Internal.App<F, T13>, arg13: Internal.App<F, T14>, arg14: Internal.App<F, T15>, arg15: Internal.App<F, T16>): Internal.Products$P16<F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>;
        group<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(arg0: Internal.App<F, T1>, arg1: Internal.App<F, T2>, arg2: Internal.App<F, T3>, arg3: Internal.App<F, T4>, arg4: Internal.App<F, T5>, arg5: Internal.App<F, T6>, arg6: Internal.App<F, T7>, arg7: Internal.App<F, T8>, arg8: Internal.App<F, T9>, arg9: Internal.App<F, T10>, arg10: Internal.App<F, T11>, arg11: Internal.App<F, T12>, arg12: Internal.App<F, T13>, arg13: Internal.App<F, T14>, arg14: Internal.App<F, T15>): Internal.Products$P15<F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>;
        group<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(arg0: Internal.App<F, T1>, arg1: Internal.App<F, T2>, arg2: Internal.App<F, T3>, arg3: Internal.App<F, T4>, arg4: Internal.App<F, T5>, arg5: Internal.App<F, T6>, arg6: Internal.App<F, T7>, arg7: Internal.App<F, T8>, arg8: Internal.App<F, T9>, arg9: Internal.App<F, T10>, arg10: Internal.App<F, T11>, arg11: Internal.App<F, T12>, arg12: Internal.App<F, T13>, arg13: Internal.App<F, T14>): Internal.Products$P14<F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>;
        group<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(arg0: Internal.App<F, T1>, arg1: Internal.App<F, T2>, arg2: Internal.App<F, T3>, arg3: Internal.App<F, T4>, arg4: Internal.App<F, T5>, arg5: Internal.App<F, T6>, arg6: Internal.App<F, T7>, arg7: Internal.App<F, T8>, arg8: Internal.App<F, T9>, arg9: Internal.App<F, T10>, arg10: Internal.App<F, T11>, arg11: Internal.App<F, T12>, arg12: Internal.App<F, T13>): Internal.Products$P13<F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>;
        group<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(arg0: Internal.App<F, T1>, arg1: Internal.App<F, T2>, arg2: Internal.App<F, T3>, arg3: Internal.App<F, T4>, arg4: Internal.App<F, T5>, arg5: Internal.App<F, T6>, arg6: Internal.App<F, T7>, arg7: Internal.App<F, T8>, arg8: Internal.App<F, T9>, arg9: Internal.App<F, T10>, arg10: Internal.App<F, T11>, arg11: Internal.App<F, T12>): Internal.Products$P12<F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>;
        group<T1, T2, T3>(arg0: Internal.App<F, T1>, arg1: Internal.App<F, T2>, arg2: Internal.App<F, T3>): Internal.Products$P3<F, T1, T2, T3>;
        group<T1, T2>(arg0: Internal.App<F, T1>, arg1: Internal.App<F, T2>): Internal.Products$P2<F, T1, T2>;
        group<T1>(arg0: Internal.App<F, T1>): Internal.Products$P1<F, T1>;
        group<T1, T2, T3, T4, T5, T6, T7, T8>(arg0: Internal.App<F, T1>, arg1: Internal.App<F, T2>, arg2: Internal.App<F, T3>, arg3: Internal.App<F, T4>, arg4: Internal.App<F, T5>, arg5: Internal.App<F, T6>, arg6: Internal.App<F, T7>, arg7: Internal.App<F, T8>): Internal.Products$P8<F, T1, T2, T3, T4, T5, T6, T7, T8>;
        group<T1, T2, T3, T4, T5, T6, T7>(arg0: Internal.App<F, T1>, arg1: Internal.App<F, T2>, arg2: Internal.App<F, T3>, arg3: Internal.App<F, T4>, arg4: Internal.App<F, T5>, arg5: Internal.App<F, T6>, arg6: Internal.App<F, T7>): Internal.Products$P7<F, T1, T2, T3, T4, T5, T6, T7>;
        group<T1, T2, T3, T4, T5, T6>(arg0: Internal.App<F, T1>, arg1: Internal.App<F, T2>, arg2: Internal.App<F, T3>, arg3: Internal.App<F, T4>, arg4: Internal.App<F, T5>, arg5: Internal.App<F, T6>): Internal.Products$P6<F, T1, T2, T3, T4, T5, T6>;
        group<T1, T2, T3, T4, T5>(arg0: Internal.App<F, T1>, arg1: Internal.App<F, T2>, arg2: Internal.App<F, T3>, arg3: Internal.App<F, T4>, arg4: Internal.App<F, T5>): Internal.Products$P5<F, T1, T2, T3, T4, T5>;
        group<T1, T2, T3, T4>(arg0: Internal.App<F, T1>, arg1: Internal.App<F, T2>, arg2: Internal.App<F, T3>, arg3: Internal.App<F, T4>): Internal.Products$P4<F, T1, T2, T3, T4>;
        apply2<A, B, R>(arg0: (arg0: A, arg1: B) => R, arg1: Internal.App<F, A>, arg2: Internal.App<F, B>): Internal.App<F, R>;
        apply3<T1, T2, T3, R>(arg0: Internal.Function3<T1, T2, T3, R>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>): Internal.App<F, R>;
        apply4<T1, T2, T3, T4, R>(arg0: Internal.Function4<T1, T2, T3, T4, R>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>): Internal.App<F, R>;
        ap11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R>(arg0: Internal.App<F, Internal.Function11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R>>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>, arg6: Internal.App<F, T6>, arg7: Internal.App<F, T7>, arg8: Internal.App<F, T8>, arg9: Internal.App<F, T9>, arg10: Internal.App<F, T10>, arg11: Internal.App<F, T11>): Internal.App<F, R>;
        ap2<A, B, R>(arg0: Internal.App<Internal.DataResult$Mu, (arg0: A, arg1: B) => R>, arg1: Internal.App<Internal.DataResult$Mu, A>, arg2: Internal.App<Internal.DataResult$Mu, B>): Internal.App<Internal.DataResult$Mu, R>;
        apply5<T1, T2, T3, T4, T5, R>(arg0: Internal.Function5<T1, T2, T3, T4, T5, R>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>): Internal.App<F, R>;
        ap10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>(arg0: Internal.App<F, Internal.Function10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>, arg6: Internal.App<F, T6>, arg7: Internal.App<F, T7>, arg8: Internal.App<F, T8>, arg9: Internal.App<F, T9>, arg10: Internal.App<F, T10>): Internal.App<F, R>;
        ap4<T1, T2, T3, T4, R>(arg0: Internal.App<F, Internal.Function4<T1, T2, T3, T4, R>>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>): Internal.App<F, R>;
        lift2<A, B, R>(arg0: Internal.App<F, (arg0: A, arg1: B) => R>): (arg0: Internal.App<F, A>, arg1: Internal.App<F, B>) => Internal.App<F, R>;
        ap3<T1, T2, T3, R>(arg0: Internal.App<Internal.DataResult$Mu, Internal.Function3<T1, T2, T3, R>>, arg1: Internal.App<Internal.DataResult$Mu, T1>, arg2: Internal.App<Internal.DataResult$Mu, T2>, arg3: Internal.App<Internal.DataResult$Mu, T3>): Internal.App<Internal.DataResult$Mu, R>;
        lift1<A, R>(arg0: Internal.App<Internal.DataResult$Mu, (arg0: A) => R>): (arg0: Internal.App<Internal.DataResult$Mu, A>) => Internal.App<Internal.DataResult$Mu, R>;
        ap6<T1, T2, T3, T4, T5, T6, R>(arg0: Internal.App<F, Internal.Function6<T1, T2, T3, T4, T5, T6, R>>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>, arg6: Internal.App<F, T6>): Internal.App<F, R>;
        static valueOf(arg0: string): Internal.DataResult$Instance;
        ap5<T1, T2, T3, T4, T5, R>(arg0: Internal.App<F, Internal.Function5<T1, T2, T3, T4, T5, R>>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>): Internal.App<F, R>;
        lift6<T1, T2, T3, T4, T5, T6, R>(arg0: Internal.App<F, Internal.Function6<T1, T2, T3, T4, T5, T6, R>>): Internal.Function6<Internal.App<F, T1>, Internal.App<F, T2>, Internal.App<F, T3>, Internal.App<F, T4>, Internal.App<F, T5>, Internal.App<F, T6>, Internal.App<F, R>>;
        ap8<T1, T2, T3, T4, T5, T6, T7, T8, R>(arg0: Internal.App<F, Internal.Function8<T1, T2, T3, T4, T5, T6, T7, T8, R>>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>, arg6: Internal.App<F, T6>, arg7: Internal.App<F, T7>, arg8: Internal.App<F, T8>): Internal.App<F, R>;
        ap7<T1, T2, T3, T4, T5, T6, T7, R>(arg0: Internal.App<F, Internal.Function7<T1, T2, T3, T4, T5, T6, T7, R>>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>, arg6: Internal.App<F, T6>, arg7: Internal.App<F, T7>): Internal.App<F, R>;
        lift5<T1, T2, T3, T4, T5, R>(arg0: Internal.App<F, Internal.Function5<T1, T2, T3, T4, T5, R>>): Internal.Function5<Internal.App<F, T1>, Internal.App<F, T2>, Internal.App<F, T3>, Internal.App<F, T4>, Internal.App<F, T5>, Internal.App<F, R>>;
        lift4<T1, T2, T3, T4, R>(arg0: Internal.App<F, Internal.Function4<T1, T2, T3, T4, R>>): Internal.Function4<Internal.App<F, T1>, Internal.App<F, T2>, Internal.App<F, T3>, Internal.App<F, T4>, Internal.App<F, R>>;
        ap9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>(arg0: Internal.App<F, Internal.Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>, arg6: Internal.App<F, T6>, arg7: Internal.App<F, T7>, arg8: Internal.App<F, T8>, arg9: Internal.App<F, T9>): Internal.App<F, R>;
        lift3<T1, T2, T3, R>(arg0: Internal.App<F, Internal.Function3<T1, T2, T3, R>>): Internal.Function3<Internal.App<F, T1>, Internal.App<F, T2>, Internal.App<F, T3>, Internal.App<F, R>>;
        apply6<T1, T2, T3, T4, T5, T6, R>(arg0: Internal.Function6<T1, T2, T3, T4, T5, T6, R>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>, arg6: Internal.App<F, T6>): Internal.App<F, R>;
        apply7<T1, T2, T3, T4, T5, T6, T7, R>(arg0: Internal.Function7<T1, T2, T3, T4, T5, T6, T7, R>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>, arg6: Internal.App<F, T6>, arg7: Internal.App<F, T7>): Internal.App<F, R>;
        lift9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>(arg0: Internal.App<F, Internal.Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>>): Internal.Function9<Internal.App<F, T1>, Internal.App<F, T2>, Internal.App<F, T3>, Internal.App<F, T4>, Internal.App<F, T5>, Internal.App<F, T6>, Internal.App<F, T7>, Internal.App<F, T8>, Internal.App<F, T9>, Internal.App<F, R>>;
        apply8<T1, T2, T3, T4, T5, T6, T7, T8, R>(arg0: Internal.Function8<T1, T2, T3, T4, T5, T6, T7, T8, R>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>, arg6: Internal.App<F, T6>, arg7: Internal.App<F, T7>, arg8: Internal.App<F, T8>): Internal.App<F, R>;
        lift8<T1, T2, T3, T4, T5, T6, T7, T8, R>(arg0: Internal.App<F, Internal.Function8<T1, T2, T3, T4, T5, T6, T7, T8, R>>): Internal.Function8<Internal.App<F, T1>, Internal.App<F, T2>, Internal.App<F, T3>, Internal.App<F, T4>, Internal.App<F, T5>, Internal.App<F, T6>, Internal.App<F, T7>, Internal.App<F, T8>, Internal.App<F, R>>;
        apply9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>(arg0: Internal.Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>, arg6: Internal.App<F, T6>, arg7: Internal.App<F, T7>, arg8: Internal.App<F, T8>, arg9: Internal.App<F, T9>): Internal.App<F, R>;
        lift7<T1, T2, T3, T4, T5, T6, T7, R>(arg0: Internal.App<F, Internal.Function7<T1, T2, T3, T4, T5, T6, T7, R>>): Internal.Function7<Internal.App<F, T1>, Internal.App<F, T2>, Internal.App<F, T3>, Internal.App<F, T4>, Internal.App<F, T5>, Internal.App<F, T6>, Internal.App<F, T7>, Internal.App<F, R>>;
        ap<A, R>(arg0: Internal.App<Internal.DataResult$Mu, (arg0: A) => R>, arg1: Internal.App<Internal.DataResult$Mu, A>): Internal.App<Internal.DataResult$Mu, R>;
        ap<A, R>(arg0: (arg0: A) => R, arg1: Internal.App<F, A>): Internal.App<F, R>;
        equals(arg0: object): boolean;
        name(): string;
        ap16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R>(arg0: Internal.App<F, Internal.Function16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R>>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>, arg6: Internal.App<F, T6>, arg7: Internal.App<F, T7>, arg8: Internal.App<F, T8>, arg9: Internal.App<F, T9>, arg10: Internal.App<F, T10>, arg11: Internal.App<F, T11>, arg12: Internal.App<F, T12>, arg13: Internal.App<F, T13>, arg14: Internal.App<F, T14>, arg15: Internal.App<F, T15>, arg16: Internal.App<F, T16>): Internal.App<F, R>;
        toString(): string;
        ap13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R>(arg0: Internal.App<F, Internal.Function13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R>>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>, arg6: Internal.App<F, T6>, arg7: Internal.App<F, T7>, arg8: Internal.App<F, T8>, arg9: Internal.App<F, T9>, arg10: Internal.App<F, T10>, arg11: Internal.App<F, T11>, arg12: Internal.App<F, T12>, arg13: Internal.App<F, T13>): Internal.App<F, R>;
        ap12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R>(arg0: Internal.App<F, Internal.Function12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R>>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>, arg6: Internal.App<F, T6>, arg7: Internal.App<F, T7>, arg8: Internal.App<F, T8>, arg9: Internal.App<F, T9>, arg10: Internal.App<F, T10>, arg11: Internal.App<F, T11>, arg12: Internal.App<F, T12>): Internal.App<F, R>;
        ap15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R>(arg0: Internal.App<F, Internal.Function15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R>>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>, arg6: Internal.App<F, T6>, arg7: Internal.App<F, T7>, arg8: Internal.App<F, T8>, arg9: Internal.App<F, T9>, arg10: Internal.App<F, T10>, arg11: Internal.App<F, T11>, arg12: Internal.App<F, T12>, arg13: Internal.App<F, T13>, arg14: Internal.App<F, T14>, arg15: Internal.App<F, T15>): Internal.App<F, R>;
        ap14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R>(arg0: Internal.App<F, Internal.Function14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R>>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>, arg6: Internal.App<F, T6>, arg7: Internal.App<F, T7>, arg8: Internal.App<F, T8>, arg9: Internal.App<F, T9>, arg10: Internal.App<F, T10>, arg11: Internal.App<F, T11>, arg12: Internal.App<F, T12>, arg13: Internal.App<F, T13>, arg14: Internal.App<F, T14>): Internal.App<F, R>;
        ordinal(): number;
        static readonly INSTANCE : Internal.DataResult$Instance;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ZoneOffset extends Internal.ZoneId implements Internal.TemporalAccessor, Internal.TemporalAdjuster, Internal.Comparable<Internal.ZoneOffset>, Internal.Serializable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        normalized(): Internal.ZoneId;
        notifyAll(): void;
        adjustInto(arg0: Internal.Temporal): Internal.Temporal;
        range(arg0: Internal.TemporalField): Internal.ValueRange;
        compareTo(arg0: Internal.ZoneOffset): number;
        compareTo(arg0: object): number;
        notify(): void;
        static systemDefault(): Internal.ZoneId;
        hashCode(): number;
        static of(arg0: string): Internal.ZoneOffset;
        static of(arg0: string): Internal.ZoneId;
        get(arg0: Internal.TemporalField): number;
        static from(arg0: Internal.TemporalAccessor): Internal.ZoneOffset;
        static from(arg0: Internal.TemporalAccessor): Internal.ZoneId;
        static ofHoursMinutes(arg0: number, arg1: number): Internal.ZoneOffset;
        query<R>(arg0: Internal.TemporalQuery<R>): R;
        isSupported(arg0: Internal.TemporalField): boolean;
        static ofOffset(arg0: string, arg1: Internal.ZoneOffset): Internal.ZoneId;
        getLong(arg0: Internal.TemporalField): number;
        static ofHours(arg0: number): Internal.ZoneOffset;
        getDisplayName(arg0: Internal.TextStyle, arg1: Internal.Locale): string;
        equals(arg0: object): boolean;
        toString(): string;
        static ofHoursMinutesSeconds(arg0: number, arg1: number, arg2: number): Internal.ZoneOffset;
        static ofTotalSeconds(arg0: number): Internal.ZoneOffset;
        static readonly MIN : Internal.ZoneOffset;
        static readonly UTC : Internal.ZoneOffset;
        static readonly MAX : Internal.ZoneOffset;
        static readonly SHORT_IDS : Map<string, string>;
        get id(): string;
        get rules(): Internal.ZoneRules;
        get totalSeconds(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class TypeToken <T> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static get(arg0: Internal.Type): Internal.TypeToken<object>;
        static get<T>(arg0: Internal.Class<T>): Internal.TypeToken<T>;
        static getArray(arg0: Internal.Type): Internal.TypeToken<object>;
        toString(): string;
        isAssignableFrom(arg0: Internal.TypeToken<object>): boolean;
        isAssignableFrom(arg0: Internal.Type): boolean;
        isAssignableFrom(arg0: Internal.Class<object>): boolean;
        notify(): void;
        static getParameterized(arg0: Internal.Type, arg1: Internal.Type[]): Internal.TypeToken<object>;
        get rawType(): Internal.Class<T>;
        get type(): Internal.Type;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Lifecycle {
        add(arg0: Internal.Lifecycle): Internal.Lifecycle;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static stable(): Internal.Lifecycle;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static deprecated(arg0: number): Internal.Lifecycle;
        toString(): string;
        static experimental(): Internal.Lifecycle;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ConstantDesc {
        resolveConstantDesc(arg0: Internal.MethodHandles$Lookup): object;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class InventoryJS {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        getBlock(level: Internal.LevelJS): Internal.BlockContainerJS;
        countNonEmpty(ingredient: Internal.IngredientJS): number;
        countNonEmpty(): number;
        set(slot: number, item: Internal.ItemStack): void;
        markDirty(): void;
        notifyAll(): void;
        count(): number;
        count(ingredient: Internal.IngredientJS): number;
        isEmpty(): boolean;
        clear(): void;
        clear(ingredient: Internal.IngredientJS): void;
        isItemValid(slot: number, item: Internal.ItemStack): boolean;
        insert(slot: number, item: Internal.ItemStack, simulate: boolean): Internal.ItemStackJS;
        notify(): void;
        extract(slot: number, amount: number, simulate: boolean): Internal.ItemStackJS;
        hashCode(): number;
        find(ingredient: Internal.IngredientJS): number;
        find(): number;
        equals(arg0: object): boolean;
        getSlotLimit(slot: number): number;
        get(slot: number): Internal.ItemStackJS;
        toString(): string;
        readonly minecraftInventory : Internal.ItemHandler;
        get width(): number;
        get height(): number;
        get size(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class VariantBlockStateGenerator$Model {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        toJson(): Internal.JsonObject;
        uvlock(): Internal.VariantBlockStateGenerator$Model;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        x(_x: number): Internal.VariantBlockStateGenerator$Model;
        y(_y: number): Internal.VariantBlockStateGenerator$Model;
        toString(): string;
        model(s: string): Internal.VariantBlockStateGenerator$Model;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class JsonNull extends Internal.JsonElement {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        isJsonArray(): boolean;
        notify(): void;
        isJsonPrimitive(): boolean;
        isJsonObject(): boolean;
        hashCode(): number;
        isJsonNull(): boolean;
        deepCopy(): Internal.JsonNull;
        deepCopy(): Internal.JsonElement;
        equals(arg0: object): boolean;
        toString(): string;
        static readonly INSTANCE : Internal.JsonNull;
        get asFloat(): number;
        get asByte(): number;
        get asBigDecimal(): Internal.BigDecimal;
        get asNumber(): Internal.Number;
        get asCharacter(): string;
        get asString(): string;
        get asInt(): number;
        get asLong(): number;
        get asBigInteger(): Internal.BigInteger;
        get asJsonObject(): Internal.JsonObject;
        get asJsonNull(): Internal.JsonNull;
        get asDouble(): number;
        get asJsonArray(): Internal.JsonArray;
        get asJsonPrimitive(): Internal.JsonPrimitive;
        get asBoolean(): boolean;
        get asShort(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface DynamicOps <T> {
        updateGeneric(arg0: T, arg1: T, arg2: (arg0: T) => T): T;
        createIntList(arg0: Internal.IntStream): T;
        listBuilder(): Internal.ListBuilder<T>;
        createLong(arg0: number): T;
        createDouble(arg0: number): T;
        createLongList(arg0: Internal.LongStream): T;
        createShort(arg0: number): T;
        mergeToList(arg0: T, arg1: Internal.List<T>): Internal.DataResult<T>;
        mergeToList(arg0: T, arg1: T): Internal.DataResult<T>;
        update(arg0: T, arg1: string, arg2: (arg0: T) => T): T;
        createByteList(arg0: Internal.ByteBuffer): T;
        getByteBuffer(arg0: T): Internal.DataResult<Internal.ByteBuffer>;
        withDecoder<E>(arg0: Internal.Decoder<E>): (arg0: T) => Internal.DataResult<Internal.Pair<E, T>>;
        createBoolean(arg0: boolean): T;
        remove(arg0: T, arg1: string): T;
        getMapValues(arg0: T): Internal.DataResult<Internal.Stream<Internal.Pair<T, T>>>;
        empty(): T;
        withParser<E>(arg0: Internal.Decoder<E>): (arg0: T) => Internal.DataResult<E>;
        mergeToMap(arg0: T, arg1: Internal.MapLike<T>): Internal.DataResult<T>;
        mergeToMap(arg0: T, arg1: Map<T, T>): Internal.DataResult<T>;
        mergeToMap(arg0: T, arg1: T, arg2: T): Internal.DataResult<T>;
        convertList<U>(arg0: Internal.DynamicOps<U>, arg1: T): U;
        emptyList(): T;
        getIntStream(arg0: T): Internal.DataResult<Internal.IntStream>;
        getList(arg0: T): Internal.DataResult<(arg0: (arg0: T) => void) => void>;
        getLongStream(arg0: T): Internal.DataResult<Internal.LongStream>;
        get(arg0: T, arg1: string): Internal.DataResult<T>;
        getMapEntries(arg0: T): Internal.DataResult<(arg0: (arg0: T, arg1: T) => void) => void>;
        emptyMap(): T;
        getBooleanValue(arg0: T): Internal.DataResult<boolean>;
        createNumeric(arg0: Internal.Number): T;
        getStream(arg0: T): Internal.DataResult<Internal.Stream<T>>;
        convertMap<U>(arg0: Internal.DynamicOps<U>, arg1: T): U;
        mergeToPrimitive(arg0: T, arg1: T): Internal.DataResult<T>;
        createList(arg0: Internal.Stream<T>): T;
        getStringValue(arg0: T): Internal.DataResult<string>;
        withEncoder<E>(arg0: Internal.Encoder<E>): (arg0: E) => Internal.DataResult<T>;
        set(arg0: T, arg1: string, arg2: T): T;
        getGeneric(arg0: T, arg1: T): Internal.DataResult<T>;
        createString(arg0: string): T;
        convertTo<U>(arg0: Internal.DynamicOps<U>, arg1: T): U;
        createMap(arg0: Map<T, T>): T;
        createMap(arg0: Internal.Stream<Internal.Pair<T, T>>): T;
        mapBuilder(): Internal.RecordBuilder<T>;
        getMap(arg0: T): Internal.DataResult<Internal.MapLike<T>>;
        createByte(arg0: number): T;
        createFloat(arg0: number): T;
        createInt(arg0: number): T;
        compressMaps(): boolean;
        getNumberValue(arg0: T): Internal.DataResult<Internal.Number>;
        getNumberValue(arg0: T, arg1: Internal.Number): Internal.Number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class SavedData {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class UseOnContext {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class InformationREIEventJS extends Internal.EventJS {
        cancel(): void;
        add(stacks: object, title: Internal.Component, description: object): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isCancelled(): boolean;
        post(t: Internal.ScriptType, id: string, sub: string): boolean;
        post(t: Internal.ScriptType, id: string): boolean;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        canCancel(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class MobCategory extends Internal.Enum<Internal.MobCategory> implements Internal.StringRepresentable, Internal.IExtensibleEnum {
        init(): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(arg0: string): Internal.MobCategory;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.MobCategory[];
        name(): string;
        static create(arg0: string, arg1: string, arg2: number, arg3: boolean, arg4: boolean, arg5: number): Internal.MobCategory;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly UNDERGROUND_WATER_CREATURE : Internal.MobCategory;
        static readonly WATER_CREATURE : Internal.MobCategory;
        static readonly WATER_AMBIENT : Internal.MobCategory;
        static readonly AXOLOTLS : Internal.MobCategory;
        static readonly AMBIENT : Internal.MobCategory;
        static readonly CREATURE : Internal.MobCategory;
        static readonly MISC : Internal.MobCategory;
        static readonly MONSTER : Internal.MobCategory;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Long2IntFunction implements it.unimi.dsi.fastutil.Function<number, number>, Internal.LongToIntFunction {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        andThenShort(arg0: Internal.Int2ShortFunction): Internal.Long2ShortFunction;
        composeByte(arg0: Internal.Byte2LongFunction): Internal.Byte2IntFunction;
        andThenInt(arg0: Internal.Int2IntFunction): Internal.Long2IntFunction;
        composeReference<T>(arg0: Internal.Reference2LongFunction<T>): Internal.Reference2IntFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: number) => T;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: number): number;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: object): object;
        remove(arg0: object): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Int2DoubleFunction): Internal.Long2DoubleFunction;
        andThenObject<T>(arg0: Internal.Int2ObjectFunction<T>): Internal.Long2ObjectFunction<T>;
        get(arg0: object): number;
        get(arg0: object): object;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Int2LongFunction): Internal.Long2LongFunction;
        composeLong(arg0: Internal.Long2LongFunction): Internal.Long2IntFunction;
        andThenByte(arg0: Internal.Int2ByteFunction): Internal.Long2ByteFunction;
        andThenFloat(arg0: Internal.Int2FloatFunction): Internal.Long2FloatFunction;
        applyAsInt(arg0: number): number;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2LongFunction): Internal.Int2IntFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2LongFunction): Internal.Float2IntFunction;
        andThenChar(arg0: Internal.Int2CharFunction): Internal.Long2CharFunction;
        composeObject<T>(arg0: Internal.Object2LongFunction<T>): Internal.Object2IntFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => number;
        composeShort(arg0: Internal.Short2LongFunction): Internal.Short2IntFunction;
        andThenReference<T>(arg0: Internal.Int2ReferenceFunction<T>): Internal.Long2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2LongFunction): Internal.Char2IntFunction;
        composeDouble(arg0: Internal.Double2LongFunction): Internal.Double2IntFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class LunarContext {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        createDefaultEventConfigs(): void;
        notifyAll(): void;
        computeLunarForecast(arg0: Internal.ServerLevel, arg1: Internal.LunarForecast): Internal.LunarForecast;
        computeLunarForecast(arg0: Internal.ServerLevel, arg1: Internal.LunarForecast, arg2: number): Internal.LunarForecast;
        updateForecast(arg0: Internal.Level, arg1: number): void;
        addSettingsIfMissing(): void;
        tick(arg0: Internal.Level): void;
        getAndComputeLunarForecast(arg0: Internal.ServerLevel): Internal.LunarEventSavedData;
        notify(): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        handleEventConfigs(arg0: boolean): void;
        static readonly CONFIG_NAME : "lunar-settings.json";
        static readonly PACKET_CODEC : Internal.Codec<Internal.LunarContext>;
        get currentEvent(): Internal.LunarEvent;
        get strength(): number;
        get lunarForecast(): Internal.LunarForecast;
        get lastEvent(): Internal.LunarEvent;
        set strength(arg0: number);
        get lunarEvents(): Map<string, Internal.LunarEvent>;
        set lastEvent(arg0: Internal.LunarEvent);
        set currentEvent(arg0: string);
        get lunarTimeSettings(): Internal.LunarContext$LunarTimeSettings;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class RhinoException extends Internal.RuntimeException {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        getScriptStack(limit: number, hideFunction: string): Internal.ScriptStackElement[];
        notifyAll(): void;
        initColumnNumber(columnNumber: number): void;
        notify(): void;
        getScriptStackTrace(limit: number, functionName: string): string;
        addSuppressed(arg0: Internal.Throwable): void;
        columnNumber(): number;
        hashCode(): number;
        details(): string;
        printStackTrace(s: Internal.PrintWriter): void;
        printStackTrace(s: Internal.PrintStream): void;
        printStackTrace(): void;
        initSourceName(sourceName: string): void;
        initCause(arg0: Internal.Throwable): Internal.Throwable;
        initLineSource(lineSource: string): void;
        lineSource(): string;
        equals(arg0: object): boolean;
        initLineNumber(lineNumber: number): void;
        toString(): string;
        sourceName(): string;
        lineNumber(): number;
        fillInStackTrace(): Internal.Throwable;
        get localizedMessage(): string;
        get scriptStack(): Internal.ScriptStackElement[];
        get cause(): Internal.Throwable;
        get scriptStackTrace(): string;
        get stackTrace(): Internal.StackTraceElement[];
        get suppressed(): Internal.Throwable[];
        get message(): string;
        set stackTrace(arg0: Internal.StackTraceElement[]);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class SyncType extends Internal.Enum<Internal.SyncType> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(arg0: string): Internal.SyncType;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.SyncType[];
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly NOPE : Internal.SyncType;
        static readonly TO_CLIENT : Internal.SyncType;
        static readonly TO_CLIENTS : Internal.SyncType;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Guard {
        checkGuard(arg0: object): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ProcessorHandle <Msg> implements Internal.AutoCloseable {
        close(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class FakeServerPlayerDataJS extends Internal.ServerPlayerDataJS {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        getPlayer(): Internal.ServerPlayerJS;
        getPlayer(): Internal.PlayerJS<any>;
        notifyAll(): void;
        notify(): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        hasClientMod(): boolean;
        toString(): string;
        player : Internal.ServerPlayer;
        get server(): Internal.ServerJS;
        get name(): string;
        get profile(): Internal.GameProfile;
        get id(): Internal.UUID;
        get overworld(): Internal.LevelJS;
        get minecraftPlayer(): Internal.Player;
        get minecraftPlayer(): Internal.ServerPlayer;
        get data(): Internal.AttachedData;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface DomainCombiner {
        combine(arg0: Internal.ProtectionDomain[], arg1: Internal.ProtectionDomain[]): Internal.ProtectionDomain[];
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IForgeItem {
        canElytraFly(arg0: Internal.ItemStack, arg1: Internal.LivingEntity): boolean;
        setDamage(arg0: Internal.ItemStack, arg1: number): void;
        canPerformAction(arg0: Internal.ItemStack, arg1: Internal.ToolAction): boolean;
        getItemEnchantability(arg0: Internal.ItemStack): number;
        shouldCauseBlockBreakReset(arg0: Internal.ItemStack, arg1: Internal.ItemStack): boolean;
        damageItem<T>(arg0: Internal.ItemStack, arg1: number, arg2: T, arg3: (arg0: T) => void): number;
        shouldCauseReequipAnimation(arg0: Internal.ItemStack, arg1: Internal.ItemStack, arg2: boolean): boolean;
        getXpRepairRatio(arg0: Internal.ItemStack): number;
        readShareTag(arg0: Internal.ItemStack, arg1: Internal.CompoundTag): void;
        onEntityItemUpdate(arg0: Internal.ItemStack, arg1: Internal.ItemEntity): boolean;
        getDamage(arg0: Internal.ItemStack): number;
        isBookEnchantable(arg0: Internal.ItemStack, arg1: Internal.ItemStack): boolean;
        canDisableShield(arg0: Internal.ItemStack, arg1: Internal.ItemStack, arg2: Internal.LivingEntity, arg3: Internal.LivingEntity): boolean;
        onUsingTick(arg0: Internal.ItemStack, arg1: Internal.LivingEntity, arg2: number): void;
        createEntity(arg0: Internal.Level, arg1: Internal.Entity, arg2: Internal.ItemStack): Internal.Entity;
        isPiglinCurrency(arg0: Internal.ItemStack): boolean;
        getSweepHitBox(arg0: Internal.ItemStack, arg1: Internal.Player, arg2: Internal.Entity): Internal.AABB;
        isRepairable(arg0: Internal.ItemStack): boolean;
        getShareTag(arg0: Internal.ItemStack): Internal.CompoundTag;
        getBurnTime(arg0: Internal.ItemStack, arg1: Internal.RecipeType<object>): number;
        onDroppedByPlayer(arg0: Internal.ItemStack, arg1: Internal.Player): boolean;
        isDamageable(arg0: Internal.ItemStack): boolean;
        onEntitySwing(arg0: Internal.ItemStack, arg1: Internal.LivingEntity): boolean;
        elytraFlightTick(arg0: Internal.ItemStack, arg1: Internal.LivingEntity, arg2: number): boolean;
        getAttributeModifiers(arg0: EquipmentSlot, arg1: Internal.ItemStack): Internal.Multimap<Internal.Attribute, Internal.AttributeModifier>;
        onLeftClickEntity(arg0: Internal.ItemStack, arg1: Internal.Player, arg2: Internal.Entity): boolean;
        canEquip(arg0: Internal.ItemStack, arg1: EquipmentSlot, arg2: Internal.Entity): boolean;
        onBlockStartBreak(arg0: Internal.ItemStack, arg1: BlockPos, arg2: Internal.Player): boolean;
        onHorseArmorTick(arg0: Internal.ItemStack, arg1: Internal.Level, arg2: Internal.Mob): void;
        canContinueUsing(arg0: Internal.ItemStack, arg1: Internal.ItemStack): boolean;
        getEntityLifespan(arg0: Internal.ItemStack, arg1: Internal.Level): number;
        getDefaultTooltipHideFlags(arg0: Internal.ItemStack): number;
        getArmorTexture(arg0: Internal.ItemStack, arg1: Internal.Entity, arg2: EquipmentSlot, arg3: string): string;
        hasCustomEntity(arg0: Internal.ItemStack): boolean;
        getHighlightTip(arg0: Internal.ItemStack, arg1: Internal.Component): Internal.Component;
        getMaxDamage(arg0: Internal.ItemStack): number;
        getCreatorModId(arg0: Internal.ItemStack): string;
        isDamaged(arg0: Internal.ItemStack): boolean;
        onArmorTick(arg0: Internal.ItemStack, arg1: Internal.Level, arg2: Internal.Player): void;
        hasContainerItem(arg0: Internal.ItemStack): boolean;
        doesSneakBypassUse(arg0: Internal.ItemStack, arg1: Internal.LevelReader, arg2: BlockPos, arg3: Internal.Player): boolean;
        onItemUseFirst(arg0: Internal.ItemStack, arg1: Internal.UseOnContext): Internal.InteractionResult;
        getContainerItem(arg0: Internal.ItemStack): Internal.ItemStack;
        onDestroyed(arg0: Internal.ItemEntity, arg1: Internal.DamageSource): void;
        isCorrectToolForDrops(arg0: Internal.ItemStack, arg1: Internal.BlockState): boolean;
        getEquipmentSlot(arg0: Internal.ItemStack): EquipmentSlot;
        initCapabilities(arg0: Internal.ItemStack, arg1: Internal.CompoundTag): Internal.ICapabilityProvider;
        getItemStackLimit(arg0: Internal.ItemStack): number;
        makesPiglinsNeutral(arg0: Internal.ItemStack, arg1: Internal.LivingEntity): boolean;
        isEnderMask(arg0: Internal.ItemStack, arg1: Internal.Player, arg2: Internal.EnderMan): boolean;
        canApplyAtEnchantingTable(arg0: Internal.ItemStack, arg1: Internal.Enchantment): boolean;
        get tags(): Internal.Set<ResourceLocation>;
        get creativeTabs(): Internal.Collection<Internal.CreativeModeTab>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface DirectMethodHandleDesc implements Internal.MethodHandleDesc {
        owner(): Internal.ClassDesc;
        invocationType(): Internal.MethodTypeDesc;
        kind(): Internal.DirectMethodHandleDesc$Kind;
        equals(arg0: object): boolean;
        refKind(): number;
        isOwnerInterface(): boolean;
        lookupDescriptor(): string;
        methodName(): string;
        resolveConstantDesc(arg0: Internal.MethodHandles$Lookup): object;
        asType(arg0: Internal.MethodTypeDesc): Internal.MethodHandleDesc;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ClientWrapper {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        notify(): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        isKeyDown(key: number): boolean;
        toString(): string;
        get player(): Internal.ClientPlayerJS;
        get currentScreen(): Internal.Screen;
        set title(t: string);
        get minecraft(): Internal.Minecraft;
        get level(): Internal.ClientLevelJS;
        get currentWorldName(): string;
        set currentScreen(gui: Internal.Screen);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface FluidInvokerMixin {
        callAnimateTick(arg0: Internal.Level, arg1: BlockPos, arg2: Internal.FluidState, arg3: Internal.Random): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Object2ObjectMap$FastEntrySet <K, V> implements Internal.ObjectSet<Internal.Object2ObjectMap$Entry<K, V>> {
        add(arg0: E): boolean;
        fastForEach(arg0: (arg0: Internal.Object2ObjectMap$Entry<K, V>) => void): void;
        contains(arg0: object): boolean;
        iterator(): Internal.Iterator<any>;
        size(): number;
        spliterator(): Internal.Spliterator<any>;
        hashCode(): number;
        equals(arg0: object): boolean;
        toArray<T>(arg0: T[]): T[];
        toArray(): object[];
        isEmpty(): boolean;
        clear(): void;
        fastIterator(): Internal.ObjectIterator<Internal.Object2ObjectMap$Entry<K, V>>;
        remove(arg0: object): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Tesselator {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ChronoLocalDate implements Internal.Temporal, Internal.TemporalAdjuster, Internal.Comparable<Internal.ChronoLocalDate> {
        minus(arg0: number, arg1: Internal.TemporalUnit): Internal.Temporal;
        minus(arg0: number, arg1: Internal.TemporalUnit): Internal.ChronoLocalDate;
        minus(arg0: Internal.TemporalAmount): Internal.Temporal;
        minus(arg0: Internal.TemporalAmount): Internal.ChronoLocalDate;
        toEpochDay(): number;
        isEqual(arg0: Internal.ChronoLocalDate): boolean;
        adjustInto(arg0: Internal.Temporal): Internal.Temporal;
        range(arg0: Internal.TemporalField): Internal.ValueRange;
        compareTo(arg0: object): number;
        compareTo(arg0: Internal.ChronoLocalDate): number;
        lengthOfYear(): number;
        lengthOfMonth(): number;
        hashCode(): number;
        get(arg0: Internal.TemporalField): number;
        query<R>(arg0: Internal.TemporalQuery<R>): R;
        format(arg0: Internal.DateTimeFormatter): string;
        isLeapYear(): boolean;
        isSupported(arg0: Internal.TemporalUnit): boolean;
        isSupported(arg0: Internal.TemporalField): boolean;
        isBefore(arg0: Internal.ChronoLocalDate): boolean;
        plus(arg0: Internal.TemporalAmount): Internal.ChronoLocalDate;
        plus(arg0: Internal.TemporalAmount): Internal.Temporal;
        plus(arg0: number, arg1: Internal.TemporalUnit): Internal.ChronoLocalDate;
        plus(arg0: number, arg1: Internal.TemporalUnit): Internal.Temporal;
        getLong(arg0: Internal.TemporalField): number;
        atTime(arg0: Internal.LocalTime): Internal.ChronoLocalDateTime<object>;
        with(arg0: Internal.TemporalAdjuster): Internal.Temporal;
        with(arg0: Internal.TemporalAdjuster): Internal.ChronoLocalDate;
        with(arg0: Internal.TemporalField, arg1: number): Internal.Temporal;
        with(arg0: Internal.TemporalField, arg1: number): Internal.ChronoLocalDate;
        equals(arg0: object): boolean;
        until(arg0: Internal.Temporal, arg1: Internal.TemporalUnit): number;
        until(arg0: Internal.ChronoLocalDate): Internal.ChronoPeriod;
        toString(): string;
        isAfter(arg0: Internal.ChronoLocalDate): boolean;
        get era(): Internal.Era;
        get chronology(): Internal.Chronology;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class SimplePreparableReloadListener <T> implements Internal.PreparableReloadListener {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ModuleReader implements Internal.Closeable {
        read(arg0: string): Internal.Optional<Internal.ByteBuffer>;
        release(arg0: Internal.ByteBuffer): void;
        find(arg0: string): Internal.Optional<Internal.URI>;
        list(): Internal.Stream<string>;
        close(): void;
        open(arg0: string): Internal.Optional<Internal.InputStream>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class VoxelShape implements Internal.VoxelShapeAccess, Internal.OffsetVoxelShapeCache {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        getOffsetSimplifiedShape(offset: number, direction: Internal.Direction): Internal.VoxelShape;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        setShape(offset: number, direction: Internal.Direction, offsetShape: Internal.VoxelShape): void;
        set faces(arg0: Internal.VoxelShape[]);
        get faces(): Internal.VoxelShape[];
        get shape(): Internal.DiscreteVoxelShape;
        set shape(arg0: Internal.DiscreteVoxelShape);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ClassGroupFilterableList <T> {
        getAllOfGroupType(arg0: Internal.EntityClassGroup): Internal.Collection<T>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IExtendedLootCondition implements Internal.LootItemCondition, Internal.ILootHandler {
        test(arg0: T): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class AirBlock extends Internal.Block {
        rotate(arg0: Internal.BlockState, arg1: Internal.LevelAccessor, arg2: BlockPos, arg3: Internal.Rotation): Internal.BlockState;
        getStateAtViewpoint(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos, arg3: Vec3): Internal.BlockState;
        onBlockExploded(arg0: Internal.BlockState, arg1: Internal.Level, arg2: BlockPos, arg3: Internal.Explosion): void;
        getBedDirection(arg0: Internal.BlockState, arg1: Internal.LevelReader, arg2: BlockPos): Internal.Direction;
        isBed(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos, arg3: Internal.Entity): boolean;
        makesOpenTrapdoorAboveClimbable(arg0: Internal.BlockState, arg1: Internal.LevelReader, arg2: BlockPos, arg3: Internal.BlockState): boolean;
        canHarvestBlock(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos, arg3: Internal.Player): boolean;
        isLadder(arg0: Internal.BlockState, arg1: Internal.LevelReader, arg2: BlockPos, arg3: Internal.LivingEntity): boolean;
        shouldDisplayFluidOverlay(arg0: Internal.BlockState, arg1: Internal.BlockAndTintGetter, arg2: BlockPos, arg3: Internal.FluidState): boolean;
        onNeighborChange(arg0: Internal.BlockState, arg1: Internal.LevelReader, arg2: BlockPos, arg3: BlockPos): void;
        canStickTo(arg0: Internal.BlockState, arg1: Internal.BlockState): boolean;
        getWeakChanges(arg0: Internal.BlockState, arg1: Internal.LevelReader, arg2: BlockPos): boolean;
        canEntityDestroy(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos, arg3: Internal.Entity): boolean;
        isBurning(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos): boolean;
        getFriction(arg0: Internal.BlockState, arg1: Internal.LevelReader, arg2: BlockPos, arg3: Internal.Entity): number;
        isPortalFrame(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos): boolean;
        getExplosionResistance(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos, arg3: Internal.Explosion): number;
        getPathNodeType(state: Internal.BlockState): Internal.BlockPathTypes;
        isScaffolding(arg0: Internal.BlockState, arg1: Internal.LevelReader, arg2: BlockPos, arg3: Internal.LivingEntity): boolean;
        canSustainPlant(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos, arg3: Internal.Direction, arg4: Internal.IPlantable): boolean;
        canDropFromExplosion(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos, arg3: Internal.Explosion): boolean;
        isStickyBlock(arg0: Internal.BlockState): boolean;
        isFertile(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos): boolean;
        getAiPathNodeType(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos, arg3: Internal.Mob): Internal.BlockPathTypes;
        isSlimeBlock(arg0: Internal.BlockState): boolean;
        getFireSpreadSpeed(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos, arg3: Internal.Direction): number;
        getToolModifiedState(arg0: Internal.BlockState, arg1: Internal.Level, arg2: BlockPos, arg3: Internal.Player, arg4: Internal.ItemStack, arg5: Internal.ToolAction): Internal.BlockState;
        getBeaconColorMultiplier(arg0: Internal.BlockState, arg1: Internal.LevelReader, arg2: BlockPos, arg3: BlockPos): number[];
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        getExpDrop(arg0: Internal.BlockState, arg1: Internal.LevelReader, arg2: BlockPos, arg3: number, arg4: number): number;
        isConduitFrame(arg0: Internal.BlockState, arg1: Internal.LevelReader, arg2: BlockPos, arg3: BlockPos): boolean;
        notifyAll(): void;
        getPathNodeTypeAsNeighbor(state: Internal.BlockState): Internal.BlockPathTypes;
        getLightEmission(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos): number;
        onDestroyedByPlayer(arg0: Internal.BlockState, arg1: Internal.Level, arg2: BlockPos, arg3: Internal.Player, arg4: boolean, arg5: Internal.FluidState): boolean;
        shouldCheckWeakPower(arg0: Internal.BlockState, arg1: Internal.LevelReader, arg2: BlockPos, arg3: Internal.Direction): boolean;
        collisionExtendsVertically(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos, arg3: Internal.Entity): boolean;
        notify(): void;
        addLandingEffects(arg0: Internal.BlockState, arg1: Internal.ServerLevel, arg2: BlockPos, arg3: Internal.BlockState, arg4: Internal.LivingEntity, arg5: number): boolean;
        getSoundType(arg0: Internal.BlockState, arg1: Internal.LevelReader, arg2: BlockPos, arg3: Internal.Entity): Internal.SoundType;
        hashCode(): number;
        addRunningEffects(arg0: Internal.BlockState, arg1: Internal.Level, arg2: BlockPos, arg3: Internal.Entity): boolean;
        getCloneItemStack(arg0: Internal.BlockState, arg1: Internal.HitResult, arg2: Internal.BlockGetter, arg3: BlockPos, arg4: Internal.Player): Internal.ItemStack;
        isFlammable(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos, arg3: Internal.Direction): boolean;
        onCaughtFire(arg0: Internal.BlockState, arg1: Internal.Level, arg2: BlockPos, arg3: Internal.Direction, arg4: Internal.LivingEntity): void;
        getEnchantPowerBonus(arg0: Internal.BlockState, arg1: Internal.LevelReader, arg2: BlockPos): number;
        setBedOccupied(arg0: Internal.BlockState, arg1: Internal.Level, arg2: BlockPos, arg3: Internal.LivingEntity, arg4: boolean): void;
        setRegistryName(arg0: string, arg1: string): V;
        isFireSource(arg0: Internal.BlockState, arg1: Internal.LevelReader, arg2: BlockPos, arg3: Internal.Direction): boolean;
        equals(arg0: object): boolean;
        canConnectRedstone(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos, arg3: Internal.Direction): boolean;
        toString(): string;
        getFlammability(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos, arg3: Internal.Direction): number;
        readonly delegate : () => V;
        set materialKJS(arg0: net.minecraft.world.level.material.Material);
        set explosionResistanceKJS(arg0: number);
        set jumpFactorKJS(arg0: number);
        get material(): net.minecraft.world.level.material.Material;
        set soundTypeKJS(arg0: Internal.SoundType);
        get blockBuilderKJS(): Internal.BlockBuilder;
        get id(): string;
        get renderPropertiesInternal(): object;
        set frictionKJS(arg0: number);
        set hasCollisionKJS(arg0: boolean);
        get registryName(): ResourceLocation;
        set registryName(arg0: ResourceLocation);
        set registryName(arg0: ResourceLocation);
        set registryName(arg0: string);
        set isRandomlyTickingKJS(arg0: boolean);
        set speedFactorKJS(arg0: number);
        set blockBuilderKJS(b: Internal.BlockBuilder);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class IsoChronology extends Internal.AbstractChronology implements Internal.Serializable {
        localDateTime(arg0: Internal.TemporalAccessor): Internal.LocalDateTime;
        localDateTime(arg0: Internal.TemporalAccessor): Internal.ChronoLocalDateTime<any>;
        date(arg0: Internal.TemporalAccessor): Internal.LocalDate;
        date(arg0: Internal.TemporalAccessor): Internal.ChronoLocalDate;
        date(arg0: Internal.Era, arg1: number, arg2: number, arg3: number): Internal.LocalDate;
        date(arg0: Internal.Era, arg1: number, arg2: number, arg3: number): Internal.ChronoLocalDate;
        date(arg0: number, arg1: number, arg2: number): Internal.ChronoLocalDate;
        date(arg0: number, arg1: number, arg2: number): Internal.LocalDate;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        period(arg0: number, arg1: number, arg2: number): Internal.ChronoPeriod;
        period(arg0: number, arg1: number, arg2: number): Internal.Period;
        dateYearDay(arg0: Internal.Era, arg1: number, arg2: number): Internal.LocalDate;
        dateYearDay(arg0: Internal.Era, arg1: number, arg2: number): Internal.ChronoLocalDate;
        dateYearDay(arg0: number, arg1: number): Internal.ChronoLocalDate;
        dateYearDay(arg0: number, arg1: number): Internal.LocalDate;
        resolveDate(arg0: Map<Internal.TemporalField, number>, arg1: Internal.ResolverStyle): Internal.LocalDate;
        resolveDate(arg0: Map<any, any>, arg1: Internal.ResolverStyle): Internal.ChronoLocalDate;
        notifyAll(): void;
        isLeapYear(arg0: number): boolean;
        range(arg0: Internal.ChronoField): Internal.ValueRange;
        dateEpochDay(arg0: number): Internal.ChronoLocalDate;
        dateEpochDay(arg0: number): Internal.LocalDate;
        compareTo(arg0: object): number;
        compareTo(arg0: Internal.Chronology): number;
        notify(): void;
        dateNow(): Internal.ChronoLocalDate;
        dateNow(): Internal.LocalDate;
        dateNow(arg0: Internal.ZoneId): Internal.LocalDate;
        dateNow(arg0: Internal.ZoneId): Internal.ChronoLocalDate;
        dateNow(arg0: Internal.Clock): Internal.ChronoLocalDate;
        dateNow(arg0: Internal.Clock): Internal.LocalDate;
        eraOf(arg0: number): Internal.IsoEra;
        eraOf(arg0: number): Internal.Era;
        eras(): Internal.List<Internal.Era>;
        prolepticYear(arg0: Internal.Era, arg1: number): number;
        zonedDateTime(arg0: Internal.Instant, arg1: Internal.ZoneId): Internal.ChronoZonedDateTime<any>;
        zonedDateTime(arg0: Internal.Instant, arg1: Internal.ZoneId): Internal.ZonedDateTime;
        zonedDateTime(arg0: Internal.TemporalAccessor): Internal.ChronoZonedDateTime<any>;
        zonedDateTime(arg0: Internal.TemporalAccessor): Internal.ZonedDateTime;
        getDisplayName(arg0: Internal.TextStyle, arg1: Internal.Locale): string;
        hashCode(): number;
        equals(arg0: object): boolean;
        epochSecond(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: Internal.ZoneOffset): number;
        epochSecond(arg0: Internal.Era, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: Internal.ZoneOffset): number;
        toString(): string;
        static readonly INSTANCE : Internal.IsoChronology;
        get calendarType(): string;
        get id(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class LivingEntityJS extends Internal.EntityJS {
        isOnScoreboardTeam(teamID: string): boolean;
        isLiving(): boolean;
        isSprinting(): boolean;
        runCommandSilent(command: string): number;
        getDistanceSq(pos: BlockPos): number;
        getDistanceSq(x: number, y: number, z: number): number;
        isBoss(): boolean;
        isGlowing(): boolean;
        setMotion(x: number, y: number, z: number): void;
        setRotation(yaw: number, pitch: number): void;
        isOnSameTeam(e: Internal.EntityJS): boolean;
        isAnimal(): boolean;
        addMotion(x: number, y: number, z: number): void;
        isInvisible(): boolean;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isUnderWater(): boolean;
        getHeldItem(hand: Hand): Internal.ItemStackJS;
        getEquipment(slot: EquipmentSlot): Internal.ItemStackJS;
        notify(): void;
        damageHeldItem(hand: Hand, amount: number): void;
        damageHeldItem(hand: Hand, amount: number, onBroken: (arg0: Internal.ItemStackJS) => void): void;
        damageHeldItem(): void;
        removePassengers(): void;
        attack(hp: number): void;
        attack(source: string, hp: number): void;
        isOnLadder(): boolean;
        isUndead(): boolean;
        playSound(id: Internal.SoundEvent): void;
        playSound(id: Internal.SoundEvent, volume: number, pitch: number): void;
        getDistance(x: number, y: number, z: number): number;
        getDistance(pos: BlockPos): number;
        isSwimming(): boolean;
        mergeFullNBT(tag: Internal.CompoundTag): Internal.EntityJS;
        kill(): void;
        setPositionAndRotation(x: number, y: number, z: number, yaw: number, pitch: number): void;
        isMonster(): boolean;
        equals(arg0: object): boolean;
        isOnGround(): boolean;
        toString(): string;
        isSilent(): boolean;
        isPassenger(e: Internal.EntityJS): boolean;
        tell(message: Internal.Component): void;
        isWaterCreature(): boolean;
        setPosition(x: number, y: number, z: number): void;
        extinguish(): void;
        isChild(): boolean;
        setEquipment(slot: EquipmentSlot, item: Internal.ItemStackJS): void;
        isHoldingInAnyHand(ingredient: object): boolean;
        damageEquipment(slot: EquipmentSlot, amount: number, onBroken: (arg0: Internal.ItemStackJS) => void): void;
        damageEquipment(slot: EquipmentSlot): void;
        damageEquipment(slot: EquipmentSlot, amount: number): void;
        isAlive(): boolean;
        setHeldItem(hand: Hand, item: Internal.ItemStackJS): void;
        isPlayer(): boolean;
        isCrouching(): boolean;
        notifyAll(): void;
        hashCode(): number;
        isFrame(): boolean;
        heal(hp: number): void;
        startRiding(e: Internal.EntityJS, force: boolean): boolean;
        runCommand(command: string): number;
        isElytraFlying(): boolean;
        isInWater(): boolean;
        dismountRidingEntity(): void;
        isSleeping(): boolean;
        isAmbientCreature(): boolean;
        swingArm(hand: Hand): void;
        rayTrace(): Internal.RayTraceResultJS;
        rayTrace(distance: number): Internal.RayTraceResultJS;
        isInvulnerable(): boolean;
        canEntityBeSeen(entity: Internal.LivingEntityJS): boolean;
        spawn(): void;
        isPeacefulCreature(): boolean;
        readonly persistentData : Internal.CompoundTag;
        readonly minecraftEntity : Internal.Entity;
        readonly minecraftLivingEntity : Internal.LivingEntity;
        get lastAttackedEntity(): Internal.LivingEntityJS;
        set y(y: number);
        set x(x: number);
        get item(): Internal.ItemStackJS;
        get revengeTarget(): Internal.LivingEntityJS;
        get offHandItem(): Internal.ItemStackJS;
        set glowing(glowing: boolean);
        set z(z: number);
        get hasCustomName(): boolean;
        set invisible(invisible: boolean);
        get idleTime(): number;
        get movementSpeed(): number;
        get horizontalFacing(): Internal.Direction;
        set legsArmorItem(item: Internal.ItemStackJS);
        get health(): number;
        get server(): Internal.ServerJS;
        set feetArmorItem(item: Internal.ItemStackJS);
        set maxHealth(hp: number);
        get profile(): Internal.GameProfile;
        set absorptionAmount(amount: number);
        get displayName(): Internal.Text;
        get type(): string;
        set customNameAlwaysVisible(b: boolean);
        set offHandItem(item: Internal.ItemStackJS);
        get maxHealth(): number;
        get eyeHeight(): number;
        get fallDistance(): number;
        set onFire(seconds: number);
        set statusMessage(message: Internal.Component);
        get lastDamageSource(): Internal.DamageSourceJS;
        get reachDistance(): number;
        get customName(): Internal.Text;
        get stepHeight(): number;
        get ridingEntity(): Internal.EntityJS;
        get level(): Internal.LevelJS;
        get pitch(): number;
        get passengers(): Internal.EntityArrayList;
        get lastAttackedEntityTime(): number;
        set pitch(pitch: number);
        get facing(): Internal.Direction;
        get recursivePassengers(): Internal.EntityArrayList;
        get nbt(): Internal.CompoundTag;
        set fallDistance(fallDistance: number);
        get name(): Internal.Text;
        get feetArmorItem(): Internal.ItemStackJS;
        set customName(name: Internal.Component);
        set mainHandItem(item: Internal.ItemStackJS);
        set stepHeight(stepHeight: number);
        get teamId(): string;
        set noClip(noClip: boolean);
        set position(block: Internal.BlockContainerJS);
        set invulnerable(invulnerable: boolean);
        set revengeTarget(target: Internal.LivingEntityJS);
        set movementSpeed(speed: number);
        get legsArmorItem(): Internal.ItemStackJS;
        set fullNBT(nbt: Internal.CompoundTag);
        get attackingEntity(): Internal.LivingEntityJS;
        set yaw(yaw: number);
        get fullNBT(): Internal.CompoundTag;
        get noClip(): boolean;
        get yaw(): number;
        get headArmorItem(): Internal.ItemStackJS;
        set noGravity(noGravity: boolean);
        get revengeTimer(): number;
        get absorptionAmount(): number;
        get id(): Internal.UUID;
        get ticksExisted(): number;
        set silent(isSilent: boolean);
        get chestArmorItem(): Internal.ItemStackJS;
        set chestArmorItem(item: Internal.ItemStackJS);
        get customNameAlwaysVisible(): boolean;
        get mainHandItem(): Internal.ItemStackJS;
        set health(hp: number);
        set motionZ(z: number);
        set motionY(y: number);
        get block(): Internal.BlockContainerJS;
        set motionX(x: number);
        get potionEffects(): Internal.EntityPotionEffectsJS;
        set headArmorItem(item: Internal.ItemStackJS);
        get x(): number;
        get y(): number;
        get z(): number;
        get motionZ(): number;
        get motionX(): number;
        get noGravity(): boolean;
        get motionY(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Char2LongFunction implements it.unimi.dsi.fastutil.Function<string, number>, Internal.IntToLongFunction {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: string, arg1: number): number;
        andThenShort(arg0: Internal.Long2ShortFunction): Internal.Char2ShortFunction;
        composeByte(arg0: Internal.Byte2CharFunction): Internal.Byte2LongFunction;
        andThenInt(arg0: Internal.Long2IntFunction): Internal.Char2IntFunction;
        composeReference<T>(arg0: Internal.Reference2CharFunction<T>): Internal.Reference2LongFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: string) => T;
        put(arg0: object, arg1: object): object;
        put(arg0: string, arg1: number): number;
        put(arg0: string, arg1: number): number;
        remove(arg0: string): number;
        remove(arg0: object): object;
        remove(arg0: object): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Long2DoubleFunction): Internal.Char2DoubleFunction;
        andThenObject<T>(arg0: Internal.Long2ObjectFunction<T>): Internal.Char2ObjectFunction<T>;
        get(arg0: object): number;
        get(arg0: object): object;
        get(arg0: string): number;
        andThenLong(arg0: Internal.Long2LongFunction): Internal.Char2LongFunction;
        composeLong(arg0: Internal.Long2CharFunction): Internal.Long2LongFunction;
        andThenByte(arg0: Internal.Long2ByteFunction): Internal.Char2ByteFunction;
        andThenFloat(arg0: Internal.Long2FloatFunction): Internal.Char2FloatFunction;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: string): boolean;
        composeInt(arg0: Internal.Int2CharFunction): Internal.Int2LongFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2CharFunction): Internal.Float2LongFunction;
        andThenChar(arg0: Internal.Long2CharFunction): Internal.Char2CharFunction;
        applyAsLong(arg0: number): number;
        composeObject<T>(arg0: Internal.Object2CharFunction<T>): Internal.Object2LongFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => string): (arg0: T) => number;
        composeShort(arg0: Internal.Short2CharFunction): Internal.Short2LongFunction;
        andThenReference<T>(arg0: Internal.Long2ReferenceFunction<T>): Internal.Char2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2CharFunction): Internal.Char2LongFunction;
        composeDouble(arg0: Internal.Double2CharFunction): Internal.Double2LongFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class IsoEra extends Internal.Enum<Internal.IsoEra> implements Internal.Era {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        static valueOf(arg0: string): Internal.IsoEra;
        query<R>(arg0: Internal.TemporalQuery<R>): R;
        notifyAll(): void;
        static values(): Internal.IsoEra[];
        adjustInto(arg0: Internal.Temporal): Internal.Temporal;
        range(arg0: Internal.TemporalField): Internal.ValueRange;
        isSupported(arg0: Internal.TemporalField): boolean;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        getLong(arg0: Internal.TemporalField): number;
        getDisplayName(arg0: Internal.TextStyle, arg1: Internal.Locale): string;
        hashCode(): number;
        get(arg0: Internal.TemporalField): number;
        equals(arg0: object): boolean;
        static of(arg0: number): Internal.IsoEra;
        name(): string;
        toString(): string;
        ordinal(): number;
        static readonly CE : Internal.IsoEra;
        static readonly BCE : Internal.IsoEra;
        get value(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface WritableByteChannel implements Internal.Channel {
        isOpen(): boolean;
        close(): void;
        write(arg0: Internal.ByteBuffer): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface InterruptibleChannel implements Internal.Channel {
        isOpen(): boolean;
        close(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface DefaultedListAccessor <T> {
        get delegate(): Internal.List<T>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface MessageSender {
        tell(arg0: Internal.Component): void;
        runCommand(arg0: string): number;
        runCommandSilent(command: string): number;
        set statusMessage(message: Internal.Component);
        get name(): Internal.Text;
        get displayName(): Internal.Text;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class EntityDataAccessor <T> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class Monster extends Internal.PathfinderMob implements Internal.Enemy {
        backpackedMoved(): boolean;
        updateNavigationRegistration(): void;
        onEndimationEnd(arg0: Internal.PlayableEndimation, arg1: Internal.PlayableEndimation): void;
        canBeRiddenInWater(arg0: Internal.Entity): boolean;
        handler$zzo000$tickHead(arg0: Internal.CallbackInfo): void;
        isEndimationPlaying(arg0: Internal.PlayableEndimation): boolean;
        isActive(): boolean;
        handler$zgm001$tick(arg0: Internal.CallbackInfo): void;
        create$callSpawnItemParticles(arg0: Internal.ItemStack, arg1: number): void;
        handler$zjn000$onUpdateFluidOnEyes(arg0: Internal.CallbackInfo): void;
        changeDimension(arg0: Internal.ServerLevel, arg1: Internal.ITeleporter): Internal.Entity;
        serializeNBT(): Internal.Tag;
        serializeNBT(): Internal.CompoundTag;
        invalidateCaps(): void;
        foodEatenKJS(is: Internal.ItemStack): void;
        revive(): void;
        canUpdate(): boolean;
        canUpdate(arg0: boolean): void;
        handler$bgc000$tryShortcutFluidPushing(tag: net.minecraft.tags.Tag<any>, speed: number, cir: Internal.CallbackInfoReturnable<any>, box: Internal.AABB, x1: number, x2: number, y1: number, y2: number, z1: number, z2: number, zero: number): void;
        resetEndimation(): void;
        areCapsCompatible(arg0: Internal.CapabilityDispatcher): boolean;
        getEyeHeightAccess(arg0: Internal.Pose, arg1: Internal.EntityDimensions): number;
        reviveCaps(): void;
        lithiumOnBlockCacheDeleted(): void;
        canRiderInteract(): boolean;
        getEntries(arg0: boolean): Internal.Set<any>;
        onAddedToWorld(): void;
        isRegisteredToWorld(): boolean;
        handler$zcp000$read(arg0: Internal.CompoundTag, arg1: Internal.CallbackInfo): void;
        canTrample(arg0: Internal.BlockState, arg1: BlockPos, arg2: number): boolean;
        getClassification(arg0: boolean): Internal.MobCategory;
        onEndimationStart(arg0: Internal.PlayableEndimation, arg1: Internal.PlayableEndimation): void;
        isNoEndimationPlaying(): boolean;
        lithiumSetClimbingMobCachingSectionUpdateBehavior(listenForCachedBlockChanges: boolean): void;
        shouldRiderSit(): boolean;
        getPickedResult(arg0: Internal.HitResult): Internal.ItemStack;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        lithiumOnEquipmentChanged(): void;
        lithiumOnBlockCacheSet(newState: Internal.BlockState): void;
        handler$zjn000$onUpdateFluidOnEyeAssign(arg0: Internal.CallbackInfo): void;
        notify(): void;
        handler$zzo000$moveStep(arg0: Internal.MoverType, arg1: Vec3, arg2: Internal.CallbackInfo): void;
        endimateTick(): void;
        isDirty(): boolean;
        hashCode(): number;
        isAddedToWorld(): boolean;
        addListener(listener: Internal.NearbyEntityListener): void;
        onRemovedFromWorld(): void;
        isMultipartEntity(): boolean;
        deserializeNBT(arg0: Internal.CompoundTag): void;
        deserializeNBT(arg0: Internal.Tag): void;
        curePotionEffects(arg0: Internal.ItemStack): boolean;
        clean(): void;
        asKJS(): object;
        getValue(arg0: Internal.TrackedData<any>): object;
        shouldRiderFaceForward(arg0: Internal.Player): boolean;
        setValue(arg0: Internal.TrackedData<any>, arg1: object): void;
        equals(arg0: object): boolean;
        toString(): string;
        set citadelEntityData(arg0: Internal.CompoundTag);
        get cachedFeetBlockState(): Internal.BlockState;
        get pos(): Internal.Position;
        get persistentDataKJS(): Internal.CompoundTag;
        get endimatedState(): Internal.Endimatable$EndimatedState;
        get registeredNavigation(): Internal.PathNavigation;
        get effectHandler(): Internal.EndimationEffectHandler;
        get dataEffectColorId_$md$85ada3$1(): Internal.EntityDataAccessor<any>;
        set animationTick(arg0: number);
        get citadelEntityData(): Internal.CompoundTag;
        get listener(): Internal.NearbyEntityListenerMulti;
        get isInsidePortal(): boolean;
        get persistentData(): Internal.CompoundTag;
        get remainingFireTicks(): number;
        get dataMap(): Map<any, any>;
        get entityChangeListener(): Internal.EntityInLevelCallback;
        set dataMap(arg0: Map<any, any>);
        get dataEffectAmbienceId_$md$85ada3$0(): Internal.EntityDataAccessor<any>;
        get lastPos(): BlockPos;
        set registeredToWorld(navigation: Internal.PathNavigation);
        get parts(): Internal.PartEntity<object>[];
        get playingEndimation(): Internal.PlayableEndimation;
        get dirtyEntries(): Internal.Set<any>;
        set playingEndimation(arg0: Internal.PlayableEndimation);
        get animationTick(): number;
        set remainingFireTicks(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface DoublePredicate {
        or(arg0: Internal.DoublePredicate): Internal.DoublePredicate;
        test(arg0: number): boolean;
        and(arg0: Internal.DoublePredicate): Internal.DoublePredicate;
        negate(): Internal.DoublePredicate;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class CharsetDecoder {
        averageCharsPerByte(): number;
        charset(): Internal.Charset;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        maxCharsPerByte(): number;
        onUnmappableCharacter(arg0: Internal.CodingErrorAction): Internal.CharsetDecoder;
        notifyAll(): void;
        isCharsetDetected(): boolean;
        decode(arg0: Internal.ByteBuffer): Internal.CharBuffer;
        decode(arg0: Internal.ByteBuffer, arg1: Internal.CharBuffer, arg2: boolean): Internal.CoderResult;
        notify(): void;
        isAutoDetecting(): boolean;
        unmappableCharacterAction(): Internal.CodingErrorAction;
        detectedCharset(): Internal.Charset;
        malformedInputAction(): Internal.CodingErrorAction;
        flush(arg0: Internal.CharBuffer): Internal.CoderResult;
        hashCode(): number;
        equals(arg0: object): boolean;
        onMalformedInput(arg0: Internal.CodingErrorAction): Internal.CharsetDecoder;
        reset(): Internal.CharsetDecoder;
        toString(): string;
        replacement(): string;
        replaceWith(arg0: string): Internal.CharsetDecoder;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class BlockSnapshot {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        restore(arg0: boolean): boolean;
        restore(): boolean;
        restore(arg0: boolean, arg1: boolean): boolean;
        notifyAll(): void;
        restoreToLocation(arg0: Internal.LevelAccessor, arg1: BlockPos, arg2: boolean, arg3: boolean): boolean;
        notify(): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        static create(arg0: Internal.ResourceKey<Internal.Level>, arg1: Internal.LevelAccessor, arg2: BlockPos): Internal.BlockSnapshot;
        static create(arg0: Internal.ResourceKey<Internal.Level>, arg1: Internal.LevelAccessor, arg2: BlockPos, arg3: number): Internal.BlockSnapshot;
        toString(): string;
        get blockEntity(): Internal.BlockEntity;
        get tag(): Internal.CompoundTag;
        get replacedBlock(): Internal.BlockState;
        get currentBlock(): Internal.BlockState;
        get level(): Internal.LevelAccessor;
        get pos(): BlockPos;
        get flag(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class CompletableFuture <T> implements java_.util.concurrent.Future<T>, Internal.CompletionStage<T> {
        cancel(arg0: boolean): boolean;
        obtrudeValue(arg0: T): void;
        exceptionallyAsync(arg0: (arg0: Internal.Throwable) => T, arg1: Internal.Executor): Internal.CompletableFuture<T>;
        exceptionallyAsync(arg0: Internal.Function<any, any>, arg1: Internal.Executor): Internal.CompletionStage<any>;
        exceptionallyAsync(arg0: (arg0: Internal.Throwable) => T): Internal.CompletableFuture<T>;
        exceptionallyAsync(arg0: Internal.Function<any, any>): Internal.CompletionStage<any>;
        static failedStage<U>(arg0: Internal.Throwable): Internal.CompletionStage<U>;
        runAfterBothAsync(arg0: Internal.CompletionStage<object>, arg1: Internal.Runnable, arg2: Internal.Executor): Internal.CompletableFuture<void>;
        runAfterBothAsync(arg0: Internal.CompletionStage<any>, arg1: Internal.Runnable, arg2: Internal.Executor): Internal.CompletionStage<any>;
        runAfterBothAsync(arg0: Internal.CompletionStage<object>, arg1: Internal.Runnable): Internal.CompletableFuture<void>;
        runAfterBothAsync(arg0: Internal.CompletionStage<any>, arg1: Internal.Runnable): Internal.CompletionStage<any>;
        obtrudeException(arg0: Internal.Throwable): void;
        thenAcceptBoth<U>(arg0: Internal.CompletionStage<U>, arg1: (arg0: T, arg1: U) => void): Internal.CompletableFuture<void>;
        thenAcceptBoth(arg0: Internal.CompletionStage<any>, arg1: Internal.BiConsumer<any, any>): Internal.CompletionStage<any>;
        exceptionallyCompose(arg0: (arg0: Internal.Throwable) => Internal.CompletionStage<T>): Internal.CompletableFuture<T>;
        exceptionallyCompose(arg0: Internal.Function<any, any>): Internal.CompletionStage<any>;
        join(): T;
        isCompletedExceptionally(): boolean;
        applyToEither<U>(arg0: Internal.CompletionStage<T>, arg1: (arg0: T) => U): Internal.CompletableFuture<U>;
        applyToEither(arg0: Internal.CompletionStage<any>, arg1: Internal.Function<any, any>): Internal.CompletionStage<any>;
        completeAsync(arg0: () => T, arg1: Internal.Executor): Internal.CompletableFuture<T>;
        completeAsync(arg0: () => T): Internal.CompletableFuture<T>;
        thenApply(arg0: Internal.Function<any, any>): Internal.CompletionStage<any>;
        thenApply<U>(arg0: (arg0: T) => U): Internal.CompletableFuture<U>;
        thenRun(arg0: Internal.Runnable): Internal.CompletionStage<any>;
        thenRun(arg0: Internal.Runnable): Internal.CompletableFuture<void>;
        orTimeout(arg0: number, arg1: Internal.TimeUnit): Internal.CompletableFuture<T>;
        getNow(arg0: T): T;
        exceptionally(arg0: Internal.Function<any, any>): Internal.CompletionStage<any>;
        exceptionally(arg0: (arg0: Internal.Throwable) => T): Internal.CompletableFuture<T>;
        handle<U>(arg0: (arg0: T, arg1: Internal.Throwable) => U): Internal.CompletableFuture<U>;
        handle(arg0: Internal.BiFunction<any, any, any>): Internal.CompletionStage<any>;
        thenCompose<U>(arg0: (arg0: T) => Internal.CompletionStage<U>): Internal.CompletableFuture<U>;
        thenCompose(arg0: Internal.Function<any, any>): Internal.CompletionStage<any>;
        static failedFuture<U>(arg0: Internal.Throwable): Internal.CompletableFuture<U>;
        thenCombineAsync(arg0: Internal.CompletionStage<any>, arg1: Internal.BiFunction<any, any, any>, arg2: Internal.Executor): Internal.CompletionStage<any>;
        thenCombineAsync<U, V>(arg0: Internal.CompletionStage<U>, arg1: (arg0: T, arg1: U) => V, arg2: Internal.Executor): Internal.CompletableFuture<V>;
        thenCombineAsync<U, V>(arg0: Internal.CompletionStage<U>, arg1: (arg0: T, arg1: U) => V): Internal.CompletableFuture<V>;
        thenCombineAsync(arg0: Internal.CompletionStage<any>, arg1: Internal.BiFunction<any, any, any>): Internal.CompletionStage<any>;
        static completedFuture<U>(arg0: U): Internal.CompletableFuture<U>;
        whenCompleteAsync(arg0: Internal.BiConsumer<any, any>): Internal.CompletionStage<any>;
        whenCompleteAsync(arg0: (arg0: T, arg1: Internal.Throwable) => void): Internal.CompletableFuture<T>;
        whenCompleteAsync(arg0: Internal.BiConsumer<any, any>, arg1: Internal.Executor): Internal.CompletionStage<any>;
        whenCompleteAsync(arg0: (arg0: T, arg1: Internal.Throwable) => void, arg1: Internal.Executor): Internal.CompletableFuture<T>;
        toCompletableFuture(): Internal.CompletableFuture<T>;
        thenApplyAsync<U>(arg0: (arg0: T) => U): Internal.CompletableFuture<U>;
        thenApplyAsync(arg0: Internal.Function<any, any>): Internal.CompletionStage<any>;
        thenApplyAsync<U>(arg0: (arg0: T) => U, arg1: Internal.Executor): Internal.CompletableFuture<U>;
        thenApplyAsync(arg0: Internal.Function<any, any>, arg1: Internal.Executor): Internal.CompletionStage<any>;
        thenAcceptAsync(arg0: (arg0: T) => void): Internal.CompletableFuture<void>;
        thenAcceptAsync(arg0: Internal.Consumer<any>): Internal.CompletionStage<any>;
        thenAcceptAsync(arg0: (arg0: T) => void, arg1: Internal.Executor): Internal.CompletableFuture<void>;
        thenAcceptAsync(arg0: Internal.Consumer<any>, arg1: Internal.Executor): Internal.CompletionStage<any>;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        notify(): void;
        static runAsync(arg0: Internal.Runnable, arg1: Internal.Executor): Internal.CompletableFuture<void>;
        static runAsync(arg0: Internal.Runnable): Internal.CompletableFuture<void>;
        thenRunAsync(arg0: Internal.Runnable): Internal.CompletionStage<any>;
        thenRunAsync(arg0: Internal.Runnable): Internal.CompletableFuture<void>;
        thenRunAsync(arg0: Internal.Runnable, arg1: Internal.Executor): Internal.CompletionStage<any>;
        thenRunAsync(arg0: Internal.Runnable, arg1: Internal.Executor): Internal.CompletableFuture<void>;
        static allOf(arg0: Internal.CompletableFuture<object>[]): Internal.CompletableFuture<void>;
        applyToEitherAsync<U>(arg0: Internal.CompletionStage<T>, arg1: (arg0: T) => U): Internal.CompletableFuture<U>;
        applyToEitherAsync(arg0: Internal.CompletionStage<any>, arg1: Internal.Function<any, any>): Internal.CompletionStage<any>;
        applyToEitherAsync<U>(arg0: Internal.CompletionStage<T>, arg1: (arg0: T) => U, arg2: Internal.Executor): Internal.CompletableFuture<U>;
        applyToEitherAsync(arg0: Internal.CompletionStage<any>, arg1: Internal.Function<any, any>, arg2: Internal.Executor): Internal.CompletionStage<any>;
        newIncompleteFuture<U>(): Internal.CompletableFuture<U>;
        acceptEitherAsync(arg0: Internal.CompletionStage<any>, arg1: Internal.Consumer<any>, arg2: Internal.Executor): Internal.CompletionStage<any>;
        acceptEitherAsync(arg0: Internal.CompletionStage<T>, arg1: (arg0: T) => void, arg2: Internal.Executor): Internal.CompletableFuture<void>;
        acceptEitherAsync(arg0: Internal.CompletionStage<T>, arg1: (arg0: T) => void): Internal.CompletableFuture<void>;
        acceptEitherAsync(arg0: Internal.CompletionStage<any>, arg1: Internal.Consumer<any>): Internal.CompletionStage<any>;
        runAfterEitherAsync(arg0: Internal.CompletionStage<object>, arg1: Internal.Runnable, arg2: Internal.Executor): Internal.CompletableFuture<void>;
        runAfterEitherAsync(arg0: Internal.CompletionStage<any>, arg1: Internal.Runnable, arg2: Internal.Executor): Internal.CompletionStage<any>;
        runAfterEitherAsync(arg0: Internal.CompletionStage<any>, arg1: Internal.Runnable): Internal.CompletionStage<any>;
        runAfterEitherAsync(arg0: Internal.CompletionStage<object>, arg1: Internal.Runnable): Internal.CompletableFuture<void>;
        hashCode(): number;
        acceptEither(arg0: Internal.CompletionStage<T>, arg1: (arg0: T) => void): Internal.CompletableFuture<void>;
        acceptEither(arg0: Internal.CompletionStage<any>, arg1: Internal.Consumer<any>): Internal.CompletionStage<any>;
        get(): T;
        get(arg0: number, arg1: Internal.TimeUnit): T;
        copy(): Internal.CompletableFuture<T>;
        runAfterEither(arg0: Internal.CompletionStage<object>, arg1: Internal.Runnable): Internal.CompletableFuture<void>;
        runAfterEither(arg0: Internal.CompletionStage<any>, arg1: Internal.Runnable): Internal.CompletionStage<any>;
        thenComposeAsync<U>(arg0: (arg0: T) => Internal.CompletionStage<U>): Internal.CompletableFuture<U>;
        thenComposeAsync(arg0: Internal.Function<any, any>): Internal.CompletionStage<any>;
        thenComposeAsync<U>(arg0: (arg0: T) => Internal.CompletionStage<U>, arg1: Internal.Executor): Internal.CompletableFuture<U>;
        thenComposeAsync(arg0: Internal.Function<any, any>, arg1: Internal.Executor): Internal.CompletionStage<any>;
        thenAccept(arg0: (arg0: T) => void): Internal.CompletableFuture<void>;
        thenAccept(arg0: Internal.Consumer<any>): Internal.CompletionStage<any>;
        isCancelled(): boolean;
        runAfterBoth(arg0: Internal.CompletionStage<any>, arg1: Internal.Runnable): Internal.CompletionStage<any>;
        runAfterBoth(arg0: Internal.CompletionStage<object>, arg1: Internal.Runnable): Internal.CompletableFuture<void>;
        static anyOf(arg0: Internal.CompletableFuture<object>[]): Internal.CompletableFuture<object>;
        completeOnTimeout(arg0: T, arg1: number, arg2: Internal.TimeUnit): Internal.CompletableFuture<T>;
        handleAsync<U>(arg0: (arg0: T, arg1: Internal.Throwable) => U, arg1: Internal.Executor): Internal.CompletableFuture<U>;
        handleAsync(arg0: Internal.BiFunction<any, any, any>, arg1: Internal.Executor): Internal.CompletionStage<any>;
        handleAsync<U>(arg0: (arg0: T, arg1: Internal.Throwable) => U): Internal.CompletableFuture<U>;
        handleAsync(arg0: Internal.BiFunction<any, any, any>): Internal.CompletionStage<any>;
        defaultExecutor(): Internal.Executor;
        static supplyAsync<U>(arg0: () => U, arg1: Internal.Executor): Internal.CompletableFuture<U>;
        static supplyAsync<U>(arg0: () => U): Internal.CompletableFuture<U>;
        completeExceptionally(arg0: Internal.Throwable): boolean;
        isDone(): boolean;
        whenComplete(arg0: (arg0: T, arg1: Internal.Throwable) => void): Internal.CompletableFuture<T>;
        whenComplete(arg0: Internal.BiConsumer<any, any>): Internal.CompletionStage<any>;
        thenAcceptBothAsync<U>(arg0: Internal.CompletionStage<U>, arg1: (arg0: T, arg1: U) => void, arg2: Internal.Executor): Internal.CompletableFuture<void>;
        thenAcceptBothAsync(arg0: Internal.CompletionStage<any>, arg1: Internal.BiConsumer<any, any>, arg2: Internal.Executor): Internal.CompletionStage<any>;
        thenAcceptBothAsync(arg0: Internal.CompletionStage<any>, arg1: Internal.BiConsumer<any, any>): Internal.CompletionStage<any>;
        thenAcceptBothAsync<U>(arg0: Internal.CompletionStage<U>, arg1: (arg0: T, arg1: U) => void): Internal.CompletableFuture<void>;
        static delayedExecutor(arg0: number, arg1: Internal.TimeUnit): Internal.Executor;
        static delayedExecutor(arg0: number, arg1: Internal.TimeUnit, arg2: Internal.Executor): Internal.Executor;
        exceptionallyComposeAsync(arg0: (arg0: Internal.Throwable) => Internal.CompletionStage<T>, arg1: Internal.Executor): Internal.CompletableFuture<T>;
        exceptionallyComposeAsync(arg0: Internal.Function<any, any>, arg1: Internal.Executor): Internal.CompletionStage<any>;
        exceptionallyComposeAsync(arg0: (arg0: Internal.Throwable) => Internal.CompletionStage<T>): Internal.CompletableFuture<T>;
        exceptionallyComposeAsync(arg0: Internal.Function<any, any>): Internal.CompletionStage<any>;
        thenCombine(arg0: Internal.CompletionStage<any>, arg1: Internal.BiFunction<any, any, any>): Internal.CompletionStage<any>;
        thenCombine<U, V>(arg0: Internal.CompletionStage<U>, arg1: (arg0: T, arg1: U) => V): Internal.CompletableFuture<V>;
        equals(arg0: object): boolean;
        toString(): string;
        minimalCompletionStage(): Internal.CompletionStage<T>;
        complete(arg0: T): boolean;
        static completedStage<U>(arg0: U): Internal.CompletionStage<U>;
        get numberOfDependents(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class InteractionResult extends Internal.Enum<Internal.InteractionResult> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(arg0: string): Internal.InteractionResult;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.InteractionResult[];
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly SUCCESS : Internal.InteractionResult;
        static readonly PASS : Internal.InteractionResult;
        static readonly CONSUME_PARTIAL : Internal.InteractionResult;
        static readonly CONSUME : Internal.InteractionResult;
        static readonly FAIL : Internal.InteractionResult;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class WorldPainterObject extends Internal.PainterObject {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        preDraw(event: Internal.WorldPaintEventJS): void;
        hashCode(): number;
        notifyAll(): void;
        equals(o: object): boolean;
        update(tag: Internal.CompoundTag): void;
        toString(): string;
        id(i: string): Internal.PainterObject;
        draw(arg0: Internal.WorldPaintEventJS): void;
        notify(): void;
        specialEquals(o: object, shallow: boolean): boolean;
        parent : Internal.PainterObjectStorage;
        visible : boolean;
        d : number;
        w : number;
        x : number;
        h : number;
        y : number;
        z : number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class UUID implements Internal.Serializable, Internal.Comparable<Internal.UUID> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        static nameUUIDFromBytes(arg0: number[]): Internal.UUID;
        compareTo(arg0: object): number;
        compareTo(arg0: Internal.UUID): number;
        version(): number;
        notify(): void;
        node(): number;
        hashCode(): number;
        equals(arg0: object): boolean;
        variant(): number;
        static randomUUID(): Internal.UUID;
        toString(): string;
        static fromString(arg0: string): Internal.UUID;
        clockSequence(): number;
        timestamp(): number;
        get leastSignificantBits(): number;
        get mostSignificantBits(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class StringBuffer extends Internal.AbstractStringBuilder implements Internal.Serializable, Internal.Comparable<Internal.StringBuffer>, Internal.CharSequence {
        deleteCharAt(arg0: number): Internal.StringBuffer;
        deleteCharAt(arg0: number): Internal.AbstractStringBuilder;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        codePointAt(arg0: number): number;
        notifyAll(): void;
        setCharAt(arg0: number, arg1: string): void;
        replace(arg0: number, arg1: number, arg2: string): Internal.AbstractStringBuilder;
        replace(arg0: number, arg1: number, arg2: string): Internal.StringBuffer;
        insert(arg0: number, arg1: number): Internal.AbstractStringBuilder;
        insert(arg0: number, arg1: number): Internal.StringBuffer;
        insert(arg0: number, arg1: string): Internal.AbstractStringBuilder;
        insert(arg0: number, arg1: string): Internal.StringBuffer;
        insert(arg0: number, arg1: boolean): Internal.AbstractStringBuilder;
        insert(arg0: number, arg1: boolean): Internal.StringBuffer;
        insert(arg0: number, arg1: Internal.CharSequence, arg2: number, arg3: number): Internal.AbstractStringBuilder;
        insert(arg0: number, arg1: Internal.CharSequence, arg2: number, arg3: number): Internal.StringBuffer;
        insert(arg0: number, arg1: number): Internal.AbstractStringBuilder;
        insert(arg0: number, arg1: number): Internal.StringBuffer;
        insert(arg0: number, arg1: number): Internal.AbstractStringBuilder;
        insert(arg0: number, arg1: number): Internal.StringBuffer;
        insert(arg0: number, arg1: number): Internal.AbstractStringBuilder;
        insert(arg0: number, arg1: number): Internal.StringBuffer;
        insert(arg0: number, arg1: object): Internal.AbstractStringBuilder;
        insert(arg0: number, arg1: object): Internal.StringBuffer;
        insert(arg0: number, arg1: string[], arg2: number, arg3: number): Internal.AbstractStringBuilder;
        insert(arg0: number, arg1: string[], arg2: number, arg3: number): Internal.StringBuffer;
        insert(arg0: number, arg1: string): Internal.AbstractStringBuilder;
        insert(arg0: number, arg1: string): Internal.StringBuffer;
        insert(arg0: number, arg1: string[]): Internal.AbstractStringBuilder;
        insert(arg0: number, arg1: string[]): Internal.StringBuffer;
        insert(arg0: number, arg1: Internal.CharSequence): Internal.AbstractStringBuilder;
        insert(arg0: number, arg1: Internal.CharSequence): Internal.StringBuffer;
        compareTo(arg0: Internal.StringBuffer): number;
        compareTo(arg0: object): number;
        delete(arg0: number, arg1: number): Internal.AbstractStringBuilder;
        delete(arg0: number, arg1: number): Internal.StringBuffer;
        notify(): void;
        substring(arg0: number, arg1: number): string;
        substring(arg0: number): string;
        capacity(): number;
        appendCodePoint(arg0: number): Internal.AbstractStringBuilder;
        appendCodePoint(arg0: number): Internal.StringBuffer;
        hashCode(): number;
        codePointBefore(arg0: number): number;
        indexOf(arg0: string): number;
        indexOf(arg0: string, arg1: number): number;
        codePointCount(arg0: number, arg1: number): number;
        codePoints(): Internal.IntStream;
        trimToSize(): void;
        getChars(arg0: number, arg1: number, arg2: string[], arg3: number): void;
        isEmpty(): boolean;
        length(): number;
        subSequence(arg0: number, arg1: number): Internal.CharSequence;
        reverse(): Internal.StringBuffer;
        reverse(): Internal.AbstractStringBuilder;
        lastIndexOf(arg0: string, arg1: number): number;
        lastIndexOf(arg0: string): number;
        setLength(arg0: number): void;
        equals(arg0: object): boolean;
        toString(): string;
        ensureCapacity(arg0: number): void;
        chars(): Internal.IntStream;
        offsetByCodePoints(arg0: number, arg1: number): number;
        charAt(arg0: number): string;
        append(arg0: string[]): Internal.AbstractStringBuilder;
        append(arg0: string[]): Internal.StringBuffer;
        append(arg0: number): Internal.StringBuffer;
        append(arg0: number): Internal.AbstractStringBuilder;
        append(arg0: number): Internal.StringBuffer;
        append(arg0: number): Internal.AbstractStringBuilder;
        append(arg0: number): Internal.StringBuffer;
        append(arg0: number): Internal.AbstractStringBuilder;
        append(arg0: string[], arg1: number, arg2: number): Internal.StringBuffer;
        append(arg0: string[], arg1: number, arg2: number): Internal.AbstractStringBuilder;
        append(arg0: boolean): Internal.StringBuffer;
        append(arg0: boolean): Internal.AbstractStringBuilder;
        append(arg0: string): Internal.StringBuffer;
        append(arg0: string): Internal.AbstractStringBuilder;
        append(arg0: string): Internal.Appendable;
        append(arg0: number): Internal.AbstractStringBuilder;
        append(arg0: number): Internal.StringBuffer;
        append(arg0: string): Internal.AbstractStringBuilder;
        append(arg0: string): Internal.StringBuffer;
        append(arg0: Internal.StringBuffer): Internal.AbstractStringBuilder;
        append(arg0: Internal.StringBuffer): Internal.StringBuffer;
        append(arg0: Internal.CharSequence): Internal.AbstractStringBuilder;
        append(arg0: Internal.CharSequence): Internal.Appendable;
        append(arg0: Internal.CharSequence): Internal.StringBuffer;
        append(arg0: Internal.CharSequence, arg1: number, arg2: number): Internal.Appendable;
        append(arg0: Internal.CharSequence, arg1: number, arg2: number): Internal.StringBuffer;
        append(arg0: Internal.CharSequence, arg1: number, arg2: number): Internal.AbstractStringBuilder;
        append(arg0: object): Internal.AbstractStringBuilder;
        append(arg0: object): Internal.StringBuffer;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class ImmutableMultisetGwtSerializationDependencies <E> extends Internal.ImmutableCollection<E> {
        add(arg0: E): boolean;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        isEmpty(): boolean;
        clear(): void;
        notify(): void;
        remove(arg0: object): boolean;
        contains(arg0: object): boolean;
        iterator(): Internal.Iterator<any>;
        size(): number;
        hashCode(): number;
        equals(arg0: object): boolean;
        toArray(): object[];
        toArray<T>(arg0: T[]): T[];
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class BlastFurnaceFuelRecipeJS extends Internal.IERecipeJS {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        ingredientAction(filter: Internal.IngredientActionFilter, action: Internal.IngredientAction): Internal.RecipeJS;
        notifyAll(): void;
        convertReplacedOutput(index: number, oldStack: Internal.ItemStackJS, newStack: Internal.ItemStackJS): Internal.ItemStackJS;
        convertReplacedInput(index: number, oldIngredient: Internal.IngredientJS, newIngredient: Internal.IngredientJS): Internal.IngredientJS;
        save(): void;
        damageIngredient(filter: Internal.IngredientActionFilter, damage: number): Internal.RecipeJS;
        damageIngredient(filter: Internal.IngredientActionFilter): Internal.RecipeJS;
        getId(): string;
        dontAdd(): void;
        notify(): void;
        serializeJson(): void;
        parseIngredientItemIE(json: Internal.JsonElement): Internal.IngredientStackJS;
        replaceOutput(i: Internal.IngredientJS, with_: Internal.ItemStackJS, exact: boolean): boolean;
        hashCode(): number;
        merge(data: object): Internal.RecipeJS;
        create(args: Internal.ListJS): void;
        deserializeJson(): void;
        id(_id: ResourceLocation): Internal.RecipeJS;
        parseIngredientItem(o: object, key: string): Internal.IngredientJS;
        parseIngredientItem(o: object): Internal.IngredientJS;
        group(g: string): Internal.RecipeJS;
        energy(e: number): Internal.IERecipeJS;
        deserialize(): void;
        serializeNBTAsJson(): boolean;
        getOutputIndex(ingredient: Internal.IngredientJS, exact: boolean): number;
        getInputIndex(ingredient: Internal.IngredientJS, exact: boolean): number;
        setGroup(g: string): void;
        serialize(): void;
        resultFromRecipeJson(json: Internal.JsonObject): Internal.ItemStackJS;
        stage(s: string): Internal.RecipeJS;
        serializeIngredientStack(in_: Internal.IngredientStackJS): Internal.JsonElement;
        replaceInput(i: Internal.IngredientJS, with_: Internal.IngredientJS, exact: boolean): boolean;
        getType(): string;
        equals(arg0: object): boolean;
        getGroup(): string;
        serializeItemStack(stack: Internal.ItemStackJS): Internal.JsonElement;
        hasOutput(ingredient: Internal.IngredientJS, exact: boolean): boolean;
        toString(): string;
        keepIngredient(filter: Internal.IngredientActionFilter): Internal.RecipeJS;
        time(t: number): Internal.IERecipeJS;
        hasInput(ingredient: Internal.IngredientJS, exact: boolean): boolean;
        customIngredientAction(filter: Internal.IngredientActionFilter, id: string): Internal.RecipeJS;
        parseResultItem(o: object): Internal.ItemStackJS;
        replaceIngredient(filter: Internal.IngredientActionFilter, item: Internal.ItemStackJS): Internal.RecipeJS;
        static currentRecipe : Internal.RecipeJS;
        readonly inputItems : Internal.List<Internal.IngredientJS>;
        static itemErrors : false;
        type : Internal.RecipeTypeJS;
        originalJson : Internal.JsonObject;
        serializeOutputs : boolean;
        readonly outputFluids : Internal.List<Internal.FluidStack>;
        originalRecipe : Internal.Recipe<object>;
        readonly inputFluids : Internal.List<Internal.FluidTagInput>;
        json : Internal.JsonObject;
        readonly outputItems : Internal.List<Internal.ItemStackJS>;
        serializeInputs : boolean;
        get mod(): string;
        get uniqueId(): string;
        get fromToString(): string;
        get path(): string;
        get orCreateId(): ResourceLocation;
        get originalRecipeResult(): Internal.ItemStackJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class GlNumericType extends Internal.Enum<Internal.GlNumericType> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        static valueOf(arg0: string): Internal.GlNumericType;
        notifyAll(): void;
        static values(): Internal.GlNumericType[];
        static byName(arg0: string): Internal.GlNumericType;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        castAndBuffer(arg0: Internal.ByteBuffer, arg1: number): void;
        name(): string;
        toString(): string;
        ordinal(): number;
        static readonly UBYTE : Internal.GlNumericType;
        static readonly FLOAT : Internal.GlNumericType;
        static readonly BYTE : Internal.GlNumericType;
        static readonly USHORT : Internal.GlNumericType;
        static readonly UINT : Internal.GlNumericType;
        static readonly INT : Internal.GlNumericType;
        static readonly SHORT : Internal.GlNumericType;
        get glEnum(): number;
        get typeName(): string;
        get byteWidth(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class SimpleMapCodec <K, V> extends Internal.MapCodec<Map<K, V>> implements Internal.BaseMapCodec<K, V> {
        encode(arg0: object, arg1: Internal.DynamicOps<any>, arg2: Internal.RecordBuilder<any>): Internal.RecordBuilder<any>;
        encode<T>(arg0: Map<K, V>, arg1: Internal.DynamicOps<T>, arg2: Internal.RecordBuilder<T>): Internal.RecordBuilder<T>;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        elementCodec(): Internal.Codec<V>;
        keyCodec(): Internal.Codec<K>;
        keys<T>(arg0: Internal.DynamicOps<T>): Internal.Stream<T>;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        withLifecycle(arg0: Internal.Lifecycle): Internal.MapDecoder<any>;
        withLifecycle(arg0: Internal.Lifecycle): Internal.MapEncoder<any>;
        decode<T>(arg0: Internal.DynamicOps<T>, arg1: Internal.MapLike<T>): Internal.DataResult<Map<K, V>>;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface BiomeManager$NoiseBiomeSource {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class IntOpenHashSet extends Internal.AbstractIntSet implements Internal.Serializable, Internal.Cloneable, Internal.Hash {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        intIterator(): Internal.IntIterator;
        intSpliterator(): Internal.IntSpliterator;
        notify(): void;
        remove(arg0: number): boolean;
        remove(arg0: object): boolean;
        intStream(): Internal.IntStream;
        removeAll(arg0: Internal.IntCollection): boolean;
        iterator(): Internal.IntIterator;
        iterator(): Internal.Iterator<any>;
        trim(): boolean;
        trim(arg0: number): boolean;
        hashCode(): number;
        toIntArray(arg0: number[]): number[];
        toIntArray(): number[];
        static of(): Internal.IntOpenHashSet;
        static of(arg0: number): Internal.IntOpenHashSet;
        static of(arg0: number, arg1: number): Internal.IntOpenHashSet;
        static of(arg0: number[]): Internal.IntOpenHashSet;
        static of(arg0: number, arg1: number, arg2: number): Internal.IntOpenHashSet;
        toArray(arg0: number[]): number[];
        toArray(): object[];
        toArray<T>(arg0: T[]): T[];
        rem(arg0: number): boolean;
        add(arg0: number): boolean;
        add(arg0: number): boolean;
        add(arg0: object): boolean;
        spliterator(): Internal.Spliterator<any>;
        spliterator(): Internal.IntSpliterator;
        forEach(arg0: Internal.IntConsumer): void;
        forEach(arg0: it.unimi.dsi.fastutil.ints.IntConsumer): void;
        containsAll(arg0: Internal.IntCollection): boolean;
        isEmpty(): boolean;
        clear(): void;
        static toSetWithExpectedSize(arg0: Internal.IntStream, arg1: number): Internal.IntOpenHashSet;
        removeIf(arg0: it.unimi.dsi.fastutil.ints.IntPredicate): boolean;
        removeIf(arg0: Internal.IntPredicate): boolean;
        static toSet(arg0: Internal.IntStream): Internal.IntOpenHashSet;
        contains(arg0: number): boolean;
        contains(arg0: object): boolean;
        size(): number;
        addAll(arg0: Internal.IntCollection): boolean;
        addAll(arg0: Internal.Collection<number>): boolean;
        equals(arg0: object): boolean;
        clone(): Internal.IntOpenHashSet;
        clone(): object;
        toString(): string;
        intParallelStream(): Internal.IntStream;
        retainAll(arg0: Internal.IntCollection): boolean;
        static readonly DEFAULT_GROWTH_FACTOR : 16;
        static readonly FAST_LOAD_FACTOR : 0.5;
        static readonly DEFAULT_INITIAL_SIZE : 16;
        static readonly DEFAULT_LOAD_FACTOR : 0.75;
        static readonly OCCUPIED : -1;
        static readonly VERY_FAST_LOAD_FACTOR : 0.25;
        static readonly FREE : 0;
        static readonly PRIMES : number[];
        static readonly REMOVED : 1;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Supplier <T> {
        get(): T;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Cloneable {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IForgeBlockEntity implements Internal.ICapabilitySerializable<Internal.CompoundTag> {
        requestModelDataUpdate(): void;
        serializeNBT(): Internal.Tag;
        serializeNBT(): Internal.CompoundTag;
        onChunkUnloaded(): void;
        onDataPacket(arg0: Internal.Connection, arg1: Internal.ClientboundBlockEntityDataPacket): void;
        deserializeNBT(arg0: Internal.Tag): void;
        deserializeNBT(arg0: Internal.CompoundTag): void;
        onLoad(): void;
        handleUpdateTag(arg0: Internal.CompoundTag): void;
        get modelData(): Internal.IModelData;
        get tileData(): Internal.CompoundTag;
        get renderBoundingBox(): Internal.AABB;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface DoubleStream$DoubleMapMultiConsumer {
        accept(arg0: number, arg1: Internal.DoubleConsumer): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ChannelMetadata {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hasDisconnect(): boolean;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        defaultMaxMessagesPerRead(): number;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class Provider extends Internal.Properties {
        isConfigured(): boolean;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        getOrDefault(arg0: object, arg1: object): object;
        loadFromXML(arg0: Internal.InputStream): void;
        keys(): Internal.Enumeration<object>;
        notifyAll(): void;
        computeIfAbsent(arg0: object, arg1: (arg0: object) => object): object;
        values(): Internal.Collection<object>;
        save(arg0: Internal.OutputStream, arg1: string): void;
        replace(arg0: object, arg1: object): object;
        replace(arg0: object, arg1: object, arg2: object): boolean;
        replaceAll(arg0: (arg0: object, arg1: object) => object): void;
        notify(): void;
        containsValue(arg0: object): boolean;
        put(arg0: object, arg1: object): object;
        remove(arg0: object): object;
        remove(arg0: object, arg1: object): boolean;
        compute(arg0: object, arg1: (arg0: object, arg1: object) => object): object;
        load(arg0: Internal.InputStream): void;
        load(arg0: Internal.Reader): void;
        hashCode(): number;
        putAll(arg0: Map<object, object>): void;
        merge(arg0: object, arg1: object, arg2: (arg0: object, arg1: object) => object): object;
        get(arg0: object): object;
        keySet(): Internal.Set<object>;
        getProperty(arg0: string): string;
        getProperty(arg0: string, arg1: string): string;
        entrySet(): Internal.Set<Internal.Map$Entry<object, object>>;
        containsKey(arg0: object): boolean;
        forEach(arg0: (arg0: object, arg1: object) => void): void;
        isEmpty(): boolean;
        clear(): void;
        store(arg0: Internal.OutputStream, arg1: string): void;
        store(arg0: Internal.Writer, arg1: string): void;
        configure(arg0: string): Internal.Provider;
        list(arg0: Internal.PrintStream): void;
        list(arg0: Internal.PrintWriter): void;
        storeToXML(arg0: Internal.OutputStream, arg1: string, arg2: string): void;
        storeToXML(arg0: Internal.OutputStream, arg1: string): void;
        storeToXML(arg0: Internal.OutputStream, arg1: string, arg2: Internal.Charset): void;
        getService(arg0: string, arg1: string): Internal.Provider$Service;
        contains(arg0: object): boolean;
        computeIfPresent(arg0: object, arg1: (arg0: object, arg1: object) => object): object;
        size(): number;
        setProperty(arg0: string, arg1: string): object;
        equals(arg0: object): boolean;
        elements(): Internal.Enumeration<object>;
        clone(): object;
        toString(): string;
        putIfAbsent(arg0: object, arg1: object): object;
        get name(): string;
        get services(): Internal.Set<Internal.Provider$Service>;
        get version(): number;
        get info(): string;
        get versionStr(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface LongStream implements Internal.BaseStream<number, Internal.LongStream> {
        average(): Internal.OptionalDouble;
        sequential(): Internal.BaseStream<any, any>;
        sequential(): Internal.LongStream;
        takeWhile(arg0: Internal.LongPredicate): Internal.LongStream;
        distinct(): Internal.LongStream;
        findFirst(): Internal.OptionalLong;
        sum(): number;
        skip(arg0: number): Internal.LongStream;
        allMatch(arg0: Internal.LongPredicate): boolean;
        mapToObj<U>(arg0: Internal.LongFunction<U>): Internal.Stream<U>;
        mapMulti(arg0: Internal.LongStream$LongMapMultiConsumer): Internal.LongStream;
        iterator(): Internal.Iterator<any>;
        iterator(): Internal.PrimitiveIterator$OfLong;
        asDoubleStream(): Internal.DoubleStream;
        min(): Internal.OptionalLong;
        parallel(): Internal.LongStream;
        parallel(): Internal.BaseStream<any, any>;
        noneMatch(arg0: Internal.LongPredicate): boolean;
        findAny(): Internal.OptionalLong;
        isParallel(): boolean;
        limit(arg0: number): Internal.LongStream;
        toArray(): number[];
        forEachOrdered(arg0: Internal.LongConsumer): void;
        close(): void;
        anyMatch(arg0: Internal.LongPredicate): boolean;
        map(arg0: Internal.LongUnaryOperator): Internal.LongStream;
        mapToDouble(arg0: Internal.LongToDoubleFunction): Internal.DoubleStream;
        unordered(): S;
        reduce(arg0: Internal.LongBinaryOperator): Internal.OptionalLong;
        reduce(arg0: number, arg1: Internal.LongBinaryOperator): number;
        spliterator(): Internal.Spliterator$OfLong;
        spliterator(): Internal.Spliterator<any>;
        max(): Internal.OptionalLong;
        forEach(arg0: Internal.LongConsumer): void;
        count(): number;
        dropWhile(arg0: Internal.LongPredicate): Internal.LongStream;
        peek(arg0: Internal.LongConsumer): Internal.LongStream;
        flatMap(arg0: Internal.LongFunction<Internal.LongStream>): Internal.LongStream;
        filter(arg0: Internal.LongPredicate): Internal.LongStream;
        onClose(arg0: Internal.Runnable): S;
        sorted(): Internal.LongStream;
        boxed(): Internal.Stream<number>;
        summaryStatistics(): Internal.LongSummaryStatistics;
        mapToInt(arg0: Internal.LongToIntFunction): Internal.IntStream;
        collect<R>(arg0: () => R, arg1: Internal.ObjLongConsumer<R>, arg2: (arg0: R, arg1: R) => void): R;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Function4 <T1, T2, T3, T4, R> {
        apply(arg0: T1, arg1: T2, arg2: T3, arg3: T4): R;
        curry3(): Internal.Function3<T1, T2, T3, (arg0: T4) => R>;
        curry2(): (arg0: T1, arg1: T2) => (arg0: T3, arg1: T4) => R;
        curry(): (arg0: T1) => Internal.Function3<T2, T3, T4, R>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Float2ByteFunction implements it.unimi.dsi.fastutil.Function<number, number>, Internal.DoubleToIntFunction {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        andThenShort(arg0: Internal.Byte2ShortFunction): Internal.Float2ShortFunction;
        composeByte(arg0: Internal.Byte2FloatFunction): Internal.Byte2ByteFunction;
        andThenInt(arg0: Internal.Byte2IntFunction): Internal.Float2IntFunction;
        composeReference<T>(arg0: Internal.Reference2FloatFunction<T>): Internal.Reference2ByteFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: number) => T;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: number): number;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: object): object;
        remove(arg0: object): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Byte2DoubleFunction): Internal.Float2DoubleFunction;
        andThenObject<T>(arg0: Internal.Byte2ObjectFunction<T>): Internal.Float2ObjectFunction<T>;
        get(arg0: object): number;
        get(arg0: object): object;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Byte2LongFunction): Internal.Float2LongFunction;
        composeLong(arg0: Internal.Long2FloatFunction): Internal.Long2ByteFunction;
        andThenByte(arg0: Internal.Byte2ByteFunction): Internal.Float2ByteFunction;
        andThenFloat(arg0: Internal.Byte2FloatFunction): Internal.Float2FloatFunction;
        applyAsInt(arg0: number): number;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2FloatFunction): Internal.Int2ByteFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2FloatFunction): Internal.Float2ByteFunction;
        andThenChar(arg0: Internal.Byte2CharFunction): Internal.Float2CharFunction;
        composeObject<T>(arg0: Internal.Object2FloatFunction<T>): Internal.Object2ByteFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => number;
        composeShort(arg0: Internal.Short2FloatFunction): Internal.Short2ByteFunction;
        andThenReference<T>(arg0: Internal.Byte2ReferenceFunction<T>): Internal.Float2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2FloatFunction): Internal.Char2ByteFunction;
        composeDouble(arg0: Internal.Double2FloatFunction): Internal.Double2ByteFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Proxy {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        address(): Internal.SocketAddress;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        type(): Internal.Proxy$Type;
        notify(): void;
        static readonly NO_PROXY : Internal.Proxy;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Parameter implements Internal.AnnotatedElement {
        isNamePresent(): boolean;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isAnnotationPresent(arg0: Internal.Class<Internal.Annotation>): boolean;
        isVarArgs(): boolean;
        notifyAll(): void;
        isSynthetic(): boolean;
        notify(): void;
        isImplicit(): boolean;
        getAnnotationsByType<T>(arg0: Internal.Class<T>): T[];
        getDeclaredAnnotationsByType<T>(arg0: Internal.Class<T>): T[];
        getAnnotation<T>(arg0: Internal.Class<T>): T;
        hashCode(): number;
        equals(arg0: object): boolean;
        getDeclaredAnnotation<T>(arg0: Internal.Class<T>): T;
        toString(): string;
        get declaringExecutable(): Internal.Executable;
        get name(): string;
        get annotations(): Internal.Annotation[];
        get parameterizedType(): Internal.Type;
        get declaredAnnotations(): Internal.Annotation[];
        get type(): Internal.Class<object>;
        get modifiers(): number;
        get annotatedType(): Internal.AnnotatedType;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class RecipeTypeJS {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(obj: object): boolean;
        isCustom(): boolean;
        toString(): string;
        notify(): void;
        readonly factory : () => Internal.RecipeJS;
        readonly serializer : Internal.RecipeSerializer<object>;
        get mod(): string;
        get id(): string;
        get idRL(): ResourceLocation;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface TemporalUnit {
        isDurationEstimated(): boolean;
        isTimeBased(): boolean;
        addTo<R>(arg0: R, arg1: number): R;
        toString(): string;
        isDateBased(): boolean;
        between(arg0: Internal.Temporal, arg1: Internal.Temporal): number;
        isSupportedBy(arg0: Internal.Temporal): boolean;
        get duration(): Internal.Duration;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class AbstractMultimap <K, V> implements Internal.Multimap<K, V> {
        containsEntry(arg0: object, arg1: object): boolean;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        containsKey(arg0: object): boolean;
        forEach(arg0: (arg0: K, arg1: V) => void): void;
        asMap(): Map<K, Internal.Collection<V>>;
        keys(): Internal.Multiset<K>;
        notifyAll(): void;
        values(): Internal.Collection<V>;
        clear(): void;
        isEmpty(): boolean;
        replaceValues(arg0: K, arg1: Internal.Iterable<V>): Internal.Collection<V>;
        notify(): void;
        containsValue(arg0: object): boolean;
        put(arg0: K, arg1: V): boolean;
        remove(arg0: object, arg1: object): boolean;
        removeAll(arg0: object): Internal.Collection<V>;
        entries(): Internal.Collection<Internal.Map$Entry<K, V>>;
        size(): number;
        hashCode(): number;
        get(arg0: K): Internal.Collection<V>;
        putAll(arg0: K, arg1: Internal.Iterable<V>): boolean;
        putAll(arg0: Internal.Multimap<K, V>): boolean;
        equals(arg0: object): boolean;
        toString(): string;
        keySet(): Internal.Set<K>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class PlatformWrapper$ModInfo {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        get version(): string;
        get name(): string;
        get id(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ClocheRenderFunction$ClocheRenderReference {
        serialize(): Internal.JsonObject;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        static read(arg0: Internal.FriendlyByteBuf): Internal.ClocheRenderFunction$ClocheRenderReference;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        write(arg0: Internal.FriendlyByteBuf): void;
        notify(): void;
        static deserialize(arg0: Internal.JsonObject): Internal.ClocheRenderFunction$ClocheRenderReference;
        get block(): Internal.Block;
        get type(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class ForwardingMultimap <K, V> extends Internal.ForwardingObject implements Internal.Multimap<K, V> {
        containsEntry(arg0: object, arg1: object): boolean;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        forEach(arg0: (arg0: K, arg1: V) => void): void;
        asMap(): Map<K, Internal.Collection<V>>;
        keys(): Internal.Multiset<K>;
        containsKey(arg0: object): boolean;
        notifyAll(): void;
        values(): Internal.Collection<V>;
        isEmpty(): boolean;
        clear(): void;
        replaceValues(arg0: K, arg1: Internal.Iterable<V>): Internal.Collection<V>;
        notify(): void;
        containsValue(arg0: object): boolean;
        put(arg0: K, arg1: V): boolean;
        remove(arg0: object, arg1: object): boolean;
        removeAll(arg0: object): Internal.Collection<V>;
        entries(): Internal.Collection<Internal.Map$Entry<K, V>>;
        size(): number;
        hashCode(): number;
        putAll(arg0: Internal.Multimap<K, V>): boolean;
        putAll(arg0: K, arg1: Internal.Iterable<V>): boolean;
        equals(arg0: object): boolean;
        get(arg0: K): Internal.Collection<V>;
        toString(): string;
        keySet(): Internal.Set<K>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Instance {
        get worldPosition(): BlockPos;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface List <E> implements Internal.Collection<E> {
        add(arg0: number, arg1: E): void;
        add(arg0: E): boolean;
        subList(arg0: number, arg1: number): Internal.List<E>;
        set(arg0: number, arg1: E): E;
        spliterator(): Internal.Spliterator<E>;
        containsAll(arg0: Internal.Collection<object>): boolean;
        isEmpty(): boolean;
        clear(): void;
        sort(arg0: Internal.Comparator<E>): void;
        replaceAll(arg0: Internal.UnaryOperator<E>): void;
        remove(arg0: object): boolean;
        remove(arg0: number): E;
        lastIndexOf(arg0: object): number;
        removeAll(arg0: Internal.Collection<object>): boolean;
        contains(arg0: object): boolean;
        iterator(): Internal.Iterator<E>;
        size(): number;
        addAll(arg0: number, arg1: Internal.Collection<E>): boolean;
        addAll(arg0: Internal.Collection<E>): boolean;
        hashCode(): number;
        equals(arg0: object): boolean;
        get(arg0: number): E;
        toArray(): object[];
        toArray<T>(arg0: T[]): T[];
        listIterator(arg0: number): Internal.ListIterator<E>;
        listIterator(): Internal.ListIterator<E>;
        indexOf(arg0: object): number;
        retainAll(arg0: Internal.Collection<object>): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface NearbyEntityListener {
        onSectionLeftRange<T>(entityTrackingSection: object, collection: Internal.ClassInstanceMultiMap<T>): void;
        onSectionEnteredRange<T>(entityTrackingSection: object, collection: Internal.ClassInstanceMultiMap<T>): void;
        onEntityLeftRange(arg0: Internal.Entity): void;
        forEachChunkInRangeChange(entityCache: Internal.EntitySectionStorage<Internal.EntityAccess>, prevCenterPos: Internal.SectionPos, newCenterPos: Internal.SectionPos): void;
        onEntityEnteredRange(arg0: Internal.Entity): void;
        get entityClass(): Internal.Class<Internal.Entity>;
        get chunkRange(): Internal.Range6Int;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ProtectionDomain {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        implies(arg0: Internal.Permission): boolean;
        staticPermissionsOnly(): boolean;
        notify(): void;
        get permissions(): Internal.PermissionCollection;
        get classLoader(): Internal.ClassLoader;
        get principals(): Internal.Principal[];
        get codeSource(): Internal.CodeSource;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class RecipeManager extends Internal.SimpleJsonResourceReloadListener implements Internal.RecipeManagerAccessor, Internal.RecipeManagerKJS {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        customRecipesKJS(jsonMap: Map<ResourceLocation, Internal.JsonObject>): void;
        getRecipeMap(arg0: Internal.RecipeType<any>): Map<any, any>;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        get byNameKJS(): Map<any, any>;
        set byNameKJS(arg0: Map<any, any>);
        get gson(): Internal.Gson;
        set recipesKJS(arg0: Map<any, any>);
        get recipesKJS(): Map<any, any>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Float2ObjectFunction <V> implements it.unimi.dsi.fastutil.Function<number, V>, Internal.DoubleFunction<V> {
        getOrDefault(arg0: object, arg1: V): V;
        getOrDefault(arg0: number, arg1: V): V;
        andThenShort(arg0: Internal.Object2ShortFunction<V>): Internal.Float2ShortFunction;
        composeByte(arg0: Internal.Byte2FloatFunction): Internal.Byte2ObjectFunction<V>;
        andThenInt(arg0: Internal.Object2IntFunction<V>): Internal.Float2IntFunction;
        composeReference<T>(arg0: Internal.Reference2FloatFunction<T>): (arg0: T) => V;
        put(arg0: number, arg1: V): V;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: V): V;
        remove(arg0: number): V;
        remove(arg0: object): V;
        defaultReturnValue(): V;
        defaultReturnValue(arg0: V): void;
        andThenDouble(arg0: Internal.Object2DoubleFunction<V>): Internal.Float2DoubleFunction;
        andThenObject<T>(arg0: (arg0: V) => T): Internal.Float2ObjectFunction<T>;
        get(arg0: object): V;
        get(arg0: number): V;
        andThenLong(arg0: Internal.Object2LongFunction<V>): Internal.Float2LongFunction;
        composeLong(arg0: Internal.Long2FloatFunction): Internal.Long2ObjectFunction<V>;
        andThenByte(arg0: Internal.Object2ByteFunction<V>): Internal.Float2ByteFunction;
        andThenFloat(arg0: Internal.Object2FloatFunction<V>): Internal.Float2FloatFunction;
        apply(arg0: number): V;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2FloatFunction): Internal.Int2ObjectFunction<V>;
        clear(): void;
        composeFloat(arg0: Internal.Float2FloatFunction): Internal.Float2ObjectFunction<V>;
        andThenChar(arg0: Internal.Object2CharFunction<V>): Internal.Float2CharFunction;
        composeObject<T>(arg0: Internal.Object2FloatFunction<T>): (arg0: T) => V;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => V;
        composeShort(arg0: Internal.Short2FloatFunction): Internal.Short2ObjectFunction<V>;
        andThenReference<T>(arg0: (arg0: V) => T): Internal.Float2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2FloatFunction): Internal.Char2ObjectFunction<V>;
        composeDouble(arg0: Internal.Double2FloatFunction): Internal.Double2ObjectFunction<V>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface FormattedText {
        get string(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class BlockableEventLoop <R> implements Internal.ProfilerMeasured, Internal.ProcessorHandle<R>, Internal.Executor {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        close(): void;
        execute(arg0: Internal.Runnable): void;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ItemStack extends Internal.CapabilityProvider<Internal.ItemStack> implements Internal.IForgeItemStack, Internal.ItemStackKJS, Internal.StorableItemStack {
        canElytraFly(arg0: Internal.LivingEntity): boolean;
        canPerformAction(arg0: Internal.ToolAction): boolean;
        shouldCauseBlockBreakReset(arg0: Internal.ItemStack): boolean;
        serializeNBT(): Internal.Tag;
        serializeNBT(): Internal.CompoundTag;
        invalidateCaps(): void;
        localvar$bem000$updateInventory(count: number): number;
        readShareTag(arg0: Internal.CompoundTag): void;
        onEntityItemUpdate(arg0: Internal.ItemEntity): boolean;
        registerToInventory(itemStacks: Internal.LithiumStackList, mySlot: number): void;
        isBookEnchantable(arg0: Internal.ItemStack): boolean;
        canDisableShield(arg0: Internal.ItemStack, arg1: Internal.LivingEntity, arg2: Internal.LivingEntity): boolean;
        areCapsCompatible(arg0: Internal.CapabilityDispatcher): boolean;
        onUsingTick(arg0: Internal.LivingEntity, arg1: number): void;
        isPiglinCurrency(): boolean;
        getSweepHitBox(arg0: Internal.Player, arg1: Internal.Entity): Internal.AABB;
        reviveCaps(): void;
        isRepairable(): boolean;
        getBurnTime(arg0: Internal.RecipeType<object>): number;
        onDroppedByPlayer(arg0: Internal.Player): boolean;
        onEntitySwing(arg0: Internal.LivingEntity): boolean;
        elytraFlightTick(arg0: Internal.LivingEntity, arg1: number): boolean;
        areShareTagsEqual(arg0: Internal.ItemStack): boolean;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        canEquip(arg0: EquipmentSlot, arg1: Internal.Entity): boolean;
        notifyAll(): void;
        notify(): void;
        onBlockStartBreak(arg0: BlockPos, arg1: Internal.Player): boolean;
        onHorseArmorTick(arg0: Internal.Level, arg1: Internal.Mob): void;
        getEntityLifespan(arg0: Internal.Level): number;
        hashCode(): number;
        getHighlightTip(arg0: Internal.Component): Internal.Component;
        removeTagKJS(): void;
        onArmorTick(arg0: Internal.Level, arg1: Internal.Player): void;
        unregisterFromInventory(myInventoryList: Internal.LithiumStackList): void;
        hasContainerItem(): boolean;
        doesSneakBypassUse(arg0: Internal.LevelReader, arg1: BlockPos, arg2: Internal.Player): boolean;
        onItemUseFirst(arg0: Internal.UseOnContext): Internal.InteractionResult;
        deserializeNBT(arg0: Internal.Tag): void;
        deserializeNBT(arg0: Internal.CompoundTag): void;
        asKJS(): object;
        onDestroyed(arg0: Internal.ItemEntity, arg1: Internal.DamageSource): void;
        equals(arg0: object): boolean;
        equals(arg0: Internal.ItemStack, arg1: boolean): boolean;
        makesPiglinsNeutral(arg0: Internal.LivingEntity): boolean;
        toString(): string;
        isEnderMask(arg0: Internal.Player, arg1: Internal.EnderMan): boolean;
        canApplyAtEnchantingTable(arg0: Internal.Enchantment): boolean;
        get itemEnchantability(): number;
        get xpRepairRatio(): number;
        get shareTag(): Internal.CompoundTag;
        get containerItem(): Internal.ItemStack;
        get equipmentSlot(): EquipmentSlot;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class AABB {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ByteProcessor {
        process(arg0: number): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ConditionContainer {
        entityScores(entity: Internal.LootContext$EntityTarget, scores: Map<string, object>): Internal.ConditionContainer;
        killedByPlayer(): Internal.ConditionContainer;
        survivesExplosion(): Internal.ConditionContainer;
        randomChance(chance: number): Internal.ConditionContainer;
        randomChanceWithLooting(chance: number, multiplier: number): Internal.ConditionContainer;
        addCondition(arg0: Internal.JsonObject): Internal.ConditionContainer;
        entityProperties(entity: Internal.LootContext$EntityTarget, properties: Internal.JsonObject): Internal.ConditionContainer;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface BlittableVertexType <T> implements Internal.BufferVertexType<T> {
        createFallbackWriter(arg0: Internal.VertexConsumer): T;
        createBufferWriter(arg0: Internal.VertexBufferView, arg1: boolean): T;
        createBufferWriter(buffer: Internal.VertexBufferView): T;
        get bufferVertexFormat(): Internal.BufferVertexFormat;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class MappedByteBuffer extends Internal.ByteBuffer {
        asIntBuffer(): Internal.IntBuffer;
        compact(): Internal.MappedByteBuffer;
        compact(): Internal.ByteBuffer;
        asLongBuffer(): Internal.LongBuffer;
        compareTo(arg0: object): number;
        compareTo(arg0: Internal.ByteBuffer): number;
        isLoaded(): boolean;
        put(arg0: Internal.ByteBuffer): Internal.ByteBuffer;
        put(arg0: number, arg1: number): Internal.ByteBuffer;
        put(arg0: number, arg1: Internal.ByteBuffer, arg2: number, arg3: number): Internal.ByteBuffer;
        put(arg0: number[]): Internal.ByteBuffer;
        put(arg0: number, arg1: number[]): Internal.ByteBuffer;
        put(arg0: number, arg1: number[], arg2: number, arg3: number): Internal.ByteBuffer;
        put(arg0: number): Internal.ByteBuffer;
        put(arg0: number[], arg1: number, arg2: number): Internal.ByteBuffer;
        slice(arg0: number, arg1: number): Internal.ByteBuffer;
        slice(arg0: number, arg1: number): Internal.Buffer;
        slice(arg0: number, arg1: number): Internal.MappedByteBuffer;
        slice(): Internal.ByteBuffer;
        slice(): Internal.MappedByteBuffer;
        slice(): Internal.Buffer;
        limit(arg0: number): Internal.Buffer;
        limit(arg0: number): Internal.ByteBuffer;
        limit(arg0: number): Internal.MappedByteBuffer;
        limit(): number;
        order(): Internal.ByteOrder;
        order(arg0: Internal.ByteOrder): Internal.ByteBuffer;
        asFloatBuffer(): Internal.FloatBuffer;
        asCharBuffer(): Internal.CharBuffer;
        static allocateDirect(arg0: number): Internal.ByteBuffer;
        putInt(arg0: number, arg1: number): Internal.ByteBuffer;
        putInt(arg0: number): Internal.ByteBuffer;
        duplicate(): Internal.MappedByteBuffer;
        duplicate(): Internal.Buffer;
        duplicate(): Internal.ByteBuffer;
        remaining(): number;
        putFloat(arg0: number): Internal.ByteBuffer;
        putFloat(arg0: number, arg1: number): Internal.ByteBuffer;
        getInt(arg0: number): number;
        getChar(arg0: number): string;
        static allocate(arg0: number): Internal.ByteBuffer;
        reset(): Internal.Buffer;
        reset(): Internal.MappedByteBuffer;
        reset(): Internal.ByteBuffer;
        force(): Internal.MappedByteBuffer;
        force(arg0: number, arg1: number): Internal.MappedByteBuffer;
        position(arg0: number): Internal.ByteBuffer;
        position(arg0: number): Internal.MappedByteBuffer;
        position(arg0: number): Internal.Buffer;
        position(): number;
        asShortBuffer(): Internal.ShortBuffer;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        putDouble(arg0: number, arg1: number): Internal.ByteBuffer;
        putDouble(arg0: number): Internal.ByteBuffer;
        getDouble(arg0: number): number;
        getFloat(arg0: number): number;
        putLong(arg0: number, arg1: number): Internal.ByteBuffer;
        putLong(arg0: number): Internal.ByteBuffer;
        notify(): void;
        asReadOnlyBuffer(): Internal.ByteBuffer;
        capacity(): number;
        isReadOnly(): boolean;
        load(): Internal.MappedByteBuffer;
        asDoubleBuffer(): Internal.DoubleBuffer;
        array(): number[];
        array(): object;
        hashCode(): number;
        get(arg0: number, arg1: number[], arg2: number, arg3: number): Internal.ByteBuffer;
        get(arg0: number): number;
        get(arg0: number[], arg1: number, arg2: number): Internal.ByteBuffer;
        get(): number;
        get(arg0: number, arg1: number[]): Internal.ByteBuffer;
        get(arg0: number[]): Internal.ByteBuffer;
        arrayOffset(): number;
        putShort(arg0: number): Internal.ByteBuffer;
        putShort(arg0: number, arg1: number): Internal.ByteBuffer;
        flip(): Internal.Buffer;
        flip(): Internal.ByteBuffer;
        flip(): Internal.MappedByteBuffer;
        hasArray(): boolean;
        getShort(arg0: number): number;
        putChar(arg0: number, arg1: string): Internal.ByteBuffer;
        putChar(arg0: string): Internal.ByteBuffer;
        hasRemaining(): boolean;
        clear(): Internal.Buffer;
        clear(): Internal.MappedByteBuffer;
        clear(): Internal.ByteBuffer;
        getLong(arg0: number): number;
        alignmentOffset(arg0: number, arg1: number): number;
        rewind(): Internal.MappedByteBuffer;
        rewind(): Internal.Buffer;
        rewind(): Internal.ByteBuffer;
        mismatch(arg0: Internal.ByteBuffer): number;
        equals(arg0: object): boolean;
        toString(): string;
        alignedSlice(arg0: number): Internal.ByteBuffer;
        isDirect(): boolean;
        static wrap(arg0: number[]): Internal.ByteBuffer;
        static wrap(arg0: number[], arg1: number, arg2: number): Internal.ByteBuffer;
        mark(): Internal.MappedByteBuffer;
        mark(): Internal.ByteBuffer;
        mark(): Internal.Buffer;
        get int(): number;
        get char(): string;
        get double(): number;
        get float(): number;
        get short(): number;
        get long(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Decoder$Terminal <A> {
        decoder(): Internal.Decoder<A>;
        decode<T>(arg0: Internal.DynamicOps<T>, arg1: T): Internal.DataResult<A>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface SteppedTask implements Internal.Task<Internal.SteppedTask> {
        incrementStep(): void;
        incrementStep(amount: number): void;
        isActive(): boolean;
        isCompleted(): boolean;
        set currentStep(arg0: number);
        get currentStep(): number;
        get totalSteps(): number;
        set totalSteps(arg0: number);
        get currentStepInfo(): string;
        set currentStepInfo(arg0: string);
        get progress(): number;
        get description(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface StackedContentsCompatible {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class AdvancementJS {
        hasDisplay(): boolean;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        getId(): ResourceLocation;
        notify(): void;
        hashCode(): number;
        equals(o: object): boolean;
        toString(): string;
        id(): ResourceLocation;
        addChild(a: Internal.AdvancementJS): void;
        readonly advancement : Internal.Advancement;
        get parent(): Internal.AdvancementJS;
        get description(): Internal.Text;
        get children(): Internal.Set<Internal.AdvancementJS>;
        get title(): Internal.Text;
        get displayText(): Internal.Text;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Random implements Internal.RandomGenerator, Internal.Serializable {
        nextFloat(): number;
        nextFloat(arg0: number): number;
        nextFloat(arg0: number, arg1: number): number;
        isDeprecated(): boolean;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        nextInt(): number;
        nextInt(arg0: number): number;
        nextInt(arg0: number, arg1: number): number;
        nextLong(): number;
        nextLong(arg0: number, arg1: number): number;
        nextLong(arg0: number): number;
        notify(): void;
        nextGaussian(): number;
        nextGaussian(arg0: number, arg1: number): number;
        nextDouble(): number;
        nextDouble(arg0: number): number;
        nextDouble(arg0: number, arg1: number): number;
        nextBytes(arg0: number[]): void;
        longs(arg0: number, arg1: number, arg2: number): Internal.LongStream;
        longs(arg0: number): Internal.LongStream;
        longs(): Internal.LongStream;
        longs(arg0: number, arg1: number): Internal.LongStream;
        nextExponential(): number;
        ints(arg0: number): Internal.IntStream;
        ints(): Internal.IntStream;
        ints(arg0: number, arg1: number): Internal.IntStream;
        ints(arg0: number, arg1: number, arg2: number): Internal.IntStream;
        doubles(arg0: number): Internal.DoubleStream;
        doubles(arg0: number, arg1: number, arg2: number): Internal.DoubleStream;
        doubles(): Internal.DoubleStream;
        doubles(arg0: number, arg1: number): Internal.DoubleStream;
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        nextBoolean(): boolean;
        set seed(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Endimation$PartKeyframes {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        static readonly CODEC : Internal.Codec<Internal.Endimation$PartKeyframes>;
        get posFrames(): Internal.EndimationKeyframe[];
        get offsetFrames(): Internal.EndimationKeyframe[];
        get rotationFrames(): Internal.EndimationKeyframe[];
        get scaleFrames(): Internal.EndimationKeyframe[];
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IModelData {
        setData<T>(arg0: (arg0: T) => boolean, arg1: T): T;
        hasProperty(arg0: (arg0: object) => boolean): boolean;
        getData<T>(arg0: (arg0: T) => boolean): T;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IdFunctionCall {
        execIdCall(arg0: Internal.IdFunctionObject, arg1: Internal.Context, arg2: Internal.Scriptable, arg3: Internal.Scriptable, arg4: object[]): object;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class ImmutableMultimap <K, V> extends Internal.BaseImmutableMultimap<K, V> implements Internal.Serializable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        asMap(): Map<any, any>;
        asMap(): Internal.ImmutableMap<K, Internal.Collection<V>>;
        keys(): Internal.ImmutableMultiset<K>;
        keys(): Internal.Multiset<any>;
        notifyAll(): void;
        values(): Internal.Collection<any>;
        values(): Internal.ImmutableCollection<V>;
        notify(): void;
        containsValue(arg0: object): boolean;
        put(arg0: K, arg1: V): boolean;
        remove(arg0: object, arg1: object): boolean;
        removeAll(arg0: object): Internal.ImmutableCollection<V>;
        removeAll(arg0: object): Internal.Collection<any>;
        hashCode(): number;
        putAll(arg0: K, arg1: Internal.Iterable<V>): boolean;
        putAll(arg0: Internal.Multimap<K, V>): boolean;
        static of<K, V>(): Internal.ImmutableMultimap<K, V>;
        static of<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V): Internal.ImmutableMultimap<K, V>;
        static of<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V, arg6: K, arg7: V): Internal.ImmutableMultimap<K, V>;
        static of<K, V>(arg0: K, arg1: V, arg2: K, arg3: V): Internal.ImmutableMultimap<K, V>;
        static of<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V, arg6: K, arg7: V, arg8: K, arg9: V): Internal.ImmutableMultimap<K, V>;
        static of<K, V>(arg0: K, arg1: V): Internal.ImmutableMultimap<K, V>;
        get(arg0: object): Internal.Collection<any>;
        get(arg0: K): Internal.ImmutableCollection<V>;
        static builder<K, V>(): Internal.ImmutableMultimap$Builder<K, V>;
        keySet(): Internal.ImmutableSet<K>;
        keySet(): Internal.Set<any>;
        containsEntry(arg0: object, arg1: object): boolean;
        inverse(): Internal.ImmutableMultimap<V, K>;
        containsKey(arg0: object): boolean;
        forEach(arg0: (arg0: K, arg1: V) => void): void;
        isEmpty(): boolean;
        clear(): void;
        static copyOf<K, V>(arg0: Internal.Iterable<Internal.Map$Entry<K, V>>): Internal.ImmutableMultimap<K, V>;
        static copyOf<K, V>(arg0: Internal.Multimap<K, V>): Internal.ImmutableMultimap<K, V>;
        replaceValues(arg0: object, arg1: Internal.Iterable<any>): Internal.Collection<any>;
        replaceValues(arg0: K, arg1: Internal.Iterable<V>): Internal.ImmutableCollection<V>;
        entries(): Internal.Collection<any>;
        entries(): Internal.ImmutableCollection<Internal.Map$Entry<K, V>>;
        size(): number;
        equals(arg0: object): boolean;
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class CompoundTag implements Internal.Tag, Internal.CustomJavaObjectWrapper$AsMap {
        wrapAsJavaObject(cx: Internal.Context, scope: Internal.Scriptable, staticType: Internal.Class<object>): Internal.Scriptable;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        merge(arg0: Internal.CompoundTag): Internal.CompoundTag;
        equals(arg0: object): boolean;
        toString(): string;
        wrapAsJavaMap(): Map<any, any>;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface BiFunction <T, U, R> {
        apply(arg0: T, arg1: U): R;
        andThen<V>(arg0: (arg0: R) => V): (arg0: T, arg1: U) => V;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Char2ReferenceFunction <V> implements it.unimi.dsi.fastutil.Function<string, V>, Internal.IntFunction<V> {
        getOrDefault(arg0: object, arg1: V): V;
        getOrDefault(arg0: string, arg1: V): V;
        andThenShort(arg0: Internal.Reference2ShortFunction<V>): Internal.Char2ShortFunction;
        composeByte(arg0: Internal.Byte2CharFunction): Internal.Byte2ReferenceFunction<V>;
        andThenInt(arg0: Internal.Reference2IntFunction<V>): Internal.Char2IntFunction;
        composeReference<T>(arg0: Internal.Reference2CharFunction<T>): (arg0: T) => V;
        put(arg0: string, arg1: V): V;
        put(arg0: object, arg1: object): object;
        put(arg0: string, arg1: V): V;
        remove(arg0: string): V;
        remove(arg0: object): V;
        defaultReturnValue(): V;
        defaultReturnValue(arg0: V): void;
        andThenDouble(arg0: Internal.Reference2DoubleFunction<V>): Internal.Char2DoubleFunction;
        andThenObject<T>(arg0: (arg0: V) => T): Internal.Char2ObjectFunction<T>;
        get(arg0: object): V;
        get(arg0: string): V;
        andThenLong(arg0: Internal.Reference2LongFunction<V>): Internal.Char2LongFunction;
        composeLong(arg0: Internal.Long2CharFunction): Internal.Long2ReferenceFunction<V>;
        andThenByte(arg0: Internal.Reference2ByteFunction<V>): Internal.Char2ByteFunction;
        andThenFloat(arg0: Internal.Reference2FloatFunction<V>): Internal.Char2FloatFunction;
        apply(arg0: number): V;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: string): boolean;
        composeInt(arg0: Internal.Int2CharFunction): Internal.Int2ReferenceFunction<V>;
        clear(): void;
        composeFloat(arg0: Internal.Float2CharFunction): Internal.Float2ReferenceFunction<V>;
        andThenChar(arg0: Internal.Reference2CharFunction<V>): Internal.Char2CharFunction;
        composeObject<T>(arg0: Internal.Object2CharFunction<T>): (arg0: T) => V;
        size(): number;
        compose<T>(arg0: (arg0: T) => string): (arg0: T) => V;
        composeShort(arg0: Internal.Short2CharFunction): Internal.Short2ReferenceFunction<V>;
        andThenReference<T>(arg0: (arg0: V) => T): Internal.Char2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2CharFunction): Internal.Char2ReferenceFunction<V>;
        composeDouble(arg0: Internal.Double2CharFunction): Internal.Double2ReferenceFunction<V>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Byte2ReferenceFunction <V> implements it.unimi.dsi.fastutil.Function<number, V>, Internal.IntFunction<V> {
        getOrDefault(arg0: object, arg1: V): V;
        getOrDefault(arg0: number, arg1: V): V;
        andThenShort(arg0: Internal.Reference2ShortFunction<V>): Internal.Byte2ShortFunction;
        composeByte(arg0: Internal.Byte2ByteFunction): Internal.Byte2ReferenceFunction<V>;
        andThenInt(arg0: Internal.Reference2IntFunction<V>): Internal.Byte2IntFunction;
        composeReference<T>(arg0: Internal.Reference2ByteFunction<T>): (arg0: T) => V;
        put(arg0: number, arg1: V): V;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: V): V;
        remove(arg0: number): V;
        remove(arg0: object): V;
        defaultReturnValue(): V;
        defaultReturnValue(arg0: V): void;
        andThenDouble(arg0: Internal.Reference2DoubleFunction<V>): Internal.Byte2DoubleFunction;
        andThenObject<T>(arg0: (arg0: V) => T): Internal.Byte2ObjectFunction<T>;
        get(arg0: object): V;
        get(arg0: number): V;
        andThenLong(arg0: Internal.Reference2LongFunction<V>): Internal.Byte2LongFunction;
        composeLong(arg0: Internal.Long2ByteFunction): Internal.Long2ReferenceFunction<V>;
        andThenByte(arg0: Internal.Reference2ByteFunction<V>): Internal.Byte2ByteFunction;
        andThenFloat(arg0: Internal.Reference2FloatFunction<V>): Internal.Byte2FloatFunction;
        apply(arg0: number): V;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2ByteFunction): Internal.Int2ReferenceFunction<V>;
        clear(): void;
        composeFloat(arg0: Internal.Float2ByteFunction): Internal.Float2ReferenceFunction<V>;
        andThenChar(arg0: Internal.Reference2CharFunction<V>): Internal.Byte2CharFunction;
        composeObject<T>(arg0: Internal.Object2ByteFunction<T>): (arg0: T) => V;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => V;
        composeShort(arg0: Internal.Short2ByteFunction): Internal.Short2ReferenceFunction<V>;
        andThenReference<T>(arg0: (arg0: V) => T): Internal.Byte2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2ByteFunction): Internal.Char2ReferenceFunction<V>;
        composeDouble(arg0: Internal.Double2ByteFunction): Internal.Double2ReferenceFunction<V>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class SawmillRecipeJS extends Internal.IERecipeJS {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        ingredientAction(filter: Internal.IngredientActionFilter, action: Internal.IngredientAction): Internal.RecipeJS;
        notifyAll(): void;
        convertReplacedOutput(index: number, oldStack: Internal.ItemStackJS, newStack: Internal.ItemStackJS): Internal.ItemStackJS;
        convertReplacedInput(index: number, oldIngredient: Internal.IngredientJS, newIngredient: Internal.IngredientJS): Internal.IngredientJS;
        save(): void;
        damageIngredient(filter: Internal.IngredientActionFilter, damage: number): Internal.RecipeJS;
        damageIngredient(filter: Internal.IngredientActionFilter): Internal.RecipeJS;
        getId(): string;
        dontAdd(): void;
        notify(): void;
        serializeJson(): void;
        parseIngredientItemIE(json: Internal.JsonElement): Internal.IngredientStackJS;
        replaceOutput(i: Internal.IngredientJS, with_: Internal.ItemStackJS, exact: boolean): boolean;
        hashCode(): number;
        merge(data: object): Internal.RecipeJS;
        create(args: Internal.ListJS): void;
        deserializeJson(): void;
        id(_id: ResourceLocation): Internal.RecipeJS;
        parseIngredientItem(o: object, key: string): Internal.IngredientJS;
        parseIngredientItem(o: object): Internal.IngredientJS;
        group(g: string): Internal.RecipeJS;
        energy(e: number): Internal.IERecipeJS;
        deserialize(): void;
        serializeNBTAsJson(): boolean;
        getOutputIndex(ingredient: Internal.IngredientJS, exact: boolean): number;
        getInputIndex(ingredient: Internal.IngredientJS, exact: boolean): number;
        setGroup(g: string): void;
        serialize(): void;
        resultFromRecipeJson(json: Internal.JsonObject): Internal.ItemStackJS;
        stage(s: string): Internal.RecipeJS;
        serializeIngredientStack(in_: Internal.IngredientStackJS): Internal.JsonElement;
        replaceInput(i: Internal.IngredientJS, with_: Internal.IngredientJS, exact: boolean): boolean;
        getType(): string;
        equals(arg0: object): boolean;
        getGroup(): string;
        serializeItemStack(stack: Internal.ItemStackJS): Internal.JsonElement;
        hasOutput(ingredient: Internal.IngredientJS, exact: boolean): boolean;
        toString(): string;
        keepIngredient(filter: Internal.IngredientActionFilter): Internal.RecipeJS;
        time(t: number): Internal.IERecipeJS;
        hasInput(ingredient: Internal.IngredientJS, exact: boolean): boolean;
        customIngredientAction(filter: Internal.IngredientActionFilter, id: string): Internal.RecipeJS;
        parseResultItem(o: object): Internal.ItemStackJS;
        replaceIngredient(filter: Internal.IngredientActionFilter, item: Internal.ItemStackJS): Internal.RecipeJS;
        static currentRecipe : Internal.RecipeJS;
        hasStripped : boolean;
        readonly inputItems : Internal.List<Internal.IngredientJS>;
        static itemErrors : false;
        type : Internal.RecipeTypeJS;
        stripping : Internal.List<boolean>;
        originalJson : Internal.JsonObject;
        serializeOutputs : boolean;
        readonly outputFluids : Internal.List<Internal.FluidStack>;
        originalRecipe : Internal.Recipe<object>;
        readonly inputFluids : Internal.List<Internal.FluidTagInput>;
        json : Internal.JsonObject;
        readonly outputItems : Internal.List<Internal.ItemStackJS>;
        serializeInputs : boolean;
        get mod(): string;
        get uniqueId(): string;
        get fromToString(): string;
        get path(): string;
        get orCreateId(): ResourceLocation;
        get originalRecipeResult(): Internal.ItemStackJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface MessageSupplier {
        get(): Internal.Message;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Codec$ResultFunction <A> {
        apply<T>(arg0: Internal.DynamicOps<T>, arg1: T, arg2: Internal.DataResult<Internal.Pair<A, T>>): Internal.DataResult<Internal.Pair<A, T>>;
        coApply<T>(arg0: Internal.DynamicOps<T>, arg1: A, arg2: Internal.DataResult<T>): Internal.DataResult<T>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class FluidStack {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        getOrCreateChildTag(arg0: string): Internal.CompoundTag;
        notify(): void;
        getChildTag(arg0: string): Internal.CompoundTag;
        containsFluid(arg0: Internal.FluidStack): boolean;
        static readFromPacket(arg0: Internal.FriendlyByteBuf): Internal.FluidStack;
        hashCode(): number;
        copy(): Internal.FluidStack;
        writeToNBT(arg0: Internal.CompoundTag): Internal.CompoundTag;
        isFluidEqual(arg0: Internal.FluidStack): boolean;
        isFluidEqual(arg0: Internal.ItemStack): boolean;
        isFluidStackIdentical(arg0: Internal.FluidStack): boolean;
        removeChildTag(arg0: string): void;
        grow(arg0: number): void;
        static loadFluidStackFromNBT(arg0: Internal.CompoundTag): Internal.FluidStack;
        hasTag(): boolean;
        shrink(arg0: number): void;
        isEmpty(): boolean;
        writeToPacket(arg0: Internal.FriendlyByteBuf): void;
        equals(arg0: object): boolean;
        toString(): string;
        static areFluidStackTagsEqual(arg0: Internal.FluidStack, arg1: Internal.FluidStack): boolean;
        static readonly CODEC : Internal.Codec<Internal.FluidStack>;
        static readonly EMPTY : Internal.FluidStack;
        get rawFluid(): Internal.Fluid;
        set tag(arg0: Internal.CompoundTag);
        set amount(arg0: number);
        get amount(): number;
        get translationKey(): string;
        get tag(): Internal.CompoundTag;
        get orCreateTag(): Internal.CompoundTag;
        get displayName(): Internal.Component;
        get fluid(): Internal.Fluid;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Logger {
        log(level: org.apache.logging.log4j.Level, marker: Internal.Marker, message: string, p0: object): void;
        log(level: org.apache.logging.log4j.Level, messageSupplier: Internal.Supplier<object>, throwable: Internal.Throwable): void;
        log(level: org.apache.logging.log4j.Level, messageSupplier: Internal.Supplier<object>): void;
        log(level: org.apache.logging.log4j.Level, marker: Internal.Marker, message: string, p0: object, p1: object): void;
        log(level: org.apache.logging.log4j.Level, marker: Internal.Marker, message: string, p0: object, p1: object, p2: object): void;
        log(level: org.apache.logging.log4j.Level, message: object, throwable: Internal.Throwable): void;
        log(level: org.apache.logging.log4j.Level, message: string): void;
        log(level: org.apache.logging.log4j.Level, message: string, params: object[]): void;
        log(level: org.apache.logging.log4j.Level, message: string, paramSuppliers: Internal.Supplier<object>[]): void;
        log(level: org.apache.logging.log4j.Level, message: string, throwable: Internal.Throwable): void;
        log(level: org.apache.logging.log4j.Level, marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object, p7: object, p8: object): void;
        log(level: org.apache.logging.log4j.Level, marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object, p7: object, p8: object, p9: object): void;
        log(level: org.apache.logging.log4j.Level, message: string, p0: object): void;
        log(level: org.apache.logging.log4j.Level, message: string, p0: object, p1: object): void;
        log(level: org.apache.logging.log4j.Level, message: string, p0: object, p1: object, p2: object): void;
        log(level: org.apache.logging.log4j.Level, marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object): void;
        log(level: org.apache.logging.log4j.Level, marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object, p4: object): void;
        log(level: org.apache.logging.log4j.Level, marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object): void;
        log(level: org.apache.logging.log4j.Level, marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object): void;
        log(level: org.apache.logging.log4j.Level, marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object, p7: object): void;
        log(level: org.apache.logging.log4j.Level, marker: Internal.Marker, message: Internal.CharSequence, throwable: Internal.Throwable): void;
        log(level: org.apache.logging.log4j.Level, marker: Internal.Marker, message: object): void;
        log(level: org.apache.logging.log4j.Level, marker: Internal.Marker, message: object, throwable: Internal.Throwable): void;
        log(level: org.apache.logging.log4j.Level, marker: Internal.Marker, message: string): void;
        log(level: org.apache.logging.log4j.Level, marker: Internal.Marker, message: string, paramSuppliers: Internal.Supplier<object>[]): void;
        log(level: org.apache.logging.log4j.Level, marker: Internal.Marker, message: Internal.Message): void;
        log(level: org.apache.logging.log4j.Level, marker: Internal.Marker, message: Internal.Message, throwable: Internal.Throwable): void;
        log(level: org.apache.logging.log4j.Level, marker: Internal.Marker, messageSupplier: Internal.MessageSupplier): void;
        log(level: org.apache.logging.log4j.Level, marker: Internal.Marker, messageSupplier: Internal.MessageSupplier, throwable: Internal.Throwable): void;
        log(level: org.apache.logging.log4j.Level, marker: Internal.Marker, message: Internal.CharSequence): void;
        log(level: org.apache.logging.log4j.Level, messageSupplier: Internal.MessageSupplier): void;
        log(level: org.apache.logging.log4j.Level, messageSupplier: Internal.MessageSupplier, throwable: Internal.Throwable): void;
        log(level: org.apache.logging.log4j.Level, message: Internal.CharSequence): void;
        log(level: org.apache.logging.log4j.Level, message: Internal.CharSequence, throwable: Internal.Throwable): void;
        log(level: org.apache.logging.log4j.Level, message: object): void;
        log(level: org.apache.logging.log4j.Level, marker: Internal.Marker, message: string, throwable: Internal.Throwable): void;
        log(level: org.apache.logging.log4j.Level, marker: Internal.Marker, messageSupplier: Internal.Supplier<object>): void;
        log(level: org.apache.logging.log4j.Level, marker: Internal.Marker, messageSupplier: Internal.Supplier<object>, throwable: Internal.Throwable): void;
        log(level: org.apache.logging.log4j.Level, message: Internal.Message): void;
        log(level: org.apache.logging.log4j.Level, message: Internal.Message, throwable: Internal.Throwable): void;
        log(level: org.apache.logging.log4j.Level, message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object, p7: object): void;
        log(level: org.apache.logging.log4j.Level, message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object, p7: object, p8: object): void;
        log(level: org.apache.logging.log4j.Level, message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object, p7: object, p8: object, p9: object): void;
        log(level: org.apache.logging.log4j.Level, marker: Internal.Marker, message: string, params: object[]): void;
        log(level: org.apache.logging.log4j.Level, message: string, p0: object, p1: object, p2: object, p3: object): void;
        log(level: org.apache.logging.log4j.Level, message: string, p0: object, p1: object, p2: object, p3: object, p4: object): void;
        log(level: org.apache.logging.log4j.Level, message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object): void;
        log(level: org.apache.logging.log4j.Level, message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object): void;
        logMessage(level: org.apache.logging.log4j.Level, marker: Internal.Marker, fqcn: string, location: Internal.StackTraceElement, message: Internal.Message, throwable: Internal.Throwable): void;
        atWarn(): Internal.LogBuilder;
        atInfo(): Internal.LogBuilder;
        isWarnEnabled(marker: Internal.Marker): boolean;
        isWarnEnabled(): boolean;
        error(message: Internal.Message, throwable: Internal.Throwable): void;
        error(messageSupplier: Internal.MessageSupplier): void;
        error(messageSupplier: Internal.MessageSupplier, throwable: Internal.Throwable): void;
        error(message: Internal.CharSequence): void;
        error(message: Internal.Message): void;
        error(marker: Internal.Marker, messageSupplier: Internal.Supplier<object>, throwable: Internal.Throwable): void;
        error(marker: Internal.Marker, messageSupplier: Internal.Supplier<object>): void;
        error(message: string, paramSuppliers: Internal.Supplier<object>[]): void;
        error(message: string, params: object[]): void;
        error(message: string): void;
        error(message: object, throwable: Internal.Throwable): void;
        error(message: object): void;
        error(message: Internal.CharSequence, throwable: Internal.Throwable): void;
        error(marker: Internal.Marker, message: Internal.CharSequence, throwable: Internal.Throwable): void;
        error(marker: Internal.Marker, message: Internal.CharSequence): void;
        error(marker: Internal.Marker, messageSupplier: Internal.MessageSupplier, throwable: Internal.Throwable): void;
        error(marker: Internal.Marker, messageSupplier: Internal.MessageSupplier): void;
        error(marker: Internal.Marker, message: Internal.Message, throwable: Internal.Throwable): void;
        error(marker: Internal.Marker, message: Internal.Message): void;
        error(marker: Internal.Marker, message: string, throwable: Internal.Throwable): void;
        error(marker: Internal.Marker, message: string, paramSuppliers: Internal.Supplier<object>[]): void;
        error(marker: Internal.Marker, message: string, params: object[]): void;
        error(marker: Internal.Marker, message: string): void;
        error(marker: Internal.Marker, message: object, throwable: Internal.Throwable): void;
        error(marker: Internal.Marker, message: object): void;
        error(message: string, p0: object, p1: object, p2: object, p3: object): void;
        error(message: string, p0: object, p1: object, p2: object): void;
        error(message: string, p0: object, p1: object): void;
        error(message: string, p0: object): void;
        error(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object, p7: object, p8: object, p9: object): void;
        error(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object, p7: object, p8: object): void;
        error(message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object, p7: object, p8: object, p9: object): void;
        error(message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object, p7: object, p8: object): void;
        error(message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object, p7: object): void;
        error(message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object): void;
        error(message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object): void;
        error(message: string, p0: object, p1: object, p2: object, p3: object, p4: object): void;
        error(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object): void;
        error(marker: Internal.Marker, message: string, p0: object, p1: object): void;
        error(marker: Internal.Marker, message: string, p0: object): void;
        error(messageSupplier: Internal.Supplier<object>, throwable: Internal.Throwable): void;
        error(messageSupplier: Internal.Supplier<object>): void;
        error(message: string, throwable: Internal.Throwable): void;
        error(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object): void;
        error(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object): void;
        error(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object, p4: object): void;
        error(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object, p7: object): void;
        error(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object): void;
        fatal(message: object): void;
        fatal(message: string, params: object[]): void;
        fatal(message: string): void;
        fatal(message: string, paramSuppliers: Internal.Supplier<object>[]): void;
        fatal(message: string, throwable: Internal.Throwable): void;
        fatal(messageSupplier: Internal.MessageSupplier, throwable: Internal.Throwable): void;
        fatal(message: Internal.CharSequence): void;
        fatal(message: Internal.CharSequence, throwable: Internal.Throwable): void;
        fatal(message: object, throwable: Internal.Throwable): void;
        fatal(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object): void;
        fatal(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object): void;
        fatal(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object, p4: object): void;
        fatal(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object): void;
        fatal(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object): void;
        fatal(messageSupplier: Internal.Supplier<object>): void;
        fatal(messageSupplier: Internal.Supplier<object>, throwable: Internal.Throwable): void;
        fatal(marker: Internal.Marker, message: string, p0: object): void;
        fatal(marker: Internal.Marker, message: string, p0: object, p1: object): void;
        fatal(marker: Internal.Marker, message: Internal.CharSequence): void;
        fatal(marker: Internal.Marker, message: Internal.CharSequence, throwable: Internal.Throwable): void;
        fatal(marker: Internal.Marker, message: object): void;
        fatal(marker: Internal.Marker, message: object, throwable: Internal.Throwable): void;
        fatal(marker: Internal.Marker, message: string): void;
        fatal(marker: Internal.Marker, message: Internal.Message): void;
        fatal(marker: Internal.Marker, message: Internal.Message, throwable: Internal.Throwable): void;
        fatal(marker: Internal.Marker, messageSupplier: Internal.MessageSupplier): void;
        fatal(marker: Internal.Marker, messageSupplier: Internal.MessageSupplier, throwable: Internal.Throwable): void;
        fatal(marker: Internal.Marker, messageSupplier: Internal.Supplier<object>, throwable: Internal.Throwable): void;
        fatal(message: Internal.Message): void;
        fatal(message: Internal.Message, throwable: Internal.Throwable): void;
        fatal(messageSupplier: Internal.MessageSupplier): void;
        fatal(marker: Internal.Marker, message: string, params: object[]): void;
        fatal(marker: Internal.Marker, message: string, paramSuppliers: Internal.Supplier<object>[]): void;
        fatal(marker: Internal.Marker, message: string, throwable: Internal.Throwable): void;
        fatal(marker: Internal.Marker, messageSupplier: Internal.Supplier<object>): void;
        fatal(message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object): void;
        fatal(message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object): void;
        fatal(message: string, p0: object, p1: object, p2: object, p3: object, p4: object): void;
        fatal(message: string, p0: object, p1: object, p2: object, p3: object): void;
        fatal(message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object, p7: object): void;
        fatal(message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object, p7: object, p8: object): void;
        fatal(message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object, p7: object, p8: object, p9: object): void;
        fatal(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object, p7: object): void;
        fatal(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object, p7: object, p8: object): void;
        fatal(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object, p7: object, p8: object, p9: object): void;
        fatal(message: string, p0: object, p1: object, p2: object): void;
        fatal(message: string, p0: object, p1: object): void;
        fatal(message: string, p0: object): void;
        printf(level: org.apache.logging.log4j.Level, format: string, params: object[]): void;
        printf(level: org.apache.logging.log4j.Level, marker: Internal.Marker, format: string, params: object[]): void;
        throwing<T>(throwable: T): T;
        throwing<T>(level: org.apache.logging.log4j.Level, throwable: T): T;
        atTrace(): Internal.LogBuilder;
        trace(marker: Internal.Marker, message: string, throwable: Internal.Throwable): void;
        trace(message: object): void;
        trace(message: Internal.CharSequence, throwable: Internal.Throwable): void;
        trace(marker: Internal.Marker, message: string, paramSuppliers: Internal.Supplier<object>[]): void;
        trace(messageSupplier: Internal.MessageSupplier, throwable: Internal.Throwable): void;
        trace(marker: Internal.Marker, messageSupplier: Internal.Supplier<object>, throwable: Internal.Throwable): void;
        trace(message: Internal.Message): void;
        trace(message: Internal.Message, throwable: Internal.Throwable): void;
        trace(messageSupplier: Internal.MessageSupplier): void;
        trace(marker: Internal.Marker, messageSupplier: Internal.Supplier<object>): void;
        trace(message: Internal.CharSequence): void;
        trace(marker: Internal.Marker, message: string, p0: object, p1: object): void;
        trace(marker: Internal.Marker, message: string, p0: object): void;
        trace(messageSupplier: Internal.Supplier<object>, throwable: Internal.Throwable): void;
        trace(messageSupplier: Internal.Supplier<object>): void;
        trace(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object): void;
        trace(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object): void;
        trace(message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object, p7: object, p8: object): void;
        trace(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object, p4: object): void;
        trace(message: object, throwable: Internal.Throwable): void;
        trace(message: string): void;
        trace(message: string, params: object[]): void;
        trace(message: string, paramSuppliers: Internal.Supplier<object>[]): void;
        trace(message: string, throwable: Internal.Throwable): void;
        trace(message: string, p0: object): void;
        trace(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object, p7: object, p8: object, p9: object): void;
        trace(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object, p7: object, p8: object): void;
        trace(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object, p7: object): void;
        trace(message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object, p7: object): void;
        trace(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object): void;
        trace(message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object): void;
        trace(message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object): void;
        trace(message: string, p0: object, p1: object, p2: object, p3: object, p4: object): void;
        trace(message: string, p0: object, p1: object, p2: object, p3: object): void;
        trace(message: string, p0: object, p1: object, p2: object): void;
        trace(message: string, p0: object, p1: object): void;
        trace(marker: Internal.Marker, message: Internal.CharSequence): void;
        trace(marker: Internal.Marker, message: Internal.CharSequence, throwable: Internal.Throwable): void;
        trace(marker: Internal.Marker, message: object): void;
        trace(marker: Internal.Marker, message: object, throwable: Internal.Throwable): void;
        trace(marker: Internal.Marker, message: string): void;
        trace(marker: Internal.Marker, message: string, params: object[]): void;
        trace(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object): void;
        trace(marker: Internal.Marker, message: Internal.Message): void;
        trace(marker: Internal.Marker, message: Internal.Message, throwable: Internal.Throwable): void;
        trace(marker: Internal.Marker, messageSupplier: Internal.MessageSupplier): void;
        trace(marker: Internal.Marker, messageSupplier: Internal.MessageSupplier, throwable: Internal.Throwable): void;
        trace(message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object, p7: object, p8: object, p9: object): void;
        isInfoEnabled(): boolean;
        isInfoEnabled(marker: Internal.Marker): boolean;
        traceEntry(format: string, paramSuppliers: Internal.Supplier<object>[]): Internal.EntryMessage;
        traceEntry(message: Internal.Message): Internal.EntryMessage;
        traceEntry(paramSuppliers: Internal.Supplier<object>[]): Internal.EntryMessage;
        traceEntry(format: string, params: object[]): Internal.EntryMessage;
        traceEntry(): Internal.EntryMessage;
        isErrorEnabled(): boolean;
        isErrorEnabled(marker: Internal.Marker): boolean;
        isTraceEnabled(): boolean;
        isTraceEnabled(marker: Internal.Marker): boolean;
        atLevel(level: org.apache.logging.log4j.Level): Internal.LogBuilder;
        info(marker: Internal.Marker, messageSupplier: Internal.MessageSupplier, throwable: Internal.Throwable): void;
        info(marker: Internal.Marker, message: Internal.CharSequence, throwable: Internal.Throwable): void;
        info(marker: Internal.Marker, message: Internal.CharSequence): void;
        info(marker: Internal.Marker, messageSupplier: Internal.MessageSupplier): void;
        info(marker: Internal.Marker, message: Internal.Message, throwable: Internal.Throwable): void;
        info(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object, p7: object, p8: object): void;
        info(marker: Internal.Marker, message: string, paramSuppliers: Internal.Supplier<object>[]): void;
        info(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object, p7: object): void;
        info(marker: Internal.Marker, message: string, params: object[]): void;
        info(marker: Internal.Marker, message: string): void;
        info(marker: Internal.Marker, message: object, throwable: Internal.Throwable): void;
        info(marker: Internal.Marker, message: object): void;
        info(message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object): void;
        info(message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object): void;
        info(marker: Internal.Marker, message: Internal.Message): void;
        info(message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object, p7: object): void;
        info(message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object, p7: object, p8: object): void;
        info(message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object, p7: object, p8: object, p9: object): void;
        info(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object, p7: object, p8: object, p9: object): void;
        info(message: string, p0: object, p1: object): void;
        info(message: string, p0: object, p1: object, p2: object): void;
        info(message: string, p0: object, p1: object, p2: object, p3: object): void;
        info(message: string, p0: object, p1: object, p2: object, p3: object, p4: object): void;
        info(marker: Internal.Marker, message: string, p0: object): void;
        info(messageSupplier: Internal.Supplier<object>, throwable: Internal.Throwable): void;
        info(messageSupplier: Internal.Supplier<object>): void;
        info(message: string, throwable: Internal.Throwable): void;
        info(message: string, paramSuppliers: Internal.Supplier<object>[]): void;
        info(message: string, params: object[]): void;
        info(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object): void;
        info(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object): void;
        info(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object, p4: object): void;
        info(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object): void;
        info(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object): void;
        info(marker: Internal.Marker, message: string, p0: object, p1: object): void;
        info(messageSupplier: Internal.MessageSupplier): void;
        info(message: Internal.Message, throwable: Internal.Throwable): void;
        info(message: Internal.Message): void;
        info(marker: Internal.Marker, messageSupplier: Internal.Supplier<object>, throwable: Internal.Throwable): void;
        info(marker: Internal.Marker, messageSupplier: Internal.Supplier<object>): void;
        info(marker: Internal.Marker, message: string, throwable: Internal.Throwable): void;
        info(message: string): void;
        info(message: object, throwable: Internal.Throwable): void;
        info(message: object): void;
        info(message: Internal.CharSequence, throwable: Internal.Throwable): void;
        info(message: Internal.CharSequence): void;
        info(messageSupplier: Internal.MessageSupplier, throwable: Internal.Throwable): void;
        info(message: string, p0: object): void;
        always(): Internal.LogBuilder;
        catching(level: org.apache.logging.log4j.Level, throwable: Internal.Throwable): void;
        catching(throwable: Internal.Throwable): void;
        debug(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object, p4: object): void;
        debug(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object): void;
        debug(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object): void;
        debug(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object): void;
        debug(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object): void;
        debug(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object, p7: object): void;
        debug(message: string, paramSuppliers: Internal.Supplier<object>[]): void;
        debug(message: string, throwable: Internal.Throwable): void;
        debug(messageSupplier: Internal.Supplier<object>): void;
        debug(messageSupplier: Internal.Supplier<object>, throwable: Internal.Throwable): void;
        debug(marker: Internal.Marker, message: string, p0: object): void;
        debug(marker: Internal.Marker, message: string, p0: object, p1: object): void;
        debug(message: string, p0: object, p1: object, p2: object, p3: object, p4: object): void;
        debug(message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object): void;
        debug(message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object): void;
        debug(message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object, p7: object): void;
        debug(message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object, p7: object, p8: object): void;
        debug(message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object, p7: object, p8: object, p9: object): void;
        debug(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object, p7: object, p8: object): void;
        debug(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object, p7: object, p8: object, p9: object): void;
        debug(message: string, p0: object): void;
        debug(message: string, p0: object, p1: object): void;
        debug(message: string, p0: object, p1: object, p2: object): void;
        debug(message: string, p0: object, p1: object, p2: object, p3: object): void;
        debug(marker: Internal.Marker, message: object): void;
        debug(marker: Internal.Marker, message: object, throwable: Internal.Throwable): void;
        debug(marker: Internal.Marker, message: string): void;
        debug(marker: Internal.Marker, message: string, params: object[]): void;
        debug(marker: Internal.Marker, message: string, paramSuppliers: Internal.Supplier<object>[]): void;
        debug(marker: Internal.Marker, message: string, throwable: Internal.Throwable): void;
        debug(marker: Internal.Marker, message: Internal.Message): void;
        debug(marker: Internal.Marker, message: Internal.Message, throwable: Internal.Throwable): void;
        debug(marker: Internal.Marker, messageSupplier: Internal.MessageSupplier): void;
        debug(marker: Internal.Marker, messageSupplier: Internal.MessageSupplier, throwable: Internal.Throwable): void;
        debug(marker: Internal.Marker, message: Internal.CharSequence): void;
        debug(marker: Internal.Marker, message: Internal.CharSequence, throwable: Internal.Throwable): void;
        debug(message: Internal.CharSequence): void;
        debug(message: Internal.CharSequence, throwable: Internal.Throwable): void;
        debug(message: object): void;
        debug(message: object, throwable: Internal.Throwable): void;
        debug(message: string): void;
        debug(message: string, params: object[]): void;
        debug(marker: Internal.Marker, messageSupplier: Internal.Supplier<object>): void;
        debug(marker: Internal.Marker, messageSupplier: Internal.Supplier<object>, throwable: Internal.Throwable): void;
        debug(message: Internal.Message): void;
        debug(messageSupplier: Internal.MessageSupplier, throwable: Internal.Throwable): void;
        debug(messageSupplier: Internal.MessageSupplier): void;
        debug(message: Internal.Message, throwable: Internal.Throwable): void;
        atError(): Internal.LogBuilder;
        atFatal(): Internal.LogBuilder;
        traceExit(): void;
        traceExit<R>(format: string, result: R): R;
        traceExit(message: Internal.EntryMessage): void;
        traceExit<R>(message: Internal.EntryMessage, result: R): R;
        traceExit<R>(message: Internal.Message, result: R): R;
        traceExit<R>(result: R): R;
        isFatalEnabled(): boolean;
        isFatalEnabled(marker: Internal.Marker): boolean;
        warn(message: Internal.Message, throwable: Internal.Throwable): void;
        warn(messageSupplier: Internal.MessageSupplier): void;
        warn(messageSupplier: Internal.MessageSupplier, throwable: Internal.Throwable): void;
        warn(message: Internal.CharSequence): void;
        warn(message: Internal.Message): void;
        warn(marker: Internal.Marker, messageSupplier: Internal.Supplier<object>): void;
        warn(marker: Internal.Marker, messageSupplier: Internal.Supplier<object>, throwable: Internal.Throwable): void;
        warn(message: string, paramSuppliers: Internal.Supplier<object>[]): void;
        warn(message: string, params: object[]): void;
        warn(message: string): void;
        warn(message: object, throwable: Internal.Throwable): void;
        warn(message: object): void;
        warn(message: Internal.CharSequence, throwable: Internal.Throwable): void;
        warn(marker: Internal.Marker, messageSupplier: Internal.MessageSupplier): void;
        warn(marker: Internal.Marker, messageSupplier: Internal.MessageSupplier, throwable: Internal.Throwable): void;
        warn(marker: Internal.Marker, message: Internal.CharSequence): void;
        warn(marker: Internal.Marker, message: Internal.CharSequence, throwable: Internal.Throwable): void;
        warn(marker: Internal.Marker, message: Internal.Message, throwable: Internal.Throwable): void;
        warn(marker: Internal.Marker, message: Internal.Message): void;
        warn(message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object, p7: object, p8: object, p9: object): void;
        warn(marker: Internal.Marker, message: string, throwable: Internal.Throwable): void;
        warn(marker: Internal.Marker, message: string, paramSuppliers: Internal.Supplier<object>[]): void;
        warn(marker: Internal.Marker, message: string, params: object[]): void;
        warn(marker: Internal.Marker, message: string): void;
        warn(marker: Internal.Marker, message: object, throwable: Internal.Throwable): void;
        warn(marker: Internal.Marker, message: object): void;
        warn(message: string, p0: object, p1: object, p2: object): void;
        warn(message: string, p0: object, p1: object): void;
        warn(message: string, p0: object): void;
        warn(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object, p7: object, p8: object, p9: object): void;
        warn(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object, p7: object, p8: object): void;
        warn(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object, p7: object): void;
        warn(message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object, p7: object, p8: object): void;
        warn(message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object, p7: object): void;
        warn(message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object): void;
        warn(message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object): void;
        warn(message: string, p0: object, p1: object, p2: object, p3: object, p4: object): void;
        warn(message: string, p0: object, p1: object, p2: object, p3: object): void;
        warn(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object): void;
        warn(marker: Internal.Marker, message: string, p0: object, p1: object): void;
        warn(marker: Internal.Marker, message: string, p0: object): void;
        warn(messageSupplier: Internal.Supplier<object>, throwable: Internal.Throwable): void;
        warn(messageSupplier: Internal.Supplier<object>): void;
        warn(message: string, throwable: Internal.Throwable): void;
        warn(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object, p4: object): void;
        warn(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object): void;
        warn(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object): void;
        warn(marker: Internal.Marker, message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object): void;
        entry(): void;
        entry(params: object[]): void;
        exit<R>(result: R): R;
        exit(): void;
        isEnabled(level: org.apache.logging.log4j.Level): boolean;
        isEnabled(level: org.apache.logging.log4j.Level, marker: Internal.Marker): boolean;
        isDebugEnabled(): boolean;
        isDebugEnabled(marker: Internal.Marker): boolean;
        atDebug(): Internal.LogBuilder;
        get name(): string;
        get messageFactory(): MF;
        get level(): org.apache.logging.log4j.Level;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface EntryMessage implements Internal.FlowMessage {
        get text(): string;
        get parameters(): object[];
        get formattedMessage(): string;
        get message(): Internal.Message;
        get format(): string;
        get throwable(): Internal.Throwable;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Serializable {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface TypeWrapperFactory <T> {
        wrap(arg0: object): T;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class MinMaxBounds$Doubles extends Internal.MinMaxBounds<number> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class ScreenPainterObject extends Internal.PainterObject {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        preDraw(event: Internal.ScreenPaintEventJS): void;
        hashCode(): number;
        notifyAll(): void;
        equals(o: object): boolean;
        update(tag: Internal.CompoundTag): void;
        toString(): string;
        id(i: string): Internal.PainterObject;
        draw(arg0: Internal.ScreenPaintEventJS): void;
        notify(): void;
        specialEquals(o: object, shallow: boolean): boolean;
        parent : Internal.PainterObjectStorage;
        visible : boolean;
        w : Internal.Unit;
        x : Internal.Unit;
        h : Internal.Unit;
        y : Internal.Unit;
        z : Internal.Unit;
        alignX : number;
        alignY : number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Copyable {
        copy(): Internal.Copyable;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class RecipeJS {
        parseResultItemList(o: object): Internal.List<Internal.ItemStackJS>;
        ingredientAction(filter: Internal.IngredientActionFilter, action: Internal.IngredientAction): Internal.RecipeJS;
        convertReplacedInput(index: number, oldIngredient: Internal.IngredientJS, newIngredient: Internal.IngredientJS): Internal.IngredientJS;
        replaceOutput(i: Internal.IngredientJS, with_: Internal.ItemStackJS, exact: boolean, func: (arg0: Internal.ItemStackJS, arg1: Internal.ItemStackJS) => Internal.ItemStackJS): boolean;
        replaceOutput(i: Internal.IngredientJS, with_: Internal.ItemStackJS, exact: boolean): boolean;
        parseIngredientItemList(o: object): Internal.List<Internal.IngredientJS>;
        merge(data: object): Internal.RecipeJS;
        create(arg0: Internal.ListJS): void;
        parseIngredientItemStackList(o: object): Internal.List<Internal.IngredientStackJS>;
        id(_id: ResourceLocation): Internal.RecipeJS;
        parseIngredientItem(o: object, key: string): Internal.IngredientJS;
        parseIngredientItem(o: object): Internal.IngredientJS;
        group(g: string): Internal.RecipeJS;
        getInputIndex(ingredient: Internal.IngredientJS, exact: boolean): number;
        serialize(): void;
        setGroup(g: string): void;
        replaceInput(i: Internal.IngredientJS, with_: Internal.IngredientJS, exact: boolean): boolean;
        replaceInput(i: Internal.IngredientJS, with_: Internal.IngredientJS, exact: boolean, func: (arg0: Internal.IngredientJS, arg1: Internal.IngredientJS) => Internal.IngredientJS): boolean;
        getType(): string;
        getGroup(): string;
        hasOutput(ingredient: Internal.IngredientJS, exact: boolean): boolean;
        keepIngredient(filter: Internal.IngredientActionFilter): Internal.RecipeJS;
        customIngredientAction(filter: Internal.IngredientActionFilter, id: string): Internal.RecipeJS;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        convertReplacedOutput(index: number, oldStack: Internal.ItemStackJS, newStack: Internal.ItemStackJS): Internal.ItemStackJS;
        save(): void;
        damageIngredient(filter: Internal.IngredientActionFilter, damage: number): Internal.RecipeJS;
        damageIngredient(filter: Internal.IngredientActionFilter): Internal.RecipeJS;
        getId(): string;
        dontAdd(): void;
        notify(): void;
        serializeJson(): void;
        createRecipe(): Internal.Recipe<object>;
        hashCode(): number;
        deserializeJson(): void;
        deserialize(): void;
        serializeNBTAsJson(): boolean;
        getOutputIndex(ingredient: Internal.IngredientJS, exact: boolean): number;
        resultFromRecipeJson(json: Internal.JsonObject): Internal.ItemStackJS;
        serializeIngredientStack(in_: Internal.IngredientStackJS): Internal.JsonElement;
        stage(s: string): Internal.RecipeJS;
        equals(arg0: object): boolean;
        serializeItemStack(stack: Internal.ItemStackJS): Internal.JsonElement;
        toString(): string;
        parseResultItem(o: object): Internal.ItemStackJS;
        hasInput(ingredient: Internal.IngredientJS, exact: boolean): boolean;
        replaceIngredient(filter: Internal.IngredientActionFilter, item: Internal.ItemStackJS): Internal.RecipeJS;
        static currentRecipe : Internal.RecipeJS;
        originalJson : Internal.JsonObject;
        serializeOutputs : boolean;
        originalRecipe : Internal.Recipe<object>;
        readonly inputItems : Internal.List<Internal.IngredientJS>;
        static itemErrors : false;
        json : Internal.JsonObject;
        readonly outputItems : Internal.List<Internal.ItemStackJS>;
        type : Internal.RecipeTypeJS;
        serializeInputs : boolean;
        get uniqueId(): string;
        get path(): string;
        get originalRecipeResult(): Internal.ItemStackJS;
        get originalRecipeIngredients(): Internal.List<Internal.IngredientJS>;
        get mod(): string;
        get fromToString(): string;
        get orCreateId(): ResourceLocation;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ClickAction extends Internal.Enum<Internal.ClickAction> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(arg0: string): Internal.ClickAction;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.ClickAction[];
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly SECONDARY : Internal.ClickAction;
        static readonly PRIMARY : Internal.ClickAction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface DataOutput {
        writeChar(arg0: number): void;
        writeInt(arg0: number): void;
        writeLong(arg0: number): void;
        writeByte(arg0: number): void;
        writeBytes(arg0: string): void;
        writeUTF(arg0: string): void;
        writeShort(arg0: number): void;
        writeChars(arg0: string): void;
        writeFloat(arg0: number): void;
        write(arg0: number[], arg1: number, arg2: number): void;
        write(arg0: number[]): void;
        write(arg0: number): void;
        writeBoolean(arg0: boolean): void;
        writeDouble(arg0: number): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class FriendlyByteBuf extends Internal.ByteBuf implements Internal.IForgeFriendlyByteBuf {
        asReadOnly(): Internal.ByteBuf;
        markReaderIndex(): Internal.ByteBuf;
        getByte(arg0: number): number;
        writeItemStack(arg0: Internal.ItemStack, arg1: boolean): Internal.FriendlyByteBuf;
        release(arg0: number): boolean;
        release(): boolean;
        readDoubleLE(): number;
        writeZero(arg0: number): Internal.ByteBuf;
        resetReaderIndex(): Internal.ByteBuf;
        writeFloat(arg0: number): Internal.ByteBuf;
        setLongLE(arg0: number, arg1: number): Internal.ByteBuf;
        readRegistryId<T>(): T;
        readRetainedSlice(arg0: number): Internal.ByteBuf;
        slice(arg0: number, arg1: number): Internal.ByteBuf;
        slice(): Internal.ByteBuf;
        setDoubleLE(arg0: number, arg1: number): Internal.ByteBuf;
        getMediumLE(arg0: number): number;
        readUnsignedIntLE(): number;
        writeFloatLE(arg0: number): Internal.ByteBuf;
        readInt(): number;
        order(arg0: Internal.ByteOrder): Internal.ByteBuf;
        order(): Internal.ByteOrder;
        writeMedium(arg0: number): Internal.ByteBuf;
        resetWriterIndex(): Internal.ByteBuf;
        writableBytes(): number;
        getUnsignedShort(arg0: number): number;
        maxCapacity(): number;
        nioBufferCount(): number;
        bytesBefore(arg0: number): number;
        bytesBefore(arg0: number, arg1: number): number;
        bytesBefore(arg0: number, arg1: number, arg2: number): number;
        setInt(arg0: number, arg1: number): Internal.ByteBuf;
        getInt(arg0: number): number;
        markWriterIndex(): Internal.ByteBuf;
        isReadable(): boolean;
        isReadable(arg0: number): boolean;
        writeBoolean(arg0: boolean): Internal.ByteBuf;
        setIntLE(arg0: number, arg1: number): Internal.ByteBuf;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        writeLongLE(arg0: number): Internal.ByteBuf;
        setShortLE(arg0: number, arg1: number): Internal.ByteBuf;
        retain(arg0: number): Internal.ReferenceCounted;
        retain(arg0: number): Internal.ByteBuf;
        retain(): Internal.ByteBuf;
        retain(): Internal.ReferenceCounted;
        isWritable(): boolean;
        isWritable(arg0: number): boolean;
        notify(): void;
        readChar(): string;
        hasMemoryAddress(): boolean;
        capacity(): number;
        capacity(arg0: number): Internal.ByteBuf;
        readRegistryIdSafe<T>(arg0: Internal.Class<T>): T;
        readCharSequence(arg0: number, arg1: Internal.Charset): Internal.CharSequence;
        isReadOnly(): boolean;
        readUnsignedShortLE(): number;
        readDouble(): number;
        readFloat(): number;
        getLongLE(arg0: number): number;
        getBoolean(arg0: number): boolean;
        copy(arg0: number, arg1: number): Internal.ByteBuf;
        copy(): Internal.ByteBuf;
        readShortLE(): number;
        readUnsignedMedium(): number;
        ensureWritable(arg0: number): Internal.ByteBuf;
        ensureWritable(arg0: number, arg1: boolean): number;
        writeInt(arg0: number): Internal.ByteBuf;
        readFloatLE(): number;
        getDoubleLE(arg0: number): number;
        hasArray(): boolean;
        memoryAddress(): number;
        maxFastWritableBytes(): number;
        readableBytes(): number;
        readSlice(arg0: number): Internal.ByteBuf;
        getIntLE(arg0: number): number;
        forEachByteDesc(arg0: number, arg1: number, arg2: Internal.ByteProcessor): number;
        forEachByteDesc(arg0: Internal.ByteProcessor): number;
        nioBuffers(): Internal.ByteBuffer[];
        nioBuffers(arg0: number, arg1: number): Internal.ByteBuffer[];
        skipBytes(arg0: number): Internal.ByteBuf;
        getLong(arg0: number): number;
        readLong(): number;
        readShort(): number;
        equals(arg0: object): boolean;
        setZero(arg0: number, arg1: number): Internal.ByteBuf;
        getUnsignedMedium(arg0: number): number;
        readBytes(arg0: Internal.ByteBuf): Internal.ByteBuf;
        readBytes(arg0: Internal.ByteBuffer): Internal.ByteBuf;
        readBytes(arg0: number[], arg1: number, arg2: number): Internal.ByteBuf;
        readBytes(arg0: Internal.ByteBuf, arg1: number): Internal.ByteBuf;
        readBytes(arg0: Internal.ByteBuf, arg1: number, arg2: number): Internal.ByteBuf;
        readBytes(arg0: number[]): Internal.ByteBuf;
        readBytes(arg0: Internal.FileChannel, arg1: number, arg2: number): number;
        readBytes(arg0: Internal.GatheringByteChannel, arg1: number): number;
        readBytes(arg0: Internal.OutputStream, arg1: number): Internal.ByteBuf;
        readBytes(arg0: number): Internal.ByteBuf;
        readBoolean(): boolean;
        toString(arg0: number, arg1: number, arg2: Internal.Charset): string;
        toString(arg0: Internal.Charset): string;
        toString(): string;
        retainedSlice(): Internal.ByteBuf;
        retainedSlice(arg0: number, arg1: number): Internal.ByteBuf;
        readMediumLE(): number;
        setMedium(arg0: number, arg1: number): Internal.ByteBuf;
        isDirect(): boolean;
        setBoolean(arg0: number, arg1: boolean): Internal.ByteBuf;
        getFloatLE(arg0: number): number;
        readerIndex(): number;
        readerIndex(arg0: number): Internal.ByteBuf;
        getCharSequence(arg0: number, arg1: number, arg2: Internal.Charset): Internal.CharSequence;
        setShort(arg0: number, arg1: number): Internal.ByteBuf;
        compareTo(arg0: object): number;
        compareTo(arg0: Internal.ByteBuf): number;
        getBytes(arg0: number, arg1: number[], arg2: number, arg3: number): Internal.ByteBuf;
        getBytes(arg0: number, arg1: Internal.ByteBuf, arg2: number, arg3: number): Internal.ByteBuf;
        getBytes(arg0: number, arg1: Internal.ByteBuf, arg2: number): Internal.ByteBuf;
        getBytes(arg0: number, arg1: Internal.ByteBuf): Internal.ByteBuf;
        getBytes(arg0: number, arg1: number[]): Internal.ByteBuf;
        getBytes(arg0: number, arg1: Internal.FileChannel, arg2: number, arg3: number): number;
        getBytes(arg0: number, arg1: Internal.GatheringByteChannel, arg2: number): number;
        getBytes(arg0: number, arg1: Internal.OutputStream, arg2: number): Internal.ByteBuf;
        getBytes(arg0: number, arg1: Internal.ByteBuffer): Internal.ByteBuf;
        unwrap(): Internal.ByteBuf;
        setDouble(arg0: number, arg1: number): Internal.ByteBuf;
        setChar(arg0: number, arg1: number): Internal.ByteBuf;
        refCnt(): number;
        getUnsignedIntLE(arg0: number): number;
        setFloatLE(arg0: number, arg1: number): Internal.ByteBuf;
        getUnsignedInt(arg0: number): number;
        writeRegistryIdUnsafe(arg0: Internal.IForgeRegistry<object>, arg1: ResourceLocation): void;
        writeRegistryIdUnsafe<T>(arg0: Internal.IForgeRegistry<T>, arg1: T): void;
        indexOf(arg0: number, arg1: number, arg2: number): number;
        writeByte(arg0: number): Internal.ByteBuf;
        nioBuffer(): Internal.ByteBuffer;
        nioBuffer(arg0: number, arg1: number): Internal.ByteBuffer;
        touch(): Internal.ReferenceCounted;
        touch(): Internal.ByteBuf;
        touch(arg0: object): Internal.ByteBuf;
        touch(arg0: object): Internal.ReferenceCounted;
        discardSomeReadBytes(): Internal.ByteBuf;
        readRegistryIdUnsafe<T>(arg0: Internal.IForgeRegistry<T>): T;
        duplicate(): Internal.ByteBuf;
        writerIndex(arg0: number): Internal.ByteBuf;
        writerIndex(): number;
        readUnsignedInt(): number;
        getUnsignedShortLE(arg0: number): number;
        writeCharSequence(arg0: Internal.CharSequence, arg1: Internal.Charset): number;
        retainedDuplicate(): Internal.ByteBuf;
        getChar(arg0: number): string;
        setLong(arg0: number, arg1: number): Internal.ByteBuf;
        readMedium(): number;
        writeBytes(arg0: Internal.ByteBuffer): Internal.ByteBuf;
        writeBytes(arg0: Internal.ByteBuf): Internal.ByteBuf;
        writeBytes(arg0: Internal.ByteBuf, arg1: number): Internal.ByteBuf;
        writeBytes(arg0: Internal.ByteBuf, arg1: number, arg2: number): Internal.ByteBuf;
        writeBytes(arg0: number[]): Internal.ByteBuf;
        writeBytes(arg0: number[], arg1: number, arg2: number): Internal.ByteBuf;
        writeBytes(arg0: Internal.ScatteringByteChannel, arg1: number): number;
        writeBytes(arg0: Internal.InputStream, arg1: number): number;
        writeBytes(arg0: Internal.FileChannel, arg1: number, arg2: number): number;
        forEachByte(arg0: number, arg1: number, arg2: Internal.ByteProcessor): number;
        forEachByte(arg0: Internal.ByteProcessor): number;
        setIndex(arg0: number, arg1: number): Internal.ByteBuf;
        writeShort(arg0: number): Internal.ByteBuf;
        getShortLE(arg0: number): number;
        alloc(): Internal.ByteBufAllocator;
        getMedium(arg0: number): number;
        readUnsignedShort(): number;
        setByte(arg0: number, arg1: number): Internal.ByteBuf;
        maxWritableBytes(): number;
        writeShortLE(arg0: number): Internal.ByteBuf;
        readFluidStack(): Internal.FluidStack;
        notifyAll(): void;
        getDouble(arg0: number): number;
        getFloat(arg0: number): number;
        writeLong(arg0: number): Internal.ByteBuf;
        writeIntLE(arg0: number): Internal.ByteBuf;
        array(): number[];
        setCharSequence(arg0: number, arg1: Internal.CharSequence, arg2: Internal.Charset): number;
        hashCode(): number;
        internalNioBuffer(arg0: number, arg1: number): Internal.ByteBuffer;
        arrayOffset(): number;
        readIntLE(): number;
        setMediumLE(arg0: number, arg1: number): Internal.ByteBuf;
        readUnsignedByte(): number;
        readLongLE(): number;
        readUnsignedMediumLE(): number;
        writeDouble(arg0: number): Internal.ByteBuf;
        setBytes(arg0: number, arg1: Internal.ByteBuffer): Internal.ByteBuf;
        setBytes(arg0: number, arg1: Internal.ByteBuf, arg2: number, arg3: number): Internal.ByteBuf;
        setBytes(arg0: number, arg1: number[]): Internal.ByteBuf;
        setBytes(arg0: number, arg1: Internal.ByteBuf, arg2: number): Internal.ByteBuf;
        setBytes(arg0: number, arg1: Internal.ByteBuf): Internal.ByteBuf;
        setBytes(arg0: number, arg1: Internal.InputStream, arg2: number): number;
        setBytes(arg0: number, arg1: Internal.ScatteringByteChannel, arg2: number): number;
        setBytes(arg0: number, arg1: Internal.FileChannel, arg2: number, arg3: number): number;
        setBytes(arg0: number, arg1: number[], arg2: number, arg3: number): Internal.ByteBuf;
        setFloat(arg0: number, arg1: number): Internal.ByteBuf;
        getShort(arg0: number): number;
        writeMediumLE(arg0: number): Internal.ByteBuf;
        clear(): Internal.ByteBuf;
        writeRegistryId<T>(arg0: T): void;
        getUnsignedByte(arg0: number): number;
        writeFluidStack(arg0: Internal.FluidStack): void;
        discardReadBytes(): Internal.ByteBuf;
        writeChar(arg0: number): Internal.ByteBuf;
        writeDoubleLE(arg0: number): Internal.ByteBuf;
        isContiguous(): boolean;
        getUnsignedMediumLE(arg0: number): number;
        readByte(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class LunarTextComponents$Notification {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        static readonly CODEC : Internal.Codec<Internal.LunarTextComponents$Notification>;
        static readonly DEFAULT : Internal.LunarTextComponents$Notification;
        get notificationType(): Internal.LunarTextComponents$NotificationType;
        get customTranslationTextComponent(): Internal.CustomTranslationTextComponent;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class DecimalStyle {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        notify(): void;
        static ofDefaultLocale(): Internal.DecimalStyle;
        withPositiveSign(arg0: string): Internal.DecimalStyle;
        hashCode(): number;
        withDecimalSeparator(arg0: string): Internal.DecimalStyle;
        static of(arg0: Internal.Locale): Internal.DecimalStyle;
        equals(arg0: object): boolean;
        toString(): string;
        withNegativeSign(arg0: string): Internal.DecimalStyle;
        withZeroDigit(arg0: string): Internal.DecimalStyle;
        static readonly STANDARD : Internal.DecimalStyle;
        get positiveSign(): string;
        get decimalSeparator(): string;
        get negativeSign(): string;
        get zeroDigit(): string;
        get availableLocales(): Internal.Set<Internal.Locale>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Color implements Internal.SpecialEquality {
        createTextColorKJS(): Internal.TextColor;
        specialEquals(o: object, shallow: boolean): boolean;
        get rgbKJS(): number;
        get hexKJS(): string;
        get argbKJS(): number;
        get fireworkColorKJS(): number;
        get serializeKJS(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class MinecraftServer extends Internal.ReentrantBlockableEventLoop<Unknown> implements Internal.CommandSource, Internal.AutoCloseable, Internal.MinecraftServerAccessor, Internal.MinecraftServerKJS, Internal.MinecraftServerAccessorMixin {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        forgeGetWorldMap(): Map<Internal.ResourceKey<Internal.Level>, Internal.ServerLevel>;
        notifyAll(): void;
        getTickTime(arg0: Internal.ResourceKey<Internal.Level>): number[];
        execute(arg0: Internal.Runnable): void;
        asKJS(): object;
        notify(): void;
        handler$zbj000$reloadResources(arg0: Internal.Collection<any>, arg1: Internal.CallbackInfoReturnable<any>): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        markWorldsDirty(): void;
        toString(): string;
        close(): void;
        get serverResourcesKJS(): Internal.ServerResources;
        get tickables(): Internal.List<any>;
        get resources(): Internal.ServerResources;
        get serverResources(): Internal.ServerResources;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Byte2FloatFunction implements it.unimi.dsi.fastutil.Function<number, number>, Internal.IntToDoubleFunction {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        applyAsDouble(arg0: number): number;
        andThenShort(arg0: Internal.Float2ShortFunction): Internal.Byte2ShortFunction;
        composeByte(arg0: Internal.Byte2ByteFunction): Internal.Byte2FloatFunction;
        andThenInt(arg0: Internal.Float2IntFunction): Internal.Byte2IntFunction;
        composeReference<T>(arg0: Internal.Reference2ByteFunction<T>): Internal.Reference2FloatFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: number) => T;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: number): number;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: object): object;
        remove(arg0: object): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Float2DoubleFunction): Internal.Byte2DoubleFunction;
        andThenObject<T>(arg0: Internal.Float2ObjectFunction<T>): Internal.Byte2ObjectFunction<T>;
        get(arg0: object): number;
        get(arg0: object): object;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Float2LongFunction): Internal.Byte2LongFunction;
        composeLong(arg0: Internal.Long2ByteFunction): Internal.Long2FloatFunction;
        andThenByte(arg0: Internal.Float2ByteFunction): Internal.Byte2ByteFunction;
        andThenFloat(arg0: Internal.Float2FloatFunction): Internal.Byte2FloatFunction;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2ByteFunction): Internal.Int2FloatFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2ByteFunction): Internal.Float2FloatFunction;
        andThenChar(arg0: Internal.Float2CharFunction): Internal.Byte2CharFunction;
        composeObject<T>(arg0: Internal.Object2ByteFunction<T>): Internal.Object2FloatFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => number;
        composeShort(arg0: Internal.Short2ByteFunction): Internal.Short2FloatFunction;
        andThenReference<T>(arg0: Internal.Float2ReferenceFunction<T>): Internal.Byte2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2ByteFunction): Internal.Char2FloatFunction;
        composeDouble(arg0: Internal.Double2ByteFunction): Internal.Double2FloatFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ZoneOffsetTransitionRule$TimeDefinition extends Internal.Enum<Internal.ZoneOffsetTransitionRule$TimeDefinition> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(arg0: string): Internal.ZoneOffsetTransitionRule$TimeDefinition;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.ZoneOffsetTransitionRule$TimeDefinition[];
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        createDateTime(arg0: Internal.LocalDateTime, arg1: Internal.ZoneOffset, arg2: Internal.ZoneOffset): Internal.LocalDateTime;
        static readonly WALL : Internal.ZoneOffsetTransitionRule$TimeDefinition;
        static readonly UTC : Internal.ZoneOffsetTransitionRule$TimeDefinition;
        static readonly STANDARD : Internal.ZoneOffsetTransitionRule$TimeDefinition;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Wrapper {
        unwrap(): object;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class DamageSourcePredicateBuilderJS implements Internal.LootItemCondition$Builder {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isFire(arg0: boolean): Internal.DamageSourcePredicateBuilderJS;
        anyType(arg0: string[]): Internal.DamageSourcePredicateBuilderJS;
        notifyAll(): void;
        isLightning(arg0: boolean): Internal.DamageSourcePredicateBuilderJS;
        isExplosion(arg0: boolean): Internal.DamageSourcePredicateBuilderJS;
        isProjectile(arg0: boolean): Internal.DamageSourcePredicateBuilderJS;
        notify(): void;
        doesBypassInvulnerability(arg0: boolean): Internal.DamageSourcePredicateBuilderJS;
        doesBypassMagic(arg0: boolean): Internal.DamageSourcePredicateBuilderJS;
        matchDirectEntity(arg0: (arg0: Internal.EntityPredicateBuilderJS) => void): Internal.DamageSourcePredicateBuilderJS;
        isMagic(arg0: boolean): Internal.DamageSourcePredicateBuilderJS;
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        matchSourceEntity(arg0: (arg0: Internal.EntityPredicateBuilderJS) => void): Internal.DamageSourcePredicateBuilderJS;
        doesBypassArmor(arg0: boolean): Internal.DamageSourcePredicateBuilderJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Char2ByteFunction implements it.unimi.dsi.fastutil.Function<string, number>, Internal.IntUnaryOperator {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: string, arg1: number): number;
        andThenShort(arg0: Internal.Byte2ShortFunction): Internal.Char2ShortFunction;
        composeByte(arg0: Internal.Byte2CharFunction): Internal.Byte2ByteFunction;
        andThenInt(arg0: Internal.Byte2IntFunction): Internal.Char2IntFunction;
        composeReference<T>(arg0: Internal.Reference2CharFunction<T>): Internal.Reference2ByteFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: string) => T;
        andThen(arg0: Internal.IntUnaryOperator): Internal.IntUnaryOperator;
        put(arg0: object, arg1: object): object;
        put(arg0: string, arg1: number): number;
        put(arg0: string, arg1: number): number;
        remove(arg0: string): number;
        remove(arg0: object): object;
        remove(arg0: object): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Byte2DoubleFunction): Internal.Char2DoubleFunction;
        andThenObject<T>(arg0: Internal.Byte2ObjectFunction<T>): Internal.Char2ObjectFunction<T>;
        get(arg0: object): number;
        get(arg0: object): object;
        get(arg0: string): number;
        andThenLong(arg0: Internal.Byte2LongFunction): Internal.Char2LongFunction;
        composeLong(arg0: Internal.Long2CharFunction): Internal.Long2ByteFunction;
        andThenByte(arg0: Internal.Byte2ByteFunction): Internal.Char2ByteFunction;
        andThenFloat(arg0: Internal.Byte2FloatFunction): Internal.Char2FloatFunction;
        applyAsInt(arg0: number): number;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: string): boolean;
        composeInt(arg0: Internal.Int2CharFunction): Internal.Int2ByteFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2CharFunction): Internal.Float2ByteFunction;
        andThenChar(arg0: Internal.Byte2CharFunction): Internal.Char2CharFunction;
        composeObject<T>(arg0: Internal.Object2CharFunction<T>): Internal.Object2ByteFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => string): (arg0: T) => number;
        compose(arg0: Internal.IntUnaryOperator): Internal.IntUnaryOperator;
        composeShort(arg0: Internal.Short2CharFunction): Internal.Short2ByteFunction;
        andThenReference<T>(arg0: Internal.Byte2ReferenceFunction<T>): Internal.Char2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2CharFunction): Internal.Char2ByteFunction;
        composeDouble(arg0: Internal.Double2CharFunction): Internal.Double2ByteFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface VertexConsumer implements Internal.IForgeVertexConsumer, Internal.VertexDrain {
        applyBakedLighting(arg0: number, arg1: Internal.ByteBuffer): number;
        createSink(factory: me.jellysquid.mods.sodium.client.model.vertex.type.VertexType<any>): Internal.VertexSink;
        putBulkData(arg0: Internal.PoseStack$Pose, arg1: Internal.BakedQuad, arg2: number[], arg3: number, arg4: number, arg5: number, arg6: number, arg7: number[], arg8: number, arg9: boolean): void;
        putBulkData(arg0: Internal.PoseStack$Pose, arg1: Internal.BakedQuad, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: boolean): void;
        putBulkData(arg0: Internal.PoseStack$Pose, arg1: Internal.BakedQuad, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
        putBulkData(arg0: Internal.PoseStack$Pose, arg1: Internal.BakedQuad, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: boolean): void;
        applyBakedNormals(arg0: Internal.Vector3f, arg1: Internal.ByteBuffer, arg2: Internal.Matrix3f): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class URLConnection {
        getHeaderFieldLong(arg0: string, arg1: number): number;
        setRequestProperty(arg0: string, arg1: string): void;
        static getDefaultUseCaches(arg0: string): boolean;
        getHeaderField(arg0: number): string;
        getHeaderField(arg0: string): string;
        static setDefaultUseCaches(arg0: string, arg1: boolean): void;
        static guessContentTypeFromName(arg0: string): string;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        getContent(arg0: Internal.Class<object>[]): object;
        notify(): void;
        getHeaderFieldInt(arg0: string, arg1: number): number;
        getRequestProperty(arg0: string): string;
        static guessContentTypeFromStream(arg0: Internal.InputStream): string;
        hashCode(): number;
        static setDefaultRequestProperty(arg0: string, arg1: string): void;
        getHeaderFieldDate(arg0: string, arg1: number): number;
        getHeaderFieldKey(arg0: number): string;
        connect(): void;
        addRequestProperty(arg0: string, arg1: string): void;
        static getDefaultRequestProperty(arg0: string): string;
        equals(arg0: object): boolean;
        toString(): string;
        set connectTimeout(arg0: number);
        set useCaches(arg0: boolean);
        get doInput(): boolean;
        get ifModifiedSince(): number;
        get permission(): Internal.Permission;
        get defaultAllowUserInteraction(): boolean;
        get defaultUseCaches(): boolean;
        get allowUserInteraction(): boolean;
        get connectTimeout(): number;
        get contentLength(): number;
        get inputStream(): Internal.InputStream;
        set allowUserInteraction(arg0: boolean);
        get requestProperties(): Map<string, Internal.List<string>>;
        get uRL(): Internal.URL;
        get headerFields(): Map<string, Internal.List<string>>;
        get contentLengthLong(): number;
        set defaultAllowUserInteraction(arg0: boolean);
        get contentType(): string;
        set defaultUseCaches(arg0: boolean);
        set doOutput(arg0: boolean);
        get lastModified(): number;
        set ifModifiedSince(arg0: number);
        get readTimeout(): number;
        get content(): object;
        get fileNameMap(): Internal.FileNameMap;
        get date(): number;
        set contentHandlerFactory(arg0: Internal.ContentHandlerFactory);
        get contentEncoding(): string;
        get useCaches(): boolean;
        set doInput(arg0: boolean);
        set readTimeout(arg0: number);
        get expiration(): number;
        set fileNameMap(arg0: Internal.FileNameMap);
        get outputStream(): Internal.OutputStream;
        get doOutput(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class TranslatableComponent extends Internal.BaseComponent implements Internal.ContextAwareComponent {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        get string(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IForgeVertexConsumer {
        applyBakedLighting(arg0: number, arg1: Internal.ByteBuffer): number;
        putBulkData(arg0: Internal.PoseStack$Pose, arg1: Internal.BakedQuad, arg2: number[], arg3: number, arg4: number, arg5: number, arg6: number, arg7: number[], arg8: number, arg9: boolean): void;
        putBulkData(arg0: Internal.PoseStack$Pose, arg1: Internal.BakedQuad, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: boolean): void;
        putBulkData(arg0: Internal.PoseStack$Pose, arg1: Internal.BakedQuad, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
        putBulkData(arg0: Internal.PoseStack$Pose, arg1: Internal.BakedQuad, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: boolean): void;
        applyBakedNormals(arg0: Internal.Vector3f, arg1: Internal.ByteBuffer, arg2: Internal.Matrix3f): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface BiomeSeedProvider {
        get biomeSeed(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IForgeRegistry <V> implements Internal.Iterable<V> {
        getKey(arg0: V): ResourceLocation;
        registerAll(arg0: V[]): void;
        containsKey(arg0: ResourceLocation): boolean;
        isEmpty(): boolean;
        getSlaveMap<T>(arg0: ResourceLocation, arg1: Internal.Class<T>): T;
        containsValue(arg0: V): boolean;
        getResourceKey(arg0: V): Internal.Optional<Internal.ResourceKey<V>>;
        getValue(arg0: ResourceLocation): V;
        register(arg0: V): void;
        get codec(): Internal.Codec<V>;
        get values(): Internal.Collection<V>;
        get defaultKey(): ResourceLocation;
        get registryName(): ResourceLocation;
        get registrySuperType(): Internal.Class<V>;
        get keys(): Internal.Set<ResourceLocation>;
        get entries(): Internal.Set<Internal.Map$Entry<Internal.ResourceKey<V>, V>>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IIngredientSerializer <T> {
        parse(arg0: Internal.JsonObject): T;
        parse(arg0: Internal.FriendlyByteBuf): T;
        write(arg0: Internal.FriendlyByteBuf, arg1: T): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ZonedDateTime implements Internal.Temporal, Internal.ChronoZonedDateTime<Internal.LocalDate>, Internal.Serializable {
        plusHours(arg0: number): Internal.ZonedDateTime;
        isEqual(arg0: Internal.ChronoZonedDateTime<object>): boolean;
        toLocalTime(): Internal.LocalTime;
        compareTo(arg0: object): number;
        compareTo(arg0: Internal.ChronoZonedDateTime<object>): number;
        static ofLocal(arg0: Internal.LocalDateTime, arg1: Internal.ZoneId, arg2: Internal.ZoneOffset): Internal.ZonedDateTime;
        static ofStrict(arg0: Internal.LocalDateTime, arg1: Internal.ZoneOffset, arg2: Internal.ZoneId): Internal.ZonedDateTime;
        plusSeconds(arg0: number): Internal.ZonedDateTime;
        static from(arg0: Internal.TemporalAccessor): Internal.ZonedDateTime;
        plusNanos(arg0: number): Internal.ZonedDateTime;
        withHour(arg0: number): Internal.ZonedDateTime;
        plusMonths(arg0: number): Internal.ZonedDateTime;
        plusYears(arg0: number): Internal.ZonedDateTime;
        truncatedTo(arg0: Internal.TemporalUnit): Internal.ZonedDateTime;
        query<R>(arg0: Internal.TemporalQuery<R>): R;
        minusNanos(arg0: number): Internal.ZonedDateTime;
        format(arg0: Internal.DateTimeFormatter): string;
        isSupported(arg0: Internal.TemporalField): boolean;
        isSupported(arg0: Internal.TemporalUnit): boolean;
        plus(arg0: Internal.TemporalAmount): Internal.Temporal;
        plus(arg0: Internal.TemporalAmount): Internal.ZonedDateTime;
        plus(arg0: Internal.TemporalAmount): Internal.ChronoZonedDateTime<any>;
        plus(arg0: number, arg1: Internal.TemporalUnit): Internal.Temporal;
        plus(arg0: number, arg1: Internal.TemporalUnit): Internal.ZonedDateTime;
        plus(arg0: number, arg1: Internal.TemporalUnit): Internal.ChronoZonedDateTime<any>;
        toEpochSecond(): number;
        toLocalDateTime(): Internal.ChronoLocalDateTime<any>;
        toLocalDateTime(): Internal.LocalDateTime;
        withDayOfMonth(arg0: number): Internal.ZonedDateTime;
        isAfter(arg0: Internal.ChronoZonedDateTime<object>): boolean;
        withMonth(arg0: number): Internal.ZonedDateTime;
        toOffsetDateTime(): Internal.OffsetDateTime;
        static ofInstant(arg0: Internal.LocalDateTime, arg1: Internal.ZoneOffset, arg2: Internal.ZoneId): Internal.ZonedDateTime;
        static ofInstant(arg0: Internal.Instant, arg1: Internal.ZoneId): Internal.ZonedDateTime;
        minus(arg0: number, arg1: Internal.TemporalUnit): Internal.ZonedDateTime;
        minus(arg0: number, arg1: Internal.TemporalUnit): Internal.ChronoZonedDateTime<any>;
        minus(arg0: number, arg1: Internal.TemporalUnit): Internal.Temporal;
        minus(arg0: Internal.TemporalAmount): Internal.Temporal;
        minus(arg0: Internal.TemporalAmount): Internal.ChronoZonedDateTime<any>;
        minus(arg0: Internal.TemporalAmount): Internal.ZonedDateTime;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        withFixedOffsetZone(): Internal.ZonedDateTime;
        minusHours(arg0: number): Internal.ZonedDateTime;
        notifyAll(): void;
        range(arg0: Internal.TemporalField): Internal.ValueRange;
        withYear(arg0: number): Internal.ZonedDateTime;
        plusMinutes(arg0: number): Internal.ZonedDateTime;
        notify(): void;
        minusMinutes(arg0: number): Internal.ZonedDateTime;
        plusDays(arg0: number): Internal.ZonedDateTime;
        withLaterOffsetAtOverlap(): Internal.ZonedDateTime;
        withLaterOffsetAtOverlap(): Internal.ChronoZonedDateTime<any>;
        hashCode(): number;
        static now(arg0: Internal.Clock): Internal.ZonedDateTime;
        static now(arg0: Internal.ZoneId): Internal.ZonedDateTime;
        static now(): Internal.ZonedDateTime;
        static of(arg0: Internal.LocalDate, arg1: Internal.LocalTime, arg2: Internal.ZoneId): Internal.ZonedDateTime;
        static of(arg0: Internal.LocalDateTime, arg1: Internal.ZoneId): Internal.ZonedDateTime;
        static of(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: Internal.ZoneId): Internal.ZonedDateTime;
        get(arg0: Internal.TemporalField): number;
        withZoneSameLocal(arg0: Internal.ZoneId): Internal.ChronoZonedDateTime<any>;
        withZoneSameLocal(arg0: Internal.ZoneId): Internal.ZonedDateTime;
        withEarlierOffsetAtOverlap(): Internal.ChronoZonedDateTime<any>;
        withEarlierOffsetAtOverlap(): Internal.ZonedDateTime;
        plusWeeks(arg0: number): Internal.ZonedDateTime;
        withMinute(arg0: number): Internal.ZonedDateTime;
        minusYears(arg0: number): Internal.ZonedDateTime;
        withZoneSameInstant(arg0: Internal.ZoneId): Internal.ChronoZonedDateTime<any>;
        withZoneSameInstant(arg0: Internal.ZoneId): Internal.ZonedDateTime;
        minusWeeks(arg0: number): Internal.ZonedDateTime;
        withDayOfYear(arg0: number): Internal.ZonedDateTime;
        static parse(arg0: Internal.CharSequence, arg1: Internal.DateTimeFormatter): Internal.ZonedDateTime;
        static parse(arg0: Internal.CharSequence): Internal.ZonedDateTime;
        toInstant(): Internal.Instant;
        isBefore(arg0: Internal.ChronoZonedDateTime<object>): boolean;
        minusDays(arg0: number): Internal.ZonedDateTime;
        withNano(arg0: number): Internal.ZonedDateTime;
        getLong(arg0: Internal.TemporalField): number;
        minusMonths(arg0: number): Internal.ZonedDateTime;
        with(arg0: Internal.TemporalAdjuster): Internal.Temporal;
        with(arg0: Internal.TemporalAdjuster): Internal.ChronoZonedDateTime<any>;
        with(arg0: Internal.TemporalAdjuster): Internal.ZonedDateTime;
        with(arg0: Internal.TemporalField, arg1: number): Internal.ZonedDateTime;
        with(arg0: Internal.TemporalField, arg1: number): Internal.ChronoZonedDateTime<any>;
        with(arg0: Internal.TemporalField, arg1: number): Internal.Temporal;
        toLocalDate(): Internal.LocalDate;
        toLocalDate(): Internal.ChronoLocalDate;
        equals(arg0: object): boolean;
        until(arg0: Internal.Temporal, arg1: Internal.TemporalUnit): number;
        toString(): string;
        minusSeconds(arg0: number): Internal.ZonedDateTime;
        withSecond(arg0: number): Internal.ZonedDateTime;
        get dayOfWeek(): Internal.DayOfWeek;
        get minute(): number;
        get month(): Internal.Month;
        get nano(): number;
        get zone(): Internal.ZoneId;
        get year(): number;
        get offset(): Internal.ZoneOffset;
        get dayOfYear(): number;
        get hour(): number;
        get chronology(): Internal.Chronology;
        get monthValue(): number;
        get second(): number;
        get dayOfMonth(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Int2CharFunction implements it.unimi.dsi.fastutil.Function<number, string>, Internal.IntUnaryOperator {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: string): string;
        getOrDefault(arg0: number, arg1: string): string;
        andThenShort(arg0: Internal.Char2ShortFunction): Internal.Int2ShortFunction;
        composeByte(arg0: Internal.Byte2IntFunction): Internal.Byte2CharFunction;
        andThenInt(arg0: Internal.Char2IntFunction): Internal.Int2IntFunction;
        composeReference<T>(arg0: Internal.Reference2IntFunction<T>): Internal.Reference2CharFunction<T>;
        andThen<T>(arg0: (arg0: string) => T): (arg0: number) => T;
        andThen(arg0: Internal.IntUnaryOperator): Internal.IntUnaryOperator;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: string): string;
        put(arg0: number, arg1: string): string;
        remove(arg0: number): string;
        remove(arg0: object): object;
        remove(arg0: object): string;
        defaultReturnValue(arg0: string): void;
        defaultReturnValue(): string;
        andThenDouble(arg0: Internal.Char2DoubleFunction): Internal.Int2DoubleFunction;
        andThenObject<T>(arg0: Internal.Char2ObjectFunction<T>): Internal.Int2ObjectFunction<T>;
        get(arg0: object): string;
        get(arg0: object): object;
        get(arg0: number): string;
        andThenLong(arg0: Internal.Char2LongFunction): Internal.Int2LongFunction;
        composeLong(arg0: Internal.Long2IntFunction): Internal.Long2CharFunction;
        andThenByte(arg0: Internal.Char2ByteFunction): Internal.Int2ByteFunction;
        andThenFloat(arg0: Internal.Char2FloatFunction): Internal.Int2FloatFunction;
        applyAsInt(arg0: number): number;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2IntFunction): Internal.Int2CharFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2IntFunction): Internal.Float2CharFunction;
        andThenChar(arg0: Internal.Char2CharFunction): Internal.Int2CharFunction;
        composeObject<T>(arg0: Internal.Object2IntFunction<T>): Internal.Object2CharFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => string;
        compose(arg0: Internal.IntUnaryOperator): Internal.IntUnaryOperator;
        composeShort(arg0: Internal.Short2IntFunction): Internal.Short2CharFunction;
        andThenReference<T>(arg0: Internal.Char2ReferenceFunction<T>): Internal.Int2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2IntFunction): Internal.Char2CharFunction;
        composeDouble(arg0: Internal.Double2IntFunction): Internal.Double2CharFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Spliterator <T> {
        trySplit(): Internal.Spliterator<T>;
        tryAdvance(arg0: (arg0: T) => void): boolean;
        characteristics(): number;
        estimateSize(): number;
        hasCharacteristics(arg0: number): boolean;
        forEachRemaining(arg0: (arg0: T) => void): void;
        get comparator(): Internal.Comparator<T>;
        get exactSizeIfKnown(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface DoubleConsumer {
        andThen(arg0: Internal.DoubleConsumer): Internal.DoubleConsumer;
        accept(arg0: number): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Byte2ObjectFunction <V> implements it.unimi.dsi.fastutil.Function<number, V>, Internal.IntFunction<V> {
        getOrDefault(arg0: object, arg1: V): V;
        getOrDefault(arg0: number, arg1: V): V;
        andThenShort(arg0: Internal.Object2ShortFunction<V>): Internal.Byte2ShortFunction;
        composeByte(arg0: Internal.Byte2ByteFunction): Internal.Byte2ObjectFunction<V>;
        andThenInt(arg0: Internal.Object2IntFunction<V>): Internal.Byte2IntFunction;
        composeReference<T>(arg0: Internal.Reference2ByteFunction<T>): (arg0: T) => V;
        put(arg0: number, arg1: V): V;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: V): V;
        remove(arg0: number): V;
        remove(arg0: object): V;
        defaultReturnValue(): V;
        defaultReturnValue(arg0: V): void;
        andThenDouble(arg0: Internal.Object2DoubleFunction<V>): Internal.Byte2DoubleFunction;
        andThenObject<T>(arg0: (arg0: V) => T): Internal.Byte2ObjectFunction<T>;
        get(arg0: object): V;
        get(arg0: number): V;
        andThenLong(arg0: Internal.Object2LongFunction<V>): Internal.Byte2LongFunction;
        composeLong(arg0: Internal.Long2ByteFunction): Internal.Long2ObjectFunction<V>;
        andThenByte(arg0: Internal.Object2ByteFunction<V>): Internal.Byte2ByteFunction;
        andThenFloat(arg0: Internal.Object2FloatFunction<V>): Internal.Byte2FloatFunction;
        apply(arg0: number): V;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2ByteFunction): Internal.Int2ObjectFunction<V>;
        clear(): void;
        composeFloat(arg0: Internal.Float2ByteFunction): Internal.Float2ObjectFunction<V>;
        andThenChar(arg0: Internal.Object2CharFunction<V>): Internal.Byte2CharFunction;
        composeObject<T>(arg0: Internal.Object2ByteFunction<T>): (arg0: T) => V;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => V;
        composeShort(arg0: Internal.Short2ByteFunction): Internal.Short2ObjectFunction<V>;
        andThenReference<T>(arg0: (arg0: V) => T): Internal.Byte2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2ByteFunction): Internal.Char2ObjectFunction<V>;
        composeDouble(arg0: Internal.Double2ByteFunction): Internal.Double2ObjectFunction<V>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Float2IntFunction implements it.unimi.dsi.fastutil.Function<number, number>, Internal.DoubleToIntFunction {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        andThenShort(arg0: Internal.Int2ShortFunction): Internal.Float2ShortFunction;
        composeByte(arg0: Internal.Byte2FloatFunction): Internal.Byte2IntFunction;
        andThenInt(arg0: Internal.Int2IntFunction): Internal.Float2IntFunction;
        composeReference<T>(arg0: Internal.Reference2FloatFunction<T>): Internal.Reference2IntFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: number) => T;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: number): number;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: object): object;
        remove(arg0: object): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Int2DoubleFunction): Internal.Float2DoubleFunction;
        andThenObject<T>(arg0: Internal.Int2ObjectFunction<T>): Internal.Float2ObjectFunction<T>;
        get(arg0: object): number;
        get(arg0: object): object;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Int2LongFunction): Internal.Float2LongFunction;
        composeLong(arg0: Internal.Long2FloatFunction): Internal.Long2IntFunction;
        andThenByte(arg0: Internal.Int2ByteFunction): Internal.Float2ByteFunction;
        andThenFloat(arg0: Internal.Int2FloatFunction): Internal.Float2FloatFunction;
        applyAsInt(arg0: number): number;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2FloatFunction): Internal.Int2IntFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2FloatFunction): Internal.Float2IntFunction;
        andThenChar(arg0: Internal.Int2CharFunction): Internal.Float2CharFunction;
        composeObject<T>(arg0: Internal.Object2FloatFunction<T>): Internal.Object2IntFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => number;
        composeShort(arg0: Internal.Short2FloatFunction): Internal.Short2IntFunction;
        andThenReference<T>(arg0: Internal.Int2ReferenceFunction<T>): Internal.Float2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2FloatFunction): Internal.Char2IntFunction;
        composeDouble(arg0: Internal.Double2FloatFunction): Internal.Double2IntFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface URLStreamHandlerFactory {
        createURLStreamHandler(arg0: string): Internal.URLStreamHandler;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface StringBuilderAppendable {
        appendString(arg0: Internal.StringBuilder): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface DoubleToLongFunction {
        applyAsLong(arg0: number): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ProtoChunkTicks <T> implements Internal.SerializableTickContainer<T>, Internal.TickContainerAccess<T> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class FieldNamingPolicy extends Internal.Enum<Internal.FieldNamingPolicy> implements Internal.FieldNamingStrategy {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(arg0: string): Internal.FieldNamingPolicy;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.FieldNamingPolicy[];
        name(): string;
        translateName(arg0: Internal.Field): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly IDENTITY : Internal.FieldNamingPolicy;
        static readonly UPPER_CAMEL_CASE_WITH_SPACES : Internal.FieldNamingPolicy;
        static readonly UPPER_CAMEL_CASE : Internal.FieldNamingPolicy;
        static readonly LOWER_CASE_WITH_DOTS : Internal.FieldNamingPolicy;
        static readonly LOWER_CASE_WITH_UNDERSCORES : Internal.FieldNamingPolicy;
        static readonly LOWER_CASE_WITH_DASHES : Internal.FieldNamingPolicy;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface JsonReloadListenerAccess {
        get gson(): Internal.Gson;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Appendable {
        append(arg0: Internal.CharSequence): Internal.Appendable;
        append(arg0: Internal.CharSequence, arg1: number, arg2: number): Internal.Appendable;
        append(arg0: string): Internal.Appendable;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Nameable {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class DefaultedVertexConsumer implements Internal.VertexConsumer {
        applyBakedLighting(arg0: number, arg1: Internal.ByteBuffer): number;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        createSink(factory: me.jellysquid.mods.sodium.client.model.vertex.type.VertexType<any>): Internal.VertexSink;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        putBulkData(arg0: Internal.PoseStack$Pose, arg1: Internal.BakedQuad, arg2: number[], arg3: number, arg4: number, arg5: number, arg6: number, arg7: number[], arg8: number, arg9: boolean): void;
        putBulkData(arg0: Internal.PoseStack$Pose, arg1: Internal.BakedQuad, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: boolean): void;
        putBulkData(arg0: Internal.PoseStack$Pose, arg1: Internal.BakedQuad, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
        putBulkData(arg0: Internal.PoseStack$Pose, arg1: Internal.BakedQuad, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: boolean): void;
        applyBakedNormals(arg0: Internal.Vector3f, arg1: Internal.ByteBuffer, arg2: Internal.Matrix3f): void;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class LocalDateTime implements Internal.Temporal, Internal.TemporalAdjuster, Internal.ChronoLocalDateTime<Internal.LocalDate>, Internal.Serializable {
        static ofEpochSecond(arg0: number, arg1: number, arg2: Internal.ZoneOffset): Internal.LocalDateTime;
        plusHours(arg0: number): Internal.LocalDateTime;
        isEqual(arg0: Internal.ChronoLocalDateTime<object>): boolean;
        toLocalTime(): Internal.LocalTime;
        compareTo(arg0: Internal.ChronoLocalDateTime<object>): number;
        compareTo(arg0: object): number;
        plusSeconds(arg0: number): Internal.LocalDateTime;
        static from(arg0: Internal.TemporalAccessor): Internal.LocalDateTime;
        plusNanos(arg0: number): Internal.LocalDateTime;
        withHour(arg0: number): Internal.LocalDateTime;
        plusMonths(arg0: number): Internal.LocalDateTime;
        plusYears(arg0: number): Internal.LocalDateTime;
        truncatedTo(arg0: Internal.TemporalUnit): Internal.LocalDateTime;
        query<R>(arg0: Internal.TemporalQuery<R>): R;
        minusNanos(arg0: number): Internal.LocalDateTime;
        format(arg0: Internal.DateTimeFormatter): string;
        isSupported(arg0: Internal.TemporalField): boolean;
        isSupported(arg0: Internal.TemporalUnit): boolean;
        plus(arg0: number, arg1: Internal.TemporalUnit): Internal.Temporal;
        plus(arg0: number, arg1: Internal.TemporalUnit): Internal.ChronoLocalDateTime<any>;
        plus(arg0: number, arg1: Internal.TemporalUnit): Internal.LocalDateTime;
        plus(arg0: Internal.TemporalAmount): Internal.ChronoLocalDateTime<any>;
        plus(arg0: Internal.TemporalAmount): Internal.LocalDateTime;
        plus(arg0: Internal.TemporalAmount): Internal.Temporal;
        toEpochSecond(arg0: Internal.ZoneOffset): number;
        withDayOfMonth(arg0: number): Internal.LocalDateTime;
        withMonth(arg0: number): Internal.LocalDateTime;
        isAfter(arg0: Internal.ChronoLocalDateTime<object>): boolean;
        static ofInstant(arg0: Internal.Instant, arg1: Internal.ZoneId): Internal.LocalDateTime;
        minus(arg0: number, arg1: Internal.TemporalUnit): Internal.ChronoLocalDateTime<any>;
        minus(arg0: number, arg1: Internal.TemporalUnit): Internal.LocalDateTime;
        minus(arg0: number, arg1: Internal.TemporalUnit): Internal.Temporal;
        minus(arg0: Internal.TemporalAmount): Internal.ChronoLocalDateTime<any>;
        minus(arg0: Internal.TemporalAmount): Internal.LocalDateTime;
        minus(arg0: Internal.TemporalAmount): Internal.Temporal;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        minusHours(arg0: number): Internal.LocalDateTime;
        notifyAll(): void;
        adjustInto(arg0: Internal.Temporal): Internal.Temporal;
        range(arg0: Internal.TemporalField): Internal.ValueRange;
        withYear(arg0: number): Internal.LocalDateTime;
        plusMinutes(arg0: number): Internal.LocalDateTime;
        notify(): void;
        minusMinutes(arg0: number): Internal.LocalDateTime;
        plusDays(arg0: number): Internal.LocalDateTime;
        hashCode(): number;
        static now(): Internal.LocalDateTime;
        static now(arg0: Internal.Clock): Internal.LocalDateTime;
        static now(arg0: Internal.ZoneId): Internal.LocalDateTime;
        static of(arg0: number, arg1: Internal.Month, arg2: number, arg3: number, arg4: number, arg5: number): Internal.LocalDateTime;
        static of(arg0: number, arg1: Internal.Month, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): Internal.LocalDateTime;
        static of(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): Internal.LocalDateTime;
        static of(arg0: number, arg1: Internal.Month, arg2: number, arg3: number, arg4: number): Internal.LocalDateTime;
        static of(arg0: Internal.LocalDate, arg1: Internal.LocalTime): Internal.LocalDateTime;
        static of(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): Internal.LocalDateTime;
        static of(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): Internal.LocalDateTime;
        get(arg0: Internal.TemporalField): number;
        plusWeeks(arg0: number): Internal.LocalDateTime;
        withMinute(arg0: number): Internal.LocalDateTime;
        minusYears(arg0: number): Internal.LocalDateTime;
        atOffset(arg0: Internal.ZoneOffset): Internal.OffsetDateTime;
        minusWeeks(arg0: number): Internal.LocalDateTime;
        withDayOfYear(arg0: number): Internal.LocalDateTime;
        static parse(arg0: Internal.CharSequence): Internal.LocalDateTime;
        static parse(arg0: Internal.CharSequence, arg1: Internal.DateTimeFormatter): Internal.LocalDateTime;
        atZone(arg0: Internal.ZoneId): Internal.ZonedDateTime;
        atZone(arg0: Internal.ZoneId): Internal.ChronoZonedDateTime<any>;
        toInstant(arg0: Internal.ZoneOffset): Internal.Instant;
        isBefore(arg0: Internal.ChronoLocalDateTime<object>): boolean;
        minusDays(arg0: number): Internal.LocalDateTime;
        withNano(arg0: number): Internal.LocalDateTime;
        getLong(arg0: Internal.TemporalField): number;
        minusMonths(arg0: number): Internal.LocalDateTime;
        with(arg0: Internal.TemporalAdjuster): Internal.Temporal;
        with(arg0: Internal.TemporalAdjuster): Internal.ChronoLocalDateTime<any>;
        with(arg0: Internal.TemporalAdjuster): Internal.LocalDateTime;
        with(arg0: Internal.TemporalField, arg1: number): Internal.Temporal;
        with(arg0: Internal.TemporalField, arg1: number): Internal.LocalDateTime;
        with(arg0: Internal.TemporalField, arg1: number): Internal.ChronoLocalDateTime<any>;
        toLocalDate(): Internal.LocalDate;
        toLocalDate(): Internal.ChronoLocalDate;
        equals(arg0: object): boolean;
        until(arg0: Internal.Temporal, arg1: Internal.TemporalUnit): number;
        toString(): string;
        minusSeconds(arg0: number): Internal.LocalDateTime;
        withSecond(arg0: number): Internal.LocalDateTime;
        static readonly MIN : Internal.LocalDateTime;
        static readonly MAX : Internal.LocalDateTime;
        get dayOfWeek(): Internal.DayOfWeek;
        get minute(): number;
        get month(): Internal.Month;
        get nano(): number;
        get year(): number;
        get dayOfYear(): number;
        get hour(): number;
        get chronology(): Internal.Chronology;
        get monthValue(): number;
        get second(): number;
        get dayOfMonth(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ListJS extends Internal.ArrayList<object> implements Internal.StringBuilderAppendable, Internal.ChangeListener<object>, Internal.Copyable, Internal.JsonSerializable, Internal.NBTSerializable {
        static nbt(list: object): Internal.CollectionTag<object>;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        shift(): object;
        notify(): void;
        remove(index: number): object;
        remove(o: object): boolean;
        pop(): object;
        toNBT(): Internal.CollectionTag<object>;
        toNBT(): Internal.Tag;
        hashCode(): number;
        get(arg0: number): E;
        static of(o: object): Internal.ListJS;
        static of(array: number[]): Internal.ListJS;
        static of(array: number[]): Internal.ListJS;
        static of(array: number[]): Internal.ListJS;
        static of(array: number[]): Internal.ListJS;
        static of(array: number[]): Internal.ListJS;
        static of(array: string[]): Internal.ListJS;
        static of(array: number[]): Internal.ListJS;
        toArray<T>(arg0: T[]): T[];
        toArray(): object[];
        static orSelf(o: object): Internal.ListJS;
        static json(array: object): Internal.JsonArray;
        copy(): Internal.ListJS;
        copy(): Internal.Copyable;
        indexOf(arg0: object): number;
        map(transformer: (arg0: object) => object): Internal.ListJS;
        add(index: number, value: object): void;
        add(value: object): boolean;
        appendString(builder: Internal.StringBuilder): void;
        trimToSize(): void;
        set(arg0: number, arg1: E): E;
        onChanged(o: object): void;
        splice(pos: number, deleteCount: number, items: object[]): Internal.ListJS;
        isEmpty(): boolean;
        clear(): void;
        static ofArray(array: object): Internal.ListJS;
        reverse(): Internal.ListJS;
        push(o: object[]): Internal.ListJS;
        filter(predicate: (arg0: object) => boolean): Internal.ListJS;
        lastIndexOf(arg0: object): number;
        contains(arg0: object): boolean;
        toJson(): Internal.JsonElement;
        toJson(): Internal.JsonArray;
        size(): number;
        addAll(index: number, c: Internal.Collection<any>): boolean;
        addAll(c: Internal.Collection<any>): boolean;
        equals(arg0: object): boolean;
        clone(): object;
        unshift(o: object[]): Internal.ListJS;
        toString(): string;
        ensureCapacity(arg0: number): void;
        changeListener : Internal.ChangeListener<Internal.ListJS>;
        get length(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IntPredicate {
        or(arg0: Internal.IntPredicate): Internal.IntPredicate;
        test(arg0: number): boolean;
        and(arg0: Internal.IntPredicate): Internal.IntPredicate;
        negate(): Internal.IntPredicate;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface VertexWriter {
        seekToVertex(arg0: number): void;
        writeVertexList(arg0: Internal.VertexList): void;
        writeVertex(arg0: Internal.VertexList, arg1: number): void;
        intoReader(): Internal.VertexList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class RecipeFunction extends Internal.BaseFunction implements Internal.WrappedJS {
        isSealed(): boolean;
        static redefineProperty(obj: Internal.Scriptable, name: string, isConst: boolean): void;
        putConst(name: string, start: Internal.Scriptable, value: object): void;
        static getArrayPrototype(scope: Internal.Scriptable): Internal.Scriptable;
        construct(cx: Internal.Context, scope: Internal.Scriptable, args: object[]): Internal.Scriptable;
        put(key: Internal.Symbol, start: Internal.Scriptable, value: object): void;
        put(name: string, start: Internal.Scriptable, value: object): void;
        put(index: number, start: Internal.Scriptable, value: object): void;
        defineOwnProperties(cx: Internal.Context, props: Internal.ScriptableObject): void;
        static defineProperty(destination: Internal.Scriptable, propertyName: string, value: object, attributes: number): void;
        defineProperty(key: Internal.Symbol, value: object, attributes: number): void;
        defineProperty(propertyName: string, value: object, attributes: number): void;
        defineProperty(propertyName: string, delegateTo: object, getter: Internal.Method, setter: Internal.Method, attributes: number): void;
        hasPrototypeMap(): boolean;
        setGetterOrSetter(name: string, index: number, getterOrSetter: Internal.Callable, isSetter: boolean): void;
        avoidObjectDetection(): boolean;
        has(key: Internal.Symbol, start: Internal.Scriptable): boolean;
        has(name: string, start: Internal.Scriptable): boolean;
        has(index: number, start: Internal.Scriptable): boolean;
        getAttributes(name: string): number;
        getAttributes(key: Internal.Symbol): number;
        getAttributes(index: number): number;
        hasInstance(instance: Internal.Scriptable): boolean;
        getAssociatedValue(key: object): object;
        execIdCall(f: Internal.IdFunctionObject, cx: Internal.Context, scope: Internal.Scriptable, thisObj: Internal.Scriptable, args: object[]): object;
        static getPropertyIds(obj: Internal.Scriptable): object[];
        static hasProperty(obj: Internal.Scriptable, key: Internal.Symbol): boolean;
        static hasProperty(obj: Internal.Scriptable, index: number): boolean;
        static hasProperty(obj: Internal.Scriptable, name: string): boolean;
        size(): number;
        initPrototypeMethod(tag: object, id: number, key: Internal.Symbol, functionName: string, arity: number): Internal.IdFunctionObject;
        initPrototypeMethod(tag: object, id: number, propertyName: string, functionName: string, arity: number): Internal.IdFunctionObject;
        initPrototypeMethod(tag: object, id: number, name: string, arity: number): Internal.IdFunctionObject;
        defineOwnProperty(cx: Internal.Context, key: object, desc: Internal.ScriptableObject): void;
        initPrototypeValue(id: number, key: Internal.Symbol, value: object, attributes: number): void;
        initPrototypeValue(id: number, name: string, value: object, attributes: number): void;
        static getFunctionPrototype(scope: Internal.Scriptable): Internal.Scriptable;
        preventExtensions(): void;
        static callMethod(obj: Internal.Scriptable, methodName: string, args: object[]): object;
        static callMethod(cx: Internal.Context, obj: Internal.Scriptable, methodName: string, args: object[]): object;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        static getTopScopeValue(scope: Internal.Scriptable, key: object): object;
        initPrototypeConstructor(f: Internal.IdFunctionObject): void;
        notifyAll(): void;
        sealObject(): void;
        setAttributes(name: string, attributes: number): void;
        setAttributes(key: Internal.Symbol, attributes: number): void;
        setAttributes(index: number, attributes: number): void;
        static putProperty(obj: Internal.Scriptable, index: number, value: object): void;
        static putProperty(obj: Internal.Scriptable, name: string, value: object): void;
        static putProperty(obj: Internal.Scriptable, key: Internal.Symbol, value: object): void;
        delete(key: Internal.Symbol): void;
        delete(name: string): void;
        delete(index: number): void;
        notify(): void;
        associateValue(key: object, value: object): object;
        static deleteProperty(obj: Internal.Scriptable, name: string): boolean;
        static deleteProperty(obj: Internal.Scriptable, index: number): boolean;
        static getObjectPrototype(scope: Internal.Scriptable): Internal.Scriptable;
        createRecipe(args0: object[]): Internal.RecipeJS;
        isExtensible(): boolean;
        hashCode(): number;
        isConst(name: string): boolean;
        get(name: string, start: Internal.Scriptable): object;
        get(key: Internal.Symbol, start: Internal.Scriptable): object;
        get(index: number, start: Internal.Scriptable): object;
        get(key: object): object;
        static putConstProperty(obj: Internal.Scriptable, name: string, value: object): void;
        getGetterOrSetter(name: string, index: number, isSetter: boolean): object;
        static getTopLevelScope(obj: Internal.Scriptable): Internal.Scriptable;
        static getProperty(obj: Internal.Scriptable, key: Internal.Symbol): object;
        static getProperty(obj: Internal.Scriptable, index: number): object;
        static getProperty(obj: Internal.Scriptable, name: string): object;
        activatePrototypeMap(maxPrototypeId: number): void;
        isEmpty(): boolean;
        static getClassPrototype(scope: Internal.Scriptable, className: string): Internal.Scriptable;
        createObject(cx: Internal.Context, scope: Internal.Scriptable): Internal.Scriptable;
        exportAsJSClass(maxPrototypeId: number, scope: Internal.Scriptable, sealed: boolean): Internal.IdFunctionObject;
        call(cx: Internal.Context, scope: Internal.Scriptable, thisObj: Internal.Scriptable, args0: object[]): Internal.RecipeJS;
        call(arg0: Internal.Context, arg1: Internal.Scriptable, arg2: Internal.Scriptable, arg3: object[]): object;
        defineConst(name: string, start: Internal.Scriptable): void;
        equals(arg0: object): boolean;
        static defineConstProperty(destination: Internal.Scriptable, propertyName: string): void;
        toString(): string;
        static getGeneratorFunctionPrototype(scope: Internal.Scriptable): Internal.Scriptable;
        static readonly DONTENUM : 2;
        static readonly CONST : 13;
        static readonly NOT_FOUND : object;
        static readonly UNINITIALIZED_CONST : 8;
        readonly typeID : ResourceLocation;
        readonly type : Internal.RecipeTypeJS;
        static readonly EMPTY : 0;
        static readonly READONLY : 1;
        static readonly PERMANENT : 4;
        set parentScope(m: Internal.Scriptable);
        get ids(): object[];
        get allIds(): object[];
        get arity(): number;
        get functionName(): string;
        get externalArrayLength(): object;
        set immunePrototypeProperty(value: object);
        get externalArrayData(): Internal.ExternalArrayData;
        get className(): string;
        get parentScope(): Internal.Scriptable;
        set externalArrayData(array: Internal.ExternalArrayData);
        get typeOf(): string;
        get prototype(): Internal.Scriptable;
        set prototype(m: Internal.Scriptable);
        get length(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface LevelKJS implements Internal.AsKJS {
        asKJS(): object;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ResourceKey <T> implements Internal.Comparable<Internal.ResourceKey<object>>, Internal.SpecialEquality {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        compareTo(arg0: Internal.ResourceKey<object>): number;
        compareTo(arg0: object): number;
        notify(): void;
        specialEquals(o: object, shallow: boolean): boolean;
        get namespace(): string;
        get path(): string;
        get registryName(): ResourceLocation;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface OffsetVoxelShapeCache {
        getOffsetSimplifiedShape(arg0: number, arg1: Internal.Direction): Internal.VoxelShape;
        setShape(arg0: number, arg1: Internal.Direction, arg2: Internal.VoxelShape): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ChannelOutboundBuffer$MessageProcessor {
        processMessage(arg0: object): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface TStack <Self> {
        pushPose(): Self;
        popPose(): Self;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ObjectSpliterator <K> implements Internal.Spliterator<K> {
        trySplit(): Internal.Spliterator<any>;
        trySplit(): Internal.ObjectSpliterator<K>;
        characteristics(): number;
        estimateSize(): number;
        skip(arg0: number): number;
        hasCharacteristics(arg0: number): boolean;
        get exactSizeIfKnown(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface FireworkRocketEntityKJS {
        set lifetimeKJS(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Matrix4f implements Internal.MatrixWrite, Internal.Matrix4fExtended {
        multiplyBackward(arg0: Internal.Matrix4f): void;
        rotate(quaternion: Internal.Quaternion): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        flywheel$write(arg0: Internal.VecBuffer): void;
        setTranslation(arg0: number, arg1: number, arg2: number): void;
        notify(): void;
        translate(x: number, y: number, z: number): void;
        hashCode(): number;
        flywheel$writeUnsafe(arg0: number): void;
        equals(arg0: object): boolean;
        transformVecZ(x: number, y: number, z: number): number;
        transformVecY(x: number, y: number, z: number): number;
        toString(): string;
        transformVecX(x: number, y: number, z: number): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IntStream$IntMapMultiConsumer {
        accept(arg0: number, arg1: Internal.IntConsumer): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface LootItemCondition$Builder {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class OptionalDouble {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        isEmpty(): boolean;
        isPresent(): boolean;
        orElse(arg0: number): number;
        notify(): void;
        orElseThrow<X>(arg0: () => X): number;
        orElseThrow(): number;
        static empty(): Internal.OptionalDouble;
        orElseGet(arg0: Internal.DoubleSupplier): number;
        stream(): Internal.DoubleStream;
        hashCode(): number;
        ifPresentOrElse(arg0: Internal.DoubleConsumer, arg1: Internal.Runnable): void;
        ifPresent(arg0: Internal.DoubleConsumer): void;
        static of(arg0: number): Internal.OptionalDouble;
        equals(arg0: object): boolean;
        toString(): string;
        get asDouble(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface MethodTypeDesc implements Internal.ConstantDesc, Internal.TypeDescriptor$OfMethod<Internal.ClassDesc, Internal.MethodTypeDesc> {
        parameterType(arg0: number): Internal.TypeDescriptor$OfField<any>;
        parameterType(arg0: number): Internal.ClassDesc;
        dropParameterTypes(arg0: number, arg1: number): Internal.TypeDescriptor$OfMethod<any, any>;
        dropParameterTypes(arg0: number, arg1: number): Internal.MethodTypeDesc;
        parameterCount(): number;
        changeReturnType(arg0: Internal.ClassDesc): Internal.MethodTypeDesc;
        changeReturnType(arg0: Internal.TypeDescriptor$OfField<any>): Internal.TypeDescriptor$OfMethod<any, any>;
        descriptorString(): string;
        insertParameterTypes(arg0: number, arg1: Internal.ClassDesc[]): Internal.MethodTypeDesc;
        insertParameterTypes(arg0: number, arg1: Internal.TypeDescriptor$OfField[]): Internal.TypeDescriptor$OfMethod<any, any>;
        resolveConstantDesc(arg0: Internal.MethodHandles$Lookup): object;
        changeParameterType(arg0: number, arg1: Internal.TypeDescriptor$OfField<any>): Internal.TypeDescriptor$OfMethod<any, any>;
        changeParameterType(arg0: number, arg1: Internal.ClassDesc): Internal.MethodTypeDesc;
        parameterArray(): Internal.ClassDesc[];
        parameterArray(): Internal.TypeDescriptor$OfField[];
        equals(arg0: object): boolean;
        parameterList(): Internal.List<Internal.ClassDesc>;
        displayDescriptor(): string;
        returnType(): Internal.ClassDesc;
        returnType(): Internal.TypeDescriptor$OfField<any>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ParticleManagerAccess {
        invokeMakeParticle<T>(arg0: T, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): Internal.Particle;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Matrix3fExtended {
        rotate(arg0: Internal.Quaternion): void;
        transformVecZ(dir: Internal.Vector3f): number;
        transformVecZ(arg0: number, arg1: number, arg2: number): number;
        transformVecY(dir: Internal.Vector3f): number;
        transformVecY(arg0: number, arg1: number, arg2: number): number;
        transformVecX(arg0: number, arg1: number, arg2: number): number;
        transformVecX(dir: Internal.Vector3f): number;
        computeNormal(arg0: Internal.Direction): number;
        get a20(): number;
        get a21(): number;
        get a10(): number;
        get a22(): number;
        get a11(): number;
        get a00(): number;
        get a12(): number;
        get a01(): number;
        get a02(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Long2LongFunction implements it.unimi.dsi.fastutil.Function<number, number>, Internal.LongUnaryOperator {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: number, arg1: number): number;
        getOrDefault(arg0: object, arg1: number): number;
        andThenShort(arg0: Internal.Long2ShortFunction): Internal.Long2ShortFunction;
        composeByte(arg0: Internal.Byte2LongFunction): Internal.Byte2LongFunction;
        andThenInt(arg0: Internal.Long2IntFunction): Internal.Long2IntFunction;
        composeReference<T>(arg0: Internal.Reference2LongFunction<T>): Internal.Reference2LongFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: number) => T;
        andThen(arg0: Internal.LongUnaryOperator): Internal.LongUnaryOperator;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: number): number;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: object): object;
        remove(arg0: object): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Long2DoubleFunction): Internal.Long2DoubleFunction;
        andThenObject<T>(arg0: Internal.Long2ObjectFunction<T>): Internal.Long2ObjectFunction<T>;
        get(arg0: object): number;
        get(arg0: object): object;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Long2LongFunction): Internal.Long2LongFunction;
        composeLong(arg0: Internal.Long2LongFunction): Internal.Long2LongFunction;
        andThenByte(arg0: Internal.Long2ByteFunction): Internal.Long2ByteFunction;
        andThenFloat(arg0: Internal.Long2FloatFunction): Internal.Long2FloatFunction;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2LongFunction): Internal.Int2LongFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2LongFunction): Internal.Float2LongFunction;
        andThenChar(arg0: Internal.Long2CharFunction): Internal.Long2CharFunction;
        applyAsLong(arg0: number): number;
        composeObject<T>(arg0: Internal.Object2LongFunction<T>): Internal.Object2LongFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => number;
        compose(arg0: Internal.LongUnaryOperator): Internal.LongUnaryOperator;
        composeShort(arg0: Internal.Short2LongFunction): Internal.Short2LongFunction;
        andThenReference<T>(arg0: Internal.Long2ReferenceFunction<T>): Internal.Long2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2LongFunction): Internal.Char2LongFunction;
        composeDouble(arg0: Internal.Double2LongFunction): Internal.Double2LongFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface SecretKey implements Internal.Key, Internal.Destroyable {
        isDestroyed(): boolean;
        destroy(): void;
        get encoded(): number[];
        get algorithm(): string;
        get format(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ItemFoodEatenEventJS extends Internal.PlayerEventJS {
        cancel(): void;
        addGameStage(stage: string): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isCancelled(): boolean;
        notifyAll(): void;
        notify(): void;
        post(id: string, sub: string): boolean;
        post(id: string): boolean;
        post(t: Internal.ScriptType, id: string, sub: string): boolean;
        post(t: Internal.ScriptType, id: string): boolean;
        hasGameStage(stage: string): boolean;
        hashCode(): number;
        equals(arg0: object): boolean;
        removeGameStage(stage: string): void;
        toString(): string;
        canCancel(): boolean;
        get server(): Internal.ServerJS;
        get player(): Internal.PlayerJS<any>;
        get item(): Internal.ItemStackJS;
        get entity(): Internal.EntityJS;
        get level(): Internal.LevelJS;
        get minecraftPlayer(): Internal.Player;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ChannelFuture implements Internal.Future<void> {
        cancel(arg0: boolean): boolean;
        isCancelled(): boolean;
        removeListeners(arg0: Internal.GenericFutureListener<Internal.Future<void>>[]): Internal.ChannelFuture;
        channel(): io.netty.channel.Channel;
        cause(): Internal.Throwable;
        awaitUninterruptibly(): Internal.ChannelFuture;
        awaitUninterruptibly(arg0: number): boolean;
        awaitUninterruptibly(arg0: number, arg1: Internal.TimeUnit): boolean;
        removeListener(arg0: Internal.GenericFutureListener<Internal.Future<void>>): Internal.ChannelFuture;
        isDone(): boolean;
        sync(): Internal.ChannelFuture;
        isVoid(): boolean;
        syncUninterruptibly(): Internal.ChannelFuture;
        get(arg0: number, arg1: Internal.TimeUnit): V;
        get(): V;
        isCancellable(): boolean;
        await(): Internal.ChannelFuture;
        await(arg0: number, arg1: Internal.TimeUnit): boolean;
        await(arg0: number): boolean;
        addListeners(arg0: Internal.GenericFutureListener<Internal.Future<void>>[]): Internal.ChannelFuture;
        isSuccess(): boolean;
        addListener(arg0: Internal.GenericFutureListener<Internal.Future<void>>): Internal.ChannelFuture;
        get now(): V;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface TickAccess <T> {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class EndimationKeyframe$Transform extends Internal.Record {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        x(): () => number;
        y(): () => number;
        z(): () => number;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface BlockStatePathingCache {
        get neighborPathNodeType(): Internal.BlockPathTypes;
        get pathNodeType(): Internal.BlockPathTypes;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ModuleDescriptor$Modifier extends Internal.Enum<Internal.ModuleDescriptor$Modifier> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(arg0: string): Internal.ModuleDescriptor$Modifier;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.ModuleDescriptor$Modifier[];
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly AUTOMATIC : Internal.ModuleDescriptor$Modifier;
        static readonly SYNTHETIC : Internal.ModuleDescriptor$Modifier;
        static readonly MANDATED : Internal.ModuleDescriptor$Modifier;
        static readonly OPEN : Internal.ModuleDescriptor$Modifier;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Byte2CharFunction implements it.unimi.dsi.fastutil.Function<number, string>, Internal.IntUnaryOperator {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: string): string;
        getOrDefault(arg0: number, arg1: string): string;
        andThenShort(arg0: Internal.Char2ShortFunction): Internal.Byte2ShortFunction;
        composeByte(arg0: Internal.Byte2ByteFunction): Internal.Byte2CharFunction;
        andThenInt(arg0: Internal.Char2IntFunction): Internal.Byte2IntFunction;
        composeReference<T>(arg0: Internal.Reference2ByteFunction<T>): Internal.Reference2CharFunction<T>;
        andThen<T>(arg0: (arg0: string) => T): (arg0: number) => T;
        andThen(arg0: Internal.IntUnaryOperator): Internal.IntUnaryOperator;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: string): string;
        put(arg0: number, arg1: string): string;
        remove(arg0: number): string;
        remove(arg0: object): object;
        remove(arg0: object): string;
        defaultReturnValue(arg0: string): void;
        defaultReturnValue(): string;
        andThenDouble(arg0: Internal.Char2DoubleFunction): Internal.Byte2DoubleFunction;
        andThenObject<T>(arg0: Internal.Char2ObjectFunction<T>): Internal.Byte2ObjectFunction<T>;
        get(arg0: object): string;
        get(arg0: object): object;
        get(arg0: number): string;
        andThenLong(arg0: Internal.Char2LongFunction): Internal.Byte2LongFunction;
        composeLong(arg0: Internal.Long2ByteFunction): Internal.Long2CharFunction;
        andThenByte(arg0: Internal.Char2ByteFunction): Internal.Byte2ByteFunction;
        andThenFloat(arg0: Internal.Char2FloatFunction): Internal.Byte2FloatFunction;
        applyAsInt(arg0: number): number;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2ByteFunction): Internal.Int2CharFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2ByteFunction): Internal.Float2CharFunction;
        andThenChar(arg0: Internal.Char2CharFunction): Internal.Byte2CharFunction;
        composeObject<T>(arg0: Internal.Object2ByteFunction<T>): Internal.Object2CharFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => string;
        compose(arg0: Internal.IntUnaryOperator): Internal.IntUnaryOperator;
        composeShort(arg0: Internal.Short2ByteFunction): Internal.Short2CharFunction;
        andThenReference<T>(arg0: Internal.Char2ReferenceFunction<T>): Internal.Byte2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2ByteFunction): Internal.Char2CharFunction;
        composeDouble(arg0: Internal.Double2ByteFunction): Internal.Double2CharFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Attribute extends Internal.ForgeRegistryEntry<Internal.Attribute> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        setRegistryName(arg0: string, arg1: string): V;
        notify(): void;
        readonly delegate : () => V;
        get registryName(): ResourceLocation;
        set registryName(arg0: ResourceLocation);
        set registryName(arg0: ResourceLocation);
        set registryName(arg0: string);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ClocheRecipeJS extends Internal.IERecipeJS {
        ingredientAction(filter: Internal.IngredientActionFilter, action: Internal.IngredientAction): Internal.RecipeJS;
        convertReplacedInput(index: number, oldIngredient: Internal.IngredientJS, newIngredient: Internal.IngredientJS): Internal.IngredientJS;
        parseIngredientItemIE(json: Internal.JsonElement): Internal.IngredientStackJS;
        replaceOutput(i: Internal.IngredientJS, with_: Internal.ItemStackJS, exact: boolean): boolean;
        merge(data: object): Internal.RecipeJS;
        create(args: Internal.ListJS): void;
        id(_id: ResourceLocation): Internal.RecipeJS;
        parseIngredientItem(o: object, key: string): Internal.IngredientJS;
        parseIngredientItem(o: object): Internal.IngredientJS;
        group(g: string): Internal.RecipeJS;
        energy(e: number): Internal.IERecipeJS;
        getInputIndex(ingredient: Internal.IngredientJS, exact: boolean): number;
        setGroup(g: string): void;
        serialize(): void;
        replaceInput(i: Internal.IngredientJS, with_: Internal.IngredientJS, exact: boolean): boolean;
        getType(): string;
        getGroup(): string;
        hasOutput(ingredient: Internal.IngredientJS, exact: boolean): boolean;
        keepIngredient(filter: Internal.IngredientActionFilter): Internal.RecipeJS;
        customIngredientAction(filter: Internal.IngredientActionFilter, id: string): Internal.RecipeJS;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        convertReplacedOutput(index: number, oldStack: Internal.ItemStackJS, newStack: Internal.ItemStackJS): Internal.ItemStackJS;
        save(): void;
        damageIngredient(filter: Internal.IngredientActionFilter, damage: number): Internal.RecipeJS;
        damageIngredient(filter: Internal.IngredientActionFilter): Internal.RecipeJS;
        getId(): string;
        dontAdd(): void;
        notify(): void;
        serializeJson(): void;
        hashCode(): number;
        deserializeJson(): void;
        render(o: object): Internal.ClocheRecipeJS;
        deserialize(): void;
        serializeNBTAsJson(): boolean;
        getOutputIndex(ingredient: Internal.IngredientJS, exact: boolean): number;
        resultFromRecipeJson(json: Internal.JsonObject): Internal.ItemStackJS;
        stage(s: string): Internal.RecipeJS;
        serializeIngredientStack(in_: Internal.IngredientStackJS): Internal.JsonElement;
        equals(arg0: object): boolean;
        serializeItemStack(stack: Internal.ItemStackJS): Internal.JsonElement;
        toString(): string;
        time(t: number): Internal.IERecipeJS;
        hasInput(ingredient: Internal.IngredientJS, exact: boolean): boolean;
        parseResultItem(o: object): Internal.ItemStackJS;
        replaceIngredient(filter: Internal.IngredientActionFilter, item: Internal.ItemStackJS): Internal.RecipeJS;
        static currentRecipe : Internal.RecipeJS;
        readonly inputItems : Internal.List<Internal.IngredientJS>;
        static itemErrors : false;
        type : Internal.RecipeTypeJS;
        originalJson : Internal.JsonObject;
        serializeOutputs : boolean;
        renderReference : Internal.ClocheRenderFunction$ClocheRenderReference;
        readonly outputFluids : Internal.List<Internal.FluidStack>;
        originalRecipe : Internal.Recipe<object>;
        readonly inputFluids : Internal.List<Internal.FluidTagInput>;
        json : Internal.JsonObject;
        readonly outputItems : Internal.List<Internal.ItemStackJS>;
        serializeInputs : boolean;
        get uniqueId(): string;
        get path(): string;
        get originalRecipeResult(): Internal.ItemStackJS;
        get mod(): string;
        get fromToString(): string;
        get orCreateId(): ResourceLocation;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class SectionPos extends Vec3i {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: Vec3i): number;
        notify(): void;
        get x(): number;
        get y(): number;
        get z(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class BlockPos$MutableBlockPos extends BlockPos {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: Vec3i): number;
        notify(): void;
        get x(): number;
        get y(): number;
        get z(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Double2DoubleFunction implements it.unimi.dsi.fastutil.Function<number, number>, Internal.DoubleUnaryOperator {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: number, arg1: number): number;
        getOrDefault(arg0: object, arg1: number): number;
        applyAsDouble(arg0: number): number;
        andThenShort(arg0: Internal.Double2ShortFunction): Internal.Double2ShortFunction;
        composeByte(arg0: Internal.Byte2DoubleFunction): Internal.Byte2DoubleFunction;
        andThenInt(arg0: Internal.Double2IntFunction): Internal.Double2IntFunction;
        composeReference<T>(arg0: Internal.Reference2DoubleFunction<T>): Internal.Reference2DoubleFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: number) => T;
        andThen(arg0: Internal.DoubleUnaryOperator): Internal.DoubleUnaryOperator;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: number): number;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: object): object;
        remove(arg0: object): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Double2DoubleFunction): Internal.Double2DoubleFunction;
        andThenObject<T>(arg0: Internal.Double2ObjectFunction<T>): Internal.Double2ObjectFunction<T>;
        get(arg0: object): number;
        get(arg0: object): object;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Double2LongFunction): Internal.Double2LongFunction;
        composeLong(arg0: Internal.Long2DoubleFunction): Internal.Long2DoubleFunction;
        andThenByte(arg0: Internal.Double2ByteFunction): Internal.Double2ByteFunction;
        andThenFloat(arg0: Internal.Double2FloatFunction): Internal.Double2FloatFunction;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2DoubleFunction): Internal.Int2DoubleFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2DoubleFunction): Internal.Float2DoubleFunction;
        andThenChar(arg0: Internal.Double2CharFunction): Internal.Double2CharFunction;
        composeObject<T>(arg0: Internal.Object2DoubleFunction<T>): Internal.Object2DoubleFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => number;
        compose(arg0: Internal.DoubleUnaryOperator): Internal.DoubleUnaryOperator;
        composeShort(arg0: Internal.Short2DoubleFunction): Internal.Short2DoubleFunction;
        andThenReference<T>(arg0: Internal.Double2ReferenceFunction<T>): Internal.Double2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2DoubleFunction): Internal.Char2DoubleFunction;
        composeDouble(arg0: Internal.Double2DoubleFunction): Internal.Double2DoubleFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class TransientEntitySectionManager <T> implements Internal.ClientEntityManagerAccessor {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        get cache(): Internal.EntitySectionStorage<any>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class CountingMap {
        add(key: object, value: number): number;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        set(key: object, value: number): number;
        forEach(forEach: (arg0: Internal.Object2LongEntry) => void): void;
        notifyAll(): void;
        clear(): void;
        notify(): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        get(key: object): number;
        toString(): string;
        get values(): Internal.Collection<number>;
        get totalCount(): number;
        get keys(): Internal.Set<object>;
        get size(): number;
        get entries(): Internal.List<Internal.Object2LongEntry>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Quaternion {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Member {
        isSynthetic(): boolean;
        get declaringClass(): Internal.Class<object>;
        get name(): string;
        get modifiers(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IForgeItemStack implements Internal.ICapabilitySerializable<Internal.CompoundTag> {
        canElytraFly(arg0: Internal.LivingEntity): boolean;
        canEquip(arg0: EquipmentSlot, arg1: Internal.Entity): boolean;
        canPerformAction(arg0: Internal.ToolAction): boolean;
        onBlockStartBreak(arg0: BlockPos, arg1: Internal.Player): boolean;
        onHorseArmorTick(arg0: Internal.Level, arg1: Internal.Mob): void;
        shouldCauseBlockBreakReset(arg0: Internal.ItemStack): boolean;
        serializeNBT(): Internal.Tag;
        serializeNBT(): Internal.CompoundTag;
        getEntityLifespan(arg0: Internal.Level): number;
        getHighlightTip(arg0: Internal.Component): Internal.Component;
        readShareTag(arg0: Internal.CompoundTag): void;
        onEntityItemUpdate(arg0: Internal.ItemEntity): boolean;
        onArmorTick(arg0: Internal.Level, arg1: Internal.Player): void;
        isBookEnchantable(arg0: Internal.ItemStack): boolean;
        hasContainerItem(): boolean;
        canDisableShield(arg0: Internal.ItemStack, arg1: Internal.LivingEntity, arg2: Internal.LivingEntity): boolean;
        doesSneakBypassUse(arg0: Internal.LevelReader, arg1: BlockPos, arg2: Internal.Player): boolean;
        onItemUseFirst(arg0: Internal.UseOnContext): Internal.InteractionResult;
        deserializeNBT(arg0: T): void;
        onUsingTick(arg0: Internal.LivingEntity, arg1: number): void;
        isPiglinCurrency(): boolean;
        getSweepHitBox(arg0: Internal.Player, arg1: Internal.Entity): Internal.AABB;
        onDestroyed(arg0: Internal.ItemEntity, arg1: Internal.DamageSource): void;
        isRepairable(): boolean;
        getBurnTime(arg0: Internal.RecipeType<object>): number;
        onDroppedByPlayer(arg0: Internal.Player): boolean;
        onEntitySwing(arg0: Internal.LivingEntity): boolean;
        equals(arg0: Internal.ItemStack, arg1: boolean): boolean;
        makesPiglinsNeutral(arg0: Internal.LivingEntity): boolean;
        elytraFlightTick(arg0: Internal.LivingEntity, arg1: number): boolean;
        isEnderMask(arg0: Internal.Player, arg1: Internal.EnderMan): boolean;
        areShareTagsEqual(arg0: Internal.ItemStack): boolean;
        canApplyAtEnchantingTable(arg0: Internal.Enchantment): boolean;
        get itemEnchantability(): number;
        get xpRepairRatio(): number;
        get containerItem(): Internal.ItemStack;
        get equipmentSlot(): EquipmentSlot;
        get shareTag(): Internal.CompoundTag;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class Unit {
        sub(with_: Internal.Unit): Internal.Unit;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        mod(with_: Internal.Unit): Internal.Unit;
        mul(with_: Internal.Unit): Internal.Unit;
        log(): Internal.Unit;
        log1p(): Internal.Unit;
        log10(): Internal.Unit;
        cos(): Internal.Unit;
        notifyAll(): void;
        deg(): Internal.Unit;
        lt(with_: Internal.Unit): Internal.Unit;
        atan(): Internal.Unit;
        notify(): void;
        div(with_: Internal.Unit): Internal.Unit;
        neg(): Internal.Unit;
        not(): Internal.Unit;
        shiftLeft(with_: Internal.Unit): Internal.Unit;
        min(with_: Internal.Unit): Internal.Unit;
        rad(): Internal.Unit;
        sqrt(): Internal.Unit;
        hashCode(): number;
        and(with_: Internal.Unit): Internal.Unit;
        get(): number;
        gte(with_: Internal.Unit): Internal.Unit;
        pow(with_: Internal.Unit): Internal.Unit;
        sin(): Internal.Unit;
        xor(with_: Internal.Unit): Internal.Unit;
        neq(with_: Internal.Unit): Internal.Unit;
        lte(with_: Internal.Unit): Internal.Unit;
        floor(): Internal.Unit;
        isFixed(): boolean;
        sq(): Internal.Unit;
        atan2(with_: Internal.Unit): Internal.Unit;
        tan(): Internal.Unit;
        add(with_: Internal.Unit): Internal.Unit;
        or(with_: Internal.Unit): Internal.Unit;
        max(with_: Internal.Unit): Internal.Unit;
        toBool(): Internal.Unit;
        ceil(): Internal.Unit;
        eq(with_: Internal.Unit): Internal.Unit;
        gt(with_: Internal.Unit): Internal.Unit;
        shiftRight(with_: Internal.Unit): Internal.Unit;
        abs(): Internal.Unit;
        equals(arg0: object): boolean;
        toString(): string;
        append(arg0: Internal.StringBuilder): void;
        get asInt(): number;
        get asBoolean(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class DamageSource implements Internal.DamageSourceAccessor {
        static create_$md$85ada3$0(arg0: string): Internal.DamageSource;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        callBypassArmor(): Internal.DamageSource;
        callBypassMagic(): Internal.DamageSource;
        toString(): string;
        notify(): void;
        callBypassInvul(): Internal.DamageSource;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class URL implements Internal.Serializable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        openConnection(): Internal.URLConnection;
        openConnection(arg0: Internal.Proxy): Internal.URLConnection;
        notifyAll(): void;
        toURI(): Internal.URI;
        getContent(arg0: Internal.Class<object>[]): object;
        openStream(): Internal.InputStream;
        notify(): void;
        toExternalForm(): string;
        sameFile(arg0: Internal.URL): boolean;
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        set uRLStreamHandlerFactory(arg0: Internal.URLStreamHandlerFactory);
        get defaultPort(): number;
        get content(): object;
        get protocol(): string;
        get authority(): string;
        get file(): string;
        get port(): number;
        get ref(): string;
        get path(): string;
        get userInfo(): string;
        get query(): string;
        get host(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Products$P6 <F, T1, T2, T3, T4, T5, T6> {
        t4(): Internal.App<F, T4>;
        t5(): Internal.App<F, T5>;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        t6(): Internal.App<F, T6>;
        apply<R>(arg0: Internal.Applicative<F, object>, arg1: Internal.Function6<T1, T2, T3, T4, T5, T6, R>): Internal.App<F, R>;
        apply<R>(arg0: Internal.Applicative<F, object>, arg1: Internal.App<F, Internal.Function6<T1, T2, T3, T4, T5, T6, R>>): Internal.App<F, R>;
        notifyAll(): void;
        notify(): void;
        hashCode(): number;
        and<T7>(arg0: Internal.App<F, T7>): Internal.Products$P7<F, T1, T2, T3, T4, T5, T6, T7>;
        and<T7, T8>(arg0: Internal.Products$P2<F, T7, T8>): Internal.Products$P8<F, T1, T2, T3, T4, T5, T6, T7, T8>;
        equals(arg0: object): boolean;
        toString(): string;
        t1(): Internal.App<F, T1>;
        t2(): Internal.App<F, T2>;
        t3(): Internal.App<F, T3>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Short2ByteFunction implements it.unimi.dsi.fastutil.Function<number, number>, Internal.IntUnaryOperator {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        andThenShort(arg0: Internal.Byte2ShortFunction): Internal.Short2ShortFunction;
        composeByte(arg0: Internal.Byte2ShortFunction): Internal.Byte2ByteFunction;
        andThenInt(arg0: Internal.Byte2IntFunction): Internal.Short2IntFunction;
        composeReference<T>(arg0: Internal.Reference2ShortFunction<T>): Internal.Reference2ByteFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: number) => T;
        andThen(arg0: Internal.IntUnaryOperator): Internal.IntUnaryOperator;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: number): number;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: object): object;
        remove(arg0: object): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Byte2DoubleFunction): Internal.Short2DoubleFunction;
        andThenObject<T>(arg0: Internal.Byte2ObjectFunction<T>): Internal.Short2ObjectFunction<T>;
        get(arg0: object): number;
        get(arg0: object): object;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Byte2LongFunction): Internal.Short2LongFunction;
        composeLong(arg0: Internal.Long2ShortFunction): Internal.Long2ByteFunction;
        andThenByte(arg0: Internal.Byte2ByteFunction): Internal.Short2ByteFunction;
        andThenFloat(arg0: Internal.Byte2FloatFunction): Internal.Short2FloatFunction;
        applyAsInt(arg0: number): number;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2ShortFunction): Internal.Int2ByteFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2ShortFunction): Internal.Float2ByteFunction;
        andThenChar(arg0: Internal.Byte2CharFunction): Internal.Short2CharFunction;
        composeObject<T>(arg0: Internal.Object2ShortFunction<T>): Internal.Object2ByteFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => number;
        compose(arg0: Internal.IntUnaryOperator): Internal.IntUnaryOperator;
        composeShort(arg0: Internal.Short2ShortFunction): Internal.Short2ByteFunction;
        andThenReference<T>(arg0: Internal.Byte2ReferenceFunction<T>): Internal.Short2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2ShortFunction): Internal.Char2ByteFunction;
        composeDouble(arg0: Internal.Double2ShortFunction): Internal.Double2ByteFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class WeightedEntry$IntrusiveBase implements Internal.WeightedEntry {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Double2FloatFunction implements it.unimi.dsi.fastutil.Function<number, number>, Internal.DoubleUnaryOperator {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        applyAsDouble(arg0: number): number;
        andThenShort(arg0: Internal.Float2ShortFunction): Internal.Double2ShortFunction;
        composeByte(arg0: Internal.Byte2DoubleFunction): Internal.Byte2FloatFunction;
        andThenInt(arg0: Internal.Float2IntFunction): Internal.Double2IntFunction;
        composeReference<T>(arg0: Internal.Reference2DoubleFunction<T>): Internal.Reference2FloatFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: number) => T;
        andThen(arg0: Internal.DoubleUnaryOperator): Internal.DoubleUnaryOperator;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: number): number;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: object): object;
        remove(arg0: object): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Float2DoubleFunction): Internal.Double2DoubleFunction;
        andThenObject<T>(arg0: Internal.Float2ObjectFunction<T>): Internal.Double2ObjectFunction<T>;
        get(arg0: object): number;
        get(arg0: object): object;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Float2LongFunction): Internal.Double2LongFunction;
        composeLong(arg0: Internal.Long2DoubleFunction): Internal.Long2FloatFunction;
        andThenByte(arg0: Internal.Float2ByteFunction): Internal.Double2ByteFunction;
        andThenFloat(arg0: Internal.Float2FloatFunction): Internal.Double2FloatFunction;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2DoubleFunction): Internal.Int2FloatFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2DoubleFunction): Internal.Float2FloatFunction;
        andThenChar(arg0: Internal.Float2CharFunction): Internal.Double2CharFunction;
        composeObject<T>(arg0: Internal.Object2DoubleFunction<T>): Internal.Object2FloatFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => number;
        compose(arg0: Internal.DoubleUnaryOperator): Internal.DoubleUnaryOperator;
        composeShort(arg0: Internal.Short2DoubleFunction): Internal.Short2FloatFunction;
        andThenReference<T>(arg0: Internal.Float2ReferenceFunction<T>): Internal.Double2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2DoubleFunction): Internal.Char2FloatFunction;
        composeDouble(arg0: Internal.Double2DoubleFunction): Internal.Double2FloatFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class SocketAddress implements Internal.Serializable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface OrderedEventExecutor implements Internal.EventExecutor {
        inEventLoop(arg0: Internal.Thread): boolean;
        inEventLoop(): boolean;
        next(): Internal.EventExecutor;
        isShuttingDown(): boolean;
        parent(): Internal.EventExecutorGroup;
        isTerminated(): boolean;
        awaitTermination(arg0: number, arg1: Internal.TimeUnit): boolean;
        execute(arg0: Internal.Runnable): void;
        shutdown(): void;
        isShutdown(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Short2ShortFunction implements it.unimi.dsi.fastutil.Function<number, number>, Internal.IntUnaryOperator {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: number, arg1: number): number;
        getOrDefault(arg0: object, arg1: number): number;
        andThenShort(arg0: Internal.Short2ShortFunction): Internal.Short2ShortFunction;
        composeByte(arg0: Internal.Byte2ShortFunction): Internal.Byte2ShortFunction;
        andThenInt(arg0: Internal.Short2IntFunction): Internal.Short2IntFunction;
        composeReference<T>(arg0: Internal.Reference2ShortFunction<T>): Internal.Reference2ShortFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: number) => T;
        andThen(arg0: Internal.IntUnaryOperator): Internal.IntUnaryOperator;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: number): number;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: object): object;
        remove(arg0: object): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Short2DoubleFunction): Internal.Short2DoubleFunction;
        andThenObject<T>(arg0: Internal.Short2ObjectFunction<T>): Internal.Short2ObjectFunction<T>;
        get(arg0: object): number;
        get(arg0: object): object;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Short2LongFunction): Internal.Short2LongFunction;
        composeLong(arg0: Internal.Long2ShortFunction): Internal.Long2ShortFunction;
        andThenByte(arg0: Internal.Short2ByteFunction): Internal.Short2ByteFunction;
        andThenFloat(arg0: Internal.Short2FloatFunction): Internal.Short2FloatFunction;
        applyAsInt(arg0: number): number;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2ShortFunction): Internal.Int2ShortFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2ShortFunction): Internal.Float2ShortFunction;
        andThenChar(arg0: Internal.Short2CharFunction): Internal.Short2CharFunction;
        composeObject<T>(arg0: Internal.Object2ShortFunction<T>): Internal.Object2ShortFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => number;
        compose(arg0: Internal.IntUnaryOperator): Internal.IntUnaryOperator;
        composeShort(arg0: Internal.Short2ShortFunction): Internal.Short2ShortFunction;
        andThenReference<T>(arg0: Internal.Short2ReferenceFunction<T>): Internal.Short2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2ShortFunction): Internal.Char2ShortFunction;
        composeDouble(arg0: Internal.Double2ShortFunction): Internal.Double2ShortFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class AbstractObject2ObjectMap <K, V> extends Internal.AbstractObject2ObjectFunction<K, V> implements Internal.Object2ObjectMap<K, V>, Internal.Serializable {
        computeObjectIfAbsentPartial(arg0: K, arg1: (arg0: K) => V): V;
        object2ObjectEntrySet(): Internal.ObjectSet<Internal.Object2ObjectMap$Entry<K, V>>;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        getOrDefault(arg0: object, arg1: V): V;
        computeIfAbsent(arg0: K, arg1: (arg0: K) => V): V;
        computeIfAbsent(arg0: K, arg1: (arg0: K) => V): V;
        notifyAll(): void;
        values(): Internal.ObjectCollection<V>;
        values(): Internal.Collection<any>;
        replace(arg0: K, arg1: V, arg2: V): boolean;
        replace(arg0: K, arg1: V): V;
        replaceAll(arg0: (arg0: K, arg1: V) => V): void;
        put(arg0: K, arg1: V): V;
        remove(arg0: object): V;
        remove(arg0: object, arg1: object): boolean;
        notify(): void;
        containsValue(arg0: object): boolean;
        compute(arg0: K, arg1: (arg0: K, arg1: V) => V): V;
        defaultReturnValue(arg0: V): void;
        defaultReturnValue(): V;
        hashCode(): number;
        merge(arg0: K, arg1: V, arg2: (arg0: V, arg1: V) => V): V;
        get(arg0: object): V;
        get(arg0: object): V;
        putAll(arg0: Map<K, V>): void;
        keySet(): Internal.Set<any>;
        keySet(): Internal.ObjectSet<K>;
        entrySet(): Internal.ObjectSet<Internal.Map$Entry<K, V>>;
        entrySet(): Internal.Set<any>;
        apply(arg0: K): V;
        forEach(arg0: (arg0: K, arg1: V) => void): void;
        containsKey(arg0: object): boolean;
        clear(): void;
        isEmpty(): boolean;
        computeIfPresent(arg0: K, arg1: (arg0: K, arg1: V) => V): V;
        size(): number;
        equals(arg0: object): boolean;
        toString(): string;
        putIfAbsent(arg0: K, arg1: V): V;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface MatchResult {
        groupCount(): number;
        start(arg0: number): number;
        start(): number;
        end(arg0: number): number;
        end(): number;
        group(): string;
        group(arg0: number): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IAntiqueTextProvider {
        hasAntiqueInk(): boolean;
        set antiqueInk(arg0: boolean);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface K1 {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface LongConsumer {
        andThen(arg0: Internal.LongConsumer): Internal.LongConsumer;
        accept(arg0: number): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IContainerFactory <T> implements Internal.MenuType$MenuSupplier<T> {
        create(arg0: number, arg1: Internal.Inventory, arg2: Internal.FriendlyByteBuf): T;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IPlaceableItem {
        addPlaceable(arg0: Internal.Block): void;
        get blockItemOverride(): Internal.BlockItem;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class Either <L, R> implements Internal.App<Internal.Either$Mu<R>, L> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        swap(): Internal.Either<R, L>;
        notifyAll(): void;
        mapBoth<C, D>(arg0: (arg0: L) => C, arg1: (arg0: R) => D): Internal.Either<C, D>;
        ifLeft(arg0: (arg0: L) => void): Internal.Either<L, R>;
        static right<L, R>(arg0: R): Internal.Either<L, R>;
        right(): Internal.Optional<R>;
        notify(): void;
        ifRight(arg0: (arg0: R) => void): Internal.Either<L, R>;
        orThrow(): L;
        mapRight<T>(arg0: (arg0: R) => T): Internal.Either<L, T>;
        flatMap<L2>(arg0: (arg0: L) => Internal.Either<L2, R>): Internal.Either<L2, R>;
        static left<L, R>(arg0: L): Internal.Either<L, R>;
        left(): Internal.Optional<L>;
        hashCode(): number;
        static unbox<L, R>(arg0: Internal.App<Internal.Either$Mu<R>, L>): Internal.Either<L, R>;
        equals(arg0: object): boolean;
        mapLeft<T>(arg0: (arg0: L) => T): Internal.Either<T, R>;
        toString(): string;
        map<T>(arg0: (arg0: L) => T, arg1: (arg0: R) => T): T;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface RecipeManagerAccessor {
        getRecipeMap<C, T>(arg0: Internal.RecipeType<T>): Map<ResourceLocation, Internal.Recipe<C>>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class CommandSourceStack implements Internal.SharedSuggestionProvider, Internal.IForgeCommandSourceStack {
        getAdvancement(arg0: ResourceLocation): Internal.Advancement;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        get recipeManager(): Internal.RecipeManager;
        get unsidedLevel(): Internal.Level;
        get scoreboard(): Internal.Scoreboard;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class DynamicLike <T> {
        createIntList(arg0: Internal.IntStream): Internal.Dynamic<object>;
        createLong(arg0: number): Internal.Dynamic<T>;
        getElementGeneric(arg0: T, arg1: T): T;
        getElementGeneric(arg0: T): Internal.DataResult<T>;
        createLongList(arg0: Internal.LongStream): Internal.Dynamic<object>;
        readMap<K, V>(arg0: Internal.Decoder<K>, arg1: (arg0: K) => Internal.Decoder<V>): Internal.DataResult<Internal.List<Internal.Pair<K, V>>>;
        readMap<K, V>(arg0: Internal.Decoder<K>, arg1: Internal.Decoder<V>): Internal.DataResult<Internal.List<Internal.Pair<K, V>>>;
        readMap<R>(arg0: Internal.DataResult<R>, arg1: Internal.Function3<R, Internal.Dynamic<T>, Internal.Dynamic<T>, Internal.DataResult<R>>): Internal.DataResult<R>;
        asListOpt<U>(arg0: (arg0: Internal.Dynamic<T>) => U): Internal.DataResult<Internal.List<U>>;
        createShort(arg0: number): Internal.Dynamic<T>;
        decode<A>(arg0: Internal.Decoder<A>): Internal.DataResult<Internal.Pair<A, T>>;
        asIntStreamOpt(): Internal.DataResult<Internal.IntStream>;
        asList<U>(arg0: (arg0: Internal.Dynamic<T>) => U): Internal.List<U>;
        readList<E>(arg0: (arg0: Internal.Dynamic<object>) => Internal.DataResult<E>): Internal.DataResult<Internal.List<E>>;
        readList<E>(arg0: Internal.Decoder<E>): Internal.DataResult<Internal.List<E>>;
        asString(): Internal.DataResult<string>;
        asString(arg0: string): string;
        asByte(arg0: number): number;
        createList(arg0: Internal.Stream<Internal.Dynamic<object>>): Internal.Dynamic<T>;
        asByteBufferOpt(): Internal.DataResult<Internal.ByteBuffer>;
        read<A>(arg0: Internal.Decoder<A>): Internal.DataResult<A>;
        getGeneric(arg0: T): Internal.DataResult<T>;
        asMapOpt(): Internal.DataResult<Internal.Stream<Internal.Pair<Internal.Dynamic<T>, Internal.Dynamic<T>>>>;
        asMapOpt<K, V>(arg0: (arg0: Internal.Dynamic<T>) => K, arg1: (arg0: Internal.Dynamic<T>) => V): Internal.DataResult<Map<K, V>>;
        createString(arg0: string): Internal.Dynamic<T>;
        asStream(): Internal.Stream<Internal.Dynamic<T>>;
        createByte(arg0: number): Internal.Dynamic<T>;
        asLong(arg0: number): number;
        asDouble(arg0: number): number;
        asBoolean(arg0: boolean): boolean;
        asLongStreamOpt(): Internal.DataResult<Internal.LongStream>;
        createDouble(arg0: number): Internal.Dynamic<T>;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        asStreamOpt(): Internal.DataResult<Internal.Stream<Internal.Dynamic<T>>>;
        asMap<K, V>(arg0: (arg0: Internal.Dynamic<T>) => K, arg1: (arg0: Internal.Dynamic<T>) => V): Map<K, V>;
        notifyAll(): void;
        createByteList(arg0: Internal.ByteBuffer): Internal.Dynamic<object>;
        asIntStream(): Internal.IntStream;
        asByteBuffer(): Internal.ByteBuffer;
        asFloat(arg0: number): number;
        asLongStream(): Internal.LongStream;
        notify(): void;
        createBoolean(arg0: boolean): Internal.Dynamic<T>;
        asInt(arg0: number): number;
        emptyList(): Internal.Dynamic<T>;
        hashCode(): number;
        asShort(arg0: number): number;
        get(arg0: string): Internal.OptionalDynamic<T>;
        emptyMap(): Internal.Dynamic<T>;
        createNumeric(arg0: Internal.Number): Internal.Dynamic<T>;
        asNumber(arg0: Internal.Number): Internal.Number;
        asNumber(): Internal.DataResult<Internal.Number>;
        createMap(arg0: Map<Internal.Dynamic<object>, Internal.Dynamic<object>>): Internal.Dynamic<T>;
        createFloat(arg0: number): Internal.Dynamic<T>;
        getElement(arg0: string, arg1: T): T;
        getElement(arg0: string): Internal.DataResult<T>;
        equals(arg0: object): boolean;
        createInt(arg0: number): Internal.Dynamic<T>;
        toString(): string;
        get ops(): Internal.DynamicOps<T>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface DamageSourceAccessor {
        callBypassArmor(): Internal.DamageSource;
        callBypassMagic(): Internal.DamageSource;
        callBypassInvul(): Internal.DamageSource;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class BlockItem extends Internal.Item implements Internal.IPlaceableItem {
        canElytraFly(arg0: Internal.ItemStack, arg1: Internal.LivingEntity): boolean;
        setDamage(arg0: Internal.ItemStack, arg1: number): void;
        canPerformAction(arg0: Internal.ItemStack, arg1: Internal.ToolAction): boolean;
        getItemEnchantability(arg0: Internal.ItemStack): number;
        shouldCauseBlockBreakReset(arg0: Internal.ItemStack, arg1: Internal.ItemStack): boolean;
        shouldCauseReequipAnimation(arg0: Internal.ItemStack, arg1: Internal.ItemStack, arg2: boolean): boolean;
        getXpRepairRatio(arg0: Internal.ItemStack): number;
        readShareTag(arg0: Internal.ItemStack, arg1: Internal.CompoundTag): void;
        onEntityItemUpdate(arg0: Internal.ItemStack, arg1: Internal.ItemEntity): boolean;
        getDamage(arg0: Internal.ItemStack): number;
        isBookEnchantable(arg0: Internal.ItemStack, arg1: Internal.ItemStack): boolean;
        canDisableShield(arg0: Internal.ItemStack, arg1: Internal.ItemStack, arg2: Internal.LivingEntity, arg3: Internal.LivingEntity): boolean;
        onUsingTick(arg0: Internal.ItemStack, arg1: Internal.LivingEntity, arg2: number): void;
        createEntity(arg0: Internal.Level, arg1: Internal.Entity, arg2: Internal.ItemStack): Internal.Entity;
        isPiglinCurrency(arg0: Internal.ItemStack): boolean;
        callAllowdedIn(arg0: Internal.CreativeModeTab): boolean;
        getSweepHitBox(arg0: Internal.ItemStack, arg1: Internal.Player, arg2: Internal.Entity): Internal.AABB;
        isRepairable(arg0: Internal.ItemStack): boolean;
        removeFromBlockToItemMap(arg0: Map<Internal.Block, Internal.Item>, arg1: Internal.Item): void;
        getShareTag(arg0: Internal.ItemStack): Internal.CompoundTag;
        onDroppedByPlayer(arg0: Internal.ItemStack, arg1: Internal.Player): boolean;
        isDamageable(arg0: Internal.ItemStack): boolean;
        onEntitySwing(arg0: Internal.ItemStack, arg1: Internal.LivingEntity): boolean;
        elytraFlightTick(arg0: Internal.ItemStack, arg1: Internal.LivingEntity, arg2: number): boolean;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        onLeftClickEntity(arg0: Internal.ItemStack, arg1: Internal.Player, arg2: Internal.Entity): boolean;
        canEquip(arg0: Internal.ItemStack, arg1: EquipmentSlot, arg2: Internal.Entity): boolean;
        notifyAll(): void;
        notify(): void;
        onBlockStartBreak(arg0: Internal.ItemStack, arg1: BlockPos, arg2: Internal.Player): boolean;
        onHorseArmorTick(arg0: Internal.ItemStack, arg1: Internal.Level, arg2: Internal.Mob): void;
        handler$zkh000$getUseDuration(arg0: Internal.ItemStack, arg1: Internal.CallbackInfoReturnable<any>): void;
        canContinueUsing(arg0: Internal.ItemStack, arg1: Internal.ItemStack): boolean;
        getEntityLifespan(arg0: Internal.ItemStack, arg1: Internal.Level): number;
        handler$bao000$overrideOtherStackedOnMe(arg0: Internal.ItemStack, arg1: Internal.ItemStack, arg2: Internal.Slot, arg3: Internal.ClickAction, arg4: Internal.Player, arg5: Internal.SlotAccess, arg6: Internal.CallbackInfoReturnable<any>): void;
        getDefaultTooltipHideFlags(arg0: Internal.ItemStack): number;
        getArmorTexture(arg0: Internal.ItemStack, arg1: Internal.Entity, arg2: EquipmentSlot, arg3: string): string;
        hashCode(): number;
        hasCustomEntity(arg0: Internal.ItemStack): boolean;
        getHighlightTip(arg0: Internal.ItemStack, arg1: Internal.Component): Internal.Component;
        getMaxDamage(arg0: Internal.ItemStack): number;
        getCreatorModId(arg0: Internal.ItemStack): string;
        isDamaged(arg0: Internal.ItemStack): boolean;
        onArmorTick(arg0: Internal.ItemStack, arg1: Internal.Level, arg2: Internal.Player): void;
        addPlaceable(arg0: Internal.Block): void;
        hasContainerItem(arg0: Internal.ItemStack): boolean;
        doesSneakBypassUse(arg0: Internal.ItemStack, arg1: Internal.LevelReader, arg2: BlockPos, arg3: Internal.Player): boolean;
        onItemUseFirst(arg0: Internal.ItemStack, arg1: Internal.UseOnContext): Internal.InteractionResult;
        getContainerItem(arg0: Internal.ItemStack): Internal.ItemStack;
        setRegistryName(arg0: string, arg1: string): V;
        onDestroyed(arg0: Internal.ItemEntity, arg1: Internal.DamageSource): void;
        isCorrectToolForDrops(arg0: Internal.ItemStack, arg1: Internal.BlockState): boolean;
        handler$bao000$overrideStackedOnOther(arg0: Internal.ItemStack, arg1: Internal.Slot, arg2: Internal.ClickAction, arg3: Internal.Player, arg4: Internal.CallbackInfoReturnable<any>): void;
        getEquipmentSlot(arg0: Internal.ItemStack): EquipmentSlot;
        initCapabilities(arg0: Internal.ItemStack, arg1: Internal.CompoundTag): Internal.ICapabilityProvider;
        getItemStackLimit(arg0: Internal.ItemStack): number;
        equals(arg0: object): boolean;
        makesPiglinsNeutral(arg0: Internal.ItemStack, arg1: Internal.LivingEntity): boolean;
        toString(): string;
        isEnderMask(arg0: Internal.ItemStack, arg1: Internal.Player, arg2: Internal.EnderMan): boolean;
        canApplyAtEnchantingTable(arg0: Internal.ItemStack, arg1: Internal.Enchantment): boolean;
        readonly delegate : () => V;
        renderProperties : object;
        set burnTime(i: number);
        set fireResistantKJS(arg0: boolean);
        set category(arg0: Internal.CreativeModeTab);
        set foodPropertiesKJS(arg0: Internal.FoodProperties);
        get category(): Internal.CreativeModeTab;
        set itemBuilderKJS(b: Internal.ItemBuilder);
        get itemBuilderKJS(): Internal.ItemBuilder;
        get blockItemOverride(): Internal.BlockItem;
        set maxStackSizeKJS(arg0: number);
        get id(): string;
        get renderPropertiesInternal(): object;
        set craftingRemainderKJS(arg0: Internal.Item);
        set maxDamageKJS(arg0: number);
        set rarityKJS(arg0: Internal.Rarity);
        get registryName(): ResourceLocation;
        set registryName(arg0: ResourceLocation);
        set registryName(arg0: ResourceLocation);
        set registryName(arg0: string);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Int2FloatFunction implements it.unimi.dsi.fastutil.Function<number, number>, Internal.IntToDoubleFunction {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        applyAsDouble(arg0: number): number;
        andThenShort(arg0: Internal.Float2ShortFunction): Internal.Int2ShortFunction;
        composeByte(arg0: Internal.Byte2IntFunction): Internal.Byte2FloatFunction;
        andThenInt(arg0: Internal.Float2IntFunction): Internal.Int2IntFunction;
        composeReference<T>(arg0: Internal.Reference2IntFunction<T>): Internal.Reference2FloatFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: number) => T;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: number): number;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: object): object;
        remove(arg0: object): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Float2DoubleFunction): Internal.Int2DoubleFunction;
        andThenObject<T>(arg0: Internal.Float2ObjectFunction<T>): Internal.Int2ObjectFunction<T>;
        get(arg0: object): number;
        get(arg0: object): object;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Float2LongFunction): Internal.Int2LongFunction;
        composeLong(arg0: Internal.Long2IntFunction): Internal.Long2FloatFunction;
        andThenByte(arg0: Internal.Float2ByteFunction): Internal.Int2ByteFunction;
        andThenFloat(arg0: Internal.Float2FloatFunction): Internal.Int2FloatFunction;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2IntFunction): Internal.Int2FloatFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2IntFunction): Internal.Float2FloatFunction;
        andThenChar(arg0: Internal.Float2CharFunction): Internal.Int2CharFunction;
        composeObject<T>(arg0: Internal.Object2IntFunction<T>): Internal.Object2FloatFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => number;
        composeShort(arg0: Internal.Short2IntFunction): Internal.Short2FloatFunction;
        andThenReference<T>(arg0: Internal.Float2ReferenceFunction<T>): Internal.Int2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2IntFunction): Internal.Char2FloatFunction;
        composeDouble(arg0: Internal.Double2IntFunction): Internal.Double2FloatFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface CopyOption {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class FileLock implements Internal.AutoCloseable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        release(): void;
        notifyAll(): void;
        isValid(): boolean;
        channel(): Internal.FileChannel;
        notify(): void;
        acquiredBy(): Internal.Channel;
        size(): number;
        hashCode(): number;
        equals(arg0: object): boolean;
        overlaps(arg0: number, arg1: number): boolean;
        toString(): string;
        position(): number;
        close(): void;
        isShared(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IForgeMobEffect {
        getSortOrder(arg0: Internal.MobEffectInstance): number;
        get curativeItems(): Internal.List<Internal.ItemStack>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ParsePosition {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        get index(): number;
        set index(arg0: number);
        set errorIndex(arg0: number);
        get errorIndex(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class OptionalDynamic <T> extends Internal.DynamicLike<T> {
        getElementGeneric(arg0: T): Internal.DataResult<T>;
        getElementGeneric(arg0: T, arg1: T): T;
        asLongStreamOpt(): Internal.DataResult<Internal.LongStream>;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        orElseEmptyList(): Internal.Dynamic<T>;
        asStreamOpt(): Internal.DataResult<Internal.Stream<Internal.Dynamic<T>>>;
        notifyAll(): void;
        asIntStream(): Internal.IntStream;
        asByteBuffer(): Internal.ByteBuffer;
        asFloat(arg0: number): number;
        decode<A>(arg0: Internal.Decoder<A>): Internal.DataResult<Internal.Pair<A, T>>;
        asLongStream(): Internal.LongStream;
        asIntStreamOpt(): Internal.DataResult<Internal.IntStream>;
        notify(): void;
        result(): Internal.Optional<Internal.Dynamic<T>>;
        asInt(arg0: number): number;
        into<V>(arg0: (arg0: Internal.Dynamic<T>) => V): Internal.DataResult<V>;
        hashCode(): number;
        asShort(arg0: number): number;
        get(arg0: string): Internal.OptionalDynamic<T>;
        get(): Internal.DataResult<Internal.Dynamic<T>>;
        asString(): Internal.DataResult<string>;
        asString(arg0: string): string;
        map<U>(arg0: (arg0: Internal.Dynamic<T>) => U): Internal.DataResult<U>;
        asByte(arg0: number): number;
        asByteBufferOpt(): Internal.DataResult<Internal.ByteBuffer>;
        orElseEmptyMap(): Internal.Dynamic<T>;
        getGeneric(arg0: T): Internal.DataResult<T>;
        asNumber(): Internal.DataResult<Internal.Number>;
        asNumber(arg0: Internal.Number): Internal.Number;
        asMapOpt(): Internal.DataResult<Internal.Stream<Internal.Pair<Internal.Dynamic<T>, Internal.Dynamic<T>>>>;
        asLong(arg0: number): number;
        flatMap<U>(arg0: (arg0: Internal.Dynamic<T>) => Internal.DataResult<U>): Internal.DataResult<U>;
        getElement(arg0: string): Internal.DataResult<T>;
        getElement(arg0: string, arg1: T): T;
        equals(arg0: object): boolean;
        asDouble(arg0: number): number;
        toString(): string;
        asBoolean(arg0: boolean): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface WatchKey {
        cancel(): void;
        pollEvents(): Internal.List<Internal.WatchEvent<object>>;
        watchable(): Internal.Watchable;
        isValid(): boolean;
        reset(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class EntityLootEventJS extends Internal.LootEventJS {
        cancel(): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isCancelled(): boolean;
        modifyEntity(type: Internal.EntityType<object>, b: (arg0: Internal.LootBuilder) => void): void;
        notifyAll(): void;
        addJson(id: ResourceLocation, json: Internal.JsonObject): void;
        notify(): void;
        addEntity(type: Internal.EntityType<object>, b: (arg0: Internal.LootBuilder) => void): void;
        removeAll(): void;
        post(t: Internal.ScriptType, id: string, sub: string): boolean;
        post(t: Internal.ScriptType, id: string): boolean;
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        canCancel(): boolean;
        get type(): string;
        get directory(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class TimeUnit extends Internal.Enum<Internal.TimeUnit> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        toChronoUnit(): Internal.ChronoUnit;
        timedJoin(arg0: Internal.Thread, arg1: number): void;
        timedWait(arg0: object, arg1: number): void;
        static valueOf(arg0: string): Internal.TimeUnit;
        notifyAll(): void;
        static values(): Internal.TimeUnit[];
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        convert(arg0: Internal.Duration): number;
        convert(arg0: number, arg1: Internal.TimeUnit): number;
        notify(): void;
        toSeconds(arg0: number): number;
        sleep(arg0: number): void;
        toNanos(arg0: number): number;
        toMinutes(arg0: number): number;
        toHours(arg0: number): number;
        hashCode(): number;
        equals(arg0: object): boolean;
        static of(arg0: Internal.ChronoUnit): Internal.TimeUnit;
        name(): string;
        toString(): string;
        toMillis(arg0: number): number;
        toDays(arg0: number): number;
        toMicros(arg0: number): number;
        ordinal(): number;
        static readonly MILLISECONDS : Internal.TimeUnit;
        static readonly MICROSECONDS : Internal.TimeUnit;
        static readonly HOURS : Internal.TimeUnit;
        static readonly SECONDS : Internal.TimeUnit;
        static readonly NANOSECONDS : Internal.TimeUnit;
        static readonly DAYS : Internal.TimeUnit;
        static readonly MINUTES : Internal.TimeUnit;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface LongUnaryOperator {
        applyAsLong(arg0: number): number;
        compose(arg0: Internal.LongUnaryOperator): Internal.LongUnaryOperator;
        andThen(arg0: Internal.LongUnaryOperator): Internal.LongUnaryOperator;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class FireworksJS$Explosion {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        trail : boolean;
        readonly fadeColors : Internal.IntOpenHashSet;
        shape : Internal.FireworksJS$Shape;
        flicker : boolean;
        readonly colors : Internal.IntOpenHashSet;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface PrimitiveCodec <A> implements Internal.Codec<A> {
        encode<T>(arg0: A, arg1: Internal.DynamicOps<T>, arg2: T): Internal.DataResult<T>;
        read<T>(arg0: Internal.DynamicOps<T>, arg1: T): Internal.DataResult<A>;
        fieldOf(arg0: string): Internal.MapEncoder<any>;
        fieldOf(arg0: string): Internal.MapDecoder<any>;
        withLifecycle(arg0: Internal.Lifecycle): Internal.Decoder<any>;
        withLifecycle(arg0: Internal.Lifecycle): Internal.Encoder<any>;
        decode<T>(arg0: Internal.DynamicOps<T>, arg1: T): Internal.DataResult<Internal.Pair<A, T>>;
        write<T>(arg0: Internal.DynamicOps<T>, arg1: A): T;
        promotePartial(arg0: Internal.Consumer<any>): Internal.Decoder<any>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class AbstractChronology implements Internal.Chronology {
        localDateTime(arg0: Internal.TemporalAccessor): Internal.ChronoLocalDateTime<Internal.ChronoLocalDate>;
        date(arg0: Internal.TemporalAccessor): Internal.ChronoLocalDate;
        date(arg0: Internal.Era, arg1: number, arg2: number, arg3: number): Internal.ChronoLocalDate;
        date(arg0: number, arg1: number, arg2: number): Internal.ChronoLocalDate;
        period(arg0: number, arg1: number, arg2: number): Internal.ChronoPeriod;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        dateYearDay(arg0: Internal.Era, arg1: number, arg2: number): Internal.ChronoLocalDate;
        dateYearDay(arg0: number, arg1: number): Internal.ChronoLocalDate;
        resolveDate(arg0: Map<Internal.TemporalField, number>, arg1: Internal.ResolverStyle): Internal.ChronoLocalDate;
        notifyAll(): void;
        isLeapYear(arg0: number): boolean;
        range(arg0: Internal.ChronoField): Internal.ValueRange;
        dateEpochDay(arg0: number): Internal.ChronoLocalDate;
        compareTo(arg0: object): number;
        compareTo(arg0: Internal.Chronology): number;
        dateNow(): Internal.ChronoLocalDate;
        dateNow(arg0: Internal.ZoneId): Internal.ChronoLocalDate;
        dateNow(arg0: Internal.Clock): Internal.ChronoLocalDate;
        notify(): void;
        eraOf(arg0: number): Internal.Era;
        eras(): Internal.List<Internal.Era>;
        prolepticYear(arg0: Internal.Era, arg1: number): number;
        zonedDateTime(arg0: Internal.Instant, arg1: Internal.ZoneId): Internal.ChronoZonedDateTime<Internal.ChronoLocalDate>;
        zonedDateTime(arg0: Internal.TemporalAccessor): Internal.ChronoZonedDateTime<Internal.ChronoLocalDate>;
        getDisplayName(arg0: Internal.TextStyle, arg1: Internal.Locale): string;
        hashCode(): number;
        equals(arg0: object): boolean;
        epochSecond(arg0: Internal.Era, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: Internal.ZoneOffset): number;
        epochSecond(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: Internal.ZoneOffset): number;
        toString(): string;
        get calendarType(): string;
        get id(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class EventsJS {
        postToHandlers(id: string, list: Internal.List<Internal.EventsJS$ScriptEventHandler>, event: Internal.EventJS): boolean;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        handlers(id: string): Internal.List<Internal.EventsJS$ScriptEventHandler>;
        notifyAll(): void;
        equals(arg0: object): boolean;
        clear(): void;
        toString(): string;
        notify(): void;
        listen(id: string, handler: Internal.IEventHandler): void;
        readonly scriptManager : Internal.ScriptManager;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class CertPath implements Internal.Serializable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        getEncoded(arg0: string): number[];
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        get type(): string;
        get encoded(): number[];
        get encodings(): Internal.Iterator<string>;
        get certificates(): Internal.List<Internal.Certificate>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Compressable implements Internal.Keyable {
        compressor<T>(arg0: Internal.DynamicOps<T>): Internal.KeyCompressor<T>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Locale implements Internal.Cloneable, Internal.Serializable {
        stripExtensions(): Internal.Locale;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        static forLanguageTag(arg0: string): Internal.Locale;
        notifyAll(): void;
        notify(): void;
        static lookupTag(arg0: Internal.List<Internal.Locale$LanguageRange>, arg1: Internal.Collection<string>): string;
        getDisplayCountry(arg0: Internal.Locale): string;
        static getISOCountries(arg0: Internal.Locale$IsoCountryCode): Internal.Set<string>;
        hashCode(): number;
        getDisplayVariant(arg0: Internal.Locale): string;
        static filterTags(arg0: Internal.List<Internal.Locale$LanguageRange>, arg1: Internal.Collection<string>): Internal.List<string>;
        static filterTags(arg0: Internal.List<Internal.Locale$LanguageRange>, arg1: Internal.Collection<string>, arg2: Internal.Locale$FilteringMode): Internal.List<string>;
        toLanguageTag(): string;
        getDisplayScript(arg0: Internal.Locale): string;
        static lookup(arg0: Internal.List<Internal.Locale$LanguageRange>, arg1: Internal.Collection<Internal.Locale>): Internal.Locale;
        getExtension(arg0: string): string;
        static getDefault(arg0: Internal.Locale$Category): Internal.Locale;
        static setDefault(arg0: Internal.Locale$Category, arg1: Internal.Locale): void;
        hasExtensions(): boolean;
        static filter(arg0: Internal.List<Internal.Locale$LanguageRange>, arg1: Internal.Collection<Internal.Locale>, arg2: Internal.Locale$FilteringMode): Internal.List<Internal.Locale>;
        static filter(arg0: Internal.List<Internal.Locale$LanguageRange>, arg1: Internal.Collection<Internal.Locale>): Internal.List<Internal.Locale>;
        getDisplayName(arg0: Internal.Locale): string;
        equals(arg0: object): boolean;
        clone(): object;
        toString(): string;
        getDisplayLanguage(arg0: Internal.Locale): string;
        getUnicodeLocaleType(arg0: string): string;
        static readonly PRC : Internal.Locale;
        static readonly CANADA : Internal.Locale;
        static readonly ENGLISH : Internal.Locale;
        static readonly ROOT : Internal.Locale;
        static readonly TAIWAN : Internal.Locale;
        static readonly CHINA : Internal.Locale;
        static readonly ITALY : Internal.Locale;
        static readonly CHINESE : Internal.Locale;
        static readonly KOREA : Internal.Locale;
        static readonly FRENCH : Internal.Locale;
        static readonly FRANCE : Internal.Locale;
        static readonly TRADITIONAL_CHINESE : Internal.Locale;
        static readonly CANADA_FRENCH : Internal.Locale;
        static readonly GERMANY : Internal.Locale;
        static readonly ITALIAN : Internal.Locale;
        static readonly PRIVATE_USE_EXTENSION : "x";
        static readonly UK : Internal.Locale;
        static readonly JAPAN : Internal.Locale;
        static readonly JAPANESE : Internal.Locale;
        static readonly UNICODE_LOCALE_EXTENSION : "u";
        static readonly SIMPLIFIED_CHINESE : Internal.Locale;
        static readonly GERMAN : Internal.Locale;
        static readonly US : Internal.Locale;
        static readonly KOREAN : Internal.Locale;
        get unicodeLocaleAttributes(): Internal.Set<string>;
        get country(): string;
        get unicodeLocaleKeys(): Internal.Set<string>;
        get iSO3Country(): string;
        get displayCountry(): string;
        get iSO3Language(): string;
        get iSOCountries(): string[];
        get extensionKeys(): Internal.Set<string>;
        get displayVariant(): string;
        get iSOLanguages(): string[];
        get availableLocales(): Internal.Locale[];
        get displayScript(): string;
        get language(): string;
        get variant(): string;
        get default(): Internal.Locale;
        set default(arg0: Internal.Locale);
        get displayName(): string;
        get displayLanguage(): string;
        get script(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IForgeBakedModel {
        doesHandlePerspectives(): boolean;
        getModelData(arg0: Internal.BlockAndTintGetter, arg1: BlockPos, arg2: Internal.BlockState, arg3: Internal.IModelData): Internal.IModelData;
        isLayered(): boolean;
        handlePerspective(arg0: Internal.ItemTransforms$TransformType, arg1: Internal.PoseStack): Internal.BakedModel;
        useAmbientOcclusion(arg0: Internal.BlockState): boolean;
        getQuads(arg0: Internal.BlockState, arg1: Internal.Direction, arg2: Internal.Random, arg3: Internal.IModelData): Internal.List<Internal.BakedQuad>;
        getLayerModels(arg0: Internal.ItemStack, arg1: boolean): Internal.List<Internal.Pair<Internal.BakedModel, Internal.RenderType>>;
        getParticleIcon(arg0: Internal.IModelData): Internal.TextureAtlasSprite;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface AutoCloseable {
        close(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class OrConditionBuilder implements Internal.ConditionsContainer<Internal.OrConditionBuilder> {
        killerPredicate(arg0: (arg0: Internal.EntityJS) => boolean): B;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        survivesExplosion(): B;
        notifyAll(): void;
        addCondition(arg0: Internal.LootItemCondition): Internal.ConditionsContainer<any>;
        addCondition(arg0: Internal.LootItemCondition): Internal.OrConditionBuilder;
        addCondition(arg0: Internal.LootItemCondition$Builder): B;
        matchFluid(arg0: string): B;
        customDistanceToPlayer(arg0: (arg0: Internal.DistancePredicateBuilder) => void): B;
        notify(): void;
        not(arg0: (arg0: Internal.NotConditionBuilder) => void): B;
        directKillerPredicate(arg0: (arg0: Internal.EntityJS) => boolean): B;
        matchEquip(arg0: EquipmentSlot, arg1: Internal.IngredientJS): B;
        and(arg0: (arg0: Internal.AndConditionBuilder) => void): B;
        hashCode(): number;
        matchLoot(arg0: Internal.IngredientJS): B;
        matchLoot(arg0: Internal.IngredientJS, arg1: boolean): B;
        anyBiome(arg0: string[]): B;
        distanceToKiller(arg0: Internal.MinMaxBounds$Doubles): B;
        matchEntity(arg0: (arg0: Internal.EntityPredicateBuilderJS) => void): B;
        entityPredicate(arg0: (arg0: Internal.EntityJS) => boolean): B;
        anyDimension(arg0: ResourceLocation[]): B;
        killedByPlayer(): B;
        or(arg0: (arg0: Internal.OrConditionBuilder) => void): B;
        randomChance(arg0: number): B;
        timeCheck(arg0: number, arg1: number): B;
        timeCheck(arg0: number, arg1: number, arg2: number): B;
        matchOffHand(arg0: Internal.IngredientJS): B;
        playerPredicate(arg0: (arg0: Internal.PlayerJS<object>) => boolean): B;
        weatherCheck(arg0: Map<string, boolean>): B;
        matchDirectKiller(arg0: (arg0: Internal.EntityPredicateBuilderJS) => void): B;
        matchBlockState(arg0: Internal.Block, arg1: Map<string, string>): B;
        matchMainHand(arg0: Internal.IngredientJS): B;
        matchPlayer(arg0: (arg0: Internal.EntityPredicateBuilderJS) => void): B;
        lightLevel(arg0: number, arg1: number): B;
        build(): Internal.OrCondition;
        biome(arg0: string[]): B;
        customCondition(arg0: Internal.JsonObject): B;
        equals(arg0: object): boolean;
        matchKiller(arg0: (arg0: Internal.EntityPredicateBuilderJS) => void): B;
        randomChanceWithLooting(arg0: number, arg1: number): B;
        hasAnyStage(arg0: string[]): B;
        toString(): string;
        randomChanceWithEnchantment(arg0: Internal.Enchantment, arg1: number[]): B;
        matchDamageSource(arg0: (arg0: Internal.DamageSourcePredicateBuilderJS) => void): B;
        anyStructure(arg0: ResourceLocation[], arg1: boolean): B;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface NavigatingEntity {
        updateNavigationRegistration(): void;
        isRegisteredToWorld(): boolean;
        get registeredNavigation(): Internal.PathNavigation;
        set registeredToWorld(arg0: Internal.PathNavigation);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface NonNullConsumer <T> {
        accept(arg0: T): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface LongFunction <R> {
        apply(arg0: number): R;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface RecordBuilder <T> {
        withErrorsFrom(arg0: Internal.DataResult<object>): Internal.RecordBuilder<T>;
        add(arg0: string, arg1: T): Internal.RecordBuilder<T>;
        add(arg0: string, arg1: Internal.DataResult<T>): Internal.RecordBuilder<T>;
        add(arg0: Internal.DataResult<T>, arg1: Internal.DataResult<T>): Internal.RecordBuilder<T>;
        add<E>(arg0: string, arg1: E, arg2: Internal.Encoder<E>): Internal.RecordBuilder<T>;
        add(arg0: T, arg1: T): Internal.RecordBuilder<T>;
        add(arg0: T, arg1: Internal.DataResult<T>): Internal.RecordBuilder<T>;
        mapError(arg0: Internal.UnaryOperator<string>): Internal.RecordBuilder<T>;
        ops(): Internal.DynamicOps<T>;
        build(arg0: Internal.DataResult<T>): Internal.DataResult<T>;
        build(arg0: T): Internal.DataResult<T>;
        set lifecycle(arg0: Internal.Lifecycle);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class AbstractInstance implements Internal.Instance, Internal.LightListener {
        init(): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        onLightUpdate(arg0: Internal.LightProvider, arg1: Internal.LightLayer, arg2: Internal.ImmutableBox): void;
        notifyAll(): void;
        update(): void;
        updateLight(): void;
        notify(): void;
        remove(): void;
        hashCode(): number;
        onLightPacket(arg0: Internal.LightProvider, arg1: number, arg2: number): void;
        equals(arg0: object): boolean;
        toString(): string;
        shouldReset(): boolean;
        status(): Internal.ListenerStatus;
        readonly world : Internal.Level;
        get worldPosition(): BlockPos;
        get volume(): Internal.ImmutableBox;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IntConsumer {
        andThen(arg0: Internal.IntConsumer): Internal.IntConsumer;
        accept(arg0: number): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ToIntFunction <T> {
        applyAsInt(arg0: T): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Channel implements Internal.Closeable {
        isOpen(): boolean;
        close(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ConfiguredEndimationEffect <C, E> implements Internal.Comparable<Internal.ConfiguredEndimationEffect<object, object>> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        process(arg0: Internal.EndimationEffectSource, arg1: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        compareTo(arg0: Internal.ConfiguredEndimationEffect<object, object>): number;
        compareTo(arg0: object): number;
        notify(): void;
        static readonly CODEC : Internal.Codec<Internal.ConfiguredEndimationEffect<object, object>>;
        get time(): number;
        get effect(): E;
        get config(): C;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Vector3f {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        set(arg0: number[]): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        set y(arg0: number);
        set x(arg0: number);
        set z(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class FoodProperties {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface SharedSuggestionProvider {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class IngredientWithCustomPredicateJS implements Internal.IngredientJS {
        anyStackMatches(ingredient: Internal.IngredientJS): boolean;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        isInvalidRecipeIngredient(): boolean;
        notify(): void;
        not(): Internal.IngredientJS;
        hashCode(): number;
        copy(): Internal.IngredientJS;
        copy(): Internal.Copyable;
        testVanillaItem(i: Internal.Item): boolean;
        test(stack: Internal.ItemStackJS): boolean;
        isEmpty(): boolean;
        asIngredientStack(): Internal.IngredientStackJS;
        filter(filter: Internal.IngredientJS): Internal.IngredientJS;
        createVanillaIngredient(): Internal.Ingredient;
        toJson(): Internal.JsonElement;
        withCount(count: number): Internal.IngredientJS;
        unwrapStackIngredient(): Internal.List<Internal.IngredientJS>;
        equals(arg0: object): boolean;
        testVanilla(stack: Internal.ItemStack): boolean;
        x(c: number): Internal.IngredientJS;
        toString(): string;
        readonly predicate : (arg0: Internal.ItemStack) => boolean;
        readonly ingredient : Internal.IngredientJS;
        readonly uuid : Internal.UUID;
        get itemIds(): Internal.Set<string>;
        get stacks(): Internal.Set<Internal.ItemStackJS>;
        get vanillaItems(): Internal.Set<Internal.Item>;
        get first(): Internal.ItemStackJS;
        get count(): number;
        get vanillaPredicate(): (arg0: Internal.ItemStack) => boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface EntityKJS implements Internal.AsKJS {
        asKJS(): object;
        get persistentDataKJS(): Internal.CompoundTag;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface AccessScreen {
        get renderables(): Internal.List<Internal.Widget>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class PropertyChangeEvent extends Internal.EventObject {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        set propagationId(arg0: object);
        get source(): object;
        get propagationId(): object;
        get oldValue(): object;
        get newValue(): object;
        get propertyName(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class ModuleReference {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        location(): Internal.Optional<Internal.URI>;
        descriptor(): Internal.ModuleDescriptor;
        notify(): void;
        open(): Internal.ModuleReader;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ModuleDescriptor$Requires$Modifier extends Internal.Enum<Internal.ModuleDescriptor$Requires$Modifier> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(arg0: string): Internal.ModuleDescriptor$Requires$Modifier;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.ModuleDescriptor$Requires$Modifier[];
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly TRANSITIVE : Internal.ModuleDescriptor$Requires$Modifier;
        static readonly SYNTHETIC : Internal.ModuleDescriptor$Requires$Modifier;
        static readonly MANDATED : Internal.ModuleDescriptor$Requires$Modifier;
        static readonly STATIC : Internal.ModuleDescriptor$Requires$Modifier;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class MethodHandles$Lookup {
        findStaticVarHandle(arg0: Internal.Class<object>, arg1: string, arg2: Internal.Class<object>): Internal.VarHandle;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        hasFullPrivilegeAccess(): boolean;
        findStaticGetter(arg0: Internal.Class<object>, arg1: string, arg2: Internal.Class<object>): Internal.MethodHandle;
        lookupClass(): Internal.Class<object>;
        defineHiddenClass(arg0: number[], arg1: boolean, arg2: Internal.MethodHandles$Lookup$ClassOption[]): Internal.MethodHandles$Lookup;
        notify(): void;
        unreflectSetter(arg0: Internal.Field): Internal.MethodHandle;
        findVirtual(arg0: Internal.Class<object>, arg1: string, arg2: Internal.MethodType): Internal.MethodHandle;
        findConstructor(arg0: Internal.Class<object>, arg1: Internal.MethodType): Internal.MethodHandle;
        dropLookupMode(arg0: number): Internal.MethodHandles$Lookup;
        findStaticSetter(arg0: Internal.Class<object>, arg1: string, arg2: Internal.Class<object>): Internal.MethodHandle;
        bind(arg0: object, arg1: string, arg2: Internal.MethodType): Internal.MethodHandle;
        hashCode(): number;
        findGetter(arg0: Internal.Class<object>, arg1: string, arg2: Internal.Class<object>): Internal.MethodHandle;
        hasPrivateAccess(): boolean;
        unreflectGetter(arg0: Internal.Field): Internal.MethodHandle;
        accessClass(arg0: Internal.Class<object>): Internal.Class<object>;
        findSpecial(arg0: Internal.Class<object>, arg1: string, arg2: Internal.MethodType, arg3: Internal.Class<object>): Internal.MethodHandle;
        in(arg0: Internal.Class<object>): Internal.MethodHandles$Lookup;
        defineClass(arg0: number[]): Internal.Class<object>;
        unreflectConstructor(arg0: Internal.Constructor<object>): Internal.MethodHandle;
        unreflectVarHandle(arg0: Internal.Field): Internal.VarHandle;
        findClass(arg0: string): Internal.Class<object>;
        defineHiddenClassWithClassData(arg0: number[], arg1: object, arg2: boolean, arg3: Internal.MethodHandles$Lookup$ClassOption[]): Internal.MethodHandles$Lookup;
        unreflectSpecial(arg0: Internal.Method, arg1: Internal.Class<object>): Internal.MethodHandle;
        lookupModes(): number;
        findStatic(arg0: Internal.Class<object>, arg1: string, arg2: Internal.MethodType): Internal.MethodHandle;
        ensureInitialized(arg0: Internal.Class<object>): Internal.Class<object>;
        unreflect(arg0: Internal.Method): Internal.MethodHandle;
        findVarHandle(arg0: Internal.Class<object>, arg1: string, arg2: Internal.Class<object>): Internal.VarHandle;
        findSetter(arg0: Internal.Class<object>, arg1: string, arg2: Internal.Class<object>): Internal.MethodHandle;
        equals(arg0: object): boolean;
        toString(): string;
        previousLookupClass(): Internal.Class<object>;
        revealDirect(arg0: Internal.MethodHandle): Internal.MethodHandleInfo;
        static readonly MODULE : 16;
        static readonly PACKAGE : 8;
        static readonly PUBLIC : 1;
        static readonly ORIGINAL : 64;
        static readonly UNCONDITIONAL : 32;
        static readonly PROTECTED : 4;
        static readonly PRIVATE : 2;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ItemHandler implements Internal.Iterable<Internal.ItemStack> {
        iterator(): Internal.Iterator<Internal.ItemStack>;
        extractItem(arg0: number, arg1: number, arg2: boolean): Internal.ItemStack;
        getSlotLimit(arg0: number): number;
        isItemValid(arg0: number, arg1: Internal.ItemStack): boolean;
        getStackInSlot(arg0: number): Internal.ItemStack;
        insertItem(arg0: number, arg1: Internal.ItemStack, arg2: boolean): Internal.ItemStack;
        get height(): number;
        get slots(): number;
        get width(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface PlayerKJS {
        set stagesKJS(arg0: Internal.Stages);
        get stagesRawKJS(): Internal.Stages;
        get stagesKJS(): Internal.Stages;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Short2ObjectFunction <V> implements it.unimi.dsi.fastutil.Function<number, V>, Internal.IntFunction<V> {
        getOrDefault(arg0: object, arg1: V): V;
        getOrDefault(arg0: number, arg1: V): V;
        andThenShort(arg0: Internal.Object2ShortFunction<V>): Internal.Short2ShortFunction;
        composeByte(arg0: Internal.Byte2ShortFunction): Internal.Byte2ObjectFunction<V>;
        andThenInt(arg0: Internal.Object2IntFunction<V>): Internal.Short2IntFunction;
        composeReference<T>(arg0: Internal.Reference2ShortFunction<T>): (arg0: T) => V;
        put(arg0: number, arg1: V): V;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: V): V;
        remove(arg0: number): V;
        remove(arg0: object): V;
        defaultReturnValue(): V;
        defaultReturnValue(arg0: V): void;
        andThenDouble(arg0: Internal.Object2DoubleFunction<V>): Internal.Short2DoubleFunction;
        andThenObject<T>(arg0: (arg0: V) => T): Internal.Short2ObjectFunction<T>;
        get(arg0: object): V;
        get(arg0: number): V;
        andThenLong(arg0: Internal.Object2LongFunction<V>): Internal.Short2LongFunction;
        composeLong(arg0: Internal.Long2ShortFunction): Internal.Long2ObjectFunction<V>;
        andThenByte(arg0: Internal.Object2ByteFunction<V>): Internal.Short2ByteFunction;
        andThenFloat(arg0: Internal.Object2FloatFunction<V>): Internal.Short2FloatFunction;
        apply(arg0: number): V;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2ShortFunction): Internal.Int2ObjectFunction<V>;
        clear(): void;
        composeFloat(arg0: Internal.Float2ShortFunction): Internal.Float2ObjectFunction<V>;
        andThenChar(arg0: Internal.Object2CharFunction<V>): Internal.Short2CharFunction;
        composeObject<T>(arg0: Internal.Object2ShortFunction<T>): (arg0: T) => V;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => V;
        composeShort(arg0: Internal.Short2ShortFunction): Internal.Short2ObjectFunction<V>;
        andThenReference<T>(arg0: (arg0: V) => T): Internal.Short2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2ShortFunction): Internal.Char2ObjectFunction<V>;
        composeDouble(arg0: Internal.Double2ShortFunction): Internal.Double2ObjectFunction<V>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Function14 <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R> {
        curry12(): Internal.Function12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, (arg0: T13, arg1: T14) => R>;
        curry9(): Internal.Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, Internal.Function5<T10, T11, T12, T13, T14, R>>;
        curry13(): Internal.Function13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, (arg0: T14) => R>;
        apply(arg0: T1, arg1: T2, arg2: T3, arg3: T4, arg4: T5, arg5: T6, arg6: T7, arg7: T8, arg8: T9, arg9: T10, arg10: T11, arg11: T12, arg12: T13, arg13: T14): R;
        curry7(): Internal.Function7<T1, T2, T3, T4, T5, T6, T7, Internal.Function7<T8, T9, T10, T11, T12, T13, T14, R>>;
        curry8(): Internal.Function8<T1, T2, T3, T4, T5, T6, T7, T8, Internal.Function6<T9, T10, T11, T12, T13, T14, R>>;
        curry10(): Internal.Function10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Internal.Function4<T11, T12, T13, T14, R>>;
        curry11(): Internal.Function11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Internal.Function3<T12, T13, T14, R>>;
        curry(): (arg0: T1) => Internal.Function13<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R>;
        curry5(): Internal.Function5<T1, T2, T3, T4, T5, Internal.Function9<T6, T7, T8, T9, T10, T11, T12, T13, T14, R>>;
        curry6(): Internal.Function6<T1, T2, T3, T4, T5, T6, Internal.Function8<T7, T8, T9, T10, T11, T12, T13, T14, R>>;
        curry3(): Internal.Function3<T1, T2, T3, Internal.Function11<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R>>;
        curry4(): Internal.Function4<T1, T2, T3, T4, Internal.Function10<T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R>>;
        curry2(): (arg0: T1, arg1: T2) => Internal.Function12<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Products$P14 <F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        apply<R>(arg0: Internal.Applicative<F, object>, arg1: Internal.Function14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R>): Internal.App<F, R>;
        apply<R>(arg0: Internal.Applicative<F, object>, arg1: Internal.App<F, Internal.Function14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R>>): Internal.App<F, R>;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ProcessingRecipeJS extends Internal.RecipeJS {
        ingredientAction(filter: Internal.IngredientActionFilter, action: Internal.IngredientAction): Internal.RecipeJS;
        superheated(): Internal.ProcessingRecipeJS;
        convertReplacedInput(index: number, oldIngredient: Internal.IngredientJS, newIngredient: Internal.IngredientJS): Internal.IngredientJS;
        replaceOutput(i: Internal.IngredientJS, with_: Internal.ItemStackJS, exact: boolean): boolean;
        merge(data: object): Internal.RecipeJS;
        create(args: Internal.ListJS): void;
        id(_id: ResourceLocation): Internal.RecipeJS;
        parseIngredientItem(o: object, key: string): Internal.IngredientJS;
        parseIngredientItem(o: object): Internal.IngredientJS;
        group(g: string): Internal.RecipeJS;
        processingTime(t: number): Internal.ProcessingRecipeJS;
        getInputIndex(ingredient: Internal.IngredientJS, exact: boolean): number;
        setGroup(g: string): void;
        serialize(): void;
        replaceInput(i: Internal.IngredientJS, with_: Internal.IngredientJS, exact: boolean): boolean;
        getType(): string;
        getGroup(): string;
        hasOutput(ingredient: Internal.IngredientJS, exact: boolean): boolean;
        heated(): Internal.ProcessingRecipeJS;
        keepIngredient(filter: Internal.IngredientActionFilter): Internal.RecipeJS;
        customIngredientAction(filter: Internal.IngredientActionFilter, id: string): Internal.RecipeJS;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        convertReplacedOutput(index: number, oldStack: Internal.ItemStackJS, newStack: Internal.ItemStackJS): Internal.ItemStackJS;
        save(): void;
        damageIngredient(filter: Internal.IngredientActionFilter, damage: number): Internal.RecipeJS;
        damageIngredient(filter: Internal.IngredientActionFilter): Internal.RecipeJS;
        getId(): string;
        dontAdd(): void;
        notify(): void;
        serializeJson(): void;
        hashCode(): number;
        deserializeJson(): void;
        deserialize(): void;
        serializeNBTAsJson(): boolean;
        getOutputIndex(ingredient: Internal.IngredientJS, exact: boolean): number;
        heatRequirement(req: string): Internal.ProcessingRecipeJS;
        resultFromRecipeJson(json: Internal.JsonObject): Internal.ItemStackJS;
        serializeIngredientStack(in_: Internal.IngredientStackJS): Internal.JsonElement;
        stage(s: string): Internal.RecipeJS;
        equals(arg0: object): boolean;
        serializeItemStack(stack: Internal.ItemStackJS): Internal.JsonElement;
        toString(): string;
        parseResultItem(o: object): Internal.ItemStackJS;
        hasInput(ingredient: Internal.IngredientJS, exact: boolean): boolean;
        replaceIngredient(filter: Internal.IngredientActionFilter, item: Internal.ItemStackJS): Internal.RecipeJS;
        static currentRecipe : Internal.RecipeJS;
        readonly inputItems : Internal.List<Internal.IngredientJS>;
        static itemErrors : false;
        type : Internal.RecipeTypeJS;
        originalJson : Internal.JsonObject;
        serializeOutputs : boolean;
        readonly outputFluids : Internal.List<Internal.FluidStack>;
        originalRecipe : Internal.Recipe<object>;
        readonly inputFluids : Internal.List<Internal.FluidIngredient>;
        json : Internal.JsonObject;
        readonly outputItems : Internal.List<Internal.ItemStackJS>;
        serializeInputs : boolean;
        get uniqueId(): string;
        get path(): string;
        get originalRecipeResult(): Internal.ItemStackJS;
        get mod(): string;
        get fromToString(): string;
        get orCreateId(): ResourceLocation;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class OrCondition implements Internal.IExtendedLootCondition {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        or(arg0: (arg0: T) => boolean): (arg0: T) => boolean;
        test(arg0: Internal.LootContext): boolean;
        test(arg0: object): boolean;
        and(arg0: (arg0: T) => boolean): (arg0: T) => boolean;
        negate(): (arg0: T) => boolean;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface TickingBlockEntity {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Long2ReferenceFunction <V> implements it.unimi.dsi.fastutil.Function<number, V>, Internal.LongFunction<V> {
        getOrDefault(arg0: object, arg1: V): V;
        getOrDefault(arg0: number, arg1: V): V;
        andThenShort(arg0: Internal.Reference2ShortFunction<V>): Internal.Long2ShortFunction;
        composeByte(arg0: Internal.Byte2LongFunction): Internal.Byte2ReferenceFunction<V>;
        andThenInt(arg0: Internal.Reference2IntFunction<V>): Internal.Long2IntFunction;
        composeReference<T>(arg0: Internal.Reference2LongFunction<T>): (arg0: T) => V;
        put(arg0: number, arg1: V): V;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: V): V;
        remove(arg0: number): V;
        remove(arg0: object): V;
        defaultReturnValue(): V;
        defaultReturnValue(arg0: V): void;
        andThenDouble(arg0: Internal.Reference2DoubleFunction<V>): Internal.Long2DoubleFunction;
        andThenObject<T>(arg0: (arg0: V) => T): Internal.Long2ObjectFunction<T>;
        get(arg0: object): V;
        get(arg0: number): V;
        andThenLong(arg0: Internal.Reference2LongFunction<V>): Internal.Long2LongFunction;
        composeLong(arg0: Internal.Long2LongFunction): Internal.Long2ReferenceFunction<V>;
        andThenByte(arg0: Internal.Reference2ByteFunction<V>): Internal.Long2ByteFunction;
        andThenFloat(arg0: Internal.Reference2FloatFunction<V>): Internal.Long2FloatFunction;
        apply(arg0: number): V;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2LongFunction): Internal.Int2ReferenceFunction<V>;
        clear(): void;
        composeFloat(arg0: Internal.Float2LongFunction): Internal.Float2ReferenceFunction<V>;
        andThenChar(arg0: Internal.Reference2CharFunction<V>): Internal.Long2CharFunction;
        composeObject<T>(arg0: Internal.Object2LongFunction<T>): (arg0: T) => V;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => V;
        composeShort(arg0: Internal.Short2LongFunction): Internal.Short2ReferenceFunction<V>;
        andThenReference<T>(arg0: (arg0: V) => T): Internal.Long2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2LongFunction): Internal.Char2ReferenceFunction<V>;
        composeDouble(arg0: Internal.Double2LongFunction): Internal.Double2ReferenceFunction<V>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface DoubleBinaryOperator {
        applyAsDouble(arg0: number, arg1: number): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Range6Int extends Internal.Record {
        positiveY(): number;
        positiveZ(): number;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(o: object): boolean;
        negativeX(): number;
        toString(): string;
        notify(): void;
        negativeY(): number;
        positiveX(): number;
        negativeZ(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class StateHolder <O, S> implements Internal.FastMapStateHolder {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        redirect$zie000$getNeighborFromFastMap(ignore: Internal.Table<any, any, any>, rowKey: object, columnKey: object): object;
        notify(): void;
        replacePropertyMap(newMap: Internal.ImmutableMap<any, any>): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        get stateIndex(): number;
        get neighborTable(): Internal.Table<any, any, any>;
        set neighborTable(table: Internal.Table<any, any, any>);
        set stateMap(newValue: Internal.FastMap<any>);
        get stateMap(): Internal.FastMap<any>;
        set stateIndex(newValue: number);
        get vanillaPropertyMap(): Internal.ImmutableMap<any, any>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Kind1 <F, Mu> implements Internal.App<Mu, F> {
        group<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(arg0: Internal.App<F, T1>, arg1: Internal.App<F, T2>, arg2: Internal.App<F, T3>, arg3: Internal.App<F, T4>, arg4: Internal.App<F, T5>, arg5: Internal.App<F, T6>, arg6: Internal.App<F, T7>, arg7: Internal.App<F, T8>, arg8: Internal.App<F, T9>, arg9: Internal.App<F, T10>, arg10: Internal.App<F, T11>): Internal.Products$P11<F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>;
        group<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(arg0: Internal.App<F, T1>, arg1: Internal.App<F, T2>, arg2: Internal.App<F, T3>, arg3: Internal.App<F, T4>, arg4: Internal.App<F, T5>, arg5: Internal.App<F, T6>, arg6: Internal.App<F, T7>, arg7: Internal.App<F, T8>, arg8: Internal.App<F, T9>, arg9: Internal.App<F, T10>): Internal.Products$P10<F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>;
        group<T1, T2, T3, T4, T5, T6, T7, T8, T9>(arg0: Internal.App<F, T1>, arg1: Internal.App<F, T2>, arg2: Internal.App<F, T3>, arg3: Internal.App<F, T4>, arg4: Internal.App<F, T5>, arg5: Internal.App<F, T6>, arg6: Internal.App<F, T7>, arg7: Internal.App<F, T8>, arg8: Internal.App<F, T9>): Internal.Products$P9<F, T1, T2, T3, T4, T5, T6, T7, T8, T9>;
        group<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(arg0: Internal.App<F, T1>, arg1: Internal.App<F, T2>, arg2: Internal.App<F, T3>, arg3: Internal.App<F, T4>, arg4: Internal.App<F, T5>, arg5: Internal.App<F, T6>, arg6: Internal.App<F, T7>, arg7: Internal.App<F, T8>, arg8: Internal.App<F, T9>, arg9: Internal.App<F, T10>, arg10: Internal.App<F, T11>, arg11: Internal.App<F, T12>, arg12: Internal.App<F, T13>, arg13: Internal.App<F, T14>, arg14: Internal.App<F, T15>, arg15: Internal.App<F, T16>): Internal.Products$P16<F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>;
        group<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(arg0: Internal.App<F, T1>, arg1: Internal.App<F, T2>, arg2: Internal.App<F, T3>, arg3: Internal.App<F, T4>, arg4: Internal.App<F, T5>, arg5: Internal.App<F, T6>, arg6: Internal.App<F, T7>, arg7: Internal.App<F, T8>, arg8: Internal.App<F, T9>, arg9: Internal.App<F, T10>, arg10: Internal.App<F, T11>, arg11: Internal.App<F, T12>, arg12: Internal.App<F, T13>, arg13: Internal.App<F, T14>, arg14: Internal.App<F, T15>): Internal.Products$P15<F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>;
        group<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(arg0: Internal.App<F, T1>, arg1: Internal.App<F, T2>, arg2: Internal.App<F, T3>, arg3: Internal.App<F, T4>, arg4: Internal.App<F, T5>, arg5: Internal.App<F, T6>, arg6: Internal.App<F, T7>, arg7: Internal.App<F, T8>, arg8: Internal.App<F, T9>, arg9: Internal.App<F, T10>, arg10: Internal.App<F, T11>, arg11: Internal.App<F, T12>, arg12: Internal.App<F, T13>, arg13: Internal.App<F, T14>): Internal.Products$P14<F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>;
        group<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(arg0: Internal.App<F, T1>, arg1: Internal.App<F, T2>, arg2: Internal.App<F, T3>, arg3: Internal.App<F, T4>, arg4: Internal.App<F, T5>, arg5: Internal.App<F, T6>, arg6: Internal.App<F, T7>, arg7: Internal.App<F, T8>, arg8: Internal.App<F, T9>, arg9: Internal.App<F, T10>, arg10: Internal.App<F, T11>, arg11: Internal.App<F, T12>, arg12: Internal.App<F, T13>): Internal.Products$P13<F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>;
        group<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(arg0: Internal.App<F, T1>, arg1: Internal.App<F, T2>, arg2: Internal.App<F, T3>, arg3: Internal.App<F, T4>, arg4: Internal.App<F, T5>, arg5: Internal.App<F, T6>, arg6: Internal.App<F, T7>, arg7: Internal.App<F, T8>, arg8: Internal.App<F, T9>, arg9: Internal.App<F, T10>, arg10: Internal.App<F, T11>, arg11: Internal.App<F, T12>): Internal.Products$P12<F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>;
        group<T1, T2, T3>(arg0: Internal.App<F, T1>, arg1: Internal.App<F, T2>, arg2: Internal.App<F, T3>): Internal.Products$P3<F, T1, T2, T3>;
        group<T1, T2>(arg0: Internal.App<F, T1>, arg1: Internal.App<F, T2>): Internal.Products$P2<F, T1, T2>;
        group<T1>(arg0: Internal.App<F, T1>): Internal.Products$P1<F, T1>;
        group<T1, T2, T3, T4, T5, T6, T7, T8>(arg0: Internal.App<F, T1>, arg1: Internal.App<F, T2>, arg2: Internal.App<F, T3>, arg3: Internal.App<F, T4>, arg4: Internal.App<F, T5>, arg5: Internal.App<F, T6>, arg6: Internal.App<F, T7>, arg7: Internal.App<F, T8>): Internal.Products$P8<F, T1, T2, T3, T4, T5, T6, T7, T8>;
        group<T1, T2, T3, T4, T5, T6, T7>(arg0: Internal.App<F, T1>, arg1: Internal.App<F, T2>, arg2: Internal.App<F, T3>, arg3: Internal.App<F, T4>, arg4: Internal.App<F, T5>, arg5: Internal.App<F, T6>, arg6: Internal.App<F, T7>): Internal.Products$P7<F, T1, T2, T3, T4, T5, T6, T7>;
        group<T1, T2, T3, T4, T5, T6>(arg0: Internal.App<F, T1>, arg1: Internal.App<F, T2>, arg2: Internal.App<F, T3>, arg3: Internal.App<F, T4>, arg4: Internal.App<F, T5>, arg5: Internal.App<F, T6>): Internal.Products$P6<F, T1, T2, T3, T4, T5, T6>;
        group<T1, T2, T3, T4, T5>(arg0: Internal.App<F, T1>, arg1: Internal.App<F, T2>, arg2: Internal.App<F, T3>, arg3: Internal.App<F, T4>, arg4: Internal.App<F, T5>): Internal.Products$P5<F, T1, T2, T3, T4, T5>;
        group<T1, T2, T3, T4>(arg0: Internal.App<F, T1>, arg1: Internal.App<F, T2>, arg2: Internal.App<F, T3>, arg3: Internal.App<F, T4>): Internal.Products$P4<F, T1, T2, T3, T4>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class MultipartBlockStateGenerator {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        toJson(): Internal.JsonObject;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        part(when: string, model: string): void;
        part(when: string, consumer: (arg0: Internal.MultipartBlockStateGenerator$Part) => void): void;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ReferenceCounted {
        refCnt(): number;
        release(): boolean;
        release(arg0: number): boolean;
        retain(): Internal.ReferenceCounted;
        retain(arg0: number): Internal.ReferenceCounted;
        touch(arg0: object): Internal.ReferenceCounted;
        touch(): Internal.ReferenceCounted;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Function15 <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R> {
        curry12(): Internal.Function12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Internal.Function3<T13, T14, T15, R>>;
        curry9(): Internal.Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, Internal.Function6<T10, T11, T12, T13, T14, T15, R>>;
        curry13(): Internal.Function13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, (arg0: T14, arg1: T15) => R>;
        apply(arg0: T1, arg1: T2, arg2: T3, arg3: T4, arg4: T5, arg5: T6, arg6: T7, arg7: T8, arg8: T9, arg9: T10, arg10: T11, arg11: T12, arg12: T13, arg13: T14, arg14: T15): R;
        curry7(): Internal.Function7<T1, T2, T3, T4, T5, T6, T7, Internal.Function8<T8, T9, T10, T11, T12, T13, T14, T15, R>>;
        curry14(): Internal.Function14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, (arg0: T15) => R>;
        curry8(): Internal.Function8<T1, T2, T3, T4, T5, T6, T7, T8, Internal.Function7<T9, T10, T11, T12, T13, T14, T15, R>>;
        curry10(): Internal.Function10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Internal.Function5<T11, T12, T13, T14, T15, R>>;
        curry11(): Internal.Function11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Internal.Function4<T12, T13, T14, T15, R>>;
        curry(): (arg0: T1) => Internal.Function14<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R>;
        curry5(): Internal.Function5<T1, T2, T3, T4, T5, Internal.Function10<T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R>>;
        curry6(): Internal.Function6<T1, T2, T3, T4, T5, T6, Internal.Function9<T7, T8, T9, T10, T11, T12, T13, T14, T15, R>>;
        curry3(): Internal.Function3<T1, T2, T3, Internal.Function12<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R>>;
        curry4(): Internal.Function4<T1, T2, T3, T4, Internal.Function11<T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R>>;
        curry2(): (arg0: T1, arg1: T2) => Internal.Function13<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class Permission implements Internal.Guard, Internal.Serializable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        checkGuard(arg0: object): void;
        newPermissionCollection(): Internal.PermissionCollection;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        implies(arg0: Internal.Permission): boolean;
        notify(): void;
        get name(): string;
        get actions(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class OptionalLong {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        isEmpty(): boolean;
        isPresent(): boolean;
        orElse(arg0: number): number;
        notify(): void;
        orElseThrow<X>(arg0: () => X): number;
        orElseThrow(): number;
        static empty(): Internal.OptionalLong;
        orElseGet(arg0: Internal.LongSupplier): number;
        stream(): Internal.LongStream;
        hashCode(): number;
        ifPresentOrElse(arg0: Internal.LongConsumer, arg1: Internal.Runnable): void;
        ifPresent(arg0: Internal.LongConsumer): void;
        static of(arg0: number): Internal.OptionalLong;
        equals(arg0: object): boolean;
        toString(): string;
        get asLong(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface GeneratedClassLoader {
        defineClass(arg0: string, arg1: number[]): Internal.Class<object>;
        linkClass(arg0: Internal.Class<object>): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface LootItemConditionMixin implements Internal.ILootHandler {
        test(arg0: T): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Object2CharFunction <K> implements it.unimi.dsi.fastutil.Function<K, string>, Internal.ToIntFunction<K> {
        getOrDefault(arg0: object, arg1: string): string;
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: string): string;
        andThenShort(arg0: Internal.Char2ShortFunction): Internal.Object2ShortFunction<K>;
        removeChar(arg0: object): string;
        composeByte(arg0: Internal.Byte2ObjectFunction<K>): Internal.Byte2CharFunction;
        andThenInt(arg0: Internal.Char2IntFunction): Internal.Object2IntFunction<K>;
        composeReference<T>(arg0: (arg0: T) => K): Internal.Reference2CharFunction<T>;
        andThen<T>(arg0: (arg0: string) => T): (arg0: K) => T;
        put(arg0: K, arg1: string): string;
        put(arg0: K, arg1: string): string;
        put(arg0: object, arg1: object): object;
        remove(arg0: object): string;
        remove(arg0: object): object;
        defaultReturnValue(): string;
        defaultReturnValue(arg0: string): void;
        andThenDouble(arg0: Internal.Char2DoubleFunction): Internal.Object2DoubleFunction<K>;
        andThenObject<T>(arg0: Internal.Char2ObjectFunction<T>): (arg0: K) => T;
        get(arg0: object): object;
        get(arg0: object): string;
        andThenLong(arg0: Internal.Char2LongFunction): Internal.Object2LongFunction<K>;
        composeLong(arg0: Internal.Long2ObjectFunction<K>): Internal.Long2CharFunction;
        andThenByte(arg0: Internal.Char2ByteFunction): Internal.Object2ByteFunction<K>;
        andThenFloat(arg0: Internal.Char2FloatFunction): Internal.Object2FloatFunction<K>;
        applyAsInt(arg0: K): number;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        composeInt(arg0: Internal.Int2ObjectFunction<K>): Internal.Int2CharFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2ObjectFunction<K>): Internal.Float2CharFunction;
        andThenChar(arg0: Internal.Char2CharFunction): Internal.Object2CharFunction<K>;
        getChar(arg0: object): string;
        composeObject<T>(arg0: (arg0: T) => K): Internal.Object2CharFunction<T>;
        size(): number;
        composeShort(arg0: Internal.Short2ObjectFunction<K>): Internal.Short2CharFunction;
        andThenReference<T>(arg0: Internal.Char2ReferenceFunction<T>): (arg0: K) => T;
        composeChar(arg0: Internal.Char2ObjectFunction<K>): Internal.Char2CharFunction;
        composeDouble(arg0: Internal.Double2ObjectFunction<K>): Internal.Double2CharFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ListenerList {
        getListeners(arg0: number): Internal.IEventListener[];
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        static clearBusID(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        unregister(arg0: number, arg1: Internal.IEventListener): void;
        toString(): string;
        static unregisterAll(arg0: number, arg1: Internal.IEventListener): void;
        notify(): void;
        register(arg0: number, arg1: Internal.EventPriority, arg2: Internal.IEventListener): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class EffectRenderer {
        renderInventoryEffect(arg0: Internal.MobEffectInstance, arg1: Internal.EffectRenderingInventoryScreen<object>, arg2: Internal.PoseStack, arg3: number, arg4: number, arg5: number): void;
        shouldRenderHUD(arg0: Internal.MobEffectInstance): boolean;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        shouldRender(arg0: Internal.MobEffectInstance): boolean;
        shouldRenderInvText(arg0: Internal.MobEffectInstance): boolean;
        notify(): void;
        renderHUDEffect(arg0: Internal.MobEffectInstance, arg1: Internal.GuiComponent, arg2: Internal.PoseStack, arg3: number, arg4: number, arg5: number, arg6: number): void;
        static readonly DUMMY : Internal.EffectRenderer;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Char2FloatFunction implements it.unimi.dsi.fastutil.Function<string, number>, Internal.IntToDoubleFunction {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: string, arg1: number): number;
        applyAsDouble(arg0: number): number;
        andThenShort(arg0: Internal.Float2ShortFunction): Internal.Char2ShortFunction;
        composeByte(arg0: Internal.Byte2CharFunction): Internal.Byte2FloatFunction;
        andThenInt(arg0: Internal.Float2IntFunction): Internal.Char2IntFunction;
        composeReference<T>(arg0: Internal.Reference2CharFunction<T>): Internal.Reference2FloatFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: string) => T;
        put(arg0: object, arg1: object): object;
        put(arg0: string, arg1: number): number;
        put(arg0: string, arg1: number): number;
        remove(arg0: string): number;
        remove(arg0: object): object;
        remove(arg0: object): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Float2DoubleFunction): Internal.Char2DoubleFunction;
        andThenObject<T>(arg0: Internal.Float2ObjectFunction<T>): Internal.Char2ObjectFunction<T>;
        get(arg0: object): number;
        get(arg0: object): object;
        get(arg0: string): number;
        andThenLong(arg0: Internal.Float2LongFunction): Internal.Char2LongFunction;
        composeLong(arg0: Internal.Long2CharFunction): Internal.Long2FloatFunction;
        andThenByte(arg0: Internal.Float2ByteFunction): Internal.Char2ByteFunction;
        andThenFloat(arg0: Internal.Float2FloatFunction): Internal.Char2FloatFunction;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: string): boolean;
        composeInt(arg0: Internal.Int2CharFunction): Internal.Int2FloatFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2CharFunction): Internal.Float2FloatFunction;
        andThenChar(arg0: Internal.Float2CharFunction): Internal.Char2CharFunction;
        composeObject<T>(arg0: Internal.Object2CharFunction<T>): Internal.Object2FloatFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => string): (arg0: T) => number;
        composeShort(arg0: Internal.Short2CharFunction): Internal.Short2FloatFunction;
        andThenReference<T>(arg0: Internal.Float2ReferenceFunction<T>): Internal.Char2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2CharFunction): Internal.Char2FloatFunction;
        composeDouble(arg0: Internal.Double2CharFunction): Internal.Double2FloatFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Short2LongFunction implements it.unimi.dsi.fastutil.Function<number, number>, Internal.IntToLongFunction {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        andThenShort(arg0: Internal.Long2ShortFunction): Internal.Short2ShortFunction;
        composeByte(arg0: Internal.Byte2ShortFunction): Internal.Byte2LongFunction;
        andThenInt(arg0: Internal.Long2IntFunction): Internal.Short2IntFunction;
        composeReference<T>(arg0: Internal.Reference2ShortFunction<T>): Internal.Reference2LongFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: number) => T;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: number): number;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: object): object;
        remove(arg0: object): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Long2DoubleFunction): Internal.Short2DoubleFunction;
        andThenObject<T>(arg0: Internal.Long2ObjectFunction<T>): Internal.Short2ObjectFunction<T>;
        get(arg0: object): number;
        get(arg0: object): object;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Long2LongFunction): Internal.Short2LongFunction;
        composeLong(arg0: Internal.Long2ShortFunction): Internal.Long2LongFunction;
        andThenByte(arg0: Internal.Long2ByteFunction): Internal.Short2ByteFunction;
        andThenFloat(arg0: Internal.Long2FloatFunction): Internal.Short2FloatFunction;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2ShortFunction): Internal.Int2LongFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2ShortFunction): Internal.Float2LongFunction;
        andThenChar(arg0: Internal.Long2CharFunction): Internal.Short2CharFunction;
        applyAsLong(arg0: number): number;
        composeObject<T>(arg0: Internal.Object2ShortFunction<T>): Internal.Object2LongFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => number;
        composeShort(arg0: Internal.Short2ShortFunction): Internal.Short2LongFunction;
        andThenReference<T>(arg0: Internal.Long2ReferenceFunction<T>): Internal.Short2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2ShortFunction): Internal.Char2LongFunction;
        composeDouble(arg0: Internal.Double2ShortFunction): Internal.Double2LongFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class PoseStack implements Internal.TransformStack {
        rotate(arg0: Internal.Direction, arg1: number): Self;
        rotate(arg0: number, arg1: Internal.Direction$Axis): Self;
        translateAll(arg0: number): Self;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        scale(arg0: number, arg1: number, arg2: number): Internal.TransformStack;
        scale(arg0: number, arg1: number, arg2: number): object;
        scale(arg0: number): Self;
        notify(): void;
        translate(arg0: number, arg1: number, arg2: number): object;
        translate(arg0: number, arg1: number, arg2: number): Internal.TransformStack;
        translate(arg0: Vec3i): Self;
        translate(arg0: Vec3): Self;
        translate(arg0: Internal.Vector3f): Self;
        translateZ(arg0: number): Self;
        mulNormal(arg0: Internal.Matrix3f): Self;
        transform(arg0: Internal.PoseStack): Self;
        transform(arg0: Internal.Matrix4f, arg1: Internal.Matrix3f): Self;
        pushPose(): Internal.TransformStack;
        pushPose(): object;
        translateY(arg0: number): Self;
        hashCode(): number;
        translateX(arg0: number): Self;
        multiply(arg0: Internal.Quaternion): Internal.TransformStack;
        multiply(arg0: Internal.Quaternion): object;
        multiply(arg0: Internal.Vector3f, arg1: number): Self;
        rotateX(arg0: number): Self;
        rotateY(arg0: number): Self;
        translateBack(arg0: Vec3i): Self;
        translateBack(arg0: Vec3): Self;
        translateBack(arg0: number, arg1: number, arg2: number): Self;
        rotateToFace(arg0: Internal.Direction): Self;
        rotateZ(arg0: number): Self;
        nudge(arg0: number): Self;
        rotateCentered(arg0: Internal.Direction, arg1: number): Self;
        rotateCentered(arg0: Internal.Quaternion): Self;
        centre(): Self;
        multiplyRadians(arg0: Internal.Vector3f, arg1: number): Self;
        rotateZRadians(arg0: number): Self;
        mulPose(arg0: Internal.Matrix4f): Self;
        rotateYRadians(arg0: number): Self;
        rotateXRadians(arg0: number): Self;
        popPose(): object;
        popPose(): Internal.TransformStack;
        equals(arg0: object): boolean;
        unCentre(): Self;
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class PlayableEndimation extends Internal.Record {
        duration(): number;
        loopType(): Internal.PlayableEndimation$LoopType;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        asEndimation(): Internal.Endimation;
        location(): ResourceLocation;
        toString(): string;
        notify(): void;
        static readonly BLANK : Internal.PlayableEndimation;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Method extends Internal.Executable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        isSynthetic(): boolean;
        invoke(arg0: object, arg1: object[]): object;
        isBridge(): boolean;
        notify(): void;
        hashCode(): number;
        canAccess(arg0: object): boolean;
        toGenericString(): string;
        trySetAccessible(): boolean;
        isAccessible(): boolean;
        static setAccessible(arg0: Internal.AccessibleObject[], arg1: boolean): void;
        isVarArgs(): boolean;
        isDefault(): boolean;
        getAnnotation<T>(arg0: Internal.Class<T>): T;
        equals(arg0: object): boolean;
        toString(): string;
        static readonly PUBLIC : 0;
        static readonly DECLARED : 1;
        get name(): string;
        get parameterCount(): number;
        get genericReturnType(): Internal.Type;
        get annotatedParameterTypes(): Internal.AnnotatedType[];
        get parameterTypes(): Internal.Class<object>[];
        get genericExceptionTypes(): Internal.Type[];
        get annotatedReceiverType(): Internal.AnnotatedType;
        get defaultValue(): object;
        get declaredAnnotations(): Internal.Annotation[];
        get declaringClass(): Internal.Class<object>;
        get typeParameters(): Internal.TypeVariable<Internal.Method>[];
        get modifiers(): number;
        set accessible(arg0: boolean);
        get annotations(): Internal.Annotation[];
        get annotatedExceptionTypes(): Internal.AnnotatedType[];
        get exceptionTypes(): Internal.Class<object>[];
        get genericParameterTypes(): Internal.Type[];
        get returnType(): Internal.Class<object>;
        get parameters(): Internal.Parameter[];
        get annotatedReturnType(): Internal.AnnotatedType;
        get parameterAnnotations(): Internal.Annotation[][];
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class SpawnPlacements$Type extends Internal.Enum<Internal.SpawnPlacements$Type> implements Internal.IExtensibleEnum {
        init(): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        static valueOf(arg0: string): Internal.SpawnPlacements$Type;
        notifyAll(): void;
        static values(): Internal.SpawnPlacements$Type[];
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        hashCode(): number;
        canSpawnAt(arg0: Internal.LevelReader, arg1: BlockPos, arg2: Internal.EntityType<object>): boolean;
        equals(arg0: object): boolean;
        name(): string;
        static create(arg0: string, arg1: Internal.TriPredicate<Internal.LevelReader, BlockPos, Internal.EntityType<Internal.Mob>>): Internal.SpawnPlacements$Type;
        toString(): string;
        ordinal(): number;
        static readonly IN_LAVA : Internal.SpawnPlacements$Type;
        static readonly IN_WATER : Internal.SpawnPlacements$Type;
        static readonly ON_GROUND : Internal.SpawnPlacements$Type;
        static readonly NO_RESTRICTIONS : Internal.SpawnPlacements$Type;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class MobSpawnSettings implements Internal.MobSpawnInfoAccess {
        static create_$md$85ada3$0(arg0: number, arg1: Map<any, any>, arg2: Map<any, any>): Internal.MobSpawnSettings;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        get spawners(): Map<any, any>;
        get entityTypes(): Internal.Set<Internal.EntityType<object>>;
        get mobSpawnCosts(): Map<any, any>;
        get spawnerTypes(): Internal.Set<Internal.MobCategory>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ScheduledFuture <V> implements Internal.Delayed, java_.util.concurrent.Future<V> {
        cancel(arg0: boolean): boolean;
        isCancelled(): boolean;
        getDelay(arg0: Internal.TimeUnit): number;
        get(arg0: number, arg1: Internal.TimeUnit): V;
        get(): V;
        compareTo(arg0: T): number;
        isDone(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Module implements Internal.AnnotatedElement {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isAnnotationPresent(arg0: Internal.Class<Internal.Annotation>): boolean;
        canRead(arg0: Internal.Module): boolean;
        notifyAll(): void;
        addUses(arg0: Internal.Class<object>): Internal.Module;
        isNamed(): boolean;
        notify(): void;
        getAnnotationsByType<T>(arg0: Internal.Class<T>): T[];
        hashCode(): number;
        addReads(arg0: Internal.Module): Internal.Module;
        getResourceAsStream(arg0: string): Internal.InputStream;
        addExports(arg0: string, arg1: Internal.Module): Internal.Module;
        canUse(arg0: Internal.Class<object>): boolean;
        isOpen(arg0: string): boolean;
        isOpen(arg0: string, arg1: Internal.Module): boolean;
        getDeclaredAnnotationsByType<T>(arg0: Internal.Class<T>): T[];
        getAnnotation<T>(arg0: Internal.Class<T>): T;
        equals(arg0: object): boolean;
        isExported(arg0: string, arg1: Internal.Module): boolean;
        isExported(arg0: string): boolean;
        getDeclaredAnnotation<T>(arg0: Internal.Class<T>): T;
        toString(): string;
        addOpens(arg0: string, arg1: Internal.Module): Internal.Module;
        get descriptor(): Internal.ModuleDescriptor;
        get name(): string;
        get classLoader(): Internal.ClassLoader;
        get declaredAnnotations(): Internal.Annotation[];
        get layer(): Internal.ModuleLayer;
        get annotations(): Internal.Annotation[];
        get packages(): Internal.Set<string>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Double2CharFunction implements it.unimi.dsi.fastutil.Function<number, string>, Internal.DoubleToIntFunction {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: string): string;
        getOrDefault(arg0: number, arg1: string): string;
        andThenShort(arg0: Internal.Char2ShortFunction): Internal.Double2ShortFunction;
        composeByte(arg0: Internal.Byte2DoubleFunction): Internal.Byte2CharFunction;
        andThenInt(arg0: Internal.Char2IntFunction): Internal.Double2IntFunction;
        composeReference<T>(arg0: Internal.Reference2DoubleFunction<T>): Internal.Reference2CharFunction<T>;
        andThen<T>(arg0: (arg0: string) => T): (arg0: number) => T;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: string): string;
        put(arg0: number, arg1: string): string;
        remove(arg0: number): string;
        remove(arg0: object): object;
        remove(arg0: object): string;
        defaultReturnValue(arg0: string): void;
        defaultReturnValue(): string;
        andThenDouble(arg0: Internal.Char2DoubleFunction): Internal.Double2DoubleFunction;
        andThenObject<T>(arg0: Internal.Char2ObjectFunction<T>): Internal.Double2ObjectFunction<T>;
        get(arg0: object): string;
        get(arg0: object): object;
        get(arg0: number): string;
        andThenLong(arg0: Internal.Char2LongFunction): Internal.Double2LongFunction;
        composeLong(arg0: Internal.Long2DoubleFunction): Internal.Long2CharFunction;
        andThenByte(arg0: Internal.Char2ByteFunction): Internal.Double2ByteFunction;
        andThenFloat(arg0: Internal.Char2FloatFunction): Internal.Double2FloatFunction;
        applyAsInt(arg0: number): number;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2DoubleFunction): Internal.Int2CharFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2DoubleFunction): Internal.Float2CharFunction;
        andThenChar(arg0: Internal.Char2CharFunction): Internal.Double2CharFunction;
        composeObject<T>(arg0: Internal.Object2DoubleFunction<T>): Internal.Object2CharFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => string;
        composeShort(arg0: Internal.Short2DoubleFunction): Internal.Short2CharFunction;
        andThenReference<T>(arg0: Internal.Char2ReferenceFunction<T>): Internal.Double2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2DoubleFunction): Internal.Char2CharFunction;
        composeDouble(arg0: Internal.Double2DoubleFunction): Internal.Double2CharFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface LightListener {
        onLightUpdate(arg0: Internal.LightProvider, arg1: Internal.LightLayer, arg2: Internal.ImmutableBox): void;
        onLightPacket(arg0: Internal.LightProvider, arg1: number, arg2: number): void;
        status(): Internal.ListenerStatus;
        get volume(): Internal.ImmutableBox;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class ImmutableMultiset <E> extends Internal.ImmutableMultisetGwtSerializationDependencies<E> implements Internal.Multiset<E> {
        add(arg0: E, arg1: number): number;
        add(arg0: E): boolean;
        forEachEntry(arg0: Internal.ObjIntConsumer<E>): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        static toImmutableMultiset<E>(): Internal.Collector<E, object, Internal.ImmutableMultiset<E>>;
        static toImmutableMultiset<T, E>(arg0: (arg0: T) => E, arg1: Internal.ToIntFunction<T>): Internal.Collector<T, object, Internal.ImmutableMultiset<E>>;
        entrySet(): Internal.ImmutableSet<Internal.Multiset$Entry<E>>;
        entrySet(): Internal.Set<any>;
        forEach(arg0: (arg0: E) => void): void;
        notifyAll(): void;
        count(arg0: object): number;
        isEmpty(): boolean;
        clear(): void;
        static copyOf<E>(arg0: E[]): Internal.ImmutableMultiset<E>;
        static copyOf<E>(arg0: Internal.Iterator<E>): Internal.ImmutableMultiset<E>;
        static copyOf<E>(arg0: Internal.Iterable<E>): Internal.ImmutableMultiset<E>;
        notify(): void;
        asList(): Internal.ImmutableList<E>;
        remove(arg0: object, arg1: number): number;
        remove(arg0: object): boolean;
        contains(arg0: object): boolean;
        iterator(): Internal.Iterator<any>;
        iterator(): Internal.UnmodifiableIterator<E>;
        size(): number;
        elementSet(): Internal.ImmutableSet<E>;
        elementSet(): Internal.Set<any>;
        hashCode(): number;
        static of<E>(arg0: E, arg1: E): Internal.ImmutableMultiset<E>;
        static of<E>(arg0: E, arg1: E, arg2: E, arg3: E): Internal.ImmutableMultiset<E>;
        static of<E>(arg0: E): Internal.ImmutableMultiset<E>;
        static of<E>(): Internal.ImmutableMultiset<E>;
        static of<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E): Internal.ImmutableMultiset<E>;
        static of<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E, arg6: E[]): Internal.ImmutableMultiset<E>;
        static of<E>(arg0: E, arg1: E, arg2: E): Internal.ImmutableMultiset<E>;
        equals(arg0: object): boolean;
        toArray(): object[];
        toArray<T>(arg0: T[]): T[];
        static builder<E>(): Internal.ImmutableMultiset$Builder<E>;
        toString(): string;
        setCount(arg0: E, arg1: number): number;
        setCount(arg0: E, arg1: number, arg2: number): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ZoneRules implements Internal.Serializable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        getDaylightSavings(arg0: Internal.Instant): Internal.Duration;
        previousTransition(arg0: Internal.Instant): Internal.ZoneOffsetTransition;
        notifyAll(): void;
        getOffset(arg0: Internal.LocalDateTime): Internal.ZoneOffset;
        getOffset(arg0: Internal.Instant): Internal.ZoneOffset;
        notify(): void;
        isFixedOffset(): boolean;
        hashCode(): number;
        getTransition(arg0: Internal.LocalDateTime): Internal.ZoneOffsetTransition;
        getValidOffsets(arg0: Internal.LocalDateTime): Internal.List<Internal.ZoneOffset>;
        static of(arg0: Internal.ZoneOffset, arg1: Internal.ZoneOffset, arg2: Internal.List<Internal.ZoneOffsetTransition>, arg3: Internal.List<Internal.ZoneOffsetTransition>, arg4: Internal.List<Internal.ZoneOffsetTransitionRule>): Internal.ZoneRules;
        static of(arg0: Internal.ZoneOffset): Internal.ZoneRules;
        equals(arg0: object): boolean;
        nextTransition(arg0: Internal.Instant): Internal.ZoneOffsetTransition;
        getStandardOffset(arg0: Internal.Instant): Internal.ZoneOffset;
        toString(): string;
        isDaylightSavings(arg0: Internal.Instant): boolean;
        isValidOffset(arg0: Internal.LocalDateTime, arg1: Internal.ZoneOffset): boolean;
        get transitions(): Internal.List<Internal.ZoneOffsetTransition>;
        get transitionRules(): Internal.List<Internal.ZoneOffsetTransitionRule>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class MobEffect extends Internal.ForgeRegistryEntry<Internal.MobEffect> implements Internal.IForgeMobEffect {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        setRegistryName(arg0: string, arg1: string): V;
        is(arg0: net.minecraft.tags.Tag<Internal.MobEffect>): boolean;
        getSortOrder(arg0: Internal.MobEffectInstance): number;
        notify(): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        initializeClient(arg0: (arg0: Internal.EffectRenderer) => void): void;
        readonly delegate : () => V;
        get registryName(): ResourceLocation;
        set registryName(arg0: ResourceLocation);
        set registryName(arg0: ResourceLocation);
        set registryName(arg0: string);
        get tags(): Internal.Set<ResourceLocation>;
        get curativeItems(): Internal.List<Internal.ItemStack>;
        get effectRendererInternal(): object;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class MethodHandles$Lookup$ClassOption extends Internal.Enum<Internal.MethodHandles$Lookup$ClassOption> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(arg0: string): Internal.MethodHandles$Lookup$ClassOption;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.MethodHandles$Lookup$ClassOption[];
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly NESTMATE : Internal.MethodHandles$Lookup$ClassOption;
        static readonly STRONG : Internal.MethodHandles$Lookup$ClassOption;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ByteBufAllocator {
        directBuffer(): Internal.ByteBuf;
        directBuffer(arg0: number, arg1: number): Internal.ByteBuf;
        directBuffer(arg0: number): Internal.ByteBuf;
        isDirectBufferPooled(): boolean;
        calculateNewCapacity(arg0: number, arg1: number): number;
        compositeDirectBuffer(arg0: number): Internal.CompositeByteBuf;
        compositeDirectBuffer(): Internal.CompositeByteBuf;
        ioBuffer(): Internal.ByteBuf;
        ioBuffer(arg0: number): Internal.ByteBuf;
        ioBuffer(arg0: number, arg1: number): Internal.ByteBuf;
        compositeHeapBuffer(arg0: number): Internal.CompositeByteBuf;
        compositeHeapBuffer(): Internal.CompositeByteBuf;
        compositeBuffer(arg0: number): Internal.CompositeByteBuf;
        compositeBuffer(): Internal.CompositeByteBuf;
        buffer(): Internal.ByteBuf;
        buffer(arg0: number, arg1: number): Internal.ByteBuf;
        buffer(arg0: number): Internal.ByteBuf;
        heapBuffer(arg0: number): Internal.ByteBuf;
        heapBuffer(arg0: number, arg1: number): Internal.ByteBuf;
        heapBuffer(): Internal.ByteBuf;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface EntityInstancingController <T> {
        createInstance(arg0: Internal.MaterialManager, arg1: T): Internal.EntityInstance<T>;
        shouldSkipRender(arg0: T): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class ByteBuf implements Internal.ReferenceCounted, Internal.Comparable<Internal.ByteBuf> {
        asReadOnly(): Internal.ByteBuf;
        markReaderIndex(): Internal.ByteBuf;
        getByte(arg0: number): number;
        release(): boolean;
        release(arg0: number): boolean;
        readDoubleLE(): number;
        writeZero(arg0: number): Internal.ByteBuf;
        resetReaderIndex(): Internal.ByteBuf;
        writeFloat(arg0: number): Internal.ByteBuf;
        setLongLE(arg0: number, arg1: number): Internal.ByteBuf;
        readRetainedSlice(arg0: number): Internal.ByteBuf;
        slice(): Internal.ByteBuf;
        slice(arg0: number, arg1: number): Internal.ByteBuf;
        getMediumLE(arg0: number): number;
        setDoubleLE(arg0: number, arg1: number): Internal.ByteBuf;
        readUnsignedIntLE(): number;
        writeFloatLE(arg0: number): Internal.ByteBuf;
        readInt(): number;
        order(): Internal.ByteOrder;
        order(arg0: Internal.ByteOrder): Internal.ByteBuf;
        writeMedium(arg0: number): Internal.ByteBuf;
        resetWriterIndex(): Internal.ByteBuf;
        writableBytes(): number;
        getUnsignedShort(arg0: number): number;
        maxCapacity(): number;
        nioBufferCount(): number;
        bytesBefore(arg0: number, arg1: number): number;
        bytesBefore(arg0: number): number;
        bytesBefore(arg0: number, arg1: number, arg2: number): number;
        setInt(arg0: number, arg1: number): Internal.ByteBuf;
        getInt(arg0: number): number;
        markWriterIndex(): Internal.ByteBuf;
        isReadable(arg0: number): boolean;
        isReadable(): boolean;
        writeBoolean(arg0: boolean): Internal.ByteBuf;
        setIntLE(arg0: number, arg1: number): Internal.ByteBuf;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        writeLongLE(arg0: number): Internal.ByteBuf;
        setShortLE(arg0: number, arg1: number): Internal.ByteBuf;
        retain(arg0: number): Internal.ByteBuf;
        retain(arg0: number): Internal.ReferenceCounted;
        retain(): Internal.ByteBuf;
        retain(): Internal.ReferenceCounted;
        isWritable(arg0: number): boolean;
        isWritable(): boolean;
        notify(): void;
        readChar(): string;
        hasMemoryAddress(): boolean;
        capacity(): number;
        capacity(arg0: number): Internal.ByteBuf;
        readCharSequence(arg0: number, arg1: Internal.Charset): Internal.CharSequence;
        isReadOnly(): boolean;
        readUnsignedShortLE(): number;
        readDouble(): number;
        readFloat(): number;
        getLongLE(arg0: number): number;
        getBoolean(arg0: number): boolean;
        copy(arg0: number, arg1: number): Internal.ByteBuf;
        copy(): Internal.ByteBuf;
        readShortLE(): number;
        readUnsignedMedium(): number;
        ensureWritable(arg0: number): Internal.ByteBuf;
        ensureWritable(arg0: number, arg1: boolean): number;
        writeInt(arg0: number): Internal.ByteBuf;
        readFloatLE(): number;
        getDoubleLE(arg0: number): number;
        hasArray(): boolean;
        memoryAddress(): number;
        maxFastWritableBytes(): number;
        readableBytes(): number;
        readSlice(arg0: number): Internal.ByteBuf;
        getIntLE(arg0: number): number;
        forEachByteDesc(arg0: number, arg1: number, arg2: Internal.ByteProcessor): number;
        forEachByteDesc(arg0: Internal.ByteProcessor): number;
        nioBuffers(arg0: number, arg1: number): Internal.ByteBuffer[];
        nioBuffers(): Internal.ByteBuffer[];
        skipBytes(arg0: number): Internal.ByteBuf;
        getLong(arg0: number): number;
        readLong(): number;
        readShort(): number;
        equals(arg0: object): boolean;
        setZero(arg0: number, arg1: number): Internal.ByteBuf;
        getUnsignedMedium(arg0: number): number;
        readBytes(arg0: Internal.OutputStream, arg1: number): Internal.ByteBuf;
        readBytes(arg0: Internal.FileChannel, arg1: number, arg2: number): number;
        readBytes(arg0: number[]): Internal.ByteBuf;
        readBytes(arg0: Internal.ByteBuf): Internal.ByteBuf;
        readBytes(arg0: number): Internal.ByteBuf;
        readBytes(arg0: Internal.ByteBuf, arg1: number, arg2: number): Internal.ByteBuf;
        readBytes(arg0: Internal.ByteBuf, arg1: number): Internal.ByteBuf;
        readBytes(arg0: Internal.GatheringByteChannel, arg1: number): number;
        readBytes(arg0: Internal.ByteBuffer): Internal.ByteBuf;
        readBytes(arg0: number[], arg1: number, arg2: number): Internal.ByteBuf;
        readBoolean(): boolean;
        toString(arg0: number, arg1: number, arg2: Internal.Charset): string;
        toString(arg0: Internal.Charset): string;
        toString(): string;
        retainedSlice(): Internal.ByteBuf;
        retainedSlice(arg0: number, arg1: number): Internal.ByteBuf;
        readMediumLE(): number;
        setMedium(arg0: number, arg1: number): Internal.ByteBuf;
        isDirect(): boolean;
        setBoolean(arg0: number, arg1: boolean): Internal.ByteBuf;
        getFloatLE(arg0: number): number;
        readerIndex(): number;
        readerIndex(arg0: number): Internal.ByteBuf;
        getCharSequence(arg0: number, arg1: number, arg2: Internal.Charset): Internal.CharSequence;
        setShort(arg0: number, arg1: number): Internal.ByteBuf;
        compareTo(arg0: Internal.ByteBuf): number;
        compareTo(arg0: object): number;
        getBytes(arg0: number, arg1: Internal.ByteBuf): Internal.ByteBuf;
        getBytes(arg0: number, arg1: Internal.ByteBuf, arg2: number): Internal.ByteBuf;
        getBytes(arg0: number, arg1: Internal.ByteBuf, arg2: number, arg3: number): Internal.ByteBuf;
        getBytes(arg0: number, arg1: Internal.FileChannel, arg2: number, arg3: number): number;
        getBytes(arg0: number, arg1: Internal.GatheringByteChannel, arg2: number): number;
        getBytes(arg0: number, arg1: Internal.OutputStream, arg2: number): Internal.ByteBuf;
        getBytes(arg0: number, arg1: number[]): Internal.ByteBuf;
        getBytes(arg0: number, arg1: number[], arg2: number, arg3: number): Internal.ByteBuf;
        getBytes(arg0: number, arg1: Internal.ByteBuffer): Internal.ByteBuf;
        unwrap(): Internal.ByteBuf;
        setDouble(arg0: number, arg1: number): Internal.ByteBuf;
        setChar(arg0: number, arg1: number): Internal.ByteBuf;
        refCnt(): number;
        getUnsignedIntLE(arg0: number): number;
        getUnsignedInt(arg0: number): number;
        setFloatLE(arg0: number, arg1: number): Internal.ByteBuf;
        indexOf(arg0: number, arg1: number, arg2: number): number;
        writeByte(arg0: number): Internal.ByteBuf;
        nioBuffer(): Internal.ByteBuffer;
        nioBuffer(arg0: number, arg1: number): Internal.ByteBuffer;
        touch(): Internal.ByteBuf;
        touch(): Internal.ReferenceCounted;
        touch(arg0: object): Internal.ByteBuf;
        touch(arg0: object): Internal.ReferenceCounted;
        discardSomeReadBytes(): Internal.ByteBuf;
        duplicate(): Internal.ByteBuf;
        writerIndex(arg0: number): Internal.ByteBuf;
        writerIndex(): number;
        readUnsignedInt(): number;
        getUnsignedShortLE(arg0: number): number;
        writeCharSequence(arg0: Internal.CharSequence, arg1: Internal.Charset): number;
        retainedDuplicate(): Internal.ByteBuf;
        getChar(arg0: number): string;
        setLong(arg0: number, arg1: number): Internal.ByteBuf;
        readMedium(): number;
        writeBytes(arg0: Internal.ByteBuf, arg1: number, arg2: number): Internal.ByteBuf;
        writeBytes(arg0: Internal.ByteBuf): Internal.ByteBuf;
        writeBytes(arg0: number[]): Internal.ByteBuf;
        writeBytes(arg0: Internal.ByteBuf, arg1: number): Internal.ByteBuf;
        writeBytes(arg0: Internal.FileChannel, arg1: number, arg2: number): number;
        writeBytes(arg0: Internal.ScatteringByteChannel, arg1: number): number;
        writeBytes(arg0: number[], arg1: number, arg2: number): Internal.ByteBuf;
        writeBytes(arg0: Internal.ByteBuffer): Internal.ByteBuf;
        writeBytes(arg0: Internal.InputStream, arg1: number): number;
        forEachByte(arg0: Internal.ByteProcessor): number;
        forEachByte(arg0: number, arg1: number, arg2: Internal.ByteProcessor): number;
        setIndex(arg0: number, arg1: number): Internal.ByteBuf;
        writeShort(arg0: number): Internal.ByteBuf;
        getShortLE(arg0: number): number;
        alloc(): Internal.ByteBufAllocator;
        getMedium(arg0: number): number;
        readUnsignedShort(): number;
        setByte(arg0: number, arg1: number): Internal.ByteBuf;
        maxWritableBytes(): number;
        writeShortLE(arg0: number): Internal.ByteBuf;
        notifyAll(): void;
        getDouble(arg0: number): number;
        getFloat(arg0: number): number;
        writeLong(arg0: number): Internal.ByteBuf;
        writeIntLE(arg0: number): Internal.ByteBuf;
        array(): number[];
        setCharSequence(arg0: number, arg1: Internal.CharSequence, arg2: Internal.Charset): number;
        hashCode(): number;
        internalNioBuffer(arg0: number, arg1: number): Internal.ByteBuffer;
        arrayOffset(): number;
        readIntLE(): number;
        setMediumLE(arg0: number, arg1: number): Internal.ByteBuf;
        readUnsignedByte(): number;
        readLongLE(): number;
        readUnsignedMediumLE(): number;
        writeDouble(arg0: number): Internal.ByteBuf;
        setBytes(arg0: number, arg1: Internal.FileChannel, arg2: number, arg3: number): number;
        setBytes(arg0: number, arg1: Internal.ByteBuffer): Internal.ByteBuf;
        setBytes(arg0: number, arg1: Internal.ByteBuf, arg2: number): Internal.ByteBuf;
        setBytes(arg0: number, arg1: Internal.ByteBuf): Internal.ByteBuf;
        setBytes(arg0: number, arg1: number[], arg2: number, arg3: number): Internal.ByteBuf;
        setBytes(arg0: number, arg1: number[]): Internal.ByteBuf;
        setBytes(arg0: number, arg1: Internal.ByteBuf, arg2: number, arg3: number): Internal.ByteBuf;
        setBytes(arg0: number, arg1: Internal.ScatteringByteChannel, arg2: number): number;
        setBytes(arg0: number, arg1: Internal.InputStream, arg2: number): number;
        setFloat(arg0: number, arg1: number): Internal.ByteBuf;
        getShort(arg0: number): number;
        writeMediumLE(arg0: number): Internal.ByteBuf;
        clear(): Internal.ByteBuf;
        getUnsignedByte(arg0: number): number;
        discardReadBytes(): Internal.ByteBuf;
        writeChar(arg0: number): Internal.ByteBuf;
        writeDoubleLE(arg0: number): Internal.ByteBuf;
        isContiguous(): boolean;
        getUnsignedMediumLE(arg0: number): number;
        readByte(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface WatchEvent <T> {
        kind(): Internal.WatchEvent$Kind<T>;
        count(): number;
        context(): T;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface TickContainerAccess <T> implements Internal.TickAccess<T> {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ListIterator <E> implements Internal.Iterator<E> {
        next(): E;
        add(arg0: E): void;
        set(arg0: E): void;
        previous(): E;
        hasPrevious(): boolean;
        hasNext(): boolean;
        nextIndex(): number;
        previousIndex(): number;
        remove(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IForgeFriendlyByteBuf {
        readRegistryIdSafe<T>(arg0: Internal.Class<T>): T;
        readRegistryId<T>(): T;
        readFluidStack(): Internal.FluidStack;
        writeRegistryId<T>(arg0: T): void;
        readRegistryIdUnsafe<T>(arg0: Internal.IForgeRegistry<T>): T;
        writeFluidStack(arg0: Internal.FluidStack): void;
        writeRegistryIdUnsafe(arg0: Internal.IForgeRegistry<object>, arg1: ResourceLocation): void;
        writeRegistryIdUnsafe<T>(arg0: Internal.IForgeRegistry<T>, arg1: T): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class MinMaxBounds <T> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ClientPlayerJS extends Internal.PlayerJS<Internal.Player> {
        sendData(channel: string, data: Internal.CompoundTag): void;
        isOnScoreboardTeam(teamID: string): boolean;
        isLiving(): boolean;
        isSprinting(): boolean;
        paint(tag: Internal.CompoundTag): void;
        runCommandSilent(command: string): number;
        getDistanceSq(pos: BlockPos): number;
        getDistanceSq(x: number, y: number, z: number): number;
        isBoss(): boolean;
        isGlowing(): boolean;
        addFood(f: number, m: number): void;
        give(item: Internal.ItemStackJS): void;
        setMotion(x: number, y: number, z: number): void;
        setRotation(yaw: number, pitch: number): void;
        isMiningBlock(): boolean;
        isSpectator(): boolean;
        isOnSameTeam(e: Internal.EntityJS): boolean;
        isAnimal(): boolean;
        addExhaustion(exhaustion: number): void;
        addMotion(x: number, y: number, z: number): void;
        isFake(): boolean;
        isSelf(): boolean;
        isInvisible(): boolean;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isUnderWater(): boolean;
        getHeldItem(hand: Hand): Internal.ItemStackJS;
        getEquipment(slot: EquipmentSlot): Internal.ItemStackJS;
        notify(): void;
        damageHeldItem(hand: Hand, amount: number): void;
        damageHeldItem(): void;
        removePassengers(): void;
        attack(hp: number): void;
        attack(source: string, hp: number): void;
        isOnLadder(): boolean;
        isUndead(): boolean;
        playSound(id: Internal.SoundEvent): void;
        playSound(id: Internal.SoundEvent, volume: number, pitch: number): void;
        boostElytraFlight(): void;
        getDistance(x: number, y: number, z: number): number;
        getDistance(pos: BlockPos): number;
        isSwimming(): boolean;
        mergeFullNBT(tag: Internal.CompoundTag): Internal.EntityJS;
        kill(): void;
        setPositionAndRotation(x: number, y: number, z: number, yaw: number, pitch: number): void;
        isMonster(): boolean;
        equals(arg0: object): boolean;
        addItemCooldown(item: Internal.Item, ticks: number): void;
        isOnGround(): boolean;
        toString(): string;
        isSilent(): boolean;
        isPassenger(e: Internal.EntityJS): boolean;
        sendInventoryUpdate(): void;
        tell(message: Internal.Component): void;
        isWaterCreature(): boolean;
        setPosition(x: number, y: number, z: number): void;
        closeInventory(): void;
        extinguish(): void;
        isChild(): boolean;
        setEquipment(slot: EquipmentSlot, item: Internal.ItemStackJS): void;
        giveInHand(item: Internal.ItemStackJS): void;
        isHoldingInAnyHand(ingredient: object): boolean;
        isCreativeMode(): boolean;
        damageEquipment(slot: EquipmentSlot): void;
        damageEquipment(slot: EquipmentSlot, amount: number): void;
        isAlive(): boolean;
        setHeldItem(hand: Hand, item: Internal.ItemStackJS): void;
        isPlayer(): boolean;
        isCrouching(): boolean;
        notifyAll(): void;
        addXPLevels(l: number): void;
        hashCode(): number;
        isFrame(): boolean;
        heal(hp: number): void;
        startRiding(e: Internal.EntityJS, force: boolean): boolean;
        runCommand(command: string): number;
        addXP(xp: number): void;
        isElytraFlying(): boolean;
        isInWater(): boolean;
        dismountRidingEntity(): void;
        isSleeping(): boolean;
        isAmbientCreature(): boolean;
        swingArm(hand: Hand): void;
        rayTrace(distance: number): Internal.RayTraceResultJS;
        rayTrace(): Internal.RayTraceResultJS;
        isInvulnerable(): boolean;
        canEntityBeSeen(entity: Internal.LivingEntityJS): boolean;
        spawn(): void;
        isPeacefulCreature(): boolean;
        readonly persistentData : Internal.CompoundTag;
        readonly minecraftPlayer : E;
        readonly minecraftEntity : Internal.Entity;
        readonly minecraftLivingEntity : Internal.LivingEntity;
        get xpLevel(): number;
        get lastAttackedEntity(): Internal.LivingEntityJS;
        set y(y: number);
        set x(x: number);
        get item(): Internal.ItemStackJS;
        get revengeTarget(): Internal.LivingEntityJS;
        get offHandItem(): Internal.ItemStackJS;
        set glowing(glowing: boolean);
        set z(z: number);
        set xpLevel(l: number);
        get hasCustomName(): boolean;
        set invisible(invisible: boolean);
        get idleTime(): number;
        get movementSpeed(): number;
        set selectedSlot(index: number);
        get horizontalFacing(): Internal.Direction;
        set legsArmorItem(item: Internal.ItemStackJS);
        get health(): number;
        get server(): Internal.ServerJS;
        set feetArmorItem(item: Internal.ItemStackJS);
        set maxHealth(hp: number);
        get profile(): Internal.GameProfile;
        set absorptionAmount(amount: number);
        get displayName(): Internal.Text;
        get type(): string;
        get xp(): number;
        set customNameAlwaysVisible(b: boolean);
        set offHandItem(item: Internal.ItemStackJS);
        get foodLevel(): number;
        get maxHealth(): number;
        get eyeHeight(): number;
        get fallDistance(): number;
        set airSupply(air: number);
        set onFire(seconds: number);
        get inventory(): Internal.InventoryJS;
        get data(): Internal.AttachedData;
        get lastDamageSource(): Internal.DamageSourceJS;
        set statusMessage(message: Internal.Component);
        get reachDistance(): number;
        get customName(): Internal.Text;
        get stepHeight(): number;
        get ridingEntity(): Internal.EntityJS;
        get level(): Internal.LevelJS;
        get pitch(): number;
        get passengers(): Internal.EntityArrayList;
        get lastAttackedEntityTime(): number;
        set pitch(pitch: number);
        get facing(): Internal.Direction;
        set xp(xp: number);
        get maxAirSupply(): number;
        get recursivePassengers(): Internal.EntityArrayList;
        get nbt(): Internal.CompoundTag;
        set fallDistance(fallDistance: number);
        get name(): Internal.Text;
        get feetArmorItem(): Internal.ItemStackJS;
        set customName(name: Internal.Component);
        set mainHandItem(item: Internal.ItemStackJS);
        set stepHeight(stepHeight: number);
        get teamId(): string;
        set noClip(noClip: boolean);
        set position(block: Internal.BlockContainerJS);
        set invulnerable(invulnerable: boolean);
        set revengeTarget(target: Internal.LivingEntityJS);
        set movementSpeed(speed: number);
        get airSupply(): number;
        get legsArmorItem(): Internal.ItemStackJS;
        set fullNBT(nbt: Internal.CompoundTag);
        get attackingEntity(): Internal.LivingEntityJS;
        set yaw(yaw: number);
        get fullNBT(): Internal.CompoundTag;
        get noClip(): boolean;
        get yaw(): number;
        get headArmorItem(): Internal.ItemStackJS;
        set noGravity(noGravity: boolean);
        set mouseItem(item: Internal.ItemStackJS);
        get revengeTimer(): number;
        get stats(): Internal.PlayerStatsJS;
        get absorptionAmount(): number;
        get id(): Internal.UUID;
        get ticksExisted(): number;
        get openInventory(): Internal.AbstractContainerMenu;
        get stages(): Internal.Stages;
        set silent(isSilent: boolean);
        get chestArmorItem(): Internal.ItemStackJS;
        set chestArmorItem(item: Internal.ItemStackJS);
        get customNameAlwaysVisible(): boolean;
        get mainHandItem(): Internal.ItemStackJS;
        set health(hp: number);
        set motionZ(z: number);
        set motionY(y: number);
        get block(): Internal.BlockContainerJS;
        set motionX(x: number);
        get potionEffects(): Internal.EntityPotionEffectsJS;
        set headArmorItem(item: Internal.ItemStackJS);
        get selectedSlot(): number;
        get x(): number;
        get y(): number;
        get z(): number;
        get mouseItem(): Internal.ItemStackJS;
        set foodLevel(foodLevel: number);
        get motionZ(): number;
        get motionX(): number;
        get noGravity(): boolean;
        get motionY(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IForgeMobEffectInstance {
        writeCurativeItems(arg0: Internal.CompoundTag): void;
        addCurativeItem(arg0: Internal.ItemStack): void;
        isCurativeItem(arg0: Internal.ItemStack): boolean;
        set curativeItems(arg0: Internal.List<Internal.ItemStack>);
        get curativeItems(): Internal.List<Internal.ItemStack>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface TemporalAmount {
        subtractFrom(arg0: Internal.Temporal): Internal.Temporal;
        get(arg0: Internal.TemporalUnit): number;
        addTo(arg0: Internal.Temporal): Internal.Temporal;
        get units(): Internal.List<Internal.TemporalUnit>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class Locale$IsoCountryCode extends Internal.Enum<Internal.Locale$IsoCountryCode> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(arg0: string): Internal.Locale$IsoCountryCode;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.Locale$IsoCountryCode[];
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly PART3 : Internal.Locale$IsoCountryCode;
        static readonly PART1_ALPHA2 : Internal.Locale$IsoCountryCode;
        static readonly PART1_ALPHA3 : Internal.Locale$IsoCountryCode;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ParticleOptions {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface WatchService implements Internal.Closeable {
        take(): Internal.WatchKey;
        poll(arg0: number, arg1: Internal.TimeUnit): Internal.WatchKey;
        poll(): Internal.WatchKey;
        close(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class LunarEvent {
        onBlockTick(): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        onBlockItemDrop(arg0: Internal.ServerLevel, arg1: Internal.ItemStack): void;
        notifyAll(): void;
        notify(): void;
        getSpawnMultiplierForMonsterCategory(arg0: Internal.MobCategory): number;
        setLunarEventClient(arg0: Internal.LunarEventClient<object>, arg1: string): Internal.LunarEventClient<object>;
        livingEntityTick(arg0: Internal.LivingEntity, arg1: Internal.Level): void;
        codec(): Internal.Codec<Internal.LunarEvent>;
        hashCode(): number;
        equals(arg0: object): boolean;
        endNotification(): Internal.LunarTextComponents$Notification;
        toString(): string;
        blockSleeping(): boolean;
        startNotification(): Internal.LunarTextComponents$Notification;
        static readonly CODEC : Internal.Codec<Internal.LunarEvent>;
        get key(): string;
        get chance(): number;
        get client(): Internal.LunarEventClient<object>;
        get textComponents(): Internal.LunarTextComponents;
        get clientSettings(): Internal.LunarEventClientSettings;
        set clientSettings(arg0: Internal.LunarEventClientSettings);
        get minNumberOfNightsBetween(): number;
        get lunarSpawner(): Internal.LunarMobSpawnInfo;
        get validMoonPhases(): Internal.Set<number>;
        set key(arg0: string);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Hash {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class LogicalSide extends Internal.Enum<Internal.LogicalSide> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isServer(): boolean;
        hashCode(): number;
        static valueOf(arg0: string): Internal.LogicalSide;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.LogicalSide[];
        name(): string;
        toString(): string;
        isClient(): boolean;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly SERVER : Internal.LogicalSide;
        static readonly CLIENT : Internal.LogicalSide;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ConstProperties {
        defineConst(arg0: string, arg1: Internal.Scriptable): void;
        isConst(arg0: string): boolean;
        putConst(arg0: string, arg1: Internal.Scriptable, arg2: object): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ItemAccessor {
        set category(arg0: Internal.CreativeModeTab);
        get category(): Internal.CreativeModeTab;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Translate <Self> {
        translateZ(arg0: number): Self;
        translateAll(arg0: number): Self;
        translateY(arg0: number): Self;
        translateX(arg0: number): Self;
        centre(): Self;
        unCentre(): Self;
        translateBack(arg0: Vec3i): Self;
        translateBack(arg0: Vec3): Self;
        translateBack(arg0: number, arg1: number, arg2: number): Self;
        translate(arg0: Vec3i): Self;
        translate(arg0: Vec3): Self;
        translate(arg0: Internal.Vector3f): Self;
        translate(arg0: number, arg1: number, arg2: number): Self;
        nudge(arg0: number): Self;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Model {
        size(): number;
        writeInto(arg0: Internal.ByteBuffer): void;
        name(): string;
        vertexCount(): number;
        createEBO(): Internal.ElementBuffer;
        empty(): boolean;
        get reader(): Internal.VertexList;
        get type(): Internal.VertexType;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Object2ReferenceFunction <K, V> implements it.unimi.dsi.fastutil.Function<K, V> {
        getOrDefault(arg0: object, arg1: V): V;
        andThenShort(arg0: Internal.Reference2ShortFunction<V>): Internal.Object2ShortFunction<K>;
        composeByte(arg0: Internal.Byte2ObjectFunction<K>): Internal.Byte2ReferenceFunction<V>;
        andThenInt(arg0: Internal.Reference2IntFunction<V>): Internal.Object2IntFunction<K>;
        composeReference<T>(arg0: (arg0: T) => K): (arg0: T) => V;
        put(arg0: K, arg1: V): V;
        remove(arg0: object): V;
        defaultReturnValue(): V;
        defaultReturnValue(arg0: V): void;
        andThenDouble(arg0: Internal.Reference2DoubleFunction<V>): Internal.Object2DoubleFunction<K>;
        andThenObject<T>(arg0: (arg0: V) => T): (arg0: K) => T;
        get(arg0: object): V;
        andThenLong(arg0: Internal.Reference2LongFunction<V>): Internal.Object2LongFunction<K>;
        composeLong(arg0: Internal.Long2ObjectFunction<K>): Internal.Long2ReferenceFunction<V>;
        andThenByte(arg0: Internal.Reference2ByteFunction<V>): Internal.Object2ByteFunction<K>;
        andThenFloat(arg0: Internal.Reference2FloatFunction<V>): Internal.Object2FloatFunction<K>;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        composeInt(arg0: Internal.Int2ObjectFunction<K>): Internal.Int2ReferenceFunction<V>;
        clear(): void;
        composeFloat(arg0: Internal.Float2ObjectFunction<K>): Internal.Float2ReferenceFunction<V>;
        andThenChar(arg0: Internal.Reference2CharFunction<V>): Internal.Object2CharFunction<K>;
        composeObject<T>(arg0: (arg0: T) => K): (arg0: T) => V;
        size(): number;
        composeShort(arg0: Internal.Short2ObjectFunction<K>): Internal.Short2ReferenceFunction<V>;
        andThenReference<T>(arg0: (arg0: V) => T): (arg0: K) => T;
        composeChar(arg0: Internal.Char2ObjectFunction<K>): Internal.Char2ReferenceFunction<V>;
        composeDouble(arg0: Internal.Double2ObjectFunction<K>): Internal.Double2ReferenceFunction<V>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Multiset$Entry <E> {
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        get element(): E;
        get count(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface MetricsRecorder {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class BlockState extends Internal.BlockBehaviour$BlockStateBase implements Internal.IForgeBlockState {
        rotate(arg0: Internal.LevelAccessor, arg1: BlockPos, arg2: Internal.Rotation): Internal.BlockState;
        getStateAtViewpoint(arg0: Internal.BlockGetter, arg1: BlockPos, arg2: Vec3): Internal.BlockState;
        onBlockExploded(arg0: Internal.Level, arg1: BlockPos, arg2: Internal.Explosion): void;
        getBedDirection(arg0: Internal.LevelReader, arg1: BlockPos): Internal.Direction;
        isBed(arg0: Internal.BlockGetter, arg1: BlockPos, arg2: Internal.LivingEntity): boolean;
        canHarvestBlock(arg0: Internal.BlockGetter, arg1: BlockPos, arg2: Internal.Player): boolean;
        handler$zii000$cacheStateHead(ci: Internal.CallbackInfo): void;
        replacePropertyMap(newMap: Internal.ImmutableMap<any, any>): void;
        isLadder(arg0: Internal.LevelReader, arg1: BlockPos, arg2: Internal.LivingEntity): boolean;
        shouldDisplayFluidOverlay(arg0: Internal.BlockAndTintGetter, arg1: BlockPos, arg2: Internal.FluidState): boolean;
        onNeighborChange(arg0: Internal.LevelReader, arg1: BlockPos, arg2: BlockPos): void;
        canStickTo(arg0: Internal.BlockState): boolean;
        getWeakChanges(arg0: Internal.LevelReader, arg1: BlockPos): boolean;
        canEntityDestroy(arg0: Internal.BlockGetter, arg1: BlockPos, arg2: Internal.Entity): boolean;
        isBurning(arg0: Internal.BlockGetter, arg1: BlockPos): boolean;
        getFriction(arg0: Internal.LevelReader, arg1: BlockPos, arg2: Internal.Entity): number;
        handler$zii000$cacheStateTail(ci: Internal.CallbackInfo): void;
        isValidSpawn(arg0: Internal.LevelReader, arg1: BlockPos, arg2: Internal.SpawnPlacements$Type, arg3: Internal.EntityType<object>): boolean;
        isPortalFrame(arg0: Internal.BlockGetter, arg1: BlockPos): boolean;
        getExplosionResistance(arg0: Internal.BlockGetter, arg1: BlockPos, arg2: Internal.Explosion): number;
        isScaffolding(arg0: Internal.LivingEntity): boolean;
        canSustainPlant(arg0: Internal.BlockGetter, arg1: BlockPos, arg2: Internal.Direction, arg3: Internal.IPlantable): boolean;
        redirect$zie000$getNeighborFromFastMap(ignore: Internal.Table<any, any, any>, rowKey: object, columnKey: object): object;
        canDropFromExplosion(arg0: Internal.BlockGetter, arg1: BlockPos, arg2: Internal.Explosion): boolean;
        canRedstoneConnectTo(arg0: Internal.BlockGetter, arg1: BlockPos, arg2: Internal.Direction): boolean;
        isStickyBlock(): boolean;
        isFertile(arg0: Internal.BlockGetter, arg1: BlockPos): boolean;
        isSlimeBlock(): boolean;
        getFireSpreadSpeed(arg0: Internal.BlockGetter, arg1: BlockPos, arg2: Internal.Direction): number;
        getToolModifiedState(arg0: Internal.Level, arg1: BlockPos, arg2: Internal.Player, arg3: Internal.ItemStack, arg4: Internal.ToolAction): Internal.BlockState;
        getBeaconColorMultiplier(arg0: Internal.LevelReader, arg1: BlockPos, arg2: BlockPos): number[];
        handler$bnd000$initLightAccessState(arg0: Internal.CallbackInfo): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        getExpDrop(arg0: Internal.LevelReader, arg1: BlockPos, arg2: number, arg3: number): number;
        isConduitFrame(arg0: Internal.LevelReader, arg1: BlockPos, arg2: BlockPos): boolean;
        notifyAll(): void;
        getLightEmission(arg0: Internal.BlockGetter, arg1: BlockPos): number;
        onDestroyedByPlayer(arg0: Internal.Level, arg1: BlockPos, arg2: Internal.Player, arg3: boolean, arg4: Internal.FluidState): boolean;
        shouldCheckWeakPower(arg0: Internal.LevelReader, arg1: BlockPos, arg2: Internal.Direction): boolean;
        collisionExtendsVertically(arg0: Internal.BlockGetter, arg1: BlockPos, arg2: Internal.Entity): boolean;
        notify(): void;
        addLandingEffects(arg0: Internal.ServerLevel, arg1: BlockPos, arg2: Internal.BlockState, arg3: Internal.LivingEntity, arg4: number): boolean;
        getSoundType(arg0: Internal.LevelReader, arg1: BlockPos, arg2: Internal.Entity): Internal.SoundType;
        hashCode(): number;
        addRunningEffects(arg0: Internal.Level, arg1: BlockPos, arg2: Internal.Entity): boolean;
        getCloneItemStack(arg0: Internal.HitResult, arg1: Internal.BlockGetter, arg2: BlockPos, arg3: Internal.Player): Internal.ItemStack;
        isFlammable(arg0: Internal.BlockGetter, arg1: BlockPos, arg2: Internal.Direction): boolean;
        getBlockPathType(arg0: Internal.BlockGetter, arg1: BlockPos): Internal.BlockPathTypes;
        getBlockPathType(arg0: Internal.BlockGetter, arg1: BlockPos, arg2: Internal.Mob): Internal.BlockPathTypes;
        onCaughtFire(arg0: Internal.Level, arg1: BlockPos, arg2: Internal.Direction, arg3: Internal.LivingEntity): void;
        getEnchantPowerBonus(arg0: Internal.LevelReader, arg1: BlockPos): number;
        setBedOccupied(arg0: Internal.Level, arg1: BlockPos, arg2: Internal.LivingEntity, arg3: boolean): void;
        isFireSource(arg0: Internal.LevelReader, arg1: BlockPos, arg2: Internal.Direction): boolean;
        isConditionallyFullOpaque(): boolean;
        getRespawnPosition(arg0: Internal.EntityType<object>, arg1: Internal.LevelReader, arg2: BlockPos, arg3: number, arg4: Internal.LivingEntity): Internal.Optional<Vec3>;
        equals(arg0: object): boolean;
        toString(): string;
        getFlammability(arg0: Internal.BlockGetter, arg1: BlockPos, arg2: Internal.Direction): number;
        handler$zko000$onBlockCollision(arg0: Internal.Level, arg1: BlockPos, arg2: Internal.Entity, arg3: Internal.CallbackInfo): void;
        get neighborTable(): Internal.Table<any, any, any>;
        get opacityIfCached(): number;
        set requiresToolKJS(arg0: boolean);
        set materialKJS(arg0: net.minecraft.world.level.material.Material);
        set destroySpeedKJS(arg0: number);
        get neighborPathNodeType(): Internal.BlockPathTypes;
        set lightEmissionKJS(arg0: number);
        get pathNodeType(): Internal.BlockPathTypes;
        set neighborTable(table: Internal.Table<any, any, any>);
        set stateMap(newValue: Internal.FastMap<any>);
        get stateIndex(): number;
        set stateIndex(newValue: number);
        get vanillaPropertyMap(): Internal.ImmutableMap<any, any>;
        get stateMap(): Internal.FastMap<any>;
        get allFlags(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface CollisionGetter implements Internal.BlockGetter {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Thread$UncaughtExceptionHandler {
        uncaughtException(arg0: Internal.Thread, arg1: Internal.Throwable): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Function11 <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R> {
        curry9(): Internal.Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, (arg0: T10, arg1: T11) => R>;
        apply(arg0: T1, arg1: T2, arg2: T3, arg3: T4, arg4: T5, arg5: T6, arg6: T7, arg7: T8, arg8: T9, arg9: T10, arg10: T11): R;
        curry7(): Internal.Function7<T1, T2, T3, T4, T5, T6, T7, Internal.Function4<T8, T9, T10, T11, R>>;
        curry8(): Internal.Function8<T1, T2, T3, T4, T5, T6, T7, T8, Internal.Function3<T9, T10, T11, R>>;
        curry5(): Internal.Function5<T1, T2, T3, T4, T5, Internal.Function6<T6, T7, T8, T9, T10, T11, R>>;
        curry6(): Internal.Function6<T1, T2, T3, T4, T5, T6, Internal.Function5<T7, T8, T9, T10, T11, R>>;
        curry10(): Internal.Function10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, (arg0: T11) => R>;
        curry3(): Internal.Function3<T1, T2, T3, Internal.Function8<T4, T5, T6, T7, T8, T9, T10, T11, R>>;
        curry4(): Internal.Function4<T1, T2, T3, T4, Internal.Function7<T5, T6, T7, T8, T9, T10, T11, R>>;
        curry2(): (arg0: T1, arg1: T2) => Internal.Function9<T3, T4, T5, T6, T7, T8, T9, T10, T11, R>;
        curry(): (arg0: T1) => Internal.Function10<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Codec <A> implements Internal.Encoder<A>, Internal.Decoder<A> {
        flatComapMap<S>(arg0: (arg0: A) => S, arg1: (arg0: S) => Internal.DataResult<A>): Internal.Codec<S>;
        dispatch<E>(arg0: (arg0: E) => A, arg1: (arg0: A) => Internal.Codec<E>): Internal.Codec<E>;
        dispatch<E>(arg0: string, arg1: (arg0: E) => A, arg2: (arg0: A) => Internal.Codec<E>): Internal.Codec<E>;
        deprecated(arg0: number): Internal.Codec<A>;
        dispatchMap<E>(arg0: string, arg1: (arg0: E) => A, arg2: (arg0: A) => Internal.Codec<E>): Internal.MapCodec<E>;
        dispatchMap<E>(arg0: (arg0: E) => A, arg1: (arg0: A) => Internal.Codec<E>): Internal.MapCodec<E>;
        comapFlatMap<S>(arg0: (arg0: A) => Internal.DataResult<S>, arg1: (arg0: S) => A): Internal.Codec<S>;
        promotePartial(arg0: Internal.Consumer<any>): Internal.Decoder<any>;
        promotePartial(arg0: (arg0: string) => void): Internal.Codec<A>;
        flatXmap<S>(arg0: (arg0: A) => Internal.DataResult<S>, arg1: (arg0: S) => Internal.DataResult<A>): Internal.Codec<S>;
        fieldOf(arg0: string): Internal.MapEncoder<any>;
        fieldOf(arg0: string): Internal.MapDecoder<any>;
        fieldOf(arg0: string): Internal.MapCodec<A>;
        xmap<S>(arg0: (arg0: A) => S, arg1: (arg0: S) => A): Internal.Codec<S>;
        listOf(): Internal.Codec<Internal.List<A>>;
        optionalFieldOf(arg0: string, arg1: Internal.Lifecycle, arg2: A, arg3: Internal.Lifecycle): Internal.MapCodec<A>;
        optionalFieldOf(arg0: string): Internal.MapCodec<Internal.Optional<A>>;
        optionalFieldOf(arg0: string, arg1: A, arg2: Internal.Lifecycle): Internal.MapCodec<A>;
        optionalFieldOf(arg0: string, arg1: A): Internal.MapCodec<A>;
        partialDispatch<E>(arg0: string, arg1: (arg0: E) => Internal.DataResult<A>, arg2: (arg0: A) => Internal.DataResult<Internal.Codec<E>>): Internal.Codec<E>;
        withLifecycle(arg0: Internal.Lifecycle): Internal.Decoder<any>;
        withLifecycle(arg0: Internal.Lifecycle): Internal.Encoder<any>;
        withLifecycle(arg0: Internal.Lifecycle): Internal.Codec<A>;
        orElse(arg0: A): Internal.Codec<A>;
        orElse(arg0: (arg0: string) => void, arg1: A): Internal.Codec<A>;
        orElse(arg0: Internal.UnaryOperator<string>, arg1: A): Internal.Codec<A>;
        dispatchStable<E>(arg0: (arg0: E) => A, arg1: (arg0: A) => Internal.Codec<E>): Internal.Codec<E>;
        orElseGet(arg0: Internal.UnaryOperator<string>, arg1: () => A): Internal.Codec<A>;
        orElseGet(arg0: () => A): Internal.Codec<A>;
        orElseGet(arg0: (arg0: string) => void, arg1: () => A): Internal.Codec<A>;
        stable(): Internal.Codec<A>;
        mapResult(arg0: Internal.Codec$ResultFunction<A>): Internal.Codec<A>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface TooltipComponent {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface SeekableByteChannel implements Internal.ByteChannel {
        isOpen(): boolean;
        read(arg0: Internal.ByteBuffer): number;
        truncate(arg0: number): Internal.SeekableByteChannel;
        size(): number;
        position(): number;
        position(arg0: number): Internal.SeekableByteChannel;
        close(): void;
        write(arg0: Internal.ByteBuffer): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface RandomGenerator {
        nextFloat(): number;
        nextFloat(arg0: number): number;
        nextFloat(arg0: number, arg1: number): number;
        isDeprecated(): boolean;
        nextInt(): number;
        nextInt(arg0: number): number;
        nextInt(arg0: number, arg1: number): number;
        nextLong(arg0: number, arg1: number): number;
        nextLong(arg0: number): number;
        nextLong(): number;
        nextGaussian(arg0: number, arg1: number): number;
        nextGaussian(): number;
        nextDouble(arg0: number): number;
        nextDouble(arg0: number, arg1: number): number;
        nextDouble(): number;
        nextBytes(arg0: number[]): void;
        longs(arg0: number): Internal.LongStream;
        longs(arg0: number, arg1: number): Internal.LongStream;
        longs(): Internal.LongStream;
        longs(arg0: number, arg1: number, arg2: number): Internal.LongStream;
        nextExponential(): number;
        ints(): Internal.IntStream;
        ints(arg0: number): Internal.IntStream;
        ints(arg0: number, arg1: number, arg2: number): Internal.IntStream;
        ints(arg0: number, arg1: number): Internal.IntStream;
        doubles(): Internal.DoubleStream;
        doubles(arg0: number): Internal.DoubleStream;
        doubles(arg0: number, arg1: number, arg2: number): Internal.DoubleStream;
        doubles(arg0: number, arg1: number): Internal.DoubleStream;
        nextBoolean(): boolean;
        get default(): Internal.RandomGenerator;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface VertexSink {
        flush(): void;
        ensureCapacity(arg0: number): void;
        get vertexCount(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class MultipartBlockStateGenerator$Part {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        toJson(): Internal.JsonObject;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        model(s: string): Internal.VariantBlockStateGenerator$Model;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Constable {
        describeConstable(): Internal.Optional<Internal.ConstantDesc>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Long2CharFunction implements it.unimi.dsi.fastutil.Function<number, string>, Internal.LongToIntFunction {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: string): string;
        getOrDefault(arg0: number, arg1: string): string;
        andThenShort(arg0: Internal.Char2ShortFunction): Internal.Long2ShortFunction;
        composeByte(arg0: Internal.Byte2LongFunction): Internal.Byte2CharFunction;
        andThenInt(arg0: Internal.Char2IntFunction): Internal.Long2IntFunction;
        composeReference<T>(arg0: Internal.Reference2LongFunction<T>): Internal.Reference2CharFunction<T>;
        andThen<T>(arg0: (arg0: string) => T): (arg0: number) => T;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: string): string;
        put(arg0: number, arg1: string): string;
        remove(arg0: number): string;
        remove(arg0: object): object;
        remove(arg0: object): string;
        defaultReturnValue(arg0: string): void;
        defaultReturnValue(): string;
        andThenDouble(arg0: Internal.Char2DoubleFunction): Internal.Long2DoubleFunction;
        andThenObject<T>(arg0: Internal.Char2ObjectFunction<T>): Internal.Long2ObjectFunction<T>;
        get(arg0: object): string;
        get(arg0: object): object;
        get(arg0: number): string;
        andThenLong(arg0: Internal.Char2LongFunction): Internal.Long2LongFunction;
        composeLong(arg0: Internal.Long2LongFunction): Internal.Long2CharFunction;
        andThenByte(arg0: Internal.Char2ByteFunction): Internal.Long2ByteFunction;
        andThenFloat(arg0: Internal.Char2FloatFunction): Internal.Long2FloatFunction;
        applyAsInt(arg0: number): number;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2LongFunction): Internal.Int2CharFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2LongFunction): Internal.Float2CharFunction;
        andThenChar(arg0: Internal.Char2CharFunction): Internal.Long2CharFunction;
        composeObject<T>(arg0: Internal.Object2LongFunction<T>): Internal.Object2CharFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => string;
        composeShort(arg0: Internal.Short2LongFunction): Internal.Short2CharFunction;
        andThenReference<T>(arg0: Internal.Char2ReferenceFunction<T>): Internal.Long2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2LongFunction): Internal.Char2CharFunction;
        composeDouble(arg0: Internal.Double2LongFunction): Internal.Double2CharFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class AtomicBoolean implements Internal.Serializable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        weakCompareAndSetPlain(arg0: boolean, arg1: boolean): boolean;
        set(arg0: boolean): void;
        weakCompareAndSetRelease(arg0: boolean, arg1: boolean): boolean;
        weakCompareAndSet(arg0: boolean, arg1: boolean): boolean;
        compareAndExchange(arg0: boolean, arg1: boolean): boolean;
        notifyAll(): void;
        notify(): void;
        compareAndExchangeRelease(arg0: boolean, arg1: boolean): boolean;
        compareAndSet(arg0: boolean, arg1: boolean): boolean;
        hashCode(): number;
        equals(arg0: object): boolean;
        compareAndExchangeAcquire(arg0: boolean, arg1: boolean): boolean;
        get(): boolean;
        lazySet(arg0: boolean): void;
        toString(): string;
        getAndSet(arg0: boolean): boolean;
        weakCompareAndSetAcquire(arg0: boolean, arg1: boolean): boolean;
        weakCompareAndSetVolatile(arg0: boolean, arg1: boolean): boolean;
        set plain(arg0: boolean);
        get acquire(): boolean;
        set opaque(arg0: boolean);
        get plain(): boolean;
        get opaque(): boolean;
        set release(arg0: boolean);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Explosion$BlockInteraction extends Internal.Enum<Internal.Explosion$BlockInteraction> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(arg0: string): Internal.Explosion$BlockInteraction;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.Explosion$BlockInteraction[];
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly DESTROY : Internal.Explosion$BlockInteraction;
        static readonly BREAK : Internal.Explosion$BlockInteraction;
        static readonly NONE : Internal.Explosion$BlockInteraction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ModelBakeryStub {
        betterloadingscreen$setItemTask(arg0: Internal.SteppedTask): void;
        betterloadingscreen$getItemTask(): Internal.SteppedTask;
        betterloadingscreen$setBlockTask(arg0: Internal.SteppedTask): void;
        betterloadingscreen$getBlockTask(): Internal.SteppedTask;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface LevelTimeAccess implements Internal.LevelReader {
        isAreaLoaded(arg0: BlockPos, arg1: number): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Object2DoubleFunction <K> implements it.unimi.dsi.fastutil.Function<K, number>, Internal.ToDoubleFunction<K> {
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        applyAsDouble(arg0: K): number;
        andThenShort(arg0: Internal.Double2ShortFunction): Internal.Object2ShortFunction<K>;
        getDouble(arg0: object): number;
        composeByte(arg0: Internal.Byte2ObjectFunction<K>): Internal.Byte2DoubleFunction;
        andThenInt(arg0: Internal.Double2IntFunction): Internal.Object2IntFunction<K>;
        composeReference<T>(arg0: (arg0: T) => K): Internal.Reference2DoubleFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: K) => T;
        put(arg0: K, arg1: number): number;
        put(arg0: K, arg1: number): number;
        put(arg0: object, arg1: object): object;
        remove(arg0: object): number;
        remove(arg0: object): object;
        defaultReturnValue(): number;
        defaultReturnValue(arg0: number): void;
        andThenDouble(arg0: Internal.Double2DoubleFunction): Internal.Object2DoubleFunction<K>;
        andThenObject<T>(arg0: Internal.Double2ObjectFunction<T>): (arg0: K) => T;
        get(arg0: object): object;
        get(arg0: object): number;
        andThenLong(arg0: Internal.Double2LongFunction): Internal.Object2LongFunction<K>;
        composeLong(arg0: Internal.Long2ObjectFunction<K>): Internal.Long2DoubleFunction;
        andThenByte(arg0: Internal.Double2ByteFunction): Internal.Object2ByteFunction<K>;
        andThenFloat(arg0: Internal.Double2FloatFunction): Internal.Object2FloatFunction<K>;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        composeInt(arg0: Internal.Int2ObjectFunction<K>): Internal.Int2DoubleFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2ObjectFunction<K>): Internal.Float2DoubleFunction;
        andThenChar(arg0: Internal.Double2CharFunction): Internal.Object2CharFunction<K>;
        composeObject<T>(arg0: (arg0: T) => K): Internal.Object2DoubleFunction<T>;
        size(): number;
        removeDouble(arg0: object): number;
        composeShort(arg0: Internal.Short2ObjectFunction<K>): Internal.Short2DoubleFunction;
        andThenReference<T>(arg0: Internal.Double2ReferenceFunction<T>): (arg0: K) => T;
        composeChar(arg0: Internal.Char2ObjectFunction<K>): Internal.Char2DoubleFunction;
        composeDouble(arg0: Internal.Double2ObjectFunction<K>): Internal.Double2DoubleFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IMovedAccess {
        backpackedMoved(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface EventExecutorGroup implements Internal.ScheduledExecutorService, Internal.Iterable<Internal.EventExecutor> {
        scheduleAtFixedRate(arg0: Internal.Runnable, arg1: number, arg2: number, arg3: Internal.TimeUnit): io.netty.util.concurrent.ScheduledFuture<object>;
        next(): Internal.EventExecutor;
        terminationFuture(): Internal.Future<object>;
        shutdownGracefully(): Internal.Future<object>;
        shutdownGracefully(arg0: number, arg1: number, arg2: Internal.TimeUnit): Internal.Future<object>;
        submit(arg0: Internal.Runnable): Internal.Future<object>;
        submit<T>(arg0: java_.util.concurrent.Callable<T>): Internal.Future<T>;
        submit<T>(arg0: Internal.Runnable, arg1: T): Internal.Future<T>;
        isTerminated(): boolean;
        scheduleWithFixedDelay(arg0: Internal.Runnable, arg1: number, arg2: number, arg3: Internal.TimeUnit): io.netty.util.concurrent.ScheduledFuture<object>;
        execute(arg0: Internal.Runnable): void;
        schedule<V>(arg0: java_.util.concurrent.Callable<V>, arg1: number, arg2: Internal.TimeUnit): io.netty.util.concurrent.ScheduledFuture<V>;
        schedule(arg0: Internal.Runnable, arg1: number, arg2: Internal.TimeUnit): io.netty.util.concurrent.ScheduledFuture<object>;
        isShuttingDown(): boolean;
        iterator(): Internal.Iterator<Internal.EventExecutor>;
        awaitTermination(arg0: number, arg1: Internal.TimeUnit): boolean;
        shutdownNow(): Internal.List<Internal.Runnable>;
        shutdown(): void;
        isShutdown(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ItemTooltipEventJS$StaticTooltipHandlerFromJS {
        accept(arg0: Internal.ItemStackJS, arg1: boolean, arg2: Internal.List<object>): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class CrusherRecipeJS extends Internal.IERecipeJS {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        ingredientAction(filter: Internal.IngredientActionFilter, action: Internal.IngredientAction): Internal.RecipeJS;
        notifyAll(): void;
        convertReplacedOutput(index: number, oldStack: Internal.ItemStackJS, newStack: Internal.ItemStackJS): Internal.ItemStackJS;
        convertReplacedInput(index: number, oldIngredient: Internal.IngredientJS, newIngredient: Internal.IngredientJS): Internal.IngredientJS;
        save(): void;
        damageIngredient(filter: Internal.IngredientActionFilter, damage: number): Internal.RecipeJS;
        damageIngredient(filter: Internal.IngredientActionFilter): Internal.RecipeJS;
        getId(): string;
        dontAdd(): void;
        notify(): void;
        serializeJson(): void;
        parseIngredientItemIE(json: Internal.JsonElement): Internal.IngredientStackJS;
        replaceOutput(i: Internal.IngredientJS, with_: Internal.ItemStackJS, exact: boolean): boolean;
        hashCode(): number;
        merge(data: object): Internal.RecipeJS;
        create(args: Internal.ListJS): void;
        deserializeJson(): void;
        id(_id: ResourceLocation): Internal.RecipeJS;
        parseIngredientItem(o: object, key: string): Internal.IngredientJS;
        parseIngredientItem(o: object): Internal.IngredientJS;
        group(g: string): Internal.RecipeJS;
        energy(e: number): Internal.IERecipeJS;
        deserialize(): void;
        serializeNBTAsJson(): boolean;
        getOutputIndex(ingredient: Internal.IngredientJS, exact: boolean): number;
        getInputIndex(ingredient: Internal.IngredientJS, exact: boolean): number;
        setGroup(g: string): void;
        serialize(): void;
        resultFromRecipeJson(json: Internal.JsonObject): Internal.ItemStackJS;
        stage(s: string): Internal.RecipeJS;
        serializeIngredientStack(in_: Internal.IngredientStackJS): Internal.JsonElement;
        replaceInput(i: Internal.IngredientJS, with_: Internal.IngredientJS, exact: boolean): boolean;
        getType(): string;
        equals(arg0: object): boolean;
        getGroup(): string;
        serializeItemStack(stack: Internal.ItemStackJS): Internal.JsonElement;
        hasOutput(ingredient: Internal.IngredientJS, exact: boolean): boolean;
        toString(): string;
        keepIngredient(filter: Internal.IngredientActionFilter): Internal.RecipeJS;
        time(t: number): Internal.IERecipeJS;
        hasInput(ingredient: Internal.IngredientJS, exact: boolean): boolean;
        customIngredientAction(filter: Internal.IngredientActionFilter, id: string): Internal.RecipeJS;
        parseResultItem(o: object): Internal.ItemStackJS;
        replaceIngredient(filter: Internal.IngredientActionFilter, item: Internal.ItemStackJS): Internal.RecipeJS;
        static currentRecipe : Internal.RecipeJS;
        readonly inputItems : Internal.List<Internal.IngredientJS>;
        static itemErrors : false;
        type : Internal.RecipeTypeJS;
        originalJson : Internal.JsonObject;
        serializeOutputs : boolean;
        readonly outputFluids : Internal.List<Internal.FluidStack>;
        originalRecipe : Internal.Recipe<object>;
        readonly inputFluids : Internal.List<Internal.FluidTagInput>;
        json : Internal.JsonObject;
        readonly outputItems : Internal.List<Internal.ItemStackJS>;
        serializeInputs : boolean;
        get mod(): string;
        get uniqueId(): string;
        get fromToString(): string;
        get path(): string;
        get orCreateId(): ResourceLocation;
        get originalRecipeResult(): Internal.ItemStackJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface MatrixWrite {
        flywheel$writeUnsafe(arg0: number): void;
        flywheel$write(arg0: Internal.VecBuffer): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class ChannelHandlerAdapter implements Internal.ChannelHandler {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        exceptionCaught(arg0: Internal.ChannelHandlerContext, arg1: Internal.Throwable): void;
        toString(): string;
        handlerAdded(arg0: Internal.ChannelHandlerContext): void;
        isSharable(): boolean;
        notify(): void;
        handlerRemoved(arg0: Internal.ChannelHandlerContext): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Tickable {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface MapCodec$ResultFunction <A> {
        apply<T>(arg0: Internal.DynamicOps<T>, arg1: Internal.MapLike<T>, arg2: Internal.DataResult<A>): Internal.DataResult<A>;
        coApply<T>(arg0: Internal.DynamicOps<T>, arg1: A, arg2: Internal.RecordBuilder<T>): Internal.RecordBuilder<T>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ProfilerMeasured {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ListBuilder <T> {
        withErrorsFrom(arg0: Internal.DataResult<object>): Internal.ListBuilder<T>;
        add(arg0: Internal.DataResult<T>): Internal.ListBuilder<T>;
        add(arg0: T): Internal.ListBuilder<T>;
        add<E>(arg0: E, arg1: Internal.Encoder<E>): Internal.ListBuilder<T>;
        mapError(arg0: Internal.UnaryOperator<string>): Internal.ListBuilder<T>;
        ops(): Internal.DynamicOps<T>;
        build(arg0: T): Internal.DataResult<T>;
        build(arg0: Internal.DataResult<T>): Internal.DataResult<T>;
        addAll<E>(arg0: Internal.Iterable<E>, arg1: Internal.Encoder<E>): Internal.ListBuilder<T>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ElementBuffer {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        bind(): void;
        unbind(): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        readonly eboIndexType : Internal.GlNumericType;
        readonly elementCount : number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ServerResources implements Internal.AutoCloseable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        close(): void;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface SetMultimap <K, V> implements Internal.Multimap<K, V> {
        containsEntry(arg0: object, arg1: object): boolean;
        containsKey(arg0: object): boolean;
        asMap(): Map<K, Internal.Collection<V>>;
        isEmpty(): boolean;
        clear(): void;
        replaceValues(arg0: K, arg1: Internal.Iterable<V>): Internal.Set<V>;
        replaceValues(arg0: object, arg1: Internal.Iterable<any>): Internal.Collection<any>;
        containsValue(arg0: object): boolean;
        put(arg0: K, arg1: V): boolean;
        remove(arg0: object, arg1: object): boolean;
        removeAll(arg0: object): Internal.Set<V>;
        removeAll(arg0: object): Internal.Collection<any>;
        entries(): Internal.Collection<any>;
        entries(): Internal.Set<Internal.Map$Entry<K, V>>;
        size(): number;
        hashCode(): number;
        equals(arg0: object): boolean;
        get(arg0: K): Internal.Set<V>;
        get(arg0: object): Internal.Collection<any>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface CameraInvokerMixin {
        callMove(arg0: number, arg1: number, arg2: number): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ModelRegistryEvent extends Internal.Event implements Internal.IModBusEvent {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isCanceled(): boolean;
        notifyAll(): void;
        hasResult(): boolean;
        notify(): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        isCancelable(): boolean;
        set canceled(arg0: boolean);
        set result(arg0: Internal.Event$Result);
        get listenerList(): Internal.ListenerList;
        get result(): Internal.Event$Result;
        get phase(): Internal.EventPriority;
        set phase(arg0: Internal.EventPriority);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class IFluidHandler$FluidAction extends Internal.Enum<Internal.IFluidHandler$FluidAction> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(arg0: string): Internal.IFluidHandler$FluidAction;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.IFluidHandler$FluidAction[];
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        simulate(): boolean;
        execute(): boolean;
        notify(): void;
        ordinal(): number;
        static readonly EXECUTE : Internal.IFluidHandler$FluidAction;
        static readonly SIMULATE : Internal.IFluidHandler$FluidAction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Either$Mu <R> implements Internal.K1 {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ConditionalFunction implements Internal.FunctionContainer, Internal.ConditionContainer {
        enchantWithLevels(levels: Internal.NumberProvider, treasure: boolean): Internal.FunctionContainer;
        damage(damage: Internal.NumberProvider): Internal.FunctionContainer;
        nbt(tag: Internal.CompoundTag): Internal.FunctionContainer;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        killedByPlayer(): Internal.ConditionContainer;
        survivesExplosion(): Internal.ConditionContainer;
        randomChance(chance: number): Internal.ConditionContainer;
        addFunction(arg0: Internal.JsonObject): Internal.FunctionContainer;
        addFunction(o: Internal.JsonObject): Internal.ConditionalFunction;
        notifyAll(): void;
        count(count: Internal.NumberProvider): Internal.FunctionContainer;
        addConditionalFunction(func: (arg0: Internal.ConditionalFunction) => void): Internal.FunctionContainer;
        addCondition(arg0: Internal.JsonObject): Internal.ConditionContainer;
        addCondition(o: Internal.JsonObject): Internal.ConditionalFunction;
        notify(): void;
        lootingEnchant(count: Internal.NumberProvider, limit: number): Internal.FunctionContainer;
        lootTable(table: ResourceLocation, seed: number): Internal.FunctionContainer;
        entityScores(entity: Internal.LootContext$EntityTarget, scores: Map<string, object>): Internal.ConditionContainer;
        copyName(source: Internal.CopyNameFunction$NameSource): Internal.FunctionContainer;
        hashCode(): number;
        equals(arg0: object): boolean;
        name(name: Internal.Text, entity: Internal.LootContext$EntityTarget): Internal.FunctionContainer;
        name(name: Internal.Text): Internal.FunctionContainer;
        randomChanceWithLooting(chance: number, multiplier: number): Internal.ConditionContainer;
        furnaceSmelt(): Internal.FunctionContainer;
        toString(): string;
        enchantRandomly(enchantments: ResourceLocation[]): Internal.FunctionContainer;
        entityProperties(entity: Internal.LootContext$EntityTarget, properties: Internal.JsonObject): Internal.ConditionContainer;
        function : Internal.JsonObject;
        conditions : Internal.JsonArray;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface NarratableEntry implements Internal.NarrationSupplier {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Style implements Internal.StyleAccess {
        static create_$md$85ada3$0(arg0: Internal.TextColor, arg1: boolean, arg2: boolean, arg3: boolean, arg4: boolean, arg5: boolean, arg6: Internal.ClickEvent, arg7: Internal.HoverEvent, arg8: string, arg9: ResourceLocation): Internal.Style;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        set obfuscated(arg0: boolean);
        set underlined(arg0: boolean);
        set strikethrough(arg0: boolean);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IntSet implements Internal.IntCollection, Internal.Set<number> {
        add(arg0: number): boolean;
        add(arg0: object): boolean;
        add(arg0: number): boolean;
        spliterator(): Internal.IntSpliterator;
        spliterator(): Internal.Spliterator<any>;
        forEach(arg0: Internal.IntConsumer): void;
        forEach(arg0: it.unimi.dsi.fastutil.ints.IntConsumer): void;
        containsAll(arg0: Internal.IntCollection): boolean;
        isEmpty(): boolean;
        clear(): void;
        intIterator(): Internal.IntIterator;
        intSpliterator(): Internal.IntSpliterator;
        remove(arg0: number): boolean;
        remove(arg0: object): boolean;
        removeIf(arg0: Internal.IntPredicate): boolean;
        removeIf(arg0: it.unimi.dsi.fastutil.ints.IntPredicate): boolean;
        intStream(): Internal.IntStream;
        removeAll(arg0: Internal.IntCollection): boolean;
        contains(arg0: object): boolean;
        contains(arg0: number): boolean;
        iterator(): Internal.Iterator<any>;
        iterator(): Internal.IntIterator;
        size(): number;
        addAll(arg0: Internal.IntCollection): boolean;
        hashCode(): number;
        equals(arg0: object): boolean;
        toIntArray(arg0: number[]): number[];
        toIntArray(): number[];
        toArray(arg0: number[]): number[];
        toArray<T>(arg0: T[]): T[];
        toArray(): object[];
        rem(arg0: number): boolean;
        intParallelStream(): Internal.IntStream;
        retainAll(arg0: Internal.IntCollection): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Minecraft extends Internal.ReentrantBlockableEventLoop<Internal.Runnable> implements Internal.WindowEventHandler, Internal.IForgeMinecraft, Internal.MinecraftStub, Internal.PausedPartialTickAccessor, Internal.MinecraftAccess, Internal.MinecraftClientAccess {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        handler$cbf000$createLevel(arg0: string, arg1: Internal.LevelSettings, arg2: Internal.RegistryAccess$RegistryHolder, arg3: Internal.WorldGenSettings, arg4: Internal.CallbackInfo): void;
        notifyAll(): void;
        popGuiLayer(): void;
        moveRenderOut(): void;
        execute(arg0: Internal.Runnable): void;
        notify(): void;
        moveRenderIn(): void;
        pushGuiLayer(arg0: Internal.Screen): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        flywheel$getPartialTicksPaused(): number;
        toString(): string;
        close(): void;
        get recorder(): Internal.MetricsRecorder;
        set recorder(recorder: Internal.MetricsRecorder);
        get searchTreeManager(): Internal.SearchRegistry;
        get fontManager(): Internal.FontManager;
        get itemColors(): Internal.ItemColors;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class FilterOutputStream extends Internal.OutputStream {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        flush(): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        static nullOutputStream(): Internal.OutputStream;
        close(): void;
        write(arg0: number[], arg1: number, arg2: number): void;
        write(arg0: number[]): void;
        write(arg0: number): void;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class AbstractReferenceCountedByteBuf extends Internal.AbstractByteBuf {
        asReadOnly(): Internal.ByteBuf;
        markReaderIndex(): Internal.ByteBuf;
        getByte(arg0: number): number;
        release(): boolean;
        release(arg0: number): boolean;
        readDoubleLE(): number;
        writeZero(arg0: number): Internal.ByteBuf;
        resetReaderIndex(): Internal.ByteBuf;
        writeFloat(arg0: number): Internal.ByteBuf;
        setLongLE(arg0: number, arg1: number): Internal.ByteBuf;
        readRetainedSlice(arg0: number): Internal.ByteBuf;
        slice(): Internal.ByteBuf;
        slice(arg0: number, arg1: number): Internal.ByteBuf;
        setDoubleLE(arg0: number, arg1: number): Internal.ByteBuf;
        getMediumLE(arg0: number): number;
        readUnsignedIntLE(): number;
        writeFloatLE(arg0: number): Internal.ByteBuf;
        readInt(): number;
        order(arg0: Internal.ByteOrder): Internal.ByteBuf;
        order(): Internal.ByteOrder;
        writeMedium(arg0: number): Internal.ByteBuf;
        resetWriterIndex(): Internal.ByteBuf;
        writableBytes(): number;
        getUnsignedShort(arg0: number): number;
        maxCapacity(): number;
        nioBufferCount(): number;
        bytesBefore(arg0: number): number;
        bytesBefore(arg0: number, arg1: number): number;
        bytesBefore(arg0: number, arg1: number, arg2: number): number;
        setInt(arg0: number, arg1: number): Internal.ByteBuf;
        getInt(arg0: number): number;
        markWriterIndex(): Internal.ByteBuf;
        isReadable(arg0: number): boolean;
        isReadable(): boolean;
        writeBoolean(arg0: boolean): Internal.ByteBuf;
        setIntLE(arg0: number, arg1: number): Internal.ByteBuf;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        writeLongLE(arg0: number): Internal.ByteBuf;
        setShortLE(arg0: number, arg1: number): Internal.ByteBuf;
        retain(arg0: number): Internal.ReferenceCounted;
        retain(arg0: number): Internal.ByteBuf;
        retain(): Internal.ByteBuf;
        retain(): Internal.ReferenceCounted;
        isWritable(arg0: number): boolean;
        isWritable(): boolean;
        notify(): void;
        readChar(): string;
        hasMemoryAddress(): boolean;
        capacity(): number;
        capacity(arg0: number): Internal.ByteBuf;
        readCharSequence(arg0: number, arg1: Internal.Charset): Internal.CharSequence;
        isReadOnly(): boolean;
        readUnsignedShortLE(): number;
        readDouble(): number;
        readFloat(): number;
        getLongLE(arg0: number): number;
        getBoolean(arg0: number): boolean;
        copy(): Internal.ByteBuf;
        copy(arg0: number, arg1: number): Internal.ByteBuf;
        readShortLE(): number;
        readUnsignedMedium(): number;
        ensureWritable(arg0: number, arg1: boolean): number;
        ensureWritable(arg0: number): Internal.ByteBuf;
        writeInt(arg0: number): Internal.ByteBuf;
        readFloatLE(): number;
        getDoubleLE(arg0: number): number;
        hasArray(): boolean;
        memoryAddress(): number;
        maxFastWritableBytes(): number;
        readableBytes(): number;
        readSlice(arg0: number): Internal.ByteBuf;
        getIntLE(arg0: number): number;
        forEachByteDesc(arg0: number, arg1: number, arg2: Internal.ByteProcessor): number;
        forEachByteDesc(arg0: Internal.ByteProcessor): number;
        nioBuffers(): Internal.ByteBuffer[];
        nioBuffers(arg0: number, arg1: number): Internal.ByteBuffer[];
        skipBytes(arg0: number): Internal.ByteBuf;
        getLong(arg0: number): number;
        readLong(): number;
        readShort(): number;
        equals(arg0: object): boolean;
        setZero(arg0: number, arg1: number): Internal.ByteBuf;
        getUnsignedMedium(arg0: number): number;
        readBytes(arg0: number): Internal.ByteBuf;
        readBytes(arg0: Internal.ByteBuf, arg1: number, arg2: number): Internal.ByteBuf;
        readBytes(arg0: Internal.GatheringByteChannel, arg1: number): number;
        readBytes(arg0: number[]): Internal.ByteBuf;
        readBytes(arg0: Internal.ByteBuf): Internal.ByteBuf;
        readBytes(arg0: Internal.ByteBuf, arg1: number): Internal.ByteBuf;
        readBytes(arg0: number[], arg1: number, arg2: number): Internal.ByteBuf;
        readBytes(arg0: Internal.ByteBuffer): Internal.ByteBuf;
        readBytes(arg0: Internal.OutputStream, arg1: number): Internal.ByteBuf;
        readBytes(arg0: Internal.FileChannel, arg1: number, arg2: number): number;
        readBoolean(): boolean;
        toString(): string;
        toString(arg0: Internal.Charset): string;
        toString(arg0: number, arg1: number, arg2: Internal.Charset): string;
        retainedSlice(arg0: number, arg1: number): Internal.ByteBuf;
        retainedSlice(): Internal.ByteBuf;
        readMediumLE(): number;
        isDirect(): boolean;
        setMedium(arg0: number, arg1: number): Internal.ByteBuf;
        setBoolean(arg0: number, arg1: boolean): Internal.ByteBuf;
        getFloatLE(arg0: number): number;
        readerIndex(): number;
        readerIndex(arg0: number): Internal.ByteBuf;
        getCharSequence(arg0: number, arg1: number, arg2: Internal.Charset): Internal.CharSequence;
        setShort(arg0: number, arg1: number): Internal.ByteBuf;
        compareTo(arg0: Internal.ByteBuf): number;
        compareTo(arg0: object): number;
        getBytes(arg0: number, arg1: number[]): Internal.ByteBuf;
        getBytes(arg0: number, arg1: Internal.ByteBuf, arg2: number): Internal.ByteBuf;
        getBytes(arg0: number, arg1: Internal.ByteBuf): Internal.ByteBuf;
        getBytes(arg0: number, arg1: Internal.ByteBuf, arg2: number, arg3: number): Internal.ByteBuf;
        getBytes(arg0: number, arg1: Internal.FileChannel, arg2: number, arg3: number): number;
        getBytes(arg0: number, arg1: Internal.GatheringByteChannel, arg2: number): number;
        getBytes(arg0: number, arg1: Internal.OutputStream, arg2: number): Internal.ByteBuf;
        getBytes(arg0: number, arg1: number[], arg2: number, arg3: number): Internal.ByteBuf;
        getBytes(arg0: number, arg1: Internal.ByteBuffer): Internal.ByteBuf;
        unwrap(): Internal.ByteBuf;
        setDouble(arg0: number, arg1: number): Internal.ByteBuf;
        setChar(arg0: number, arg1: number): Internal.ByteBuf;
        refCnt(): number;
        getUnsignedIntLE(arg0: number): number;
        setFloatLE(arg0: number, arg1: number): Internal.ByteBuf;
        getUnsignedInt(arg0: number): number;
        indexOf(arg0: number, arg1: number, arg2: number): number;
        writeByte(arg0: number): Internal.ByteBuf;
        nioBuffer(): Internal.ByteBuffer;
        nioBuffer(arg0: number, arg1: number): Internal.ByteBuffer;
        discardSomeReadBytes(): Internal.ByteBuf;
        touch(arg0: object): Internal.ByteBuf;
        touch(arg0: object): Internal.ReferenceCounted;
        touch(): Internal.ReferenceCounted;
        touch(): Internal.ByteBuf;
        duplicate(): Internal.ByteBuf;
        writerIndex(): number;
        writerIndex(arg0: number): Internal.ByteBuf;
        readUnsignedInt(): number;
        getUnsignedShortLE(arg0: number): number;
        writeCharSequence(arg0: Internal.CharSequence, arg1: Internal.Charset): number;
        retainedDuplicate(): Internal.ByteBuf;
        getChar(arg0: number): string;
        setLong(arg0: number, arg1: number): Internal.ByteBuf;
        readMedium(): number;
        writeBytes(arg0: Internal.ScatteringByteChannel, arg1: number): number;
        writeBytes(arg0: Internal.ByteBuffer): Internal.ByteBuf;
        writeBytes(arg0: Internal.InputStream, arg1: number): number;
        writeBytes(arg0: Internal.FileChannel, arg1: number, arg2: number): number;
        writeBytes(arg0: number[], arg1: number, arg2: number): Internal.ByteBuf;
        writeBytes(arg0: number[]): Internal.ByteBuf;
        writeBytes(arg0: Internal.ByteBuf): Internal.ByteBuf;
        writeBytes(arg0: Internal.ByteBuf, arg1: number, arg2: number): Internal.ByteBuf;
        writeBytes(arg0: Internal.ByteBuf, arg1: number): Internal.ByteBuf;
        forEachByte(arg0: number, arg1: number, arg2: Internal.ByteProcessor): number;
        forEachByte(arg0: Internal.ByteProcessor): number;
        setIndex(arg0: number, arg1: number): Internal.ByteBuf;
        writeShort(arg0: number): Internal.ByteBuf;
        alloc(): Internal.ByteBufAllocator;
        getShortLE(arg0: number): number;
        getMedium(arg0: number): number;
        readUnsignedShort(): number;
        setByte(arg0: number, arg1: number): Internal.ByteBuf;
        maxWritableBytes(): number;
        writeShortLE(arg0: number): Internal.ByteBuf;
        notifyAll(): void;
        getDouble(arg0: number): number;
        getFloat(arg0: number): number;
        writeLong(arg0: number): Internal.ByteBuf;
        writeIntLE(arg0: number): Internal.ByteBuf;
        array(): number[];
        setCharSequence(arg0: number, arg1: Internal.CharSequence, arg2: Internal.Charset): number;
        hashCode(): number;
        internalNioBuffer(arg0: number, arg1: number): Internal.ByteBuffer;
        arrayOffset(): number;
        readIntLE(): number;
        setMediumLE(arg0: number, arg1: number): Internal.ByteBuf;
        readUnsignedByte(): number;
        readLongLE(): number;
        readUnsignedMediumLE(): number;
        writeDouble(arg0: number): Internal.ByteBuf;
        setBytes(arg0: number, arg1: Internal.ByteBuf, arg2: number): Internal.ByteBuf;
        setBytes(arg0: number, arg1: number[]): Internal.ByteBuf;
        setBytes(arg0: number, arg1: Internal.ByteBuf): Internal.ByteBuf;
        setBytes(arg0: number, arg1: Internal.FileChannel, arg2: number, arg3: number): number;
        setBytes(arg0: number, arg1: Internal.ByteBuffer): Internal.ByteBuf;
        setBytes(arg0: number, arg1: number[], arg2: number, arg3: number): Internal.ByteBuf;
        setBytes(arg0: number, arg1: Internal.ByteBuf, arg2: number, arg3: number): Internal.ByteBuf;
        setBytes(arg0: number, arg1: Internal.ScatteringByteChannel, arg2: number): number;
        setBytes(arg0: number, arg1: Internal.InputStream, arg2: number): number;
        setFloat(arg0: number, arg1: number): Internal.ByteBuf;
        getShort(arg0: number): number;
        writeMediumLE(arg0: number): Internal.ByteBuf;
        clear(): Internal.ByteBuf;
        getUnsignedByte(arg0: number): number;
        discardReadBytes(): Internal.ByteBuf;
        writeChar(arg0: number): Internal.ByteBuf;
        writeDoubleLE(arg0: number): Internal.ByteBuf;
        isContiguous(): boolean;
        getUnsignedMediumLE(arg0: number): number;
        readByte(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ExtendedAbstractBlockState {
        isConditionallyFullOpaque(): boolean;
        get opacityIfCached(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Function6 <T1, T2, T3, T4, T5, T6, R> {
        apply(arg0: T1, arg1: T2, arg2: T3, arg3: T4, arg4: T5, arg5: T6): R;
        curry5(): Internal.Function5<T1, T2, T3, T4, T5, (arg0: T6) => R>;
        curry3(): Internal.Function3<T1, T2, T3, Internal.Function3<T4, T5, T6, R>>;
        curry4(): Internal.Function4<T1, T2, T3, T4, (arg0: T5, arg1: T6) => R>;
        curry2(): (arg0: T1, arg1: T2) => Internal.Function4<T3, T4, T5, T6, R>;
        curry(): (arg0: T1) => Internal.Function5<T2, T3, T4, T5, T6, R>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ObjectiveCriteria {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Future <V> implements java_.util.concurrent.Future<V> {
        cancel(arg0: boolean): boolean;
        isCancelled(): boolean;
        removeListeners(arg0: Internal.GenericFutureListener<Internal.Future<V>>[]): Internal.Future<V>;
        cause(): Internal.Throwable;
        awaitUninterruptibly(arg0: number): boolean;
        awaitUninterruptibly(arg0: number, arg1: Internal.TimeUnit): boolean;
        awaitUninterruptibly(): Internal.Future<V>;
        removeListener(arg0: Internal.GenericFutureListener<Internal.Future<V>>): Internal.Future<V>;
        isDone(): boolean;
        sync(): Internal.Future<V>;
        syncUninterruptibly(): Internal.Future<V>;
        get(arg0: number, arg1: Internal.TimeUnit): V;
        get(): V;
        isCancellable(): boolean;
        await(arg0: number, arg1: Internal.TimeUnit): boolean;
        await(arg0: number): boolean;
        await(): Internal.Future<V>;
        addListeners(arg0: Internal.GenericFutureListener<Internal.Future<V>>[]): Internal.Future<V>;
        isSuccess(): boolean;
        addListener(arg0: Internal.GenericFutureListener<Internal.Future<V>>): Internal.Future<V>;
        get now(): V;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ExtendedChunk {
        set skyNibbles(arg0: Internal.SWMRNibbleArray[]);
        get skyEmptinessMap(): boolean[];
        get skyNibbles(): Internal.SWMRNibbleArray[];
        get blockNibbles(): Internal.SWMRNibbleArray[];
        set skyEmptinessMap(arg0: boolean[]);
        set blockEmptinessMap(arg0: boolean[]);
        get blockEmptinessMap(): boolean[];
        set blockNibbles(arg0: Internal.SWMRNibbleArray[]);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ProtoChunk extends Internal.ChunkAccess implements Internal.ExtendedChunk {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        handler$bnf000$onConstruct(arg0: Internal.ChunkPos, arg1: Internal.UpgradeData, arg2: Internal.LevelChunkSection[], arg3: Internal.ProtoChunkTicks<any>, arg4: Internal.ProtoChunkTicks<any>, arg5: Internal.LevelHeightAccessor, arg6: Internal.Registry<any>, arg7: Internal.BlendingData, arg8: Internal.CallbackInfo): void;
        notify(): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        localvar$bnj000$modifyHeightmapType(arg0: Internal.Heightmap$Types): Internal.Heightmap$Types;
        toString(): string;
        get worldForge(): Internal.LevelAccessor;
        get blockNibbles(): Internal.SWMRNibbleArray[];
        set blockEmptinessMap(arg0: boolean[]);
        set skyNibbles(arg0: Internal.SWMRNibbleArray[]);
        get skyEmptinessMap(): boolean[];
        get skyNibbles(): Internal.SWMRNibbleArray[];
        set skyEmptinessMap(arg0: boolean[]);
        get blockEmptinessMap(): boolean[];
        set blockNibbles(arg0: Internal.SWMRNibbleArray[]);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ObjIntConsumer <T> {
        accept(arg0: T, arg1: number): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Multimap <K, V> {
        containsEntry(arg0: object, arg1: object): boolean;
        asMap(): Map<K, Internal.Collection<V>>;
        keys(): Internal.Multiset<K>;
        containsKey(arg0: object): boolean;
        forEach(arg0: (arg0: K, arg1: V) => void): void;
        values(): Internal.Collection<V>;
        isEmpty(): boolean;
        clear(): void;
        replaceValues(arg0: K, arg1: Internal.Iterable<V>): Internal.Collection<V>;
        containsValue(arg0: object): boolean;
        put(arg0: K, arg1: V): boolean;
        remove(arg0: object, arg1: object): boolean;
        removeAll(arg0: object): Internal.Collection<V>;
        entries(): Internal.Collection<Internal.Map$Entry<K, V>>;
        size(): number;
        hashCode(): number;
        putAll(arg0: Internal.Multimap<K, V>): boolean;
        putAll(arg0: K, arg1: Internal.Iterable<V>): boolean;
        equals(arg0: object): boolean;
        get(arg0: K): Internal.Collection<V>;
        keySet(): Internal.Set<K>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface MapLike <T> {
        entries(): Internal.Stream<Internal.Pair<T, T>>;
        get(arg0: T): T;
        get(arg0: string): T;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class SimpleContainer implements Internal.Container, Internal.StackedContentsCompatible {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class LunarMobSpawnInfo {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isForceSurfaceSpawning(): boolean;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        useBiomeSpawnSettings(): boolean;
        toString(): string;
        notify(): void;
        static readonly CODEC : Internal.Codec<Internal.LunarMobSpawnInfo>;
        get spawnInfo(): Internal.MobSpawnSettings;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class AbstractTexture implements Internal.AutoCloseable {
        restoreLastBlurMipmap(): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        setBlurMipmap(arg0: boolean, arg1: boolean): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        close(): void;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ModuleDescriptor$Version implements Internal.Comparable<Internal.ModuleDescriptor$Version> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        static parse(arg0: string): Internal.ModuleDescriptor$Version;
        compareTo(arg0: Internal.ModuleDescriptor$Version): number;
        compareTo(arg0: object): number;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Pair$Mu <S> implements Internal.K1 {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Runnable {
        run(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class MethodType implements Internal.Constable, Internal.TypeDescriptor$OfMethod<Internal.Class<object>, Internal.MethodType>, Internal.Serializable {
        toMethodDescriptorString(): string;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        dropParameterTypes(arg0: number, arg1: number): Internal.TypeDescriptor$OfMethod<any, any>;
        dropParameterTypes(arg0: number, arg1: number): Internal.MethodType;
        changeReturnType(arg0: Internal.Class<object>): Internal.MethodType;
        changeReturnType(arg0: Internal.TypeDescriptor$OfField<any>): Internal.TypeDescriptor$OfMethod<any, any>;
        notifyAll(): void;
        static fromMethodDescriptorString(arg0: string, arg1: Internal.ClassLoader): Internal.MethodType;
        lastParameterType(): Internal.Class<object>;
        describeConstable(): Internal.Optional<Internal.MethodTypeDesc>;
        notify(): void;
        changeParameterType(arg0: number, arg1: Internal.TypeDescriptor$OfField<any>): Internal.TypeDescriptor$OfMethod<any, any>;
        changeParameterType(arg0: number, arg1: Internal.Class<object>): Internal.MethodType;
        unwrap(): Internal.MethodType;
        hasWrappers(): boolean;
        static methodType(arg0: Internal.Class<object>, arg1: Internal.Class<object>[]): Internal.MethodType;
        static methodType(arg0: Internal.Class<object>, arg1: Internal.MethodType): Internal.MethodType;
        static methodType(arg0: Internal.Class<object>, arg1: Internal.Class<object>, arg2: Internal.Class<object>[]): Internal.MethodType;
        static methodType(arg0: Internal.Class<object>, arg1: Internal.List<Internal.Class<object>>): Internal.MethodType;
        static methodType(arg0: Internal.Class<object>, arg1: Internal.Class<object>): Internal.MethodType;
        static methodType(arg0: Internal.Class<object>): Internal.MethodType;
        parameterArray(): Internal.Class<object>[];
        parameterArray(): Internal.TypeDescriptor$OfField[];
        hashCode(): number;
        appendParameterTypes(arg0: Internal.List<Internal.Class<object>>): Internal.MethodType;
        appendParameterTypes(arg0: Internal.Class<object>[]): Internal.MethodType;
        parameterType(arg0: number): Internal.Class<object>;
        parameterType(arg0: number): Internal.TypeDescriptor$OfField<any>;
        erase(): Internal.MethodType;
        parameterCount(): number;
        descriptorString(): string;
        insertParameterTypes(arg0: number, arg1: Internal.List<Internal.Class<object>>): Internal.MethodType;
        insertParameterTypes(arg0: number, arg1: Internal.Class<object>[]): Internal.MethodType;
        insertParameterTypes(arg0: number, arg1: Internal.TypeDescriptor$OfField[]): Internal.TypeDescriptor$OfMethod<any, any>;
        generic(): Internal.MethodType;
        hasPrimitives(): boolean;
        equals(arg0: object): boolean;
        parameterList(): Internal.List<Internal.Class<object>>;
        toString(): string;
        static genericMethodType(arg0: number, arg1: boolean): Internal.MethodType;
        static genericMethodType(arg0: number): Internal.MethodType;
        wrap(): Internal.MethodType;
        returnType(): Internal.Class<object>;
        returnType(): Internal.TypeDescriptor$OfField<any>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class IDataManager$DataEntry <T> {
        readValue(arg0: Internal.CompoundTag, arg1: boolean): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        static read(arg0: Internal.FriendlyByteBuf): Internal.IDataManager$DataEntry<object>;
        markDirty(): void;
        notifyAll(): void;
        clean(): void;
        notify(): void;
        isDirty(): boolean;
        hashCode(): number;
        equals(arg0: object): boolean;
        setValue(arg0: T, arg1: boolean): void;
        toString(): string;
        writeValue(): Internal.CompoundTag;
        write(arg0: Internal.FriendlyByteBuf): void;
        get value(): T;
        get trackedData(): Internal.TrackedData<T>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface RecipeSerializer <T> implements Internal.IForgeRegistryEntry<Internal.RecipeSerializer<object>> {
        get registryName(): ResourceLocation;
        set registryName(arg0: ResourceLocation);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface MobSpawnInfoAccess {
        get spawners(): Map<Internal.MobCategory, Internal.List<Internal.MobSpawnSettings$SpawnerData>>;
        get mobSpawnCosts(): Map<Internal.EntityType<object>, Internal.MobSpawnSettings$MobSpawnCost>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ConstantUnit extends Internal.FixedUnit {
        mod(with_: Internal.Unit): Internal.Unit;
        log1p(): Internal.Unit;
        cos(): Internal.Unit;
        deg(): Internal.Unit;
        lt(with_: Internal.Unit): Internal.Unit;
        atan(): Internal.Unit;
        div(with_: Internal.Unit): Internal.Unit;
        neg(): Internal.Unit;
        shiftLeft(with_: Internal.Unit): Internal.Unit;
        rad(): Internal.Unit;
        sqrt(): Internal.Unit;
        gte(with_: Internal.Unit): Internal.Unit;
        neq(with_: Internal.Unit): Internal.Unit;
        atan2(with_: Internal.Unit): Internal.Unit;
        tan(): Internal.Unit;
        add(with_: Internal.Unit): Internal.Unit;
        newValue(v: number): Internal.Unit;
        toBool(): Internal.Unit;
        ceil(): Internal.Unit;
        eq(with_: Internal.Unit): Internal.Unit;
        shiftRight(with_: Internal.Unit): Internal.Unit;
        sub(with_: Internal.Unit): Internal.Unit;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        mul(with_: Internal.Unit): Internal.Unit;
        log(): Internal.Unit;
        log10(): Internal.Unit;
        notifyAll(): void;
        notify(): void;
        not(): Internal.Unit;
        min(with_: Internal.Unit): Internal.Unit;
        hashCode(): number;
        and(with_: Internal.Unit): Internal.Unit;
        static of(value: number): Internal.FixedUnit;
        get(): number;
        pow(with_: Internal.Unit): Internal.Unit;
        sin(): Internal.Unit;
        xor(with_: Internal.Unit): Internal.Unit;
        lte(with_: Internal.Unit): Internal.Unit;
        floor(): Internal.Unit;
        isFixed(): boolean;
        sq(): Internal.Unit;
        or(with_: Internal.Unit): Internal.Unit;
        max(with_: Internal.Unit): Internal.Unit;
        gt(with_: Internal.Unit): Internal.Unit;
        abs(): Internal.Unit;
        equals(arg0: object): boolean;
        toString(): string;
        append(sb: Internal.StringBuilder): void;
        static readonly ZERO : Internal.FixedUnit;
        static readonly ONE : Internal.FixedUnit;
        static readonly POS_INFINITY : Internal.FixedUnit;
        static readonly NEG_INFINITY : Internal.FixedUnit;
        readonly name : string;
        static readonly NAN : Internal.FixedUnit;
        get asInt(): number;
        get asBoolean(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Int2LongFunction implements it.unimi.dsi.fastutil.Function<number, number>, Internal.IntToLongFunction {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        andThenShort(arg0: Internal.Long2ShortFunction): Internal.Int2ShortFunction;
        composeByte(arg0: Internal.Byte2IntFunction): Internal.Byte2LongFunction;
        andThenInt(arg0: Internal.Long2IntFunction): Internal.Int2IntFunction;
        composeReference<T>(arg0: Internal.Reference2IntFunction<T>): Internal.Reference2LongFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: number) => T;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: number): number;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: object): object;
        remove(arg0: object): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Long2DoubleFunction): Internal.Int2DoubleFunction;
        andThenObject<T>(arg0: Internal.Long2ObjectFunction<T>): Internal.Int2ObjectFunction<T>;
        get(arg0: object): number;
        get(arg0: object): object;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Long2LongFunction): Internal.Int2LongFunction;
        composeLong(arg0: Internal.Long2IntFunction): Internal.Long2LongFunction;
        andThenByte(arg0: Internal.Long2ByteFunction): Internal.Int2ByteFunction;
        andThenFloat(arg0: Internal.Long2FloatFunction): Internal.Int2FloatFunction;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2IntFunction): Internal.Int2LongFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2IntFunction): Internal.Float2LongFunction;
        andThenChar(arg0: Internal.Long2CharFunction): Internal.Int2CharFunction;
        applyAsLong(arg0: number): number;
        composeObject<T>(arg0: Internal.Object2IntFunction<T>): Internal.Object2LongFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => number;
        composeShort(arg0: Internal.Short2IntFunction): Internal.Short2LongFunction;
        andThenReference<T>(arg0: Internal.Long2ReferenceFunction<T>): Internal.Int2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2IntFunction): Internal.Char2LongFunction;
        composeDouble(arg0: Internal.Double2IntFunction): Internal.Double2LongFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface RecipeType <T> {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Instant implements Internal.Temporal, Internal.TemporalAdjuster, Internal.Comparable<Internal.Instant>, Internal.Serializable {
        static ofEpochSecond(arg0: number, arg1: number): Internal.Instant;
        static ofEpochSecond(arg0: number): Internal.Instant;
        minus(arg0: Internal.TemporalAmount): Internal.Instant;
        minus(arg0: Internal.TemporalAmount): Internal.Temporal;
        minus(arg0: number, arg1: Internal.TemporalUnit): Internal.Instant;
        minus(arg0: number, arg1: Internal.TemporalUnit): Internal.Temporal;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        adjustInto(arg0: Internal.Temporal): Internal.Temporal;
        static ofEpochMilli(arg0: number): Internal.Instant;
        range(arg0: Internal.TemporalField): Internal.ValueRange;
        minusMillis(arg0: number): Internal.Instant;
        compareTo(arg0: Internal.Instant): number;
        compareTo(arg0: object): number;
        notify(): void;
        hashCode(): number;
        static now(): Internal.Instant;
        static now(arg0: Internal.Clock): Internal.Instant;
        get(arg0: Internal.TemporalField): number;
        plusSeconds(arg0: number): Internal.Instant;
        static from(arg0: Internal.TemporalAccessor): Internal.Instant;
        plusNanos(arg0: number): Internal.Instant;
        atOffset(arg0: Internal.ZoneOffset): Internal.OffsetDateTime;
        truncatedTo(arg0: Internal.TemporalUnit): Internal.Instant;
        query<R>(arg0: Internal.TemporalQuery<R>): R;
        minusNanos(arg0: number): Internal.Instant;
        toEpochMilli(): number;
        static parse(arg0: Internal.CharSequence): Internal.Instant;
        isSupported(arg0: Internal.TemporalField): boolean;
        isSupported(arg0: Internal.TemporalUnit): boolean;
        atZone(arg0: Internal.ZoneId): Internal.ZonedDateTime;
        isBefore(arg0: Internal.Instant): boolean;
        plus(arg0: Internal.TemporalAmount): Internal.Temporal;
        plus(arg0: Internal.TemporalAmount): Internal.Instant;
        plus(arg0: number, arg1: Internal.TemporalUnit): Internal.Instant;
        plus(arg0: number, arg1: Internal.TemporalUnit): Internal.Temporal;
        getLong(arg0: Internal.TemporalField): number;
        with(arg0: Internal.TemporalAdjuster): Internal.Instant;
        with(arg0: Internal.TemporalAdjuster): Internal.Temporal;
        with(arg0: Internal.TemporalField, arg1: number): Internal.Instant;
        with(arg0: Internal.TemporalField, arg1: number): Internal.Temporal;
        plusMillis(arg0: number): Internal.Instant;
        equals(arg0: object): boolean;
        until(arg0: Internal.Temporal, arg1: Internal.TemporalUnit): number;
        toString(): string;
        minusSeconds(arg0: number): Internal.Instant;
        isAfter(arg0: Internal.Instant): boolean;
        static readonly MIN : Internal.Instant;
        static readonly MAX : Internal.Instant;
        static readonly EPOCH : Internal.Instant;
        get nano(): number;
        get epochSecond(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class AttributedCharacterIterator$Attribute implements Internal.Serializable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        static readonly LANGUAGE : Internal.AttributedCharacterIterator$Attribute;
        static readonly INPUT_METHOD_SEGMENT : Internal.AttributedCharacterIterator$Attribute;
        static readonly READING : Internal.AttributedCharacterIterator$Attribute;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class LocalPlayer extends Internal.AbstractClientPlayer {
        backpackedMoved(): boolean;
        handler$zbc000$onFallFlying(arg0: number, arg1: number, arg2: number, arg3: Internal.CallbackInfo): void;
        onEndimationEnd(arg0: Internal.PlayableEndimation, arg1: Internal.PlayableEndimation): void;
        canBeRiddenInWater(arg0: Internal.Entity): boolean;
        handler$zzo000$tickHead(arg0: Internal.CallbackInfo): void;
        isEndimationPlaying(arg0: Internal.PlayableEndimation): boolean;
        isActive(): boolean;
        handler$zgm001$tick(arg0: Internal.CallbackInfo): void;
        create$callSpawnItemParticles(arg0: Internal.ItemStack, arg1: number): void;
        handler$zjn000$onUpdateFluidOnEyes(arg0: Internal.CallbackInfo): void;
        changeDimension(arg0: Internal.ServerLevel, arg1: Internal.ITeleporter): Internal.Entity;
        serializeNBT(): Internal.Tag;
        serializeNBT(): Internal.CompoundTag;
        invalidateCaps(): void;
        foodEatenKJS(is: Internal.ItemStack): void;
        revive(): void;
        getDigSpeed(arg0: Internal.BlockState, arg1: BlockPos): number;
        canUpdate(): boolean;
        canUpdate(arg0: boolean): void;
        handler$bgc000$tryShortcutFluidPushing(tag: net.minecraft.tags.Tag<any>, speed: number, cir: Internal.CallbackInfoReturnable<any>, box: Internal.AABB, x1: number, x2: number, y1: number, y2: number, z1: number, z2: number, zero: number): void;
        resetEndimation(): void;
        areCapsCompatible(arg0: Internal.CapabilityDispatcher): boolean;
        getEyeHeightAccess(arg0: Internal.Pose, arg1: Internal.EntityDimensions): number;
        reviveCaps(): void;
        lithiumOnBlockCacheDeleted(): void;
        handler$zgd000$diet$constructPlayer(arg0: Internal.CallbackInfo): void;
        canRiderInteract(): boolean;
        handler$zbc000$locateAmmo(arg0: Internal.ItemStack, arg1: Internal.CallbackInfoReturnable<any>, arg2: Internal.Predicate<any>): void;
        getEntries(arg0: boolean): Internal.Set<any>;
        onAddedToWorld(): void;
        handler$zcp000$read(arg0: Internal.CompoundTag, arg1: Internal.CallbackInfo): void;
        canTrample(arg0: Internal.BlockState, arg1: BlockPos, arg2: number): boolean;
        getClassification(arg0: boolean): Internal.MobCategory;
        onEndimationStart(arg0: Internal.PlayableEndimation, arg1: Internal.PlayableEndimation): void;
        isNoEndimationPlaying(): boolean;
        lithiumSetClimbingMobCachingSectionUpdateBehavior(listenForCachedBlockChanges: boolean): void;
        shouldRiderSit(): boolean;
        getPickedResult(arg0: Internal.HitResult): Internal.ItemStack;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        handler$zeg000$onIsScoping(arg0: Internal.CallbackInfoReturnable<any>): void;
        notifyAll(): void;
        lithiumOnEquipmentChanged(): void;
        lithiumOnBlockCacheSet(newState: Internal.BlockState): void;
        handler$zjn000$onUpdateFluidOnEyeAssign(arg0: Internal.CallbackInfo): void;
        notify(): void;
        handler$zzo000$moveStep(arg0: Internal.MoverType, arg1: Vec3, arg2: Internal.CallbackInfo): void;
        endimateTick(): void;
        isDirty(): boolean;
        hashCode(): number;
        updateSyncFields(arg0: Internal.LocalPlayer): void;
        isAddedToWorld(): boolean;
        addListener(listener: Internal.NearbyEntityListener): void;
        onRemovedFromWorld(): void;
        handler$zed000$onGetFieldOfViewModifier(arg0: Internal.CallbackInfoReturnable<any>): void;
        isMultipartEntity(): boolean;
        deserializeNBT(arg0: Internal.CompoundTag): void;
        deserializeNBT(arg0: Internal.Tag): void;
        curePotionEffects(arg0: Internal.ItemStack): boolean;
        clean(): void;
        asKJS(): object;
        handler$zef000$onIsUsingItem(arg0: Internal.CallbackInfoReturnable<any>): void;
        getValue(arg0: Internal.TrackedData<any>): object;
        handler$cdd000$noSwimmingWithHeavyBootsOn(arg0: Internal.CallbackInfoReturnable<any>): void;
        shouldRiderFaceForward(arg0: Internal.Player): boolean;
        setValue(arg0: Internal.TrackedData<any>, arg1: object): void;
        equals(arg0: object): boolean;
        toString(): string;
        getBackpackedInventory(): Internal.BackpackInventory;
        refreshDisplayName(): void;
        backpackedInventory : Internal.BackpackInventory;
        static readonly PERSISTED_NBT_TAG : "PlayerPersisted";
        set citadelEntityData(arg0: Internal.CompoundTag);
        get cachedFeetBlockState(): Internal.BlockState;
        get pos(): Internal.Position;
        get persistentDataKJS(): Internal.CompoundTag;
        get endimatedState(): Internal.Endimatable$EndimatedState;
        set forcedPose(arg0: Internal.Pose);
        get effectHandler(): Internal.EndimationEffectHandler;
        get dataEffectColorId_$md$85ada3$1(): Internal.EntityDataAccessor<any>;
        set animationTick(arg0: number);
        get citadelEntityData(): Internal.CompoundTag;
        get listener(): Internal.NearbyEntityListenerMulti;
        get isInsidePortal(): boolean;
        get persistentData(): Internal.CompoundTag;
        get remainingFireTicks(): number;
        get stagesRawKJS(): Internal.Stages;
        get dataMap(): Map<any, any>;
        get stages(): Internal.Stages;
        get entityChangeListener(): Internal.EntityInLevelCallback;
        set dataMap(arg0: Map<any, any>);
        get dataEffectAmbienceId_$md$85ada3$0(): Internal.EntityDataAccessor<any>;
        get lastPos(): BlockPos;
        get parts(): Internal.PartEntity<object>[];
        get playingEndimation(): Internal.PlayableEndimation;
        get dirtyEntries(): Internal.Set<any>;
        set playingEndimation(arg0: Internal.PlayableEndimation);
        get animationTick(): number;
        set remainingFireTicks(arg0: number);
        get forcedPose(): Internal.Pose;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ClientWorldAccessor {
        get entityManager(): Internal.TransientEntitySectionManager<Internal.Entity>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface BlockPathingBehavior {
        getPathNodeType(arg0: Internal.BlockState): Internal.BlockPathTypes;
        getPathNodeTypeAsNeighbor(arg0: Internal.BlockState): Internal.BlockPathTypes;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface AsKJS {
        asKJS(): object;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class EnderMan extends Internal.Monster implements Internal.NeutralMob {
        backpackedMoved(): boolean;
        updateNavigationRegistration(): void;
        onEndimationEnd(arg0: Internal.PlayableEndimation, arg1: Internal.PlayableEndimation): void;
        canBeRiddenInWater(arg0: Internal.Entity): boolean;
        handler$zzo000$tickHead(arg0: Internal.CallbackInfo): void;
        isEndimationPlaying(arg0: Internal.PlayableEndimation): boolean;
        isActive(): boolean;
        handler$zgm001$tick(arg0: Internal.CallbackInfo): void;
        create$callSpawnItemParticles(arg0: Internal.ItemStack, arg1: number): void;
        handler$zjn000$onUpdateFluidOnEyes(arg0: Internal.CallbackInfo): void;
        changeDimension(arg0: Internal.ServerLevel, arg1: Internal.ITeleporter): Internal.Entity;
        serializeNBT(): Internal.Tag;
        serializeNBT(): Internal.CompoundTag;
        invalidateCaps(): void;
        foodEatenKJS(is: Internal.ItemStack): void;
        revive(): void;
        canUpdate(): boolean;
        canUpdate(arg0: boolean): void;
        handler$bgc000$tryShortcutFluidPushing(tag: net.minecraft.tags.Tag<any>, speed: number, cir: Internal.CallbackInfoReturnable<any>, box: Internal.AABB, x1: number, x2: number, y1: number, y2: number, z1: number, z2: number, zero: number): void;
        resetEndimation(): void;
        areCapsCompatible(arg0: Internal.CapabilityDispatcher): boolean;
        getEyeHeightAccess(arg0: Internal.Pose, arg1: Internal.EntityDimensions): number;
        reviveCaps(): void;
        lithiumOnBlockCacheDeleted(): void;
        canRiderInteract(): boolean;
        getEntries(arg0: boolean): Internal.Set<any>;
        onAddedToWorld(): void;
        isRegisteredToWorld(): boolean;
        handler$zcp000$read(arg0: Internal.CompoundTag, arg1: Internal.CallbackInfo): void;
        canTrample(arg0: Internal.BlockState, arg1: BlockPos, arg2: number): boolean;
        getClassification(arg0: boolean): Internal.MobCategory;
        onEndimationStart(arg0: Internal.PlayableEndimation, arg1: Internal.PlayableEndimation): void;
        isNoEndimationPlaying(): boolean;
        lithiumSetClimbingMobCachingSectionUpdateBehavior(listenForCachedBlockChanges: boolean): void;
        shouldRiderSit(): boolean;
        getPickedResult(arg0: Internal.HitResult): Internal.ItemStack;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        lithiumOnEquipmentChanged(): void;
        lithiumOnBlockCacheSet(newState: Internal.BlockState): void;
        handler$zjn000$onUpdateFluidOnEyeAssign(arg0: Internal.CallbackInfo): void;
        notify(): void;
        handler$zzo000$moveStep(arg0: Internal.MoverType, arg1: Vec3, arg2: Internal.CallbackInfo): void;
        endimateTick(): void;
        isDirty(): boolean;
        hashCode(): number;
        handler$zff000$curio$isLookingAtMe(arg0: Internal.Player, arg1: Internal.CallbackInfoReturnable<any>): void;
        isAddedToWorld(): boolean;
        addListener(listener: Internal.NearbyEntityListener): void;
        onRemovedFromWorld(): void;
        isMultipartEntity(): boolean;
        deserializeNBT(arg0: Internal.CompoundTag): void;
        deserializeNBT(arg0: Internal.Tag): void;
        curePotionEffects(arg0: Internal.ItemStack): boolean;
        clean(): void;
        asKJS(): object;
        getValue(arg0: Internal.TrackedData<any>): object;
        shouldRiderFaceForward(arg0: Internal.Player): boolean;
        setValue(arg0: Internal.TrackedData<any>, arg1: object): void;
        equals(arg0: object): boolean;
        toString(): string;
        set citadelEntityData(arg0: Internal.CompoundTag);
        get cachedFeetBlockState(): Internal.BlockState;
        get pos(): Internal.Position;
        get persistentDataKJS(): Internal.CompoundTag;
        get endimatedState(): Internal.Endimatable$EndimatedState;
        get registeredNavigation(): Internal.PathNavigation;
        get effectHandler(): Internal.EndimationEffectHandler;
        get dataEffectColorId_$md$85ada3$1(): Internal.EntityDataAccessor<any>;
        set animationTick(arg0: number);
        get citadelEntityData(): Internal.CompoundTag;
        get listener(): Internal.NearbyEntityListenerMulti;
        get isInsidePortal(): boolean;
        get persistentData(): Internal.CompoundTag;
        get remainingFireTicks(): number;
        get dataMap(): Map<any, any>;
        get entityChangeListener(): Internal.EntityInLevelCallback;
        set dataMap(arg0: Map<any, any>);
        get dataEffectAmbienceId_$md$85ada3$0(): Internal.EntityDataAccessor<any>;
        get lastPos(): BlockPos;
        set registeredToWorld(navigation: Internal.PathNavigation);
        get parts(): Internal.PartEntity<object>[];
        get playingEndimation(): Internal.PlayableEndimation;
        get dirtyEntries(): Internal.Set<any>;
        set playingEndimation(arg0: Internal.PlayableEndimation);
        get animationTick(): number;
        set remainingFireTicks(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface RecvByteBufAllocator$Handle {
        continueReading(): boolean;
        incMessagesRead(arg0: number): void;
        allocate(arg0: Internal.ByteBufAllocator): Internal.ByteBuf;
        guess(): number;
        reset(arg0: Internal.ChannelConfig): void;
        readComplete(): void;
        attemptedBytesRead(): number;
        attemptedBytesRead(arg0: number): void;
        lastBytesRead(): number;
        lastBytesRead(arg0: number): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Context {
        static throwAsScriptRuntimeEx(e: Internal.Throwable): Internal.RuntimeException;
        isSealed(): boolean;
        callFunctionWithContinuations(function_: Internal.Callable, scope: Internal.Scriptable, args: object[]): object;
        executeScriptWithContinuations(script: Internal.Script, scope: Internal.Scriptable): object;
        createClassLoader(parent: Internal.ClassLoader): Internal.GeneratedClassLoader;
        evaluateReader(scope: Internal.Scriptable, in_: Internal.Reader, sourceName: string, lineno: number, securityDomain: object): object;
        static javaToJS(value: object, scope: Internal.Scriptable): object;
        compileReader(in_: Internal.Reader, sourceName: string, lineno: number, securityDomain: object): Internal.Script;
        static toBoolean(value: object): boolean;
        static enter(): Internal.Context;
        captureContinuation(): Internal.ContinuationPending;
        resumeContinuation(continuation: object, scope: Internal.Scriptable, functionResult: object): object;
        static reportRuntimeError0(messageId: string): Internal.EvaluatorException;
        static reportRuntimeError1(messageId: string, arg1: object): Internal.EvaluatorException;
        static reportRuntimeError2(messageId: string, arg1: object, arg2: object): Internal.EvaluatorException;
        static reportRuntimeError3(messageId: string, arg1: object, arg2: object, arg3: object): Internal.EvaluatorException;
        static reportRuntimeError(message: string): Internal.EvaluatorException;
        static reportRuntimeError(message: string, sourceName: string, lineno: number, lineSource: string, lineOffset: number): Internal.EvaluatorException;
        hasTypeWrappers(): boolean;
        getThreadLocal(key: object): object;
        removePropertyChangeListener(l: Internal.PropertyChangeListener): void;
        putThreadLocal(key: object, value: object): void;
        static exit(): void;
        getElements(object: Internal.Scriptable): object[];
        static reportRuntimeError4(messageId: string, arg1: object, arg2: object, arg3: object, arg4: object): Internal.EvaluatorException;
        hasFeature(featureIndex: number): boolean;
        initSafeStandardObjects(scope: Internal.ScriptableObject): Internal.Scriptable;
        initSafeStandardObjects(scope: Internal.ScriptableObject, sealed: boolean): Internal.ScriptableObject;
        initSafeStandardObjects(): Internal.ScriptableObject;
        static toNumber(value: object): number;
        initStandardObjects(): Internal.ScriptableObject;
        initStandardObjects(scope: Internal.ScriptableObject): Internal.Scriptable;
        initStandardObjects(scope: Internal.ScriptableObject, sealed: boolean): Internal.ScriptableObject;
        isStrictMode(): boolean;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        seal(sealKey: object): void;
        setGenerateObserverCount(generateObserverCount: boolean): void;
        evaluateString(scope: Internal.Scriptable, source: string, sourceName: string, lineno: number, securityDomain: object): object;
        notify(): void;
        compileFunction(scope: Internal.Scriptable, source: string, sourceName: string, lineno: number, securityDomain: object): dev.latvian.mods.rhino.Function;
        hashCode(): number;
        newObject(scope: Internal.Scriptable): Internal.Scriptable;
        newObject(scope: Internal.Scriptable, constructorName: string): Internal.Scriptable;
        newObject(scope: Internal.Scriptable, constructorName: string, args: object[]): Internal.Scriptable;
        static jsToJava(value: object, desiredType: Internal.Class<object>): object;
        static toObject(value: object, scope: Internal.Scriptable): Internal.Scriptable;
        addPropertyChangeListener(l: Internal.PropertyChangeListener): void;
        static getSourcePositionFromStack(linep: number[]): string;
        static reportWarning(message: string, sourceName: string, lineno: number, lineSource: string, lineOffset: number): void;
        static reportWarning(message: string): void;
        static reportWarning(message: string, t: Internal.Throwable): void;
        stringIsCompilableUnit(source: string): boolean;
        removeThreadLocal(key: object): void;
        newArray(scope: Internal.Scriptable, length: number): Internal.Scriptable;
        newArray(scope: Internal.Scriptable, elements: object[]): Internal.Scriptable;
        static reportError(message: string, sourceName: string, lineno: number, lineSource: string, lineOffset: number): void;
        static reportError(message: string): void;
        static call(factory: Internal.ContextFactory, callable: Internal.Callable, scope: Internal.Scriptable, thisObj: Internal.Scriptable, args: object[]): object;
        equals(arg0: object): boolean;
        compileString(source: string, sourceName: string, lineno: number, securityDomain: object): Internal.Script;
        static toString(value: object): string;
        toString(): string;
        unseal(sealKey: object): void;
        static enterWithNewFactory(): Internal.Context;
        static readonly FEATURE_INTEGER_WITHOUT_DECIMAL_PLACE : 18;
        static readonly FEATURE_ENHANCED_JAVA_ACCESS : 13;
        static readonly FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER : 3;
        static readonly FEATURE_DYNAMIC_SCOPE : 7;
        static readonly FEATURE_LITTLE_ENDIAN : 19;
        static readonly FEATURE_THREAD_SAFE_OBJECTS : 17;
        generateObserverCount : boolean;
        static readonly FEATURE_STRICT_MODE : 11;
        static readonly FEATURE_WARNING_AS_ERROR : 12;
        static readonly FEATURE_STRICT_EVAL : 9;
        static readonly FEATURE_LOCATION_INFORMATION_IN_ERROR : 10;
        static readonly errorReporterProperty : "error reporter";
        static readonly FEATURE_V8_EXTENSIONS : 14;
        static readonly FEATURE_STRICT_VARS : 8;
        static readonly FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME : 2;
        static readonly FEATURE_PARENT_PROTO_PROPERTIES : 5;
        static readonly languageVersionProperty : "language version";
        static readonly emptyArgs : object[];
        get classShutterSetter(): Internal.Context$ClassShutterSetter;
        get applicationClassLoader(): Internal.ClassLoader;
        get typeWrappers(): Internal.TypeWrappers;
        get instructionObserverThreshold(): number;
        get undefinedValue(): object;
        set classShutter(shutter: Internal.ClassShutter);
        set instructionObserverThreshold(threshold: number);
        set locale(loc: Internal.Locale);
        set applicationClassLoader(loader: Internal.ClassLoader);
        get wrapFactory(): Internal.WrapFactory;
        set wrapFactory(wrapFactory: Internal.WrapFactory);
        get classShutter(): Internal.ClassShutter;
        set errorReporter(reporter: Internal.ErrorReporter);
        set languageVersion(version: number);
        get currentContext(): Internal.Context;
        get factory(): Internal.ContextFactory;
        get errorReporter(): Internal.ErrorReporter;
        get maximumInterpreterStackDepth(): number;
        set maximumInterpreterStackDepth(max: number);
        get locale(): Internal.Locale;
        get context(): Internal.Context;
        get implementationVersion(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class UserPrincipalLookupService {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        lookupPrincipalByGroupName(arg0: string): Internal.GroupPrincipal;
        lookupPrincipalByName(arg0: string): Internal.UserPrincipal;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class NetworkEvent$Context {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        enqueueWork(arg0: Internal.Runnable): Internal.CompletableFuture<void>;
        notifyAll(): void;
        notify(): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        attr<T>(arg0: Internal.AttributeKey<T>): io.netty.util.Attribute<T>;
        get networkManager(): Internal.Connection;
        get direction(): Internal.NetworkDirection;
        get packetHandled(): boolean;
        set packetHandled(arg0: boolean);
        get sender(): Internal.ServerPlayer;
        get packetDispatcher(): Internal.NetworkEvent$PacketDispatcher;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface AnnotatedType implements Internal.AnnotatedElement {
        getAnnotation<T>(arg0: Internal.Class<T>): T;
        get annotatedOwnerType(): Internal.AnnotatedType;
        get type(): Internal.Type;
        get annotations(): Internal.Annotation[];
        get declaredAnnotations(): Internal.Annotation[];
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ItemBuilder extends Internal.BuilderBase {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        maxStackSize(v: number): Internal.ItemBuilder;
        translationKey(key: string): Internal.BuilderBase;
        color(index: number, c: number): Internal.ItemBuilder;
        newID(pre: string, post: string): ResourceLocation;
        displayName(name: string): Internal.BuilderBase;
        notifyAll(): void;
        maxDamage(v: number): Internal.ItemBuilder;
        tooltip(text: Internal.Component): Internal.ItemBuilder;
        containerItem(id: string): Internal.ItemBuilder;
        type(t: Internal.ItemType): Internal.ItemBuilder;
        notify(): void;
        subtypes(fn: (arg0: Internal.ItemStackJS) => Internal.Collection<Internal.ItemStackJS>): Internal.ItemBuilder;
        tier(t: string): Internal.ItemBuilder;
        hashCode(): number;
        burnTime(v: number): Internal.ItemBuilder;
        getAttackSpeed(): number;
        tag(tag: ResourceLocation): Internal.BuilderBase;
        parentModel(m: string): Internal.ItemBuilder;
        attackDamage(f: number): Internal.ItemBuilder;
        group(g: string): Internal.ItemBuilder;
        texture(tex: string): Internal.ItemBuilder;
        miningSpeed(f: number): Internal.ItemBuilder;
        getMiningSpeed(): number;
        food(b: (arg0: Internal.FoodBuilder) => void): Internal.ItemBuilder;
        unstackable(): Internal.ItemBuilder;
        getAttackDamage(): number;
        equals(arg0: object): boolean;
        attackSpeed(f: number): Internal.ItemBuilder;
        toString(): string;
        glow(v: boolean): Internal.ItemBuilder;
        createItemProperties(): Internal.Item$Properties;
        rarity(v: Rarity): Internal.ItemBuilder;
        toolTier : Internal.Tier;
        foodBuilder : Internal.FoodBuilder;
        defaultTags : Internal.Set<ResourceLocation>;
        armorTier : Internal.ArmorMaterial;
        modelJson : Internal.JsonObject;
        static readonly ARMOR_TIERS : Map<string, Internal.ArmorMaterial>;
        readonly id : ResourceLocation;
        item : Internal.Item;
        attackSpeedBaseline : number;
        static readonly TOOL_TIERS : Map<string, Internal.Tier>;
        attackDamageBaseline : number;
        get builderType(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class EntityType <T> extends Internal.ForgeRegistryEntry<Internal.EntityType<object>> implements Internal.EntityTypeTest<Internal.Entity, T>, Internal.EntityTypeExtension {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        setRegistryName(arg0: string, arg1: string): V;
        toString(): string;
        customClientSpawn(arg0: Internal.PlayMessages$SpawnEntity, arg1: Internal.Level): T;
        notify(): void;
        flywheel$setInstancingController(arg0: Internal.EntityInstancingController<any>): void;
        flywheel$getInstancingController(): Internal.EntityInstancingController<any>;
        readonly delegate : () => V;
        get registryName(): ResourceLocation;
        set registryName(arg0: ResourceLocation);
        set registryName(arg0: ResourceLocation);
        set registryName(arg0: string);
        get tags(): Internal.Set<ResourceLocation>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Font implements Internal.IAntiqueTextProvider {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        hasAntiqueInk(): boolean;
        set antiqueInk(arg0: boolean);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface RenderTypeExtension {
        flywheel$getDrawBuffer(): Internal.DrawBuffer;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface PublicKey implements Internal.Key {
        get encoded(): number[];
        get algorithm(): string;
        get format(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface LevelHeightAccessor {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class NestedType extends Internal.Enum<Internal.NestedType> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(name: string): Internal.NestedType;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.NestedType[];
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly SHOW_ALL : Internal.NestedType;
        static readonly SHOW_ACTIVE : Internal.NestedType;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class AbstractInt2IntMap extends Internal.AbstractInt2IntFunction implements Internal.Int2IntMap, Internal.Serializable {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: number, arg1: number): number;
        getOrDefault(arg0: object, arg1: number): number;
        replace(arg0: number, arg1: number, arg2: number): boolean;
        replace(arg0: number, arg1: number, arg2: number): boolean;
        replace(arg0: number, arg1: number): number;
        replace(arg0: number, arg1: number): number;
        replace(arg0: object, arg1: object): object;
        replace(arg0: object, arg1: object, arg2: object): boolean;
        composeByte(arg0: Internal.Byte2IntFunction): Internal.Byte2IntFunction;
        andThen(arg0: Internal.IntUnaryOperator): Internal.IntUnaryOperator;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: number): number;
        put(arg0: number, arg1: number): number;
        containsValue(arg0: number): boolean;
        containsValue(arg0: object): boolean;
        mergeInt(arg0: number, arg1: number, arg2: Internal.IntBinaryOperator): number;
        mergeInt(arg0: number, arg1: number, arg2: java_.util.function_.IntBinaryOperator): number;
        compute(arg0: object, arg1: Internal.BiFunction<any, any, any>): object;
        compute(arg0: number, arg1: (arg0: number, arg1: number) => number): number;
        compute(arg0: number, arg1: (arg0: number, arg1: number) => number): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        merge(arg0: object, arg1: object, arg2: Internal.BiFunction<any, any, any>): object;
        merge(arg0: number, arg1: number, arg2: (arg0: number, arg1: number) => number): number;
        merge(arg0: number, arg1: number, arg2: (arg0: number, arg1: number) => number): number;
        composeLong(arg0: Internal.Long2IntFunction): Internal.Long2IntFunction;
        applyAsInt(arg0: number): number;
        entrySet(): Internal.ObjectSet<Internal.Map$Entry<number, number>>;
        entrySet(): Internal.Set<any>;
        containsKey(arg0: number): boolean;
        containsKey(arg0: object): boolean;
        size(): number;
        compose(arg0: Internal.IntUnaryOperator): Internal.IntUnaryOperator;
        composeShort(arg0: Internal.Short2IntFunction): Internal.Short2IntFunction;
        composeChar(arg0: Internal.Char2IntFunction): Internal.Char2IntFunction;
        composeDouble(arg0: Internal.Double2IntFunction): Internal.Double2IntFunction;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        computeIfAbsent(arg0: number, arg1: Internal.IntUnaryOperator): number;
        computeIfAbsent(arg0: object, arg1: Internal.Function<any, any>): object;
        computeIfAbsent(arg0: number, arg1: (arg0: number) => number): number;
        computeIfAbsent(arg0: number, arg1: Internal.Int2IntFunction): number;
        notifyAll(): void;
        values(): Internal.Collection<any>;
        values(): Internal.IntCollection;
        andThenShort(arg0: Internal.Int2ShortFunction): Internal.Int2ShortFunction;
        computeIfAbsentPartial(arg0: number, arg1: Internal.Int2IntFunction): number;
        replaceAll(arg0: (arg0: K, arg1: V) => V): void;
        andThenInt(arg0: Internal.Int2IntFunction): Internal.Int2IntFunction;
        remove(arg0: number): number;
        remove(arg0: object): object;
        remove(arg0: object): number;
        remove(arg0: number, arg1: number): boolean;
        remove(arg0: object, arg1: object): boolean;
        notify(): void;
        int2IntEntrySet(): Internal.ObjectSet<Internal.Int2IntMap$Entry>;
        andThenDouble(arg0: Internal.Int2DoubleFunction): Internal.Int2DoubleFunction;
        hashCode(): number;
        get(arg0: object): object;
        get(arg0: object): number;
        get(arg0: number): number;
        putAll(arg0: Map<number, number>): void;
        andThenLong(arg0: Internal.Int2LongFunction): Internal.Int2LongFunction;
        keySet(): Internal.Set<any>;
        keySet(): Internal.IntSet;
        andThenByte(arg0: Internal.Int2ByteFunction): Internal.Int2ByteFunction;
        andThenFloat(arg0: Internal.Int2FloatFunction): Internal.Int2FloatFunction;
        computeIfAbsentNullable(arg0: number, arg1: Internal.IntFunction<number>): number;
        apply(arg0: K): V;
        forEach(arg0: (arg0: number, arg1: number) => void): void;
        composeInt(arg0: Internal.Int2IntFunction): Internal.Int2IntFunction;
        clear(): void;
        isEmpty(): boolean;
        composeFloat(arg0: Internal.Float2IntFunction): Internal.Float2IntFunction;
        andThenChar(arg0: Internal.Int2CharFunction): Internal.Int2CharFunction;
        computeIfPresent(arg0: number, arg1: (arg0: number, arg1: number) => number): number;
        computeIfPresent(arg0: object, arg1: Internal.BiFunction<any, any, any>): object;
        computeIfPresent(arg0: number, arg1: (arg0: number, arg1: number) => number): number;
        equals(arg0: object): boolean;
        toString(): string;
        putIfAbsent(arg0: object, arg1: object): object;
        putIfAbsent(arg0: number, arg1: number): number;
        putIfAbsent(arg0: number, arg1: number): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ScriptPackInfo {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        readonly displayName : Internal.Component;
        readonly namespace : string;
        readonly pathStart : string;
        readonly scripts : Internal.List<Internal.ScriptFileInfo>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface MinecraftStub {
        moveRenderOut(): void;
        moveRenderIn(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Function <T, R> {
        compose<V>(arg0: (arg0: V) => T): (arg0: V) => R;
        apply(arg0: T): R;
        andThen<V>(arg0: (arg0: R) => V): (arg0: T) => V;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Products$P11 <F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        apply<R>(arg0: Internal.Applicative<F, object>, arg1: Internal.Function11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R>): Internal.App<F, R>;
        apply<R>(arg0: Internal.Applicative<F, object>, arg1: Internal.App<F, Internal.Function11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R>>): Internal.App<F, R>;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class Text implements Internal.Iterable<Internal.Text>, Internal.Comparable<Internal.Text>, Internal.JsonSerializable, Internal.WrappedJS {
        rawCopy(): Internal.Text;
        hasStyle(): boolean;
        compareTo(other: Internal.Text): number;
        compareTo(arg0: object): number;
        italic(): Internal.Text;
        italic(value: boolean): Internal.Text;
        static componentOf(o: object): Internal.Component;
        red(): Internal.Text;
        aqua(): Internal.Text;
        iterator(): Internal.Iterator<Internal.Text>;
        white(): Internal.Text;
        noColor(): Internal.Text;
        darkPurple(): Internal.Text;
        static join(separator: Internal.Text, texts: Internal.Iterable<Internal.Text>): Internal.Text;
        obfuscated(): Internal.Text;
        obfuscated(value: boolean): Internal.Text;
        write(buffer: Internal.FriendlyByteBuf): void;
        static read(buffer: Internal.FriendlyByteBuf): Internal.Text;
        spliterator(): Internal.Spliterator<T>;
        bold(): Internal.Text;
        bold(value: boolean): Internal.Text;
        click(value: string): Internal.Text;
        toJson(): Internal.JsonElement;
        darkGray(): Internal.Text;
        insertion(value: string): Internal.Text;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        color(c: Internal.Color): Internal.Text;
        notifyAll(): void;
        yellow(): Internal.Text;
        darkBlue(): Internal.Text;
        notify(): void;
        gold(): Internal.Text;
        hover(text: object): Internal.Text;
        gray(): Internal.Text;
        darkRed(): Internal.Text;
        hashCode(): number;
        static of(o: object): Internal.Text;
        strikethrough(): Internal.Text;
        strikethrough(value: boolean): Internal.Text;
        copy(): Internal.Text;
        rawComponent(): Internal.MutableComponent;
        createStyleJson(): Internal.JsonObject;
        hasSiblings(): boolean;
        green(): Internal.Text;
        darkGreen(): Internal.Text;
        forEach(arg0: (arg0: T) => void): void;
        lightPurple(): Internal.Text;
        black(): Internal.Text;
        darkAqua(): Internal.Text;
        component(): Internal.Component;
        blue(): Internal.Text;
        underlined(): Internal.Text;
        underlined(value: boolean): Internal.Text;
        equals(obj: object): boolean;
        toString(): string;
        createStyle(): Internal.Style;
        append(sibling: object): Internal.Text;
        font(value: string): Internal.Text;
        get siblings(): Internal.List<Internal.Text>;
        get string(): string;
        get styleAndSiblingJson(): Internal.JsonObject;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface WorldEntityByChunkAccess {
        getEntitiesInChunk(arg0: number, arg1: number): Internal.Collection<Internal.Entity>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ItemColor {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface NearbyEntityListenerProvider {
        addListener(arg0: Internal.NearbyEntityListener): void;
        get listener(): Internal.NearbyEntityListenerMulti;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class UpgradeData {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class Particle {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        shouldCull(): boolean;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class EntityDimensions {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface MessageSizeEstimator$Handle {
        size(arg0: object): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Char2ObjectFunction <V> implements it.unimi.dsi.fastutil.Function<string, V>, Internal.IntFunction<V> {
        getOrDefault(arg0: object, arg1: V): V;
        getOrDefault(arg0: string, arg1: V): V;
        andThenShort(arg0: Internal.Object2ShortFunction<V>): Internal.Char2ShortFunction;
        composeByte(arg0: Internal.Byte2CharFunction): Internal.Byte2ObjectFunction<V>;
        andThenInt(arg0: Internal.Object2IntFunction<V>): Internal.Char2IntFunction;
        composeReference<T>(arg0: Internal.Reference2CharFunction<T>): (arg0: T) => V;
        put(arg0: string, arg1: V): V;
        put(arg0: object, arg1: object): object;
        put(arg0: string, arg1: V): V;
        remove(arg0: string): V;
        remove(arg0: object): V;
        defaultReturnValue(): V;
        defaultReturnValue(arg0: V): void;
        andThenDouble(arg0: Internal.Object2DoubleFunction<V>): Internal.Char2DoubleFunction;
        andThenObject<T>(arg0: (arg0: V) => T): Internal.Char2ObjectFunction<T>;
        get(arg0: object): V;
        get(arg0: string): V;
        andThenLong(arg0: Internal.Object2LongFunction<V>): Internal.Char2LongFunction;
        composeLong(arg0: Internal.Long2CharFunction): Internal.Long2ObjectFunction<V>;
        andThenByte(arg0: Internal.Object2ByteFunction<V>): Internal.Char2ByteFunction;
        andThenFloat(arg0: Internal.Object2FloatFunction<V>): Internal.Char2FloatFunction;
        apply(arg0: number): V;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: string): boolean;
        composeInt(arg0: Internal.Int2CharFunction): Internal.Int2ObjectFunction<V>;
        clear(): void;
        composeFloat(arg0: Internal.Float2CharFunction): Internal.Float2ObjectFunction<V>;
        andThenChar(arg0: Internal.Object2CharFunction<V>): Internal.Char2CharFunction;
        composeObject<T>(arg0: Internal.Object2CharFunction<T>): (arg0: T) => V;
        size(): number;
        compose<T>(arg0: (arg0: T) => string): (arg0: T) => V;
        composeShort(arg0: Internal.Short2CharFunction): Internal.Short2ObjectFunction<V>;
        andThenReference<T>(arg0: (arg0: V) => T): Internal.Char2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2CharFunction): Internal.Char2ObjectFunction<V>;
        composeDouble(arg0: Internal.Double2CharFunction): Internal.Double2ObjectFunction<V>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class EventPriority extends Internal.Enum<Internal.EventPriority> implements Internal.IEventListener {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(arg0: string): Internal.EventPriority;
        listenerName(): string;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.EventPriority[];
        name(): string;
        toString(): string;
        invoke(arg0: Internal.Event): void;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly LOWEST : Internal.EventPriority;
        static readonly HIGH : Internal.EventPriority;
        static readonly LOW : Internal.EventPriority;
        static readonly HIGHEST : Internal.EventPriority;
        static readonly NORMAL : Internal.EventPriority;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class FileSystem implements Internal.Closeable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        supportedFileAttributeViews(): Internal.Set<string>;
        notifyAll(): void;
        newWatchService(): Internal.WatchService;
        notify(): void;
        isReadOnly(): boolean;
        isOpen(): boolean;
        provider(): Internal.FileSystemProvider;
        hashCode(): number;
        equals(arg0: object): boolean;
        getPath(arg0: string, arg1: string[]): Internal.Path;
        toString(): string;
        getPathMatcher(arg0: string): Internal.PathMatcher;
        close(): void;
        get fileStores(): Internal.Iterable<Internal.FileStore>;
        get rootDirectories(): Internal.Iterable<Internal.Path>;
        get separator(): string;
        get userPrincipalLookupService(): Internal.UserPrincipalLookupService;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Month extends Internal.Enum<Internal.Month> implements Internal.TemporalAccessor, Internal.TemporalAdjuster {
        firstMonthOfQuarter(): Internal.Month;
        minus(arg0: number): Internal.Month;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        firstDayOfYear(arg0: boolean): number;
        notifyAll(): void;
        minLength(): number;
        static values(): Internal.Month[];
        adjustInto(arg0: Internal.Temporal): Internal.Temporal;
        range(arg0: Internal.TemporalField): Internal.ValueRange;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        hashCode(): number;
        static of(arg0: number): Internal.Month;
        get(arg0: Internal.TemporalField): number;
        static from(arg0: Internal.TemporalAccessor): Internal.Month;
        static valueOf(arg0: string): Internal.Month;
        query<R>(arg0: Internal.TemporalQuery<R>): R;
        length(arg0: boolean): number;
        isSupported(arg0: Internal.TemporalField): boolean;
        plus(arg0: number): Internal.Month;
        getLong(arg0: Internal.TemporalField): number;
        getDisplayName(arg0: Internal.TextStyle, arg1: Internal.Locale): string;
        equals(arg0: object): boolean;
        name(): string;
        toString(): string;
        maxLength(): number;
        ordinal(): number;
        static readonly JANUARY : Internal.Month;
        static readonly JUNE : Internal.Month;
        static readonly MAY : Internal.Month;
        static readonly OCTOBER : Internal.Month;
        static readonly DECEMBER : Internal.Month;
        static readonly MARCH : Internal.Month;
        static readonly FEBRUARY : Internal.Month;
        static readonly AUGUST : Internal.Month;
        static readonly JULY : Internal.Month;
        static readonly SEPTEMBER : Internal.Month;
        static readonly NOVEMBER : Internal.Month;
        static readonly APRIL : Internal.Month;
        get value(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class SetTag <T> implements net.minecraft.tags.Tag<T> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface BufferVertexType <T> implements me.jellysquid.mods.sodium.client.model.vertex.type.VertexType<T> {
        createFallbackWriter(arg0: Internal.VertexConsumer): T;
        get bufferVertexFormat(): Internal.BufferVertexFormat;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class LazyOptional <T> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        resolve(): Internal.Optional<T>;
        notifyAll(): void;
        isPresent(): boolean;
        invalidate(): void;
        orElse(arg0: T): T;
        notify(): void;
        orElseThrow<X>(arg0: Internal.NonNullSupplier<X>): T;
        static empty<T>(): Internal.LazyOptional<T>;
        filter(arg0: Internal.NonNullPredicate<T>): Internal.Optional<T>;
        cast<X>(): Internal.LazyOptional<X>;
        orElseGet(arg0: Internal.NonNullSupplier<T>): T;
        hashCode(): number;
        equals(arg0: object): boolean;
        ifPresent(arg0: Internal.NonNullConsumer<T>): void;
        static of<T>(arg0: Internal.NonNullSupplier<T>): Internal.LazyOptional<T>;
        toString(): string;
        map<U>(arg0: Internal.NonNullFunction<T, U>): Internal.Optional<U>;
        lazyMap<U>(arg0: Internal.NonNullFunction<T, U>): Internal.LazyOptional<U>;
        addListener(arg0: Internal.NonNullConsumer<Internal.LazyOptional<T>>): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class LootContext implements Internal.LootContextAccessor {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        repurposedstructures_setQueriedLootTableId(arg0: ResourceLocation): void;
        notify(): void;
        get lootingModifier(): number;
        set queriedLootTableId(arg0: ResourceLocation);
        get queriedLootTableId(): ResourceLocation;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Float2DoubleFunction implements it.unimi.dsi.fastutil.Function<number, number>, Internal.DoubleUnaryOperator {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        applyAsDouble(arg0: number): number;
        andThenShort(arg0: Internal.Double2ShortFunction): Internal.Float2ShortFunction;
        composeByte(arg0: Internal.Byte2FloatFunction): Internal.Byte2DoubleFunction;
        andThenInt(arg0: Internal.Double2IntFunction): Internal.Float2IntFunction;
        composeReference<T>(arg0: Internal.Reference2FloatFunction<T>): Internal.Reference2DoubleFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: number) => T;
        andThen(arg0: Internal.DoubleUnaryOperator): Internal.DoubleUnaryOperator;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: number): number;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: object): object;
        remove(arg0: object): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Double2DoubleFunction): Internal.Float2DoubleFunction;
        andThenObject<T>(arg0: Internal.Double2ObjectFunction<T>): Internal.Float2ObjectFunction<T>;
        get(arg0: object): number;
        get(arg0: object): object;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Double2LongFunction): Internal.Float2LongFunction;
        composeLong(arg0: Internal.Long2FloatFunction): Internal.Long2DoubleFunction;
        andThenByte(arg0: Internal.Double2ByteFunction): Internal.Float2ByteFunction;
        andThenFloat(arg0: Internal.Double2FloatFunction): Internal.Float2FloatFunction;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2FloatFunction): Internal.Int2DoubleFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2FloatFunction): Internal.Float2DoubleFunction;
        andThenChar(arg0: Internal.Double2CharFunction): Internal.Float2CharFunction;
        composeObject<T>(arg0: Internal.Object2FloatFunction<T>): Internal.Object2DoubleFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => number;
        compose(arg0: Internal.DoubleUnaryOperator): Internal.DoubleUnaryOperator;
        composeShort(arg0: Internal.Short2FloatFunction): Internal.Short2DoubleFunction;
        andThenReference<T>(arg0: Internal.Double2ReferenceFunction<T>): Internal.Float2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2FloatFunction): Internal.Char2DoubleFunction;
        composeDouble(arg0: Internal.Double2FloatFunction): Internal.Double2DoubleFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Comparator <T> {
        compare(arg0: T, arg1: T): number;
        thenComparingInt(arg0: Internal.ToIntFunction<T>): Internal.Comparator<T>;
        thenComparingDouble(arg0: Internal.ToDoubleFunction<T>): Internal.Comparator<T>;
        thenComparingLong(arg0: Internal.ToLongFunction<T>): Internal.Comparator<T>;
        thenComparing(arg0: Internal.Comparator<T>): Internal.Comparator<T>;
        thenComparing<U>(arg0: (arg0: T) => U, arg1: Internal.Comparator<U>): Internal.Comparator<T>;
        thenComparing<U>(arg0: (arg0: T) => U): Internal.Comparator<T>;
        equals(arg0: object): boolean;
        reversed(): Internal.Comparator<T>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ClientEntityManagerAccessor <T> {
        get cache(): Internal.EntitySectionStorage<T>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Optional <T> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        or(arg0: () => Internal.Optional<T>): Internal.Optional<T>;
        static ofNullable<T>(arg0: T): Internal.Optional<T>;
        notifyAll(): void;
        isEmpty(): boolean;
        isPresent(): boolean;
        orElse(arg0: T): T;
        notify(): void;
        orElseThrow<X>(arg0: () => X): T;
        orElseThrow(): T;
        static empty<T>(): Internal.Optional<T>;
        flatMap<U>(arg0: (arg0: T) => Internal.Optional<U>): Internal.Optional<U>;
        filter(arg0: (arg0: T) => boolean): Internal.Optional<T>;
        orElseGet(arg0: () => T): T;
        stream(): Internal.Stream<T>;
        hashCode(): number;
        ifPresentOrElse(arg0: (arg0: T) => void, arg1: Internal.Runnable): void;
        ifPresent(arg0: (arg0: T) => void): void;
        static of<T>(arg0: T): Internal.Optional<T>;
        equals(arg0: object): boolean;
        get(): T;
        toString(): string;
        map<U>(arg0: (arg0: T) => U): Internal.Optional<U>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class BlockBehaviour extends Internal.ForgeRegistryEntry<Internal.Block> implements Internal.BlockAccessor, Internal.BlockKJS {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        setRegistryName(arg0: string, arg1: string): V;
        notify(): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        readonly delegate : () => V;
        get blockStatesKJS(): Internal.List<Internal.BlockState>;
        set explosionResistanceKJS(arg0: number);
        set jumpFactorKJS(arg0: number);
        get registryName(): ResourceLocation;
        set registryName(arg0: ResourceLocation);
        set registryName(arg0: ResourceLocation);
        set registryName(arg0: string);
        set isRandomlyTickingKJS(arg0: boolean);
        set materialKJS(arg0: net.minecraft.world.level.material.Material);
        get material(): net.minecraft.world.level.material.Material;
        set soundTypeKJS(arg0: Internal.SoundType);
        get blockBuilderKJS(): Internal.BlockBuilder;
        set speedFactorKJS(arg0: number);
        set blockBuilderKJS(b: Internal.BlockBuilder);
        set frictionKJS(arg0: number);
        set hasCollisionKJS(arg0: boolean);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ChannelPipeline implements Internal.ChannelInboundInvoker, Internal.ChannelOutboundInvoker, Internal.Iterable<Internal.Map$Entry<string, Internal.ChannelHandler>> {
        disconnect(arg0: Internal.ChannelPromise): Internal.ChannelFuture;
        disconnect(): Internal.ChannelFuture;
        newProgressivePromise(): Internal.ChannelProgressivePromise;
        fireChannelWritabilityChanged(): Internal.ChannelPipeline;
        fireChannelWritabilityChanged(): Internal.ChannelInboundInvoker;
        channel(): io.netty.channel.Channel;
        replace(arg0: string, arg1: string, arg2: Internal.ChannelHandler): Internal.ChannelHandler;
        replace<T>(arg0: Internal.Class<T>, arg1: string, arg2: Internal.ChannelHandler): T;
        replace(arg0: Internal.ChannelHandler, arg1: string, arg2: Internal.ChannelHandler): Internal.ChannelPipeline;
        fireExceptionCaught(arg0: Internal.Throwable): Internal.ChannelPipeline;
        fireExceptionCaught(arg0: Internal.Throwable): Internal.ChannelInboundInvoker;
        fireChannelActive(): Internal.ChannelPipeline;
        fireChannelActive(): Internal.ChannelInboundInvoker;
        removeLast(): Internal.ChannelHandler;
        remove<T>(arg0: Internal.Class<T>): T;
        remove(arg0: string): Internal.ChannelHandler;
        remove(arg0: Internal.ChannelHandler): Internal.ChannelPipeline;
        writeAndFlush(arg0: object, arg1: Internal.ChannelPromise): Internal.ChannelFuture;
        writeAndFlush(arg0: object): Internal.ChannelFuture;
        addLast(arg0: Internal.EventExecutorGroup, arg1: string, arg2: Internal.ChannelHandler): Internal.ChannelPipeline;
        addLast(arg0: string, arg1: Internal.ChannelHandler): Internal.ChannelPipeline;
        addLast(arg0: Internal.ChannelHandler[]): Internal.ChannelPipeline;
        addLast(arg0: Internal.EventExecutorGroup, arg1: Internal.ChannelHandler[]): Internal.ChannelPipeline;
        addAfter(arg0: string, arg1: string, arg2: Internal.ChannelHandler): Internal.ChannelPipeline;
        addAfter(arg0: Internal.EventExecutorGroup, arg1: string, arg2: string, arg3: Internal.ChannelHandler): Internal.ChannelPipeline;
        bind(arg0: Internal.SocketAddress): Internal.ChannelFuture;
        bind(arg0: Internal.SocketAddress, arg1: Internal.ChannelPromise): Internal.ChannelFuture;
        flush(): Internal.ChannelPipeline;
        flush(): Internal.ChannelOutboundInvoker;
        removeFirst(): Internal.ChannelHandler;
        get<T>(arg0: Internal.Class<T>): T;
        get(arg0: string): Internal.ChannelHandler;
        context(arg0: Internal.ChannelHandler): Internal.ChannelHandlerContext;
        context(arg0: string): Internal.ChannelHandlerContext;
        context(arg0: Internal.Class<Internal.ChannelHandler>): Internal.ChannelHandlerContext;
        close(arg0: Internal.ChannelPromise): Internal.ChannelFuture;
        close(): Internal.ChannelFuture;
        write(arg0: object): Internal.ChannelFuture;
        write(arg0: object, arg1: Internal.ChannelPromise): Internal.ChannelFuture;
        connect(arg0: Internal.SocketAddress, arg1: Internal.SocketAddress, arg2: Internal.ChannelPromise): Internal.ChannelFuture;
        connect(arg0: Internal.SocketAddress, arg1: Internal.ChannelPromise): Internal.ChannelFuture;
        connect(arg0: Internal.SocketAddress): Internal.ChannelFuture;
        connect(arg0: Internal.SocketAddress, arg1: Internal.SocketAddress): Internal.ChannelFuture;
        newPromise(): Internal.ChannelPromise;
        firstContext(): Internal.ChannelHandlerContext;
        read(): Internal.ChannelOutboundInvoker;
        fireChannelInactive(): Internal.ChannelPipeline;
        fireChannelInactive(): Internal.ChannelInboundInvoker;
        fireChannelReadComplete(): Internal.ChannelPipeline;
        fireChannelReadComplete(): Internal.ChannelInboundInvoker;
        last(): Internal.ChannelHandler;
        deregister(): Internal.ChannelFuture;
        deregister(arg0: Internal.ChannelPromise): Internal.ChannelFuture;
        newFailedFuture(arg0: Internal.Throwable): Internal.ChannelFuture;
        fireChannelRegistered(): Internal.ChannelPipeline;
        fireChannelRegistered(): Internal.ChannelInboundInvoker;
        addBefore(arg0: Internal.EventExecutorGroup, arg1: string, arg2: string, arg3: Internal.ChannelHandler): Internal.ChannelPipeline;
        addBefore(arg0: string, arg1: string, arg2: Internal.ChannelHandler): Internal.ChannelPipeline;
        fireChannelRead(arg0: object): Internal.ChannelPipeline;
        fireChannelRead(arg0: object): Internal.ChannelInboundInvoker;
        names(): Internal.List<string>;
        newSucceededFuture(): Internal.ChannelFuture;
        voidPromise(): Internal.ChannelPromise;
        toMap(): Map<string, Internal.ChannelHandler>;
        fireUserEventTriggered(arg0: object): Internal.ChannelPipeline;
        fireUserEventTriggered(arg0: object): Internal.ChannelInboundInvoker;
        lastContext(): Internal.ChannelHandlerContext;
        fireChannelUnregistered(): Internal.ChannelPipeline;
        fireChannelUnregistered(): Internal.ChannelInboundInvoker;
        addFirst(arg0: string, arg1: Internal.ChannelHandler): Internal.ChannelPipeline;
        addFirst(arg0: Internal.EventExecutorGroup, arg1: string, arg2: Internal.ChannelHandler): Internal.ChannelPipeline;
        addFirst(arg0: Internal.ChannelHandler[]): Internal.ChannelPipeline;
        addFirst(arg0: Internal.EventExecutorGroup, arg1: Internal.ChannelHandler[]): Internal.ChannelPipeline;
        first(): Internal.ChannelHandler;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class NetworkEvent extends Internal.Event {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isCanceled(): boolean;
        notifyAll(): void;
        hasResult(): boolean;
        notify(): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        isCancelable(): boolean;
        set canceled(arg0: boolean);
        get loginIndex(): number;
        set result(arg0: Internal.Event$Result);
        get payload(): Internal.FriendlyByteBuf;
        get listenerList(): Internal.ListenerList;
        get source(): () => Internal.NetworkEvent$Context;
        get result(): Internal.Event$Result;
        get phase(): Internal.EventPriority;
        set phase(arg0: Internal.EventPriority);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface EnhancedCelestialsWorldData {
        get lunarContext(): Internal.LunarContext;
        set lunarContext(arg0: Internal.LunarContext);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface TemporalField {
        resolve(arg0: Map<Internal.TemporalField, number>, arg1: Internal.TemporalAccessor, arg2: Internal.ResolverStyle): Internal.TemporalAccessor;
        rangeRefinedBy(arg0: Internal.TemporalAccessor): Internal.ValueRange;
        getDisplayName(arg0: Internal.Locale): string;
        isTimeBased(): boolean;
        adjustInto<R>(arg0: R, arg1: number): R;
        range(): Internal.ValueRange;
        toString(): string;
        isDateBased(): boolean;
        getFrom(arg0: Internal.TemporalAccessor): number;
        isSupportedBy(arg0: Internal.TemporalAccessor): boolean;
        get baseUnit(): Internal.TemporalUnit;
        get rangeUnit(): Internal.TemporalUnit;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface MapEncoder <A> implements Internal.Keyable {
        encode<T>(arg0: A, arg1: Internal.DynamicOps<T>, arg2: Internal.RecordBuilder<T>): Internal.RecordBuilder<T>;
        flatComap<B>(arg0: (arg0: B) => Internal.DataResult<A>): Internal.MapEncoder<B>;
        compressedBuilder<T>(arg0: Internal.DynamicOps<T>): Internal.RecordBuilder<T>;
        comap<B>(arg0: (arg0: B) => A): Internal.MapEncoder<B>;
        withLifecycle(arg0: Internal.Lifecycle): Internal.MapEncoder<A>;
        encoder(): Internal.Encoder<A>;
        compressor<T>(arg0: Internal.DynamicOps<T>): Internal.KeyCompressor<T>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class UnitStorage {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        addFunc(name: string, func: Internal.FuncSupplier): void;
        notifyAll(): void;
        addOp(name: string, op: Internal.OpSupplier): void;
        setVariable(key: string, unit: Internal.Unit): void;
        parse(string: string): Internal.Unit;
        getVariable(key: string): Internal.Unit;
        notify(): void;
        clearVariables(): void;
        addConstant(name: string, val: number): void;
        hashCode(): number;
        createFunc(name: string, args: Internal.List<Internal.Unit>): Internal.Unit;
        equals(arg0: object): boolean;
        getConstant(name: string): Internal.ConstantUnit;
        toString(): string;
        addFunc2(name: string, func: Internal.FuncSupplier$Func2): void;
        addFunc1(name: string, func: Internal.FuncSupplier$Func1): void;
        createOp(name: string, unit: Internal.Unit, with_: Internal.Unit): Internal.Unit;
        get variableVersion(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class EntityPotionEffectsJS {
        add(mobEffect: Internal.MobEffect, duration: number): void;
        add(mobEffect: Internal.MobEffect, duration: number, amplifier: number): void;
        add(mobEffect: Internal.MobEffect): void;
        add(mobEffect: Internal.MobEffect, duration: number, amplifier: number, ambient: boolean, showParticles: boolean): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        getDuration(mobEffect: Internal.MobEffect): number;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        isApplicable(effect: Internal.MobEffectInstance): boolean;
        clear(): void;
        toString(): string;
        getActive(mobEffect: Internal.MobEffect): Internal.MobEffectInstance;
        isActive(mobEffect: Internal.MobEffect): boolean;
        notify(): void;
        get active(): Internal.Collection<Internal.MobEffectInstance>;
        get map(): Map<Internal.MobEffect, Internal.MobEffectInstance>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class LightLayer extends Internal.Enum<Internal.LightLayer> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(arg0: string): Internal.LightLayer;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.LightLayer[];
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly SKY : Internal.LightLayer;
        static readonly BLOCK : Internal.LightLayer;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class MenuType <T> extends Internal.ForgeRegistryEntry<Internal.MenuType<object>> implements Internal.IForgeMenuType<T> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        create(arg0: number, arg1: Internal.Inventory, arg2: Internal.FriendlyByteBuf): T;
        create(arg0: number, arg1: Internal.Inventory, arg2: Internal.FriendlyByteBuf): object;
        toString(): string;
        setRegistryName(arg0: string, arg1: string): V;
        notify(): void;
        readonly delegate : () => V;
        get registryName(): ResourceLocation;
        set registryName(arg0: ResourceLocation);
        set registryName(arg0: ResourceLocation);
        set registryName(arg0: string);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface OpSupplier {
        create(arg0: Internal.Unit, arg1: Internal.Unit): Internal.Unit;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class SimpleJsonResourceReloadListener extends Internal.SimplePreparableReloadListener<Map<ResourceLocation, Internal.JsonElement>> implements Internal.JsonReloadListenerAccess {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        get gson(): Internal.Gson;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface StyleAccess {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IForgeTransformation {
        applyOrigin(arg0: Internal.Vector3f): Internal.Transformation;
        blockCornerToCenter(): Internal.Transformation;
        rotateTransform(arg0: Internal.Direction): Internal.Direction;
        isIdentity(): boolean;
        transformPosition(arg0: Internal.Vector4f): void;
        transformNormal(arg0: Internal.Vector3f): void;
        push(arg0: Internal.PoseStack): void;
        blockCenterToCorner(): Internal.Transformation;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Function13 <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R> {
        curry12(): Internal.Function12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, (arg0: T13) => R>;
        curry9(): Internal.Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, Internal.Function4<T10, T11, T12, T13, R>>;
        apply(arg0: T1, arg1: T2, arg2: T3, arg3: T4, arg4: T5, arg5: T6, arg6: T7, arg7: T8, arg8: T9, arg9: T10, arg10: T11, arg11: T12, arg12: T13): R;
        curry7(): Internal.Function7<T1, T2, T3, T4, T5, T6, T7, Internal.Function6<T8, T9, T10, T11, T12, T13, R>>;
        curry8(): Internal.Function8<T1, T2, T3, T4, T5, T6, T7, T8, Internal.Function5<T9, T10, T11, T12, T13, R>>;
        curry5(): Internal.Function5<T1, T2, T3, T4, T5, Internal.Function8<T6, T7, T8, T9, T10, T11, T12, T13, R>>;
        curry6(): Internal.Function6<T1, T2, T3, T4, T5, T6, Internal.Function7<T7, T8, T9, T10, T11, T12, T13, R>>;
        curry10(): Internal.Function10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Internal.Function3<T11, T12, T13, R>>;
        curry3(): Internal.Function3<T1, T2, T3, Internal.Function10<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R>>;
        curry11(): Internal.Function11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, (arg0: T12, arg1: T13) => R>;
        curry4(): Internal.Function4<T1, T2, T3, T4, Internal.Function9<T5, T6, T7, T8, T9, T10, T11, T12, T13, R>>;
        curry2(): (arg0: T1, arg1: T2) => Internal.Function11<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R>;
        curry(): (arg0: T1) => Internal.Function12<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface EntityTargetKJS {
        get nameKJS(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class StonecuttingRecipeJS extends Internal.RecipeJS {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        ingredientAction(filter: Internal.IngredientActionFilter, action: Internal.IngredientAction): Internal.RecipeJS;
        notifyAll(): void;
        convertReplacedInput(index: number, oldIngredient: Internal.IngredientJS, newIngredient: Internal.IngredientJS): Internal.IngredientJS;
        convertReplacedOutput(index: number, oldStack: Internal.ItemStackJS, newStack: Internal.ItemStackJS): Internal.ItemStackJS;
        save(): void;
        damageIngredient(filter: Internal.IngredientActionFilter, damage: number): Internal.RecipeJS;
        damageIngredient(filter: Internal.IngredientActionFilter): Internal.RecipeJS;
        getId(): string;
        dontAdd(): void;
        notify(): void;
        serializeJson(): void;
        replaceOutput(i: Internal.IngredientJS, with_: Internal.ItemStackJS, exact: boolean): boolean;
        hashCode(): number;
        merge(data: object): Internal.RecipeJS;
        create(args: Internal.ListJS): void;
        deserializeJson(): void;
        id(_id: ResourceLocation): Internal.RecipeJS;
        parseIngredientItem(o: object, key: string): Internal.IngredientJS;
        parseIngredientItem(o: object): Internal.IngredientJS;
        group(g: string): Internal.RecipeJS;
        deserialize(): void;
        serializeNBTAsJson(): boolean;
        getOutputIndex(ingredient: Internal.IngredientJS, exact: boolean): number;
        getInputIndex(ingredient: Internal.IngredientJS, exact: boolean): number;
        setGroup(g: string): void;
        serialize(): void;
        resultFromRecipeJson(json: Internal.JsonObject): Internal.ItemStackJS;
        serializeIngredientStack(in_: Internal.IngredientStackJS): Internal.JsonElement;
        stage(s: string): Internal.RecipeJS;
        replaceInput(i: Internal.IngredientJS, with_: Internal.IngredientJS, exact: boolean): boolean;
        getType(): string;
        equals(arg0: object): boolean;
        getGroup(): string;
        serializeItemStack(stack: Internal.ItemStackJS): Internal.JsonElement;
        hasOutput(ingredient: Internal.IngredientJS, exact: boolean): boolean;
        toString(): string;
        keepIngredient(filter: Internal.IngredientActionFilter): Internal.RecipeJS;
        parseResultItem(o: object): Internal.ItemStackJS;
        hasInput(ingredient: Internal.IngredientJS, exact: boolean): boolean;
        customIngredientAction(filter: Internal.IngredientActionFilter, id: string): Internal.RecipeJS;
        replaceIngredient(filter: Internal.IngredientActionFilter, item: Internal.ItemStackJS): Internal.RecipeJS;
        static currentRecipe : Internal.RecipeJS;
        originalJson : Internal.JsonObject;
        serializeOutputs : boolean;
        originalRecipe : Internal.Recipe<object>;
        readonly inputItems : Internal.List<Internal.IngredientJS>;
        static itemErrors : false;
        json : Internal.JsonObject;
        readonly outputItems : Internal.List<Internal.ItemStackJS>;
        type : Internal.RecipeTypeJS;
        serializeInputs : boolean;
        get mod(): string;
        get uniqueId(): string;
        get fromToString(): string;
        get path(): string;
        get orCreateId(): ResourceLocation;
        get originalRecipeResult(): Internal.ItemStackJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface CommonLevelAccessor implements Internal.EntityGetter, Internal.LevelReader, Internal.LevelSimulatedRW {
        isAreaLoaded(arg0: BlockPos, arg1: number): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Object2LongEntry implements Internal.Comparable<Internal.Object2LongEntry> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(o: Internal.Object2LongEntry): number;
        notify(): void;
        readonly value : number;
        readonly key : object;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class AtlasSet implements Internal.AutoCloseable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        close(): void;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ImmutableList$Builder <E> extends Internal.ImmutableCollection$Builder<E> {
        add(arg0: object): Internal.ImmutableCollection$Builder<any>;
        add(arg0: E): Internal.ImmutableList$Builder<E>;
        add(arg0: object[]): Internal.ImmutableCollection$Builder<any>;
        add(arg0: E[]): Internal.ImmutableList$Builder<E>;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        build(): Internal.ImmutableCollection<any>;
        build(): Internal.ImmutableList<E>;
        addAll(arg0: Internal.Iterator<E>): Internal.ImmutableList$Builder<E>;
        addAll(arg0: Internal.Iterator<any>): Internal.ImmutableCollection$Builder<any>;
        addAll(arg0: Internal.Iterable<any>): Internal.ImmutableCollection$Builder<any>;
        addAll(arg0: Internal.Iterable<E>): Internal.ImmutableList$Builder<E>;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class Writer implements Internal.Appendable, Internal.Closeable, Internal.Flushable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        flush(): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static nullWriter(): Internal.Writer;
        toString(): string;
        close(): void;
        write(arg0: string, arg1: number, arg2: number): void;
        write(arg0: number): void;
        write(arg0: string): void;
        write(arg0: string[], arg1: number, arg2: number): void;
        write(arg0: string[]): void;
        notify(): void;
        append(arg0: Internal.CharSequence, arg1: number, arg2: number): Internal.Writer;
        append(arg0: Internal.CharSequence, arg1: number, arg2: number): Internal.Appendable;
        append(arg0: string): Internal.Writer;
        append(arg0: string): Internal.Appendable;
        append(arg0: Internal.CharSequence): Internal.Appendable;
        append(arg0: Internal.CharSequence): Internal.Writer;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class IntBuffer extends Internal.Buffer implements Internal.Comparable<Internal.IntBuffer> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        compact(): Internal.IntBuffer;
        notifyAll(): void;
        compareTo(arg0: object): number;
        compareTo(arg0: Internal.IntBuffer): number;
        notify(): void;
        asReadOnlyBuffer(): Internal.IntBuffer;
        put(arg0: number[]): Internal.IntBuffer;
        put(arg0: number, arg1: number[], arg2: number, arg3: number): Internal.IntBuffer;
        put(arg0: number, arg1: number[]): Internal.IntBuffer;
        put(arg0: number[], arg1: number, arg2: number): Internal.IntBuffer;
        put(arg0: number, arg1: Internal.IntBuffer, arg2: number, arg3: number): Internal.IntBuffer;
        put(arg0: Internal.IntBuffer): Internal.IntBuffer;
        put(arg0: number, arg1: number): Internal.IntBuffer;
        put(arg0: number): Internal.IntBuffer;
        capacity(): number;
        isReadOnly(): boolean;
        slice(): Internal.Buffer;
        slice(): Internal.IntBuffer;
        slice(arg0: number, arg1: number): Internal.Buffer;
        slice(arg0: number, arg1: number): Internal.IntBuffer;
        array(): number[];
        array(): object;
        hashCode(): number;
        get(): number;
        get(arg0: number, arg1: number[]): Internal.IntBuffer;
        get(arg0: number): number;
        get(arg0: number, arg1: number[], arg2: number, arg3: number): Internal.IntBuffer;
        get(arg0: number[], arg1: number, arg2: number): Internal.IntBuffer;
        get(arg0: number[]): Internal.IntBuffer;
        limit(arg0: number): Internal.IntBuffer;
        limit(arg0: number): Internal.Buffer;
        limit(): number;
        arrayOffset(): number;
        flip(): Internal.Buffer;
        flip(): Internal.IntBuffer;
        order(): Internal.ByteOrder;
        hasArray(): boolean;
        hasRemaining(): boolean;
        clear(): Internal.Buffer;
        clear(): Internal.IntBuffer;
        duplicate(): Internal.IntBuffer;
        duplicate(): Internal.Buffer;
        remaining(): number;
        static allocate(arg0: number): Internal.IntBuffer;
        rewind(): Internal.Buffer;
        rewind(): Internal.IntBuffer;
        mismatch(arg0: Internal.IntBuffer): number;
        equals(arg0: object): boolean;
        reset(): Internal.Buffer;
        reset(): Internal.IntBuffer;
        toString(): string;
        position(arg0: number): Internal.IntBuffer;
        position(arg0: number): Internal.Buffer;
        position(): number;
        isDirect(): boolean;
        static wrap(arg0: number[]): Internal.IntBuffer;
        static wrap(arg0: number[], arg1: number, arg2: number): Internal.IntBuffer;
        mark(): Internal.Buffer;
        mark(): Internal.IntBuffer;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class BlockItemBuilder extends Internal.ItemBuilder {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        maxStackSize(v: number): Internal.ItemBuilder;
        translationKey(key: string): Internal.BuilderBase;
        color(index: number, c: number): Internal.ItemBuilder;
        newID(pre: string, post: string): ResourceLocation;
        displayName(name: string): Internal.BuilderBase;
        notifyAll(): void;
        maxDamage(v: number): Internal.ItemBuilder;
        tooltip(text: Internal.Component): Internal.ItemBuilder;
        containerItem(id: string): Internal.ItemBuilder;
        type(t: Internal.ItemType): Internal.ItemBuilder;
        notify(): void;
        tier(t: string): Internal.ItemBuilder;
        hashCode(): number;
        burnTime(v: number): Internal.ItemBuilder;
        getAttackSpeed(): number;
        tag(tag: ResourceLocation): Internal.BuilderBase;
        parentModel(m: string): Internal.ItemBuilder;
        attackDamage(f: number): Internal.ItemBuilder;
        group(g: string): Internal.ItemBuilder;
        texture(tex: string): Internal.ItemBuilder;
        miningSpeed(f: number): Internal.ItemBuilder;
        getMiningSpeed(): number;
        unstackable(): Internal.ItemBuilder;
        getAttackDamage(): number;
        equals(arg0: object): boolean;
        attackSpeed(f: number): Internal.ItemBuilder;
        toString(): string;
        glow(v: boolean): Internal.ItemBuilder;
        createItemProperties(): Internal.Item$Properties;
        rarity(v: Rarity): Internal.ItemBuilder;
        toolTier : Internal.Tier;
        foodBuilder : Internal.FoodBuilder;
        defaultTags : Internal.Set<ResourceLocation>;
        subtypes : (arg0: Internal.ItemStackJS) => Internal.Collection<Internal.ItemStackJS>;
        armorTier : Internal.ArmorMaterial;
        modelJson : Internal.JsonObject;
        static readonly ARMOR_TIERS : Map<string, Internal.ArmorMaterial>;
        readonly id : ResourceLocation;
        item : Internal.Item;
        attackSpeedBaseline : number;
        static readonly TOOL_TIERS : Map<string, Internal.Tier>;
        blockBuilder : Internal.BlockBuilder;
        attackDamageBaseline : number;
        blockItem : Internal.BlockItem;
        get builderType(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ObjectList <K> implements Internal.List<K>, Internal.Comparable<Internal.List<K>>, Internal.ObjectCollection<K> {
        compareTo(arg0: T): number;
        remove(arg0: object): boolean;
        remove(arg0: number): E;
        iterator(): Internal.Iterator<any>;
        iterator(): Internal.ObjectIterator<any>;
        iterator(): Internal.ObjectListIterator<K>;
        hashCode(): number;
        addElements(arg0: number, arg1: K[], arg2: number, arg3: number): void;
        addElements(arg0: number, arg1: K[]): void;
        get(arg0: number): E;
        toArray(): object[];
        toArray<T>(arg0: T[]): T[];
        indexOf(arg0: object): number;
        add(arg0: number, arg1: E): void;
        add(arg0: E): boolean;
        subList(arg0: number, arg1: number): Internal.ObjectList<K>;
        subList(arg0: number, arg1: number): Internal.List<any>;
        set(arg0: number, arg1: E): E;
        spliterator(): Internal.Spliterator<any>;
        spliterator(): Internal.ObjectSpliterator<K>;
        isEmpty(): boolean;
        clear(): void;
        setElements(arg0: number, arg1: K[]): void;
        setElements(arg0: number, arg1: K[], arg2: number, arg3: number): void;
        sort(arg0: Internal.Comparator<K>): void;
        removeElements(arg0: number, arg1: number): void;
        lastIndexOf(arg0: object): number;
        contains(arg0: object): boolean;
        size(arg0: number): void;
        size(): number;
        addAll(arg0: Internal.ObjectList<K>): boolean;
        addAll(arg0: number, arg1: Internal.ObjectList<K>): boolean;
        equals(arg0: object): boolean;
        getElements(arg0: number, arg1: object[], arg2: number, arg3: number): void;
        listIterator(arg0: number): Internal.ObjectListIterator<K>;
        listIterator(arg0: number): Internal.ListIterator<any>;
        listIterator(): Internal.ListIterator<any>;
        listIterator(): Internal.ObjectListIterator<K>;
        unstableSort(arg0: Internal.Comparator<K>): void;
        set elements(arg0: K[]);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ClassInstanceMultiMap <T> extends Internal.AbstractCollection<T> implements Internal.ClassGroupFilterableList {
        add(arg0: T): boolean;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        localvar$bff000$add(entity: object): object;
        localvar$bff000$remove(o: object): object;
        notifyAll(): void;
        isEmpty(): boolean;
        clear(): void;
        getAllOfGroupType(type: Internal.EntityClassGroup): Internal.Collection<any>;
        notify(): void;
        remove(arg0: object): boolean;
        contains(arg0: object): boolean;
        iterator(): Internal.Iterator<T>;
        size(): number;
        hashCode(): number;
        equals(arg0: object): boolean;
        toArray(): object[];
        toArray<T>(arg0: T[]): T[];
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Packet <T> {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Path implements Internal.Comparable<Internal.Path>, Internal.Iterable<Internal.Path>, Internal.Watchable {
        getName(arg0: number): Internal.Path;
        resolve(arg0: string): Internal.Path;
        resolve(arg0: Internal.Path): Internal.Path;
        resolveSibling(arg0: Internal.Path): Internal.Path;
        resolveSibling(arg0: string): Internal.Path;
        toUri(): Internal.URI;
        toAbsolutePath(): Internal.Path;
        subpath(arg0: number, arg1: number): Internal.Path;
        compareTo(arg0: Internal.Path): number;
        compareTo(arg0: object): number;
        iterator(): Internal.Iterator<Internal.Path>;
        hashCode(): number;
        normalize(): Internal.Path;
        equals(arg0: object): boolean;
        toFile(): Internal.File;
        toRealPath(arg0: Internal.LinkOption[]): Internal.Path;
        endsWith(arg0: Internal.Path): boolean;
        endsWith(arg0: string): boolean;
        isAbsolute(): boolean;
        toString(): string;
        relativize(arg0: Internal.Path): Internal.Path;
        register(arg0: Internal.WatchService, arg1: Internal.WatchEvent$Kind<object>[]): Internal.WatchKey;
        register(arg0: Internal.WatchService, arg1: Internal.WatchEvent$Kind<object>[], arg2: Internal.WatchEvent$Modifier[]): Internal.WatchKey;
        startsWith(arg0: string): boolean;
        startsWith(arg0: Internal.Path): boolean;
        get nameCount(): number;
        get parent(): Internal.Path;
        get fileSystem(): Internal.FileSystem;
        get root(): Internal.Path;
        get fileName(): Internal.Path;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface HeadedModel {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Channel$Unsafe {
        disconnect(arg0: Internal.ChannelPromise): void;
        deregister(arg0: Internal.ChannelPromise): void;
        recvBufAllocHandle(): Internal.RecvByteBufAllocator$Handle;
        closeForcibly(): void;
        beginRead(): void;
        bind(arg0: Internal.SocketAddress, arg1: Internal.ChannelPromise): void;
        voidPromise(): Internal.ChannelPromise;
        flush(): void;
        localAddress(): Internal.SocketAddress;
        outboundBuffer(): Internal.ChannelOutboundBuffer;
        close(arg0: Internal.ChannelPromise): void;
        write(arg0: object, arg1: Internal.ChannelPromise): void;
        remoteAddress(): Internal.SocketAddress;
        connect(arg0: Internal.SocketAddress, arg1: Internal.SocketAddress, arg2: Internal.ChannelPromise): void;
        register(arg0: Internal.EventLoop, arg1: Internal.ChannelPromise): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface LongToIntFunction {
        applyAsInt(arg0: number): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class ItemType {
        applyDefaults(builder: Internal.ItemBuilder): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        createItem(arg0: Internal.ItemBuilder): Internal.Item;
        generateData(builder: Internal.ItemBuilder, generator: Internal.DataJsonGenerator): void;
        toString(): string;
        generateAssets(builder: Internal.ItemBuilder, generator: Internal.AssetJsonGenerator): void;
        notify(): void;
        readonly name : string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Spliterator$OfLong implements Internal.Spliterator$OfPrimitive<number, Internal.LongConsumer, Internal.Spliterator$OfLong> {
        trySplit(): Internal.Spliterator$OfPrimitive<any, any, any>;
        trySplit(): Internal.Spliterator<any>;
        trySplit(): Internal.Spliterator$OfLong;
        characteristics(): number;
        tryAdvance(arg0: Internal.LongConsumer): boolean;
        tryAdvance(arg0: (arg0: number) => void): boolean;
        tryAdvance(arg0: object): boolean;
        estimateSize(): number;
        hasCharacteristics(arg0: number): boolean;
        forEachRemaining(arg0: object): void;
        forEachRemaining(arg0: Internal.LongConsumer): void;
        forEachRemaining(arg0: (arg0: number) => void): void;
        get exactSizeIfKnown(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface EndimationEffectSource {
        isActive(): boolean;
        get pos(): Internal.Position;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class LootContextJS {
        cancel(): void;
        findLoot(arg0: Internal.IngredientJS): Internal.List<Internal.ItemStackJS>;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isCanceled(): boolean;
        notifyAll(): void;
        notify(): void;
        lootSize(): number;
        isExploded(): boolean;
        hashCode(): number;
        forEachLoot(arg0: (arg0: Internal.ItemStackJS) => void): void;
        hasLoot(arg0: Internal.IngredientJS): boolean;
        addLoot(arg0: Internal.ItemStackJS): void;
        equals(arg0: object): boolean;
        toString(): string;
        removeLoot(arg0: Internal.IngredientJS): void;
        get blockPos(): BlockPos;
        get player(): Internal.PlayerJS<object>;
        get customData(): Map<string, object>;
        get tool(): Internal.ItemStackJS;
        get lootTableId(): ResourceLocation;
        get random(): Internal.Random;
        get vanillaContext(): Internal.LootContext;
        get destroyedBlock(): Internal.BlockContainerJS;
        get server(): Internal.ServerJS;
        get luck(): number;
        get entity(): Internal.EntityJS;
        get looting(): number;
        get level(): Internal.LevelJS;
        get position(): Vec3;
        get damageSource(): Internal.DamageSourceJS;
        get type(): LootType;
        get explosionRadius(): number;
        get killerEntity(): Internal.EntityJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ModuleLayer$Controller {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        addReads(arg0: Internal.Module, arg1: Internal.Module): Internal.ModuleLayer$Controller;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        addExports(arg0: Internal.Module, arg1: string, arg2: Internal.Module): Internal.ModuleLayer$Controller;
        toString(): string;
        addOpens(arg0: Internal.Module, arg1: string, arg2: Internal.Module): Internal.ModuleLayer$Controller;
        notify(): void;
        layer(): Internal.ModuleLayer;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface CompletionStage <T> {
        exceptionallyAsync(arg0: (arg0: Internal.Throwable) => T): Internal.CompletionStage<T>;
        exceptionallyAsync(arg0: (arg0: Internal.Throwable) => T, arg1: Internal.Executor): Internal.CompletionStage<T>;
        thenRunAsync(arg0: Internal.Runnable): Internal.CompletionStage<void>;
        thenRunAsync(arg0: Internal.Runnable, arg1: Internal.Executor): Internal.CompletionStage<void>;
        runAfterBothAsync(arg0: Internal.CompletionStage<object>, arg1: Internal.Runnable): Internal.CompletionStage<void>;
        runAfterBothAsync(arg0: Internal.CompletionStage<object>, arg1: Internal.Runnable, arg2: Internal.Executor): Internal.CompletionStage<void>;
        applyToEitherAsync<U>(arg0: Internal.CompletionStage<T>, arg1: (arg0: T) => U, arg2: Internal.Executor): Internal.CompletionStage<U>;
        applyToEitherAsync<U>(arg0: Internal.CompletionStage<T>, arg1: (arg0: T) => U): Internal.CompletionStage<U>;
        acceptEitherAsync(arg0: Internal.CompletionStage<T>, arg1: (arg0: T) => void): Internal.CompletionStage<void>;
        acceptEitherAsync(arg0: Internal.CompletionStage<T>, arg1: (arg0: T) => void, arg2: Internal.Executor): Internal.CompletionStage<void>;
        runAfterEitherAsync(arg0: Internal.CompletionStage<object>, arg1: Internal.Runnable): Internal.CompletionStage<void>;
        runAfterEitherAsync(arg0: Internal.CompletionStage<object>, arg1: Internal.Runnable, arg2: Internal.Executor): Internal.CompletionStage<void>;
        acceptEither(arg0: Internal.CompletionStage<T>, arg1: (arg0: T) => void): Internal.CompletionStage<void>;
        thenAcceptBoth<U>(arg0: Internal.CompletionStage<U>, arg1: (arg0: T, arg1: U) => void): Internal.CompletionStage<void>;
        exceptionallyCompose(arg0: (arg0: Internal.Throwable) => Internal.CompletionStage<T>): Internal.CompletionStage<T>;
        applyToEither<U>(arg0: Internal.CompletionStage<T>, arg1: (arg0: T) => U): Internal.CompletionStage<U>;
        runAfterEither(arg0: Internal.CompletionStage<object>, arg1: Internal.Runnable): Internal.CompletionStage<void>;
        thenApply<U>(arg0: (arg0: T) => U): Internal.CompletionStage<U>;
        thenComposeAsync<U>(arg0: (arg0: T) => Internal.CompletionStage<U>, arg1: Internal.Executor): Internal.CompletionStage<U>;
        thenComposeAsync<U>(arg0: (arg0: T) => Internal.CompletionStage<U>): Internal.CompletionStage<U>;
        thenAccept(arg0: (arg0: T) => void): Internal.CompletionStage<void>;
        thenRun(arg0: Internal.Runnable): Internal.CompletionStage<void>;
        runAfterBoth(arg0: Internal.CompletionStage<object>, arg1: Internal.Runnable): Internal.CompletionStage<void>;
        exceptionally(arg0: (arg0: Internal.Throwable) => T): Internal.CompletionStage<T>;
        handleAsync<U>(arg0: (arg0: T, arg1: Internal.Throwable) => U, arg1: Internal.Executor): Internal.CompletionStage<U>;
        handleAsync<U>(arg0: (arg0: T, arg1: Internal.Throwable) => U): Internal.CompletionStage<U>;
        handle<U>(arg0: (arg0: T, arg1: Internal.Throwable) => U): Internal.CompletionStage<U>;
        thenCompose<U>(arg0: (arg0: T) => Internal.CompletionStage<U>): Internal.CompletionStage<U>;
        whenComplete(arg0: (arg0: T, arg1: Internal.Throwable) => void): Internal.CompletionStage<T>;
        thenCombineAsync<U, V>(arg0: Internal.CompletionStage<U>, arg1: (arg0: T, arg1: U) => V, arg2: Internal.Executor): Internal.CompletionStage<V>;
        thenCombineAsync<U, V>(arg0: Internal.CompletionStage<U>, arg1: (arg0: T, arg1: U) => V): Internal.CompletionStage<V>;
        thenAcceptBothAsync<U>(arg0: Internal.CompletionStage<U>, arg1: (arg0: T, arg1: U) => void, arg2: Internal.Executor): Internal.CompletionStage<void>;
        thenAcceptBothAsync<U>(arg0: Internal.CompletionStage<U>, arg1: (arg0: T, arg1: U) => void): Internal.CompletionStage<void>;
        exceptionallyComposeAsync(arg0: (arg0: Internal.Throwable) => Internal.CompletionStage<T>): Internal.CompletionStage<T>;
        exceptionallyComposeAsync(arg0: (arg0: Internal.Throwable) => Internal.CompletionStage<T>, arg1: Internal.Executor): Internal.CompletionStage<T>;
        thenCombine<U, V>(arg0: Internal.CompletionStage<U>, arg1: (arg0: T, arg1: U) => V): Internal.CompletionStage<V>;
        whenCompleteAsync(arg0: (arg0: T, arg1: Internal.Throwable) => void): Internal.CompletionStage<T>;
        whenCompleteAsync(arg0: (arg0: T, arg1: Internal.Throwable) => void, arg1: Internal.Executor): Internal.CompletionStage<T>;
        toCompletableFuture(): Internal.CompletableFuture<T>;
        thenApplyAsync<U>(arg0: (arg0: T) => U, arg1: Internal.Executor): Internal.CompletionStage<U>;
        thenApplyAsync<U>(arg0: (arg0: T) => U): Internal.CompletionStage<U>;
        thenAcceptAsync(arg0: (arg0: T) => void): Internal.CompletionStage<void>;
        thenAcceptAsync(arg0: (arg0: T) => void, arg1: Internal.Executor): Internal.CompletionStage<void>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class BakedQuad implements Internal.IVertexProducer, Internal.BakedQuadAccess, Internal.ModelQuadView {
        getLight(idx: number): number;
        getTexV(idx: number): number;
        getNormal(idx: number): number;
        getTexU(idx: number): number;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        getColor(idx: number): number;
        notify(): void;
        getX(idx: number): number;
        getY(idx: number): number;
        getZ(idx: number): number;
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        pipe(arg0: Internal.IVertexConsumer): void;
        get colorIndex(): number;
        get sprite(): Internal.TextureAtlasSprite;
        set vertices(arg0: number[]);
        get flags(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Biome$BiomeCategory extends Internal.Enum<Internal.Biome$BiomeCategory> implements Internal.StringRepresentable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(arg0: string): Internal.Biome$BiomeCategory;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.Biome$BiomeCategory[];
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly BEACH : Internal.Biome$BiomeCategory;
        static readonly UNDERGROUND : Internal.Biome$BiomeCategory;
        static readonly MESA : Internal.Biome$BiomeCategory;
        static readonly SAVANNA : Internal.Biome$BiomeCategory;
        static readonly THEEND : Internal.Biome$BiomeCategory;
        static readonly JUNGLE : Internal.Biome$BiomeCategory;
        static readonly OCEAN : Internal.Biome$BiomeCategory;
        static readonly TAIGA : Internal.Biome$BiomeCategory;
        static readonly MOUNTAIN : Internal.Biome$BiomeCategory;
        static readonly DESERT : Internal.Biome$BiomeCategory;
        static readonly RIVER : Internal.Biome$BiomeCategory;
        static readonly FOREST : Internal.Biome$BiomeCategory;
        static readonly MUSHROOM : Internal.Biome$BiomeCategory;
        static readonly NETHER : Internal.Biome$BiomeCategory;
        static readonly PLAINS : Internal.Biome$BiomeCategory;
        static readonly SWAMP : Internal.Biome$BiomeCategory;
        static readonly NONE : Internal.Biome$BiomeCategory;
        static readonly EXTREME_HILLS : Internal.Biome$BiomeCategory;
        static readonly ICY : Internal.Biome$BiomeCategory;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class OffsetDateTime implements Internal.Temporal, Internal.TemporalAdjuster, Internal.Comparable<Internal.OffsetDateTime>, Internal.Serializable {
        plusHours(arg0: number): Internal.OffsetDateTime;
        isEqual(arg0: Internal.OffsetDateTime): boolean;
        toLocalTime(): Internal.LocalTime;
        compareTo(arg0: Internal.OffsetDateTime): number;
        compareTo(arg0: object): number;
        withOffsetSameLocal(arg0: Internal.ZoneOffset): Internal.OffsetDateTime;
        plusSeconds(arg0: number): Internal.OffsetDateTime;
        static from(arg0: Internal.TemporalAccessor): Internal.OffsetDateTime;
        plusNanos(arg0: number): Internal.OffsetDateTime;
        atZoneSameInstant(arg0: Internal.ZoneId): Internal.ZonedDateTime;
        withHour(arg0: number): Internal.OffsetDateTime;
        plusMonths(arg0: number): Internal.OffsetDateTime;
        plusYears(arg0: number): Internal.OffsetDateTime;
        truncatedTo(arg0: Internal.TemporalUnit): Internal.OffsetDateTime;
        query<R>(arg0: Internal.TemporalQuery<R>): R;
        minusNanos(arg0: number): Internal.OffsetDateTime;
        format(arg0: Internal.DateTimeFormatter): string;
        isSupported(arg0: Internal.TemporalUnit): boolean;
        isSupported(arg0: Internal.TemporalField): boolean;
        plus(arg0: Internal.TemporalAmount): Internal.OffsetDateTime;
        plus(arg0: Internal.TemporalAmount): Internal.Temporal;
        plus(arg0: number, arg1: Internal.TemporalUnit): Internal.OffsetDateTime;
        plus(arg0: number, arg1: Internal.TemporalUnit): Internal.Temporal;
        toEpochSecond(): number;
        toLocalDateTime(): Internal.LocalDateTime;
        withDayOfMonth(arg0: number): Internal.OffsetDateTime;
        withMonth(arg0: number): Internal.OffsetDateTime;
        isAfter(arg0: Internal.OffsetDateTime): boolean;
        static ofInstant(arg0: Internal.Instant, arg1: Internal.ZoneId): Internal.OffsetDateTime;
        minus(arg0: Internal.TemporalAmount): Internal.OffsetDateTime;
        minus(arg0: Internal.TemporalAmount): Internal.Temporal;
        minus(arg0: number, arg1: Internal.TemporalUnit): Internal.OffsetDateTime;
        minus(arg0: number, arg1: Internal.TemporalUnit): Internal.Temporal;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        toOffsetTime(): Internal.OffsetTime;
        minusHours(arg0: number): Internal.OffsetDateTime;
        notifyAll(): void;
        adjustInto(arg0: Internal.Temporal): Internal.Temporal;
        range(arg0: Internal.TemporalField): Internal.ValueRange;
        withYear(arg0: number): Internal.OffsetDateTime;
        plusMinutes(arg0: number): Internal.OffsetDateTime;
        notify(): void;
        minusMinutes(arg0: number): Internal.OffsetDateTime;
        plusDays(arg0: number): Internal.OffsetDateTime;
        atZoneSimilarLocal(arg0: Internal.ZoneId): Internal.ZonedDateTime;
        hashCode(): number;
        static now(arg0: Internal.Clock): Internal.OffsetDateTime;
        static now(arg0: Internal.ZoneId): Internal.OffsetDateTime;
        static now(): Internal.OffsetDateTime;
        static of(arg0: Internal.LocalDate, arg1: Internal.LocalTime, arg2: Internal.ZoneOffset): Internal.OffsetDateTime;
        static of(arg0: Internal.LocalDateTime, arg1: Internal.ZoneOffset): Internal.OffsetDateTime;
        static of(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: Internal.ZoneOffset): Internal.OffsetDateTime;
        get(arg0: Internal.TemporalField): number;
        plusWeeks(arg0: number): Internal.OffsetDateTime;
        withMinute(arg0: number): Internal.OffsetDateTime;
        toZonedDateTime(): Internal.ZonedDateTime;
        minusYears(arg0: number): Internal.OffsetDateTime;
        minusWeeks(arg0: number): Internal.OffsetDateTime;
        withDayOfYear(arg0: number): Internal.OffsetDateTime;
        static parse(arg0: Internal.CharSequence, arg1: Internal.DateTimeFormatter): Internal.OffsetDateTime;
        static parse(arg0: Internal.CharSequence): Internal.OffsetDateTime;
        toInstant(): Internal.Instant;
        isBefore(arg0: Internal.OffsetDateTime): boolean;
        minusDays(arg0: number): Internal.OffsetDateTime;
        withNano(arg0: number): Internal.OffsetDateTime;
        getLong(arg0: Internal.TemporalField): number;
        minusMonths(arg0: number): Internal.OffsetDateTime;
        with(arg0: Internal.TemporalAdjuster): Internal.Temporal;
        with(arg0: Internal.TemporalAdjuster): Internal.OffsetDateTime;
        with(arg0: Internal.TemporalField, arg1: number): Internal.OffsetDateTime;
        with(arg0: Internal.TemporalField, arg1: number): Internal.Temporal;
        toLocalDate(): Internal.LocalDate;
        withOffsetSameInstant(arg0: Internal.ZoneOffset): Internal.OffsetDateTime;
        equals(arg0: object): boolean;
        static timeLineOrder(): Internal.Comparator<Internal.OffsetDateTime>;
        until(arg0: Internal.Temporal, arg1: Internal.TemporalUnit): number;
        toString(): string;
        minusSeconds(arg0: number): Internal.OffsetDateTime;
        withSecond(arg0: number): Internal.OffsetDateTime;
        static readonly MIN : Internal.OffsetDateTime;
        static readonly MAX : Internal.OffsetDateTime;
        get dayOfWeek(): Internal.DayOfWeek;
        get minute(): number;
        get month(): Internal.Month;
        get nano(): number;
        get year(): number;
        get offset(): Internal.ZoneOffset;
        get dayOfYear(): number;
        get hour(): number;
        get monthValue(): number;
        get second(): number;
        get dayOfMonth(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface DoubleToIntFunction {
        applyAsInt(arg0: number): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Chronology implements Internal.Comparable<Internal.Chronology> {
        localDateTime(arg0: Internal.TemporalAccessor): Internal.ChronoLocalDateTime<Internal.ChronoLocalDate>;
        date(arg0: Internal.TemporalAccessor): Internal.ChronoLocalDate;
        date(arg0: Internal.Era, arg1: number, arg2: number, arg3: number): Internal.ChronoLocalDate;
        date(arg0: number, arg1: number, arg2: number): Internal.ChronoLocalDate;
        period(arg0: number, arg1: number, arg2: number): Internal.ChronoPeriod;
        dateYearDay(arg0: Internal.Era, arg1: number, arg2: number): Internal.ChronoLocalDate;
        dateYearDay(arg0: number, arg1: number): Internal.ChronoLocalDate;
        resolveDate(arg0: Map<Internal.TemporalField, number>, arg1: Internal.ResolverStyle): Internal.ChronoLocalDate;
        isLeapYear(arg0: number): boolean;
        range(arg0: Internal.ChronoField): Internal.ValueRange;
        dateEpochDay(arg0: number): Internal.ChronoLocalDate;
        compareTo(arg0: Internal.Chronology): number;
        compareTo(arg0: object): number;
        dateNow(): Internal.ChronoLocalDate;
        dateNow(arg0: Internal.ZoneId): Internal.ChronoLocalDate;
        dateNow(arg0: Internal.Clock): Internal.ChronoLocalDate;
        eraOf(arg0: number): Internal.Era;
        eras(): Internal.List<Internal.Era>;
        prolepticYear(arg0: Internal.Era, arg1: number): number;
        zonedDateTime(arg0: Internal.Instant, arg1: Internal.ZoneId): Internal.ChronoZonedDateTime<Internal.ChronoLocalDate>;
        zonedDateTime(arg0: Internal.TemporalAccessor): Internal.ChronoZonedDateTime<Internal.ChronoLocalDate>;
        getDisplayName(arg0: Internal.TextStyle, arg1: Internal.Locale): string;
        hashCode(): number;
        equals(arg0: object): boolean;
        epochSecond(arg0: Internal.Era, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: Internal.ZoneOffset): number;
        epochSecond(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: Internal.ZoneOffset): number;
        toString(): string;
        get calendarType(): string;
        get id(): string;
        get availableChronologies(): Internal.Set<Internal.Chronology>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Int2DoubleFunction implements it.unimi.dsi.fastutil.Function<number, number>, Internal.IntToDoubleFunction {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        applyAsDouble(arg0: number): number;
        andThenShort(arg0: Internal.Double2ShortFunction): Internal.Int2ShortFunction;
        composeByte(arg0: Internal.Byte2IntFunction): Internal.Byte2DoubleFunction;
        andThenInt(arg0: Internal.Double2IntFunction): Internal.Int2IntFunction;
        composeReference<T>(arg0: Internal.Reference2IntFunction<T>): Internal.Reference2DoubleFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: number) => T;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: number): number;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: object): object;
        remove(arg0: object): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Double2DoubleFunction): Internal.Int2DoubleFunction;
        andThenObject<T>(arg0: Internal.Double2ObjectFunction<T>): Internal.Int2ObjectFunction<T>;
        get(arg0: object): number;
        get(arg0: object): object;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Double2LongFunction): Internal.Int2LongFunction;
        composeLong(arg0: Internal.Long2IntFunction): Internal.Long2DoubleFunction;
        andThenByte(arg0: Internal.Double2ByteFunction): Internal.Int2ByteFunction;
        andThenFloat(arg0: Internal.Double2FloatFunction): Internal.Int2FloatFunction;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2IntFunction): Internal.Int2DoubleFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2IntFunction): Internal.Float2DoubleFunction;
        andThenChar(arg0: Internal.Double2CharFunction): Internal.Int2CharFunction;
        composeObject<T>(arg0: Internal.Object2IntFunction<T>): Internal.Object2DoubleFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => number;
        composeShort(arg0: Internal.Short2IntFunction): Internal.Short2DoubleFunction;
        andThenReference<T>(arg0: Internal.Double2ReferenceFunction<T>): Internal.Int2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2IntFunction): Internal.Char2DoubleFunction;
        composeDouble(arg0: Internal.Double2IntFunction): Internal.Double2DoubleFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class TextureAtlasSprite implements Internal.AutoCloseable, Internal.SpriteExtended {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        getPixelRGBA(arg0: number, arg1: number, arg2: number): number;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        isActive(): boolean;
        close(): void;
        notify(): void;
        set active(active: boolean);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class FileStore {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        type(): string;
        notify(): void;
        getAttribute(arg0: string): object;
        isReadOnly(): boolean;
        hashCode(): number;
        supportsFileAttributeView(arg0: Internal.Class<Internal.FileAttributeView>): boolean;
        supportsFileAttributeView(arg0: string): boolean;
        equals(arg0: object): boolean;
        name(): string;
        toString(): string;
        getFileStoreAttributeView<V>(arg0: Internal.Class<V>): V;
        get usableSpace(): number;
        get totalSpace(): number;
        get blockSize(): number;
        get unallocatedSpace(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ChannelId implements Internal.Serializable, Internal.Comparable<Internal.ChannelId> {
        asShortText(): string;
        compareTo(arg0: T): number;
        asLongText(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class AbstractByteBuf extends Internal.ByteBuf {
        asReadOnly(): Internal.ByteBuf;
        markReaderIndex(): Internal.ByteBuf;
        getByte(arg0: number): number;
        release(): boolean;
        release(arg0: number): boolean;
        readDoubleLE(): number;
        writeZero(arg0: number): Internal.ByteBuf;
        resetReaderIndex(): Internal.ByteBuf;
        writeFloat(arg0: number): Internal.ByteBuf;
        setLongLE(arg0: number, arg1: number): Internal.ByteBuf;
        readRetainedSlice(arg0: number): Internal.ByteBuf;
        slice(): Internal.ByteBuf;
        slice(arg0: number, arg1: number): Internal.ByteBuf;
        setDoubleLE(arg0: number, arg1: number): Internal.ByteBuf;
        getMediumLE(arg0: number): number;
        readUnsignedIntLE(): number;
        writeFloatLE(arg0: number): Internal.ByteBuf;
        readInt(): number;
        order(arg0: Internal.ByteOrder): Internal.ByteBuf;
        order(): Internal.ByteOrder;
        writeMedium(arg0: number): Internal.ByteBuf;
        resetWriterIndex(): Internal.ByteBuf;
        writableBytes(): number;
        getUnsignedShort(arg0: number): number;
        maxCapacity(): number;
        nioBufferCount(): number;
        bytesBefore(arg0: number): number;
        bytesBefore(arg0: number, arg1: number): number;
        bytesBefore(arg0: number, arg1: number, arg2: number): number;
        setInt(arg0: number, arg1: number): Internal.ByteBuf;
        getInt(arg0: number): number;
        markWriterIndex(): Internal.ByteBuf;
        isReadable(arg0: number): boolean;
        isReadable(): boolean;
        writeBoolean(arg0: boolean): Internal.ByteBuf;
        setIntLE(arg0: number, arg1: number): Internal.ByteBuf;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        writeLongLE(arg0: number): Internal.ByteBuf;
        setShortLE(arg0: number, arg1: number): Internal.ByteBuf;
        retain(arg0: number): Internal.ByteBuf;
        retain(arg0: number): Internal.ReferenceCounted;
        retain(): Internal.ByteBuf;
        retain(): Internal.ReferenceCounted;
        isWritable(arg0: number): boolean;
        isWritable(): boolean;
        notify(): void;
        readChar(): string;
        hasMemoryAddress(): boolean;
        capacity(): number;
        capacity(arg0: number): Internal.ByteBuf;
        readCharSequence(arg0: number, arg1: Internal.Charset): Internal.CharSequence;
        isReadOnly(): boolean;
        readUnsignedShortLE(): number;
        readDouble(): number;
        readFloat(): number;
        getLongLE(arg0: number): number;
        getBoolean(arg0: number): boolean;
        copy(): Internal.ByteBuf;
        copy(arg0: number, arg1: number): Internal.ByteBuf;
        readShortLE(): number;
        readUnsignedMedium(): number;
        ensureWritable(arg0: number, arg1: boolean): number;
        ensureWritable(arg0: number): Internal.ByteBuf;
        writeInt(arg0: number): Internal.ByteBuf;
        readFloatLE(): number;
        getDoubleLE(arg0: number): number;
        hasArray(): boolean;
        memoryAddress(): number;
        maxFastWritableBytes(): number;
        readableBytes(): number;
        readSlice(arg0: number): Internal.ByteBuf;
        getIntLE(arg0: number): number;
        forEachByteDesc(arg0: number, arg1: number, arg2: Internal.ByteProcessor): number;
        forEachByteDesc(arg0: Internal.ByteProcessor): number;
        nioBuffers(): Internal.ByteBuffer[];
        nioBuffers(arg0: number, arg1: number): Internal.ByteBuffer[];
        skipBytes(arg0: number): Internal.ByteBuf;
        getLong(arg0: number): number;
        readLong(): number;
        readShort(): number;
        equals(arg0: object): boolean;
        setZero(arg0: number, arg1: number): Internal.ByteBuf;
        getUnsignedMedium(arg0: number): number;
        readBytes(arg0: number): Internal.ByteBuf;
        readBytes(arg0: Internal.ByteBuf, arg1: number, arg2: number): Internal.ByteBuf;
        readBytes(arg0: Internal.GatheringByteChannel, arg1: number): number;
        readBytes(arg0: number[]): Internal.ByteBuf;
        readBytes(arg0: Internal.ByteBuf): Internal.ByteBuf;
        readBytes(arg0: Internal.ByteBuf, arg1: number): Internal.ByteBuf;
        readBytes(arg0: number[], arg1: number, arg2: number): Internal.ByteBuf;
        readBytes(arg0: Internal.ByteBuffer): Internal.ByteBuf;
        readBytes(arg0: Internal.OutputStream, arg1: number): Internal.ByteBuf;
        readBytes(arg0: Internal.FileChannel, arg1: number, arg2: number): number;
        readBoolean(): boolean;
        toString(): string;
        toString(arg0: Internal.Charset): string;
        toString(arg0: number, arg1: number, arg2: Internal.Charset): string;
        retainedSlice(arg0: number, arg1: number): Internal.ByteBuf;
        retainedSlice(): Internal.ByteBuf;
        readMediumLE(): number;
        isDirect(): boolean;
        setMedium(arg0: number, arg1: number): Internal.ByteBuf;
        setBoolean(arg0: number, arg1: boolean): Internal.ByteBuf;
        getFloatLE(arg0: number): number;
        readerIndex(): number;
        readerIndex(arg0: number): Internal.ByteBuf;
        getCharSequence(arg0: number, arg1: number, arg2: Internal.Charset): Internal.CharSequence;
        setShort(arg0: number, arg1: number): Internal.ByteBuf;
        compareTo(arg0: Internal.ByteBuf): number;
        compareTo(arg0: object): number;
        getBytes(arg0: number, arg1: number[]): Internal.ByteBuf;
        getBytes(arg0: number, arg1: Internal.ByteBuf, arg2: number): Internal.ByteBuf;
        getBytes(arg0: number, arg1: Internal.ByteBuf): Internal.ByteBuf;
        getBytes(arg0: number, arg1: Internal.ByteBuf, arg2: number, arg3: number): Internal.ByteBuf;
        getBytes(arg0: number, arg1: Internal.FileChannel, arg2: number, arg3: number): number;
        getBytes(arg0: number, arg1: Internal.GatheringByteChannel, arg2: number): number;
        getBytes(arg0: number, arg1: Internal.OutputStream, arg2: number): Internal.ByteBuf;
        getBytes(arg0: number, arg1: number[], arg2: number, arg3: number): Internal.ByteBuf;
        getBytes(arg0: number, arg1: Internal.ByteBuffer): Internal.ByteBuf;
        unwrap(): Internal.ByteBuf;
        setDouble(arg0: number, arg1: number): Internal.ByteBuf;
        setChar(arg0: number, arg1: number): Internal.ByteBuf;
        refCnt(): number;
        getUnsignedIntLE(arg0: number): number;
        setFloatLE(arg0: number, arg1: number): Internal.ByteBuf;
        getUnsignedInt(arg0: number): number;
        indexOf(arg0: number, arg1: number, arg2: number): number;
        writeByte(arg0: number): Internal.ByteBuf;
        nioBuffer(): Internal.ByteBuffer;
        nioBuffer(arg0: number, arg1: number): Internal.ByteBuffer;
        touch(): Internal.ByteBuf;
        touch(): Internal.ReferenceCounted;
        touch(arg0: object): Internal.ByteBuf;
        touch(arg0: object): Internal.ReferenceCounted;
        discardSomeReadBytes(): Internal.ByteBuf;
        duplicate(): Internal.ByteBuf;
        writerIndex(): number;
        writerIndex(arg0: number): Internal.ByteBuf;
        readUnsignedInt(): number;
        getUnsignedShortLE(arg0: number): number;
        writeCharSequence(arg0: Internal.CharSequence, arg1: Internal.Charset): number;
        retainedDuplicate(): Internal.ByteBuf;
        getChar(arg0: number): string;
        setLong(arg0: number, arg1: number): Internal.ByteBuf;
        readMedium(): number;
        writeBytes(arg0: Internal.ScatteringByteChannel, arg1: number): number;
        writeBytes(arg0: Internal.ByteBuffer): Internal.ByteBuf;
        writeBytes(arg0: Internal.InputStream, arg1: number): number;
        writeBytes(arg0: Internal.FileChannel, arg1: number, arg2: number): number;
        writeBytes(arg0: number[], arg1: number, arg2: number): Internal.ByteBuf;
        writeBytes(arg0: number[]): Internal.ByteBuf;
        writeBytes(arg0: Internal.ByteBuf): Internal.ByteBuf;
        writeBytes(arg0: Internal.ByteBuf, arg1: number, arg2: number): Internal.ByteBuf;
        writeBytes(arg0: Internal.ByteBuf, arg1: number): Internal.ByteBuf;
        forEachByte(arg0: number, arg1: number, arg2: Internal.ByteProcessor): number;
        forEachByte(arg0: Internal.ByteProcessor): number;
        setIndex(arg0: number, arg1: number): Internal.ByteBuf;
        writeShort(arg0: number): Internal.ByteBuf;
        alloc(): Internal.ByteBufAllocator;
        getShortLE(arg0: number): number;
        getMedium(arg0: number): number;
        readUnsignedShort(): number;
        setByte(arg0: number, arg1: number): Internal.ByteBuf;
        maxWritableBytes(): number;
        writeShortLE(arg0: number): Internal.ByteBuf;
        notifyAll(): void;
        getDouble(arg0: number): number;
        getFloat(arg0: number): number;
        writeLong(arg0: number): Internal.ByteBuf;
        writeIntLE(arg0: number): Internal.ByteBuf;
        array(): number[];
        setCharSequence(arg0: number, arg1: Internal.CharSequence, arg2: Internal.Charset): number;
        hashCode(): number;
        internalNioBuffer(arg0: number, arg1: number): Internal.ByteBuffer;
        arrayOffset(): number;
        readIntLE(): number;
        setMediumLE(arg0: number, arg1: number): Internal.ByteBuf;
        readUnsignedByte(): number;
        readLongLE(): number;
        readUnsignedMediumLE(): number;
        writeDouble(arg0: number): Internal.ByteBuf;
        setBytes(arg0: number, arg1: Internal.ByteBuf, arg2: number): Internal.ByteBuf;
        setBytes(arg0: number, arg1: number[]): Internal.ByteBuf;
        setBytes(arg0: number, arg1: Internal.ByteBuf): Internal.ByteBuf;
        setBytes(arg0: number, arg1: Internal.FileChannel, arg2: number, arg3: number): number;
        setBytes(arg0: number, arg1: Internal.ByteBuffer): Internal.ByteBuf;
        setBytes(arg0: number, arg1: number[], arg2: number, arg3: number): Internal.ByteBuf;
        setBytes(arg0: number, arg1: Internal.ByteBuf, arg2: number, arg3: number): Internal.ByteBuf;
        setBytes(arg0: number, arg1: Internal.ScatteringByteChannel, arg2: number): number;
        setBytes(arg0: number, arg1: Internal.InputStream, arg2: number): number;
        setFloat(arg0: number, arg1: number): Internal.ByteBuf;
        getShort(arg0: number): number;
        writeMediumLE(arg0: number): Internal.ByteBuf;
        clear(): Internal.ByteBuf;
        getUnsignedByte(arg0: number): number;
        discardReadBytes(): Internal.ByteBuf;
        writeChar(arg0: number): Internal.ByteBuf;
        writeDoubleLE(arg0: number): Internal.ByteBuf;
        isContiguous(): boolean;
        getUnsignedMediumLE(arg0: number): number;
        readByte(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ScheduledExecutorService implements Internal.ExecutorService {
        scheduleAtFixedRate(arg0: Internal.Runnable, arg1: number, arg2: number, arg3: Internal.TimeUnit): Internal.ScheduledFuture<object>;
        schedule(arg0: Internal.Runnable, arg1: number, arg2: Internal.TimeUnit): Internal.ScheduledFuture<object>;
        schedule<V>(arg0: java_.util.concurrent.Callable<V>, arg1: number, arg2: Internal.TimeUnit): Internal.ScheduledFuture<V>;
        isTerminated(): boolean;
        scheduleWithFixedDelay(arg0: Internal.Runnable, arg1: number, arg2: number, arg3: Internal.TimeUnit): Internal.ScheduledFuture<object>;
        awaitTermination(arg0: number, arg1: Internal.TimeUnit): boolean;
        execute(arg0: Internal.Runnable): void;
        shutdown(): void;
        isShutdown(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class MathContext implements Internal.Serializable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        static readonly DECIMAL128 : Internal.MathContext;
        static readonly DECIMAL64 : Internal.MathContext;
        static readonly DECIMAL32 : Internal.MathContext;
        static readonly UNLIMITED : Internal.MathContext;
        get roundingMode(): Internal.RoundingMode;
        get precision(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Object2ByteFunction <K> implements it.unimi.dsi.fastutil.Function<K, number>, Internal.ToIntFunction<K> {
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        getByte(arg0: object): number;
        andThenShort(arg0: Internal.Byte2ShortFunction): Internal.Object2ShortFunction<K>;
        composeByte(arg0: Internal.Byte2ObjectFunction<K>): Internal.Byte2ByteFunction;
        andThenInt(arg0: Internal.Byte2IntFunction): Internal.Object2IntFunction<K>;
        composeReference<T>(arg0: (arg0: T) => K): Internal.Reference2ByteFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: K) => T;
        put(arg0: K, arg1: number): number;
        put(arg0: K, arg1: number): number;
        put(arg0: object, arg1: object): object;
        remove(arg0: object): number;
        remove(arg0: object): object;
        defaultReturnValue(): number;
        defaultReturnValue(arg0: number): void;
        andThenDouble(arg0: Internal.Byte2DoubleFunction): Internal.Object2DoubleFunction<K>;
        andThenObject<T>(arg0: Internal.Byte2ObjectFunction<T>): (arg0: K) => T;
        get(arg0: object): object;
        get(arg0: object): number;
        andThenLong(arg0: Internal.Byte2LongFunction): Internal.Object2LongFunction<K>;
        composeLong(arg0: Internal.Long2ObjectFunction<K>): Internal.Long2ByteFunction;
        removeByte(arg0: object): number;
        andThenByte(arg0: Internal.Byte2ByteFunction): Internal.Object2ByteFunction<K>;
        andThenFloat(arg0: Internal.Byte2FloatFunction): Internal.Object2FloatFunction<K>;
        applyAsInt(arg0: K): number;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        composeInt(arg0: Internal.Int2ObjectFunction<K>): Internal.Int2ByteFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2ObjectFunction<K>): Internal.Float2ByteFunction;
        andThenChar(arg0: Internal.Byte2CharFunction): Internal.Object2CharFunction<K>;
        composeObject<T>(arg0: (arg0: T) => K): Internal.Object2ByteFunction<T>;
        size(): number;
        composeShort(arg0: Internal.Short2ObjectFunction<K>): Internal.Short2ByteFunction;
        andThenReference<T>(arg0: Internal.Byte2ReferenceFunction<T>): (arg0: K) => T;
        composeChar(arg0: Internal.Char2ObjectFunction<K>): Internal.Char2ByteFunction;
        composeDouble(arg0: Internal.Double2ObjectFunction<K>): Internal.Double2ByteFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface TypeAdapterFactory {
        create<T>(arg0: Internal.Gson, arg1: Internal.TypeToken<T>): Internal.TypeAdapter<T>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class CookingRecipeJS extends Internal.RecipeJS {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        ingredientAction(filter: Internal.IngredientActionFilter, action: Internal.IngredientAction): Internal.RecipeJS;
        notifyAll(): void;
        convertReplacedInput(index: number, oldIngredient: Internal.IngredientJS, newIngredient: Internal.IngredientJS): Internal.IngredientJS;
        convertReplacedOutput(index: number, oldStack: Internal.ItemStackJS, newStack: Internal.ItemStackJS): Internal.ItemStackJS;
        save(): void;
        damageIngredient(filter: Internal.IngredientActionFilter, damage: number): Internal.RecipeJS;
        damageIngredient(filter: Internal.IngredientActionFilter): Internal.RecipeJS;
        getId(): string;
        dontAdd(): void;
        notify(): void;
        serializeJson(): void;
        cookingTime(time: number): Internal.CookingRecipeJS;
        replaceOutput(i: Internal.IngredientJS, with_: Internal.ItemStackJS, exact: boolean): boolean;
        hashCode(): number;
        merge(data: object): Internal.RecipeJS;
        create(args: Internal.ListJS): void;
        deserializeJson(): void;
        id(_id: ResourceLocation): Internal.RecipeJS;
        parseIngredientItem(o: object, key: string): Internal.IngredientJS;
        parseIngredientItem(o: object): Internal.IngredientJS;
        group(g: string): Internal.RecipeJS;
        deserialize(): void;
        serializeNBTAsJson(): boolean;
        getOutputIndex(ingredient: Internal.IngredientJS, exact: boolean): number;
        getInputIndex(ingredient: Internal.IngredientJS, exact: boolean): number;
        setGroup(g: string): void;
        serialize(): void;
        resultFromRecipeJson(json: Internal.JsonObject): Internal.ItemStackJS;
        serializeIngredientStack(in_: Internal.IngredientStackJS): Internal.JsonElement;
        stage(s: string): Internal.RecipeJS;
        replaceInput(i: Internal.IngredientJS, with_: Internal.IngredientJS, exact: boolean): boolean;
        getType(): string;
        equals(arg0: object): boolean;
        getGroup(): string;
        serializeItemStack(stack: Internal.ItemStackJS): Internal.JsonElement;
        xp(xp: number): Internal.CookingRecipeJS;
        hasOutput(ingredient: Internal.IngredientJS, exact: boolean): boolean;
        toString(): string;
        keepIngredient(filter: Internal.IngredientActionFilter): Internal.RecipeJS;
        parseResultItem(o: object): Internal.ItemStackJS;
        hasInput(ingredient: Internal.IngredientJS, exact: boolean): boolean;
        customIngredientAction(filter: Internal.IngredientActionFilter, id: string): Internal.RecipeJS;
        replaceIngredient(filter: Internal.IngredientActionFilter, item: Internal.ItemStackJS): Internal.RecipeJS;
        static currentRecipe : Internal.RecipeJS;
        originalJson : Internal.JsonObject;
        serializeOutputs : boolean;
        originalRecipe : Internal.Recipe<object>;
        readonly inputItems : Internal.List<Internal.IngredientJS>;
        static itemErrors : false;
        json : Internal.JsonObject;
        readonly outputItems : Internal.List<Internal.ItemStackJS>;
        type : Internal.RecipeTypeJS;
        serializeInputs : boolean;
        get mod(): string;
        get uniqueId(): string;
        get fromToString(): string;
        get path(): string;
        get orCreateId(): ResourceLocation;
        get originalRecipeResult(): Internal.ItemStackJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Double2ReferenceFunction <V> implements it.unimi.dsi.fastutil.Function<number, V>, Internal.DoubleFunction<V> {
        getOrDefault(arg0: object, arg1: V): V;
        getOrDefault(arg0: number, arg1: V): V;
        andThenShort(arg0: Internal.Reference2ShortFunction<V>): Internal.Double2ShortFunction;
        composeByte(arg0: Internal.Byte2DoubleFunction): Internal.Byte2ReferenceFunction<V>;
        andThenInt(arg0: Internal.Reference2IntFunction<V>): Internal.Double2IntFunction;
        composeReference<T>(arg0: Internal.Reference2DoubleFunction<T>): (arg0: T) => V;
        put(arg0: number, arg1: V): V;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: V): V;
        remove(arg0: number): V;
        remove(arg0: object): V;
        defaultReturnValue(): V;
        defaultReturnValue(arg0: V): void;
        andThenDouble(arg0: Internal.Reference2DoubleFunction<V>): Internal.Double2DoubleFunction;
        andThenObject<T>(arg0: (arg0: V) => T): Internal.Double2ObjectFunction<T>;
        get(arg0: object): V;
        get(arg0: number): V;
        andThenLong(arg0: Internal.Reference2LongFunction<V>): Internal.Double2LongFunction;
        composeLong(arg0: Internal.Long2DoubleFunction): Internal.Long2ReferenceFunction<V>;
        andThenByte(arg0: Internal.Reference2ByteFunction<V>): Internal.Double2ByteFunction;
        andThenFloat(arg0: Internal.Reference2FloatFunction<V>): Internal.Double2FloatFunction;
        apply(arg0: number): V;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2DoubleFunction): Internal.Int2ReferenceFunction<V>;
        clear(): void;
        composeFloat(arg0: Internal.Float2DoubleFunction): Internal.Float2ReferenceFunction<V>;
        andThenChar(arg0: Internal.Reference2CharFunction<V>): Internal.Double2CharFunction;
        composeObject<T>(arg0: Internal.Object2DoubleFunction<T>): (arg0: T) => V;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => V;
        composeShort(arg0: Internal.Short2DoubleFunction): Internal.Short2ReferenceFunction<V>;
        andThenReference<T>(arg0: (arg0: V) => T): Internal.Double2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2DoubleFunction): Internal.Char2ReferenceFunction<V>;
        composeDouble(arg0: Internal.Double2DoubleFunction): Internal.Double2ReferenceFunction<V>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Short2FloatFunction implements it.unimi.dsi.fastutil.Function<number, number>, Internal.IntToDoubleFunction {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        applyAsDouble(arg0: number): number;
        andThenShort(arg0: Internal.Float2ShortFunction): Internal.Short2ShortFunction;
        composeByte(arg0: Internal.Byte2ShortFunction): Internal.Byte2FloatFunction;
        andThenInt(arg0: Internal.Float2IntFunction): Internal.Short2IntFunction;
        composeReference<T>(arg0: Internal.Reference2ShortFunction<T>): Internal.Reference2FloatFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: number) => T;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: number): number;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: object): object;
        remove(arg0: object): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Float2DoubleFunction): Internal.Short2DoubleFunction;
        andThenObject<T>(arg0: Internal.Float2ObjectFunction<T>): Internal.Short2ObjectFunction<T>;
        get(arg0: object): number;
        get(arg0: object): object;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Float2LongFunction): Internal.Short2LongFunction;
        composeLong(arg0: Internal.Long2ShortFunction): Internal.Long2FloatFunction;
        andThenByte(arg0: Internal.Float2ByteFunction): Internal.Short2ByteFunction;
        andThenFloat(arg0: Internal.Float2FloatFunction): Internal.Short2FloatFunction;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2ShortFunction): Internal.Int2FloatFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2ShortFunction): Internal.Float2FloatFunction;
        andThenChar(arg0: Internal.Float2CharFunction): Internal.Short2CharFunction;
        composeObject<T>(arg0: Internal.Object2ShortFunction<T>): Internal.Object2FloatFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => number;
        composeShort(arg0: Internal.Short2ShortFunction): Internal.Short2FloatFunction;
        andThenReference<T>(arg0: Internal.Float2ReferenceFunction<T>): Internal.Short2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2ShortFunction): Internal.Char2FloatFunction;
        composeDouble(arg0: Internal.Double2ShortFunction): Internal.Double2FloatFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ExternalArrayData {
        setArrayElement(arg0: number, arg1: object): void;
        getArrayElement(arg0: number): object;
        get arrayLength(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IDataProcessor <T> {
        read(arg0: Internal.CompoundTag): T;
        write(arg0: T): Internal.CompoundTag;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface VertexType {
        createWriter(arg0: Internal.ByteBuffer): Internal.VertexWriter;
        byteOffset(arg0: number): number;
        createReader(arg0: Internal.ByteBuffer, arg1: number): Internal.VertexList;
        get layout(): Internal.BufferLayout;
        get stride(): number;
        get shaderHeader(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class ImmutableMap <K, V> implements Map<K, V>, Internal.Serializable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        getOrDefault(arg0: object, arg1: V): V;
        static ofEntries<K, V>(arg0: Internal.Map$Entry<K, V>[]): Internal.ImmutableMap<K, V>;
        notifyAll(): void;
        computeIfAbsent(arg0: K, arg1: (arg0: K) => V): V;
        values(): Internal.Collection<any>;
        values(): Internal.ImmutableCollection<V>;
        replace(arg0: K, arg1: V, arg2: V): boolean;
        replace(arg0: K, arg1: V): V;
        replaceAll(arg0: (arg0: K, arg1: V) => V): void;
        notify(): void;
        containsValue(arg0: object): boolean;
        put(arg0: K, arg1: V): V;
        remove(arg0: object, arg1: object): boolean;
        remove(arg0: object): V;
        compute(arg0: K, arg1: (arg0: K, arg1: V) => V): V;
        static toImmutableMap<T, K, V>(arg0: (arg0: T) => K, arg1: (arg0: T) => V, arg2: Internal.BinaryOperator<V>): Internal.Collector<T, object, Internal.ImmutableMap<K, V>>;
        static toImmutableMap<T, K, V>(arg0: (arg0: T) => K, arg1: (arg0: T) => V): Internal.Collector<T, object, Internal.ImmutableMap<K, V>>;
        hashCode(): number;
        putAll(arg0: Map<K, V>): void;
        merge(arg0: K, arg1: V, arg2: (arg0: V, arg1: V) => V): V;
        static of<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V, arg6: K, arg7: V): Internal.ImmutableMap<K, V>;
        static of<K, V>(): Internal.ImmutableMap<K, V>;
        static of<K, V>(arg0: K, arg1: V, arg2: K, arg3: V): Internal.ImmutableMap<K, V>;
        static of<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V): Internal.ImmutableMap<K, V>;
        static of<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V, arg6: K, arg7: V, arg8: K, arg9: V, arg10: K, arg11: V, arg12: K, arg13: V): Internal.ImmutableMap<K, V>;
        static of<K, V>(arg0: K, arg1: V): Internal.ImmutableMap<K, V>;
        static of<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V, arg6: K, arg7: V, arg8: K, arg9: V, arg10: K, arg11: V, arg12: K, arg13: V, arg14: K, arg15: V): Internal.ImmutableMap<K, V>;
        static of<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V, arg6: K, arg7: V, arg8: K, arg9: V, arg10: K, arg11: V, arg12: K, arg13: V, arg14: K, arg15: V, arg16: K, arg17: V, arg18: K, arg19: V): Internal.ImmutableMap<K, V>;
        static of<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V, arg6: K, arg7: V, arg8: K, arg9: V, arg10: K, arg11: V): Internal.ImmutableMap<K, V>;
        static of<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V, arg6: K, arg7: V, arg8: K, arg9: V): Internal.ImmutableMap<K, V>;
        static of<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V, arg6: K, arg7: V, arg8: K, arg9: V, arg10: K, arg11: V, arg12: K, arg13: V, arg14: K, arg15: V, arg16: K, arg17: V): Internal.ImmutableMap<K, V>;
        get(arg0: object): V;
        static builder<K, V>(): Internal.ImmutableMap$Builder<K, V>;
        keySet(): Internal.ImmutableSet<K>;
        keySet(): Internal.Set<any>;
        entrySet(): Internal.Set<any>;
        entrySet(): Internal.ImmutableSet<Internal.Map$Entry<K, V>>;
        forEach(arg0: (arg0: K, arg1: V) => void): void;
        containsKey(arg0: object): boolean;
        isEmpty(): boolean;
        clear(): void;
        static copyOf<K, V>(arg0: Internal.Iterable<Internal.Map$Entry<K, V>>): Internal.ImmutableMap<K, V>;
        static copyOf<K, V>(arg0: Map<K, V>): Internal.ImmutableMap<K, V>;
        static builderWithExpectedSize<K, V>(arg0: number): Internal.ImmutableMap$Builder<K, V>;
        asMultimap(): Internal.ImmutableSetMultimap<K, V>;
        computeIfPresent(arg0: K, arg1: (arg0: K, arg1: V) => V): V;
        size(): number;
        equals(arg0: object): boolean;
        toString(): string;
        putIfAbsent(arg0: K, arg1: V): V;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class AbstractContainerScreen <T> extends Internal.Screen implements Internal.MenuAccess<T>, Internal.AbstractContainerScreenAccessor, yalter.mousetweaks.mixin.AbstractContainerScreenAccessor {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        notify(): void;
        balm_getNarratables(): Internal.List<any>;
        invokeFindSlot(arg0: number, arg1: number): Internal.Slot;
        static renderSlotHighlight(arg0: Internal.PoseStack, arg1: number, arg2: number, arg3: number, arg4: number): void;
        handler$zjm000$renderSlot(arg0: Internal.PoseStack, arg1: Internal.Slot, arg2: Internal.CallbackInfo): void;
        hashCode(): number;
        getSlotColor(arg0: number): number;
        callIsHovering(arg0: Internal.Slot, arg1: number, arg2: number): boolean;
        callRenderSlot(arg0: Internal.PoseStack, arg1: Internal.Slot): void;
        invokeSlotClicked(arg0: Internal.Slot, arg1: number, arg2: number, arg3: Internal.ClickType): void;
        balm_getChildren(): Internal.List<any>;
        balm_getRenderables(): Internal.List<any>;
        equals(arg0: object): boolean;
        toString(): string;
        tooltipStack : Internal.ItemStack;
        get hoveredSlot(): Internal.Slot;
        get ySize(): number;
        get isQuickCrafting(): boolean;
        get leftPos(): number;
        get imageHeight(): number;
        set isQuickCrafting(arg0: boolean);
        get quickCraftingButton(): number;
        set skipNextRelease(arg0: boolean);
        get renderables(): Internal.List<any>;
        get imageWidth(): number;
        get minecraft(): Internal.Minecraft;
        get guiTop(): number;
        get topPos(): number;
        get guiLeft(): number;
        get slotUnderMouse(): Internal.Slot;
        get xSize(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Products$P10 <F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        apply<R>(arg0: Internal.Applicative<F, object>, arg1: Internal.Function10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>): Internal.App<F, R>;
        apply<R>(arg0: Internal.Applicative<F, object>, arg1: Internal.App<F, Internal.Function10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>>): Internal.App<F, R>;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Vector4f {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        set(arg0: number[]): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        set w(arg0: number);
        set y(arg0: number);
        set x(arg0: number);
        set z(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface MovingListener implements Internal.LightListener {
        onLightUpdate(arg0: Internal.LightProvider, arg1: Internal.LightLayer, arg2: Internal.ImmutableBox): void;
        onLightPacket(arg0: Internal.LightProvider, arg1: number, arg2: number): void;
        update(arg0: Internal.LightProvider): boolean;
        status(): Internal.ListenerStatus;
        get volume(): Internal.ImmutableBox;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Properties extends Internal.Hashtable<object, object> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        getOrDefault(arg0: object, arg1: object): object;
        loadFromXML(arg0: Internal.InputStream): void;
        keys(): Internal.Enumeration<object>;
        notifyAll(): void;
        computeIfAbsent(arg0: object, arg1: (arg0: object) => object): object;
        values(): Internal.Collection<object>;
        save(arg0: Internal.OutputStream, arg1: string): void;
        replace(arg0: object, arg1: object, arg2: object): boolean;
        replace(arg0: object, arg1: object): object;
        replaceAll(arg0: (arg0: object, arg1: object) => object): void;
        notify(): void;
        containsValue(arg0: object): boolean;
        put(arg0: object, arg1: object): object;
        remove(arg0: object): object;
        remove(arg0: object, arg1: object): boolean;
        compute(arg0: object, arg1: (arg0: object, arg1: object) => object): object;
        load(arg0: Internal.Reader): void;
        load(arg0: Internal.InputStream): void;
        hashCode(): number;
        putAll(arg0: Map<object, object>): void;
        merge(arg0: object, arg1: object, arg2: (arg0: object, arg1: object) => object): object;
        get(arg0: object): object;
        keySet(): Internal.Set<object>;
        getProperty(arg0: string): string;
        getProperty(arg0: string, arg1: string): string;
        entrySet(): Internal.Set<Internal.Map$Entry<object, object>>;
        containsKey(arg0: object): boolean;
        forEach(arg0: (arg0: object, arg1: object) => void): void;
        stringPropertyNames(): Internal.Set<string>;
        isEmpty(): boolean;
        clear(): void;
        store(arg0: Internal.OutputStream, arg1: string): void;
        store(arg0: Internal.Writer, arg1: string): void;
        list(arg0: Internal.PrintStream): void;
        list(arg0: Internal.PrintWriter): void;
        storeToXML(arg0: Internal.OutputStream, arg1: string, arg2: string): void;
        storeToXML(arg0: Internal.OutputStream, arg1: string): void;
        storeToXML(arg0: Internal.OutputStream, arg1: string, arg2: Internal.Charset): void;
        contains(arg0: object): boolean;
        computeIfPresent(arg0: object, arg1: (arg0: object, arg1: object) => object): object;
        size(): number;
        propertyNames(): Internal.Enumeration<object>;
        setProperty(arg0: string, arg1: string): object;
        elements(): Internal.Enumeration<object>;
        equals(arg0: object): boolean;
        clone(): object;
        toString(): string;
        putIfAbsent(arg0: object, arg1: object): object;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Proxy$Type extends Internal.Enum<Internal.Proxy$Type> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(arg0: string): Internal.Proxy$Type;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.Proxy$Type[];
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly SOCKS : Internal.Proxy$Type;
        static readonly HTTP : Internal.Proxy$Type;
        static readonly DIRECT : Internal.Proxy$Type;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ExclusionStrategy {
        shouldSkipClass(arg0: Internal.Class<object>): boolean;
        shouldSkipField(arg0: Internal.FieldAttributes): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface INBTSerializable <T> {
        serializeNBT(): T;
        deserializeNBT(arg0: T): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Tag$Named <T> implements net.minecraft.tags.Tag<T> {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface RenderTypeAccess {
        get name(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class TagEventJS$TagWrapper <T> {
        add(ids: object): Internal.TagEventJS$TagWrapper<T>;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        removeAll(): Internal.TagEventJS$TagWrapper<T>;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        sort(): boolean;
        notify(): void;
        remove(ids: object): Internal.TagEventJS$TagWrapper<T>;
        set priorityList(o: object);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Float2CharFunction implements it.unimi.dsi.fastutil.Function<number, string>, Internal.DoubleToIntFunction {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: string): string;
        getOrDefault(arg0: number, arg1: string): string;
        andThenShort(arg0: Internal.Char2ShortFunction): Internal.Float2ShortFunction;
        composeByte(arg0: Internal.Byte2FloatFunction): Internal.Byte2CharFunction;
        andThenInt(arg0: Internal.Char2IntFunction): Internal.Float2IntFunction;
        composeReference<T>(arg0: Internal.Reference2FloatFunction<T>): Internal.Reference2CharFunction<T>;
        andThen<T>(arg0: (arg0: string) => T): (arg0: number) => T;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: string): string;
        put(arg0: number, arg1: string): string;
        remove(arg0: number): string;
        remove(arg0: object): object;
        remove(arg0: object): string;
        defaultReturnValue(arg0: string): void;
        defaultReturnValue(): string;
        andThenDouble(arg0: Internal.Char2DoubleFunction): Internal.Float2DoubleFunction;
        andThenObject<T>(arg0: Internal.Char2ObjectFunction<T>): Internal.Float2ObjectFunction<T>;
        get(arg0: object): string;
        get(arg0: object): object;
        get(arg0: number): string;
        andThenLong(arg0: Internal.Char2LongFunction): Internal.Float2LongFunction;
        composeLong(arg0: Internal.Long2FloatFunction): Internal.Long2CharFunction;
        andThenByte(arg0: Internal.Char2ByteFunction): Internal.Float2ByteFunction;
        andThenFloat(arg0: Internal.Char2FloatFunction): Internal.Float2FloatFunction;
        applyAsInt(arg0: number): number;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2FloatFunction): Internal.Int2CharFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2FloatFunction): Internal.Float2CharFunction;
        andThenChar(arg0: Internal.Char2CharFunction): Internal.Float2CharFunction;
        composeObject<T>(arg0: Internal.Object2FloatFunction<T>): Internal.Object2CharFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => string;
        composeShort(arg0: Internal.Short2FloatFunction): Internal.Short2CharFunction;
        andThenReference<T>(arg0: Internal.Char2ReferenceFunction<T>): Internal.Float2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2FloatFunction): Internal.Char2CharFunction;
        composeDouble(arg0: Internal.Double2FloatFunction): Internal.Double2CharFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface GatheringByteChannel implements Internal.WritableByteChannel {
        isOpen(): boolean;
        close(): void;
        write(arg0: Internal.ByteBuffer[], arg1: number, arg2: number): number;
        write(arg0: Internal.ByteBuffer[]): number;
        write(arg0: Internal.ByteBuffer): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Transform <Self> implements Internal.Translate<Self>, Internal.Rotate<Self>, Internal.Scale<Self> {
        rotate(arg0: Internal.Direction, arg1: number): Self;
        rotate(arg0: number, arg1: Internal.Direction$Axis): Self;
        translateAll(arg0: number): Self;
        rotateCentered(arg0: Internal.Direction, arg1: number): Self;
        rotateCentered(arg0: Internal.Quaternion): Self;
        scale(arg0: number, arg1: number, arg2: number): Self;
        scale(arg0: number): Self;
        centre(): Self;
        multiplyRadians(arg0: Internal.Vector3f, arg1: number): Self;
        translate(arg0: Vec3i): Self;
        translate(arg0: Vec3): Self;
        translate(arg0: Internal.Vector3f): Self;
        translate(arg0: number, arg1: number, arg2: number): Self;
        rotateZRadians(arg0: number): Self;
        translateZ(arg0: number): Self;
        mulNormal(arg0: Internal.Matrix3f): Self;
        transform(arg0: Internal.PoseStack): Self;
        transform(arg0: Internal.Matrix4f, arg1: Internal.Matrix3f): Self;
        mulPose(arg0: Internal.Matrix4f): Self;
        rotateYRadians(arg0: number): Self;
        rotateXRadians(arg0: number): Self;
        translateY(arg0: number): Self;
        translateX(arg0: number): Self;
        unCentre(): Self;
        multiply(arg0: Internal.Vector3f, arg1: number): Self;
        multiply(arg0: Internal.Quaternion): Self;
        rotateX(arg0: number): Self;
        rotateY(arg0: number): Self;
        translateBack(arg0: Vec3i): Self;
        translateBack(arg0: Vec3): Self;
        translateBack(arg0: number, arg1: number, arg2: number): Self;
        rotateToFace(arg0: Internal.Direction): Self;
        rotateZ(arg0: number): Self;
        nudge(arg0: number): Self;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IFluidHandler {
        getFluidInTank(arg0: number): Internal.FluidStack;
        getTankCapacity(arg0: number): number;
        fill(arg0: Internal.FluidStack, arg1: Internal.IFluidHandler$FluidAction): number;
        isFluidValid(arg0: number, arg1: Internal.FluidStack): boolean;
        drain(arg0: number, arg1: Internal.IFluidHandler$FluidAction): Internal.FluidStack;
        drain(arg0: Internal.FluidStack, arg1: Internal.IFluidHandler$FluidAction): Internal.FluidStack;
        get tanks(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class ClassLoader {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        getResource(arg0: string): Internal.URL;
        notifyAll(): void;
        setPackageAssertionStatus(arg0: string, arg1: boolean): void;
        notify(): void;
        setClassAssertionStatus(arg0: string, arg1: boolean): void;
        getDefinedPackage(arg0: string): Internal.Package;
        clearAssertionStatus(): void;
        isRegisteredAsParallelCapable(): boolean;
        getResources(arg0: string): Internal.Enumeration<Internal.URL>;
        hashCode(): number;
        static getSystemResources(arg0: string): Internal.Enumeration<Internal.URL>;
        getResourceAsStream(arg0: string): Internal.InputStream;
        resources(arg0: string): Internal.Stream<Internal.URL>;
        static getSystemResource(arg0: string): Internal.URL;
        static getSystemResourceAsStream(arg0: string): Internal.InputStream;
        equals(arg0: object): boolean;
        loadClass(arg0: string): Internal.Class<object>;
        toString(): string;
        get name(): string;
        set defaultAssertionStatus(arg0: boolean);
        get definedPackages(): Internal.Package[];
        get unnamedModule(): Internal.Module;
        get parent(): Internal.ClassLoader;
        get platformClassLoader(): Internal.ClassLoader;
        get systemClassLoader(): Internal.ClassLoader;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class BaseImmutableMultimap <K, V> extends Internal.AbstractMultimap<K, V> {
        containsEntry(arg0: object, arg1: object): boolean;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        containsKey(arg0: object): boolean;
        notifyAll(): void;
        clear(): void;
        isEmpty(): boolean;
        notify(): void;
        containsValue(arg0: object): boolean;
        put(arg0: K, arg1: V): boolean;
        remove(arg0: object, arg1: object): boolean;
        size(): number;
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IForgeBlock {
        rotate(arg0: Internal.BlockState, arg1: Internal.LevelAccessor, arg2: BlockPos, arg3: Internal.Rotation): Internal.BlockState;
        getStateAtViewpoint(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos, arg3: Vec3): Internal.BlockState;
        onBlockExploded(arg0: Internal.BlockState, arg1: Internal.Level, arg2: BlockPos, arg3: Internal.Explosion): void;
        getBedDirection(arg0: Internal.BlockState, arg1: Internal.LevelReader, arg2: BlockPos): Internal.Direction;
        getExpDrop(arg0: Internal.BlockState, arg1: Internal.LevelReader, arg2: BlockPos, arg3: number, arg4: number): number;
        isConduitFrame(arg0: Internal.BlockState, arg1: Internal.LevelReader, arg2: BlockPos, arg3: BlockPos): boolean;
        getLightEmission(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos): number;
        onDestroyedByPlayer(arg0: Internal.BlockState, arg1: Internal.Level, arg2: BlockPos, arg3: Internal.Player, arg4: boolean, arg5: Internal.FluidState): boolean;
        isBed(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos, arg3: Internal.Entity): boolean;
        shouldCheckWeakPower(arg0: Internal.BlockState, arg1: Internal.LevelReader, arg2: BlockPos, arg3: Internal.Direction): boolean;
        makesOpenTrapdoorAboveClimbable(arg0: Internal.BlockState, arg1: Internal.LevelReader, arg2: BlockPos, arg3: Internal.BlockState): boolean;
        canHarvestBlock(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos, arg3: Internal.Player): boolean;
        collisionExtendsVertically(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos, arg3: Internal.Entity): boolean;
        addLandingEffects(arg0: Internal.BlockState, arg1: Internal.ServerLevel, arg2: BlockPos, arg3: Internal.BlockState, arg4: Internal.LivingEntity, arg5: number): boolean;
        isLadder(arg0: Internal.BlockState, arg1: Internal.LevelReader, arg2: BlockPos, arg3: Internal.LivingEntity): boolean;
        shouldDisplayFluidOverlay(arg0: Internal.BlockState, arg1: Internal.BlockAndTintGetter, arg2: BlockPos, arg3: Internal.FluidState): boolean;
        getSoundType(arg0: Internal.BlockState, arg1: Internal.LevelReader, arg2: BlockPos, arg3: Internal.Entity): Internal.SoundType;
        addRunningEffects(arg0: Internal.BlockState, arg1: Internal.Level, arg2: BlockPos, arg3: Internal.Entity): boolean;
        onNeighborChange(arg0: Internal.BlockState, arg1: Internal.LevelReader, arg2: BlockPos, arg3: BlockPos): void;
        canStickTo(arg0: Internal.BlockState, arg1: Internal.BlockState): boolean;
        getWeakChanges(arg0: Internal.BlockState, arg1: Internal.LevelReader, arg2: BlockPos): boolean;
        canEntityDestroy(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos, arg3: Internal.Entity): boolean;
        getCloneItemStack(arg0: Internal.BlockState, arg1: Internal.HitResult, arg2: Internal.BlockGetter, arg3: BlockPos, arg4: Internal.Player): Internal.ItemStack;
        isBurning(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos): boolean;
        getFriction(arg0: Internal.BlockState, arg1: Internal.LevelReader, arg2: BlockPos, arg3: Internal.Entity): number;
        isFlammable(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos, arg3: Internal.Direction): boolean;
        isValidSpawn(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos, arg3: Internal.SpawnPlacements$Type, arg4: Internal.EntityType<object>): boolean;
        isPortalFrame(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos): boolean;
        getExplosionResistance(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos, arg3: Internal.Explosion): number;
        isScaffolding(arg0: Internal.BlockState, arg1: Internal.LevelReader, arg2: BlockPos, arg3: Internal.LivingEntity): boolean;
        canSustainPlant(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos, arg3: Internal.Direction, arg4: Internal.IPlantable): boolean;
        onCaughtFire(arg0: Internal.BlockState, arg1: Internal.Level, arg2: BlockPos, arg3: Internal.Direction, arg4: Internal.LivingEntity): void;
        getEnchantPowerBonus(arg0: Internal.BlockState, arg1: Internal.LevelReader, arg2: BlockPos): number;
        setBedOccupied(arg0: Internal.BlockState, arg1: Internal.Level, arg2: BlockPos, arg3: Internal.LivingEntity, arg4: boolean): void;
        isFireSource(arg0: Internal.BlockState, arg1: Internal.LevelReader, arg2: BlockPos, arg3: Internal.Direction): boolean;
        canDropFromExplosion(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos, arg3: Internal.Explosion): boolean;
        getRespawnPosition(arg0: Internal.BlockState, arg1: Internal.EntityType<object>, arg2: Internal.LevelReader, arg3: BlockPos, arg4: number, arg5: Internal.LivingEntity): Internal.Optional<Vec3>;
        isStickyBlock(arg0: Internal.BlockState): boolean;
        isFertile(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos): boolean;
        getAiPathNodeType(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos, arg3: Internal.Mob): Internal.BlockPathTypes;
        isSlimeBlock(arg0: Internal.BlockState): boolean;
        canConnectRedstone(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos, arg3: Internal.Direction): boolean;
        getFireSpreadSpeed(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos, arg3: Internal.Direction): number;
        getFlammability(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos, arg3: Internal.Direction): number;
        getToolModifiedState(arg0: Internal.BlockState, arg1: Internal.Level, arg2: BlockPos, arg3: Internal.Player, arg4: Internal.ItemStack, arg5: Internal.ToolAction): Internal.BlockState;
        getBeaconColorMultiplier(arg0: Internal.BlockState, arg1: Internal.LevelReader, arg2: BlockPos, arg3: BlockPos): number[];
        get tags(): Internal.Set<ResourceLocation>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class RuntimeException extends Internal.Exception {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        printStackTrace(): void;
        printStackTrace(arg0: Internal.PrintStream): void;
        printStackTrace(arg0: Internal.PrintWriter): void;
        notifyAll(): void;
        initCause(arg0: Internal.Throwable): Internal.Throwable;
        notify(): void;
        addSuppressed(arg0: Internal.Throwable): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        fillInStackTrace(): Internal.Throwable;
        get localizedMessage(): string;
        get message(): string;
        get cause(): Internal.Throwable;
        set stackTrace(arg0: Internal.StackTraceElement[]);
        get stackTrace(): Internal.StackTraceElement[];
        get suppressed(): Internal.Throwable[];
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ParticleEngine implements Internal.PreparableReloadListener, Internal.ParticleManagerAccess, Internal.ParticleEngineAccessor {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        create$getProviders(): Map<any, any>;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        addBlockHitEffects(arg0: BlockPos, arg1: Internal.BlockHitResult): void;
        toString(): string;
        invokeMakeParticle(arg0: Internal.ParticleOptions, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): Internal.Particle;
        render(arg0: Internal.PoseStack, arg1: Internal.MultiBufferSource$BufferSource, arg2: Internal.LightTexture, arg3: Internal.Camera, arg4: number, arg5: Internal.Frustum): void;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class URLStreamHandler {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IntIterator implements Internal.PrimitiveIterator$OfInt {
        next(): object;
        next(): number;
        hasNext(): boolean;
        skip(arg0: number): number;
        nextInt(): number;
        forEachRemaining(arg0: (arg0: number) => void): void;
        forEachRemaining(arg0: it.unimi.dsi.fastutil.ints.IntConsumer): void;
        forEachRemaining(arg0: object): void;
        forEachRemaining(arg0: Internal.IntConsumer): void;
        remove(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ChronoZonedDateTime <D> implements Internal.Temporal, Internal.Comparable<Internal.ChronoZonedDateTime<object>> {
        minus(arg0: number, arg1: Internal.TemporalUnit): Internal.Temporal;
        minus(arg0: number, arg1: Internal.TemporalUnit): Internal.ChronoZonedDateTime<D>;
        minus(arg0: Internal.TemporalAmount): Internal.Temporal;
        minus(arg0: Internal.TemporalAmount): Internal.ChronoZonedDateTime<D>;
        isEqual(arg0: Internal.ChronoZonedDateTime<object>): boolean;
        toLocalTime(): Internal.LocalTime;
        range(arg0: Internal.TemporalField): Internal.ValueRange;
        compareTo(arg0: object): number;
        compareTo(arg0: Internal.ChronoZonedDateTime<object>): number;
        withLaterOffsetAtOverlap(): Internal.ChronoZonedDateTime<D>;
        hashCode(): number;
        get(arg0: Internal.TemporalField): number;
        withZoneSameLocal(arg0: Internal.ZoneId): Internal.ChronoZonedDateTime<D>;
        withEarlierOffsetAtOverlap(): Internal.ChronoZonedDateTime<D>;
        withZoneSameInstant(arg0: Internal.ZoneId): Internal.ChronoZonedDateTime<D>;
        query<R>(arg0: Internal.TemporalQuery<R>): R;
        format(arg0: Internal.DateTimeFormatter): string;
        isSupported(arg0: Internal.TemporalUnit): boolean;
        isSupported(arg0: Internal.TemporalField): boolean;
        toInstant(): Internal.Instant;
        isBefore(arg0: Internal.ChronoZonedDateTime<object>): boolean;
        plus(arg0: Internal.TemporalAmount): Internal.Temporal;
        plus(arg0: Internal.TemporalAmount): Internal.ChronoZonedDateTime<D>;
        plus(arg0: number, arg1: Internal.TemporalUnit): Internal.Temporal;
        plus(arg0: number, arg1: Internal.TemporalUnit): Internal.ChronoZonedDateTime<D>;
        getLong(arg0: Internal.TemporalField): number;
        with(arg0: Internal.TemporalField, arg1: number): Internal.ChronoZonedDateTime<D>;
        with(arg0: Internal.TemporalField, arg1: number): Internal.Temporal;
        with(arg0: Internal.TemporalAdjuster): Internal.Temporal;
        with(arg0: Internal.TemporalAdjuster): Internal.ChronoZonedDateTime<D>;
        toLocalDate(): D;
        toEpochSecond(): number;
        toLocalDateTime(): Internal.ChronoLocalDateTime<D>;
        equals(arg0: object): boolean;
        until(arg0: Internal.Temporal, arg1: Internal.TemporalUnit): number;
        toString(): string;
        isAfter(arg0: Internal.ChronoZonedDateTime<object>): boolean;
        get offset(): Internal.ZoneOffset;
        get chronology(): Internal.Chronology;
        get zone(): Internal.ZoneId;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class Record {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface WatchEvent$Modifier {
        name(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface App <F, A> {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class FontSet implements Internal.AutoCloseable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        close(): void;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ArmedModel {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Provider$Service {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        getAttribute(arg0: string): string;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        newInstance(arg0: object): object;
        toString(): string;
        notify(): void;
        supportsParameter(arg0: object): boolean;
        get type(): string;
        get algorithm(): string;
        get provider(): Internal.Provider;
        get className(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ICustomPacket <T> {
        set name(arg0: ResourceLocation);
        get this(): T;
        get name(): ResourceLocation;
        get direction(): Internal.NetworkDirection;
        get index(): number;
        set data(arg0: Internal.FriendlyByteBuf);
        set index(arg0: number);
        get internalData(): Internal.FriendlyByteBuf;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Flushable {
        flush(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class BaseFunction extends Internal.IdScriptableObject implements dev.latvian.mods.rhino.Function {
        isSealed(): boolean;
        static redefineProperty(obj: Internal.Scriptable, name: string, isConst: boolean): void;
        putConst(name: string, start: Internal.Scriptable, value: object): void;
        static getArrayPrototype(scope: Internal.Scriptable): Internal.Scriptable;
        construct(cx: Internal.Context, scope: Internal.Scriptable, args: object[]): Internal.Scriptable;
        put(key: Internal.Symbol, start: Internal.Scriptable, value: object): void;
        put(name: string, start: Internal.Scriptable, value: object): void;
        put(index: number, start: Internal.Scriptable, value: object): void;
        defineOwnProperties(cx: Internal.Context, props: Internal.ScriptableObject): void;
        static defineProperty(destination: Internal.Scriptable, propertyName: string, value: object, attributes: number): void;
        defineProperty(key: Internal.Symbol, value: object, attributes: number): void;
        defineProperty(propertyName: string, value: object, attributes: number): void;
        defineProperty(propertyName: string, delegateTo: object, getter: Internal.Method, setter: Internal.Method, attributes: number): void;
        hasPrototypeMap(): boolean;
        setGetterOrSetter(name: string, index: number, getterOrSetter: Internal.Callable, isSetter: boolean): void;
        avoidObjectDetection(): boolean;
        has(key: Internal.Symbol, start: Internal.Scriptable): boolean;
        has(name: string, start: Internal.Scriptable): boolean;
        has(index: number, start: Internal.Scriptable): boolean;
        getAttributes(name: string): number;
        getAttributes(key: Internal.Symbol): number;
        getAttributes(index: number): number;
        hasInstance(instance: Internal.Scriptable): boolean;
        getAssociatedValue(key: object): object;
        execIdCall(f: Internal.IdFunctionObject, cx: Internal.Context, scope: Internal.Scriptable, thisObj: Internal.Scriptable, args: object[]): object;
        static getPropertyIds(obj: Internal.Scriptable): object[];
        static hasProperty(obj: Internal.Scriptable, key: Internal.Symbol): boolean;
        static hasProperty(obj: Internal.Scriptable, index: number): boolean;
        static hasProperty(obj: Internal.Scriptable, name: string): boolean;
        size(): number;
        initPrototypeMethod(tag: object, id: number, key: Internal.Symbol, functionName: string, arity: number): Internal.IdFunctionObject;
        initPrototypeMethod(tag: object, id: number, propertyName: string, functionName: string, arity: number): Internal.IdFunctionObject;
        initPrototypeMethod(tag: object, id: number, name: string, arity: number): Internal.IdFunctionObject;
        defineOwnProperty(cx: Internal.Context, key: object, desc: Internal.ScriptableObject): void;
        initPrototypeValue(id: number, key: Internal.Symbol, value: object, attributes: number): void;
        initPrototypeValue(id: number, name: string, value: object, attributes: number): void;
        static getFunctionPrototype(scope: Internal.Scriptable): Internal.Scriptable;
        preventExtensions(): void;
        static callMethod(obj: Internal.Scriptable, methodName: string, args: object[]): object;
        static callMethod(cx: Internal.Context, obj: Internal.Scriptable, methodName: string, args: object[]): object;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        static getTopScopeValue(scope: Internal.Scriptable, key: object): object;
        initPrototypeConstructor(f: Internal.IdFunctionObject): void;
        notifyAll(): void;
        sealObject(): void;
        setAttributes(name: string, attributes: number): void;
        setAttributes(key: Internal.Symbol, attributes: number): void;
        setAttributes(index: number, attributes: number): void;
        static putProperty(obj: Internal.Scriptable, index: number, value: object): void;
        static putProperty(obj: Internal.Scriptable, name: string, value: object): void;
        static putProperty(obj: Internal.Scriptable, key: Internal.Symbol, value: object): void;
        delete(key: Internal.Symbol): void;
        delete(name: string): void;
        delete(index: number): void;
        notify(): void;
        associateValue(key: object, value: object): object;
        static deleteProperty(obj: Internal.Scriptable, name: string): boolean;
        static deleteProperty(obj: Internal.Scriptable, index: number): boolean;
        static getObjectPrototype(scope: Internal.Scriptable): Internal.Scriptable;
        isExtensible(): boolean;
        hashCode(): number;
        isConst(name: string): boolean;
        get(name: string, start: Internal.Scriptable): object;
        get(key: Internal.Symbol, start: Internal.Scriptable): object;
        get(index: number, start: Internal.Scriptable): object;
        get(key: object): object;
        static putConstProperty(obj: Internal.Scriptable, name: string, value: object): void;
        getGetterOrSetter(name: string, index: number, isSetter: boolean): object;
        static getTopLevelScope(obj: Internal.Scriptable): Internal.Scriptable;
        static getProperty(obj: Internal.Scriptable, key: Internal.Symbol): object;
        static getProperty(obj: Internal.Scriptable, index: number): object;
        static getProperty(obj: Internal.Scriptable, name: string): object;
        activatePrototypeMap(maxPrototypeId: number): void;
        isEmpty(): boolean;
        static getClassPrototype(scope: Internal.Scriptable, className: string): Internal.Scriptable;
        createObject(cx: Internal.Context, scope: Internal.Scriptable): Internal.Scriptable;
        exportAsJSClass(maxPrototypeId: number, scope: Internal.Scriptable, sealed: boolean): Internal.IdFunctionObject;
        call(cx: Internal.Context, scope: Internal.Scriptable, thisObj: Internal.Scriptable, args: object[]): object;
        defineConst(name: string, start: Internal.Scriptable): void;
        equals(arg0: object): boolean;
        static defineConstProperty(destination: Internal.Scriptable, propertyName: string): void;
        toString(): string;
        static getGeneratorFunctionPrototype(scope: Internal.Scriptable): Internal.Scriptable;
        static readonly DONTENUM : 2;
        static readonly CONST : 13;
        static readonly NOT_FOUND : object;
        static readonly UNINITIALIZED_CONST : 8;
        static readonly EMPTY : 0;
        static readonly READONLY : 1;
        static readonly PERMANENT : 4;
        set parentScope(m: Internal.Scriptable);
        get ids(): object[];
        get allIds(): object[];
        get arity(): number;
        get functionName(): string;
        get externalArrayLength(): object;
        set immunePrototypeProperty(value: object);
        get externalArrayData(): Internal.ExternalArrayData;
        get className(): string;
        get parentScope(): Internal.Scriptable;
        set externalArrayData(array: Internal.ExternalArrayData);
        get typeOf(): string;
        get prototype(): Internal.Scriptable;
        set prototype(m: Internal.Scriptable);
        get length(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface BufferBuilderExtension {
        flywheel$getVertices(): number;
        flywheel$injectForRender(arg0: Internal.ByteBuffer, arg1: Internal.VertexFormat, arg2: number): void;
        flywheel$freeBuffer(): void;
        flywheel$appendBufferUnsafe(arg0: Internal.ByteBuffer): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class BlockHitResult extends Internal.HitResult {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface CompletionHandler <V, A> {
        failed(arg0: Internal.Throwable, arg1: A): void;
        completed(arg0: V, arg1: A): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Matrix3f implements Internal.MatrixWrite, Internal.Matrix3fExtended {
        multiplyBackward(arg0: Internal.Matrix3f): void;
        rotate(quaternion: Internal.Quaternion): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        flywheel$write(arg0: Internal.VecBuffer): void;
        notify(): void;
        hashCode(): number;
        flywheel$writeUnsafe(arg0: number): void;
        equals(arg0: object): boolean;
        transformVecZ(x: number, y: number, z: number): number;
        transformVecZ(dir: Internal.Vector3f): number;
        transformVecY(x: number, y: number, z: number): number;
        transformVecY(dir: Internal.Vector3f): number;
        toString(): string;
        transformVecX(x: number, y: number, z: number): number;
        transformVecX(dir: Internal.Vector3f): number;
        computeNormal(dir: Internal.Direction): number;
        get a20(): number;
        get a21(): number;
        get a10(): number;
        get a22(): number;
        get a11(): number;
        get a00(): number;
        get a12(): number;
        get a01(): number;
        get a02(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class ContentHandler {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        getContent(arg0: Internal.URLConnection): object;
        getContent(arg0: Internal.URLConnection, arg1: Internal.Class[]): object;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class DynamicConstantDesc <T> implements Internal.ConstantDesc {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        static ofCanonical<T>(arg0: Internal.DirectMethodHandleDesc, arg1: string, arg2: Internal.ClassDesc, arg3: Internal.ConstantDesc[]): Internal.ConstantDesc;
        bootstrapMethod(): Internal.DirectMethodHandleDesc;
        constantName(): string;
        notifyAll(): void;
        bootstrapArgsList(): Internal.List<Internal.ConstantDesc>;
        resolveConstantDesc(arg0: Internal.MethodHandles$Lookup): T;
        notify(): void;
        constantType(): Internal.ClassDesc;
        hashCode(): number;
        bootstrapArgs(): Internal.ConstantDesc[];
        static of<T>(arg0: Internal.DirectMethodHandleDesc, arg1: Internal.ConstantDesc[]): Internal.DynamicConstantDesc<T>;
        static of<T>(arg0: Internal.DirectMethodHandleDesc): Internal.DynamicConstantDesc<T>;
        equals(arg0: object): boolean;
        static ofNamed<T>(arg0: Internal.DirectMethodHandleDesc, arg1: string, arg2: Internal.ClassDesc, arg3: Internal.ConstantDesc[]): Internal.DynamicConstantDesc<T>;
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface EndimationInterpolator$VecConsumer {
        accept(arg0: number, arg1: number, arg2: number): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface BinaryOperator <T> implements Internal.BiFunction<T, T, T> {
        apply(arg0: T, arg1: U): R;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface LevelSimulatedRW implements Internal.LevelSimulatedReader, Internal.LevelWriter {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ModelResourceLocation extends ResourceLocation {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        compareNamespaced(arg0: ResourceLocation): number;
        equals(arg0: object): boolean;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: ResourceLocation): number;
        notify(): void;
        specialEquals(o: object, shallow: boolean): boolean;
        get namespace(): string;
        get path(): string;
        set path(arg0: string);
        set namespace(arg0: string);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Byte2IntFunction implements it.unimi.dsi.fastutil.Function<number, number>, Internal.IntUnaryOperator {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        andThenShort(arg0: Internal.Int2ShortFunction): Internal.Byte2ShortFunction;
        composeByte(arg0: Internal.Byte2ByteFunction): Internal.Byte2IntFunction;
        andThenInt(arg0: Internal.Int2IntFunction): Internal.Byte2IntFunction;
        composeReference<T>(arg0: Internal.Reference2ByteFunction<T>): Internal.Reference2IntFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: number) => T;
        andThen(arg0: Internal.IntUnaryOperator): Internal.IntUnaryOperator;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: number): number;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: object): object;
        remove(arg0: object): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Int2DoubleFunction): Internal.Byte2DoubleFunction;
        andThenObject<T>(arg0: Internal.Int2ObjectFunction<T>): Internal.Byte2ObjectFunction<T>;
        get(arg0: object): number;
        get(arg0: object): object;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Int2LongFunction): Internal.Byte2LongFunction;
        composeLong(arg0: Internal.Long2ByteFunction): Internal.Long2IntFunction;
        andThenByte(arg0: Internal.Int2ByteFunction): Internal.Byte2ByteFunction;
        andThenFloat(arg0: Internal.Int2FloatFunction): Internal.Byte2FloatFunction;
        applyAsInt(arg0: number): number;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2ByteFunction): Internal.Int2IntFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2ByteFunction): Internal.Float2IntFunction;
        andThenChar(arg0: Internal.Int2CharFunction): Internal.Byte2CharFunction;
        composeObject<T>(arg0: Internal.Object2ByteFunction<T>): Internal.Object2IntFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => number;
        compose(arg0: Internal.IntUnaryOperator): Internal.IntUnaryOperator;
        composeShort(arg0: Internal.Short2ByteFunction): Internal.Short2IntFunction;
        andThenReference<T>(arg0: Internal.Int2ReferenceFunction<T>): Internal.Byte2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2ByteFunction): Internal.Char2IntFunction;
        composeDouble(arg0: Internal.Double2ByteFunction): Internal.Double2IntFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ModuleDescriptor$Provides implements Internal.Comparable<Internal.ModuleDescriptor$Provides> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        service(): string;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: Internal.ModuleDescriptor$Provides): number;
        notify(): void;
        providers(): Internal.List<string>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class BufferBuilder extends Internal.DefaultedVertexConsumer implements Internal.BufferVertexConsumer, Internal.BufferBuilderExtension, Internal.StateManager$IResettable, Internal.VertexDrain, Internal.VertexBufferView {
        ensureBufferCapacity(bytes: number): boolean;
        flywheel$getVertices(): number;
        applyBakedLighting(arg0: number, arg1: Internal.ByteBuffer): number;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        flywheel$injectForRender(arg0: Internal.ByteBuffer, arg1: Internal.VertexFormat, arg2: number): void;
        notifyAll(): void;
        resetState(): void;
        notify(): void;
        redirect$bka000$debugGetNextBuffer(buffer: Internal.ByteBuffer, newLimit: number): Internal.ByteBuffer;
        handler$zof000$onInit(bufferSizeIn: number, ci: Internal.CallbackInfo): void;
        createSink(factory: me.jellysquid.mods.sodium.client.model.vertex.type.VertexType<any>): Internal.VertexSink;
        flush(vertexCount: number, format: Internal.BufferVertexFormat): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        flywheel$freeBuffer(): void;
        toString(): string;
        putBulkData(arg0: Internal.ByteBuffer): void;
        putBulkData(arg0: Internal.PoseStack$Pose, arg1: Internal.BakedQuad, arg2: number[], arg3: number, arg4: number, arg5: number, arg6: number, arg7: number[], arg8: number, arg9: boolean): void;
        putBulkData(arg0: Internal.PoseStack$Pose, arg1: Internal.BakedQuad, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: boolean): void;
        putBulkData(arg0: Internal.PoseStack$Pose, arg1: Internal.BakedQuad, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
        putBulkData(arg0: Internal.PoseStack$Pose, arg1: Internal.BakedQuad, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: boolean): void;
        applyBakedNormals(arg0: Internal.Vector3f, arg1: Internal.ByteBuffer, arg2: Internal.Matrix3f): void;
        flywheel$appendBufferUnsafe(arg0: Internal.ByteBuffer): void;
        register(): void;
        get writerPosition(): number;
        get vertexFormat(): Internal.BufferVertexFormat;
        get vertexFormat(): Internal.VertexFormat;
        get directBuffer(): Internal.ByteBuffer;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class LootBuilder implements Internal.FunctionContainer, Internal.ConditionContainer {
        enchantWithLevels(levels: Internal.NumberProvider, treasure: boolean): Internal.FunctionContainer;
        damage(damage: Internal.NumberProvider): Internal.FunctionContainer;
        nbt(tag: Internal.CompoundTag): Internal.FunctionContainer;
        clearFunctions(): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        survivesExplosion(): Internal.ConditionContainer;
        notifyAll(): void;
        addConditionalFunction(func: (arg0: Internal.ConditionalFunction) => void): Internal.FunctionContainer;
        addCondition(o: Internal.JsonObject): Internal.LootBuilder;
        addCondition(arg0: Internal.JsonObject): Internal.ConditionContainer;
        notify(): void;
        lootTable(table: ResourceLocation, seed: number): Internal.FunctionContainer;
        addPool(p: (arg0: Internal.LootBuilderPool) => void): void;
        hashCode(): number;
        killedByPlayer(): Internal.ConditionContainer;
        randomChance(chance: number): Internal.ConditionContainer;
        addFunction(arg0: Internal.JsonObject): Internal.FunctionContainer;
        addFunction(o: Internal.JsonObject): Internal.LootBuilder;
        count(count: Internal.NumberProvider): Internal.FunctionContainer;
        lootingEnchant(count: Internal.NumberProvider, limit: number): Internal.FunctionContainer;
        toJson(): Internal.JsonObject;
        entityScores(entity: Internal.LootContext$EntityTarget, scores: Map<string, object>): Internal.ConditionContainer;
        copyName(source: Internal.CopyNameFunction$NameSource): Internal.FunctionContainer;
        clearPools(): void;
        equals(arg0: object): boolean;
        name(name: Internal.Text, entity: Internal.LootContext$EntityTarget): Internal.FunctionContainer;
        name(name: Internal.Text): Internal.FunctionContainer;
        randomChanceWithLooting(chance: number, multiplier: number): Internal.ConditionContainer;
        furnaceSmelt(): Internal.FunctionContainer;
        toString(): string;
        enchantRandomly(enchantments: ResourceLocation[]): Internal.FunctionContainer;
        entityProperties(entity: Internal.LootContext$EntityTarget, properties: Internal.JsonObject): Internal.ConditionContainer;
        clearConditions(): void;
        functions : Internal.JsonArray;
        pools : Internal.JsonArray;
        type : string;
        conditions : Internal.JsonArray;
        customId : ResourceLocation;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class RenderType extends Internal.RenderStateShard implements Internal.RenderTypeExtension {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        flywheel$getDrawBuffer(): Internal.DrawBuffer;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        get name(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ToLongFunction <T> {
        applyAsLong(arg0: T): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ServerLevelAccessor implements Internal.LevelAccessor {
        isAreaLoaded(arg0: BlockPos, arg1: number): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class LevelEventJS extends Internal.EventJS {
        cancel(): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isCancelled(): boolean;
        post(id: string, sub: string): boolean;
        post(id: string): boolean;
        post(t: Internal.ScriptType, id: string, sub: string): boolean;
        post(t: Internal.ScriptType, id: string): boolean;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        canCancel(): boolean;
        get server(): Internal.ServerJS;
        get level(): Internal.LevelJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class VariantBlockStateGenerator {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        toJson(): Internal.JsonObject;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        variant(key: string, model: string): void;
        variant(key: string, consumer: (arg0: Internal.VariantBlockStateGenerator$Variant) => void): void;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Stack <K> {
        pop(): K;
        top(): K;
        isEmpty(): boolean;
        push(arg0: K): void;
        peek(arg0: number): K;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface EntityTrackerSection {
        updateMovementTimestamps(arg0: number, arg1: number): void;
        removeListener(arg0: Internal.EntitySectionStorage<object>, arg1: Internal.NearbyEntityListener): void;
        removeListener(arg0: Internal.EntitySectionStorage<object>, arg1: Internal.SectionedEntityMovementTracker<object, object>): void;
        addListener(arg0: Internal.NearbyEntityListener): void;
        addListener(arg0: Internal.SectionedEntityMovementTracker<object, object>): void;
        get movementTimestampArray(): number[];
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IntToDoubleFunction {
        applyAsDouble(arg0: number): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ByteChannel implements Internal.ReadableByteChannel, Internal.WritableByteChannel {
        isOpen(): boolean;
        read(arg0: Internal.ByteBuffer): number;
        write(arg0: Internal.ByteBuffer): number;
        close(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Object2ObjectMap <K, V> implements Internal.Object2ObjectFunction<K, V>, Map<K, V> {
        computeObjectIfAbsentPartial(arg0: K, arg1: (arg0: K) => V): V;
        object2ObjectEntrySet(): Internal.ObjectSet<Internal.Object2ObjectMap$Entry<K, V>>;
        getOrDefault(arg0: object, arg1: V): V;
        apply(arg0: K): V;
        entrySet(): Internal.ObjectSet<Internal.Map$Entry<K, V>>;
        entrySet(): Internal.Set<any>;
        containsKey(arg0: object): boolean;
        forEach(arg0: (arg0: K, arg1: V) => void): void;
        computeIfAbsent(arg0: K, arg1: (arg0: K) => V): V;
        values(): Internal.ObjectCollection<V>;
        values(): Internal.Collection<any>;
        isEmpty(): boolean;
        replace(arg0: K, arg1: V, arg2: V): boolean;
        replace(arg0: K, arg1: V): V;
        clear(): void;
        containsValue(arg0: object): boolean;
        put(arg0: K, arg1: V): V;
        remove(arg0: object): V;
        remove(arg0: object, arg1: object): boolean;
        compute(arg0: K, arg1: (arg0: K, arg1: V) => V): V;
        defaultReturnValue(arg0: V): void;
        defaultReturnValue(): V;
        computeIfPresent(arg0: K, arg1: (arg0: K, arg1: V) => V): V;
        size(): number;
        hashCode(): number;
        equals(arg0: object): boolean;
        get(arg0: object): V;
        get(arg0: object): V;
        merge(arg0: K, arg1: V, arg2: (arg0: V, arg1: V) => V): V;
        keySet(): Internal.Set<any>;
        keySet(): Internal.ObjectSet<K>;
        putIfAbsent(arg0: K, arg1: V): V;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Throwable implements Internal.Serializable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        printStackTrace(): void;
        printStackTrace(arg0: Internal.PrintStream): void;
        printStackTrace(arg0: Internal.PrintWriter): void;
        notifyAll(): void;
        initCause(arg0: Internal.Throwable): Internal.Throwable;
        notify(): void;
        addSuppressed(arg0: Internal.Throwable): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        fillInStackTrace(): Internal.Throwable;
        get localizedMessage(): string;
        get message(): string;
        get cause(): Internal.Throwable;
        set stackTrace(arg0: Internal.StackTraceElement[]);
        get stackTrace(): Internal.StackTraceElement[];
        get suppressed(): Internal.Throwable[];
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class Format implements Internal.Serializable, Internal.Cloneable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        formatToCharacterIterator(arg0: object): Internal.AttributedCharacterIterator;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        format(arg0: object, arg1: Internal.StringBuffer, arg2: Internal.FieldPosition): Internal.StringBuffer;
        format(arg0: object): string;
        clone(): object;
        toString(): string;
        notify(): void;
        parseObject(arg0: string): object;
        parseObject(arg0: string, arg1: Internal.ParsePosition): object;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface MultiTask <T> implements Internal.Task<T> {
        stepped(arg0: Internal.StatusIdentifier<Internal.SteppedTask>): Internal.SteppedTask;
        parent(arg0: Internal.StatusIdentifier<Internal.ParentTask>): Internal.ParentTask;
        simple(arg0: Internal.StatusIdentifier<Internal.SimpleTask>): Internal.SimpleTask;
        isActive(): boolean;
        isCompleted(): boolean;
        get tasks(): Internal.Collection<Internal.Task<object>>;
        get nestedType(): Internal.NestedType;
        get progress(): number;
        get description(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Annotation {
        hashCode(): number;
        equals(arg0: object): boolean;
        annotationType(): Internal.Class<Internal.Annotation>;
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class JsonToken extends Internal.Enum<Internal.JsonToken> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(arg0: string): Internal.JsonToken;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.JsonToken[];
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly NUMBER : Internal.JsonToken;
        static readonly NULL : Internal.JsonToken;
        static readonly END_DOCUMENT : Internal.JsonToken;
        static readonly BEGIN_OBJECT : Internal.JsonToken;
        static readonly END_ARRAY : Internal.JsonToken;
        static readonly STRING : Internal.JsonToken;
        static readonly END_OBJECT : Internal.JsonToken;
        static readonly BEGIN_ARRAY : Internal.JsonToken;
        static readonly BOOLEAN : Internal.JsonToken;
        static readonly NAME : Internal.JsonToken;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class RecordComponent implements Internal.AnnotatedElement {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isAnnotationPresent(arg0: Internal.Class<Internal.Annotation>): boolean;
        notifyAll(): void;
        notify(): void;
        getAnnotationsByType<T>(arg0: Internal.Class<T>): T[];
        getDeclaredAnnotationsByType<T>(arg0: Internal.Class<T>): T[];
        getAnnotation<T>(arg0: Internal.Class<T>): T;
        hashCode(): number;
        equals(arg0: object): boolean;
        getDeclaredAnnotation<T>(arg0: Internal.Class<T>): T;
        toString(): string;
        get genericSignature(): string;
        get name(): string;
        get annotations(): Internal.Annotation[];
        get declaredAnnotations(): Internal.Annotation[];
        get declaringRecord(): Internal.Class<object>;
        get type(): Internal.Class<object>;
        get accessor(): Internal.Method;
        get genericType(): Internal.Type;
        get annotatedType(): Internal.AnnotatedType;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class MixerRecipeJS extends Internal.IERecipeJS {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        ingredientAction(filter: Internal.IngredientActionFilter, action: Internal.IngredientAction): Internal.RecipeJS;
        notifyAll(): void;
        convertReplacedOutput(index: number, oldStack: Internal.ItemStackJS, newStack: Internal.ItemStackJS): Internal.ItemStackJS;
        convertReplacedInput(index: number, oldIngredient: Internal.IngredientJS, newIngredient: Internal.IngredientJS): Internal.IngredientJS;
        save(): void;
        damageIngredient(filter: Internal.IngredientActionFilter, damage: number): Internal.RecipeJS;
        damageIngredient(filter: Internal.IngredientActionFilter): Internal.RecipeJS;
        getId(): string;
        dontAdd(): void;
        notify(): void;
        serializeJson(): void;
        parseIngredientItemIE(json: Internal.JsonElement): Internal.IngredientStackJS;
        replaceOutput(i: Internal.IngredientJS, with_: Internal.ItemStackJS, exact: boolean): boolean;
        hashCode(): number;
        merge(data: object): Internal.RecipeJS;
        create(args: Internal.ListJS): void;
        deserializeJson(): void;
        id(_id: ResourceLocation): Internal.RecipeJS;
        parseIngredientItem(o: object, key: string): Internal.IngredientJS;
        parseIngredientItem(o: object): Internal.IngredientJS;
        group(g: string): Internal.RecipeJS;
        energy(e: number): Internal.IERecipeJS;
        deserialize(): void;
        serializeNBTAsJson(): boolean;
        getOutputIndex(ingredient: Internal.IngredientJS, exact: boolean): number;
        getInputIndex(ingredient: Internal.IngredientJS, exact: boolean): number;
        setGroup(g: string): void;
        serialize(): void;
        resultFromRecipeJson(json: Internal.JsonObject): Internal.ItemStackJS;
        stage(s: string): Internal.RecipeJS;
        serializeIngredientStack(in_: Internal.IngredientStackJS): Internal.JsonElement;
        replaceInput(i: Internal.IngredientJS, with_: Internal.IngredientJS, exact: boolean): boolean;
        getType(): string;
        equals(arg0: object): boolean;
        getGroup(): string;
        serializeItemStack(stack: Internal.ItemStackJS): Internal.JsonElement;
        hasOutput(ingredient: Internal.IngredientJS, exact: boolean): boolean;
        toString(): string;
        keepIngredient(filter: Internal.IngredientActionFilter): Internal.RecipeJS;
        time(t: number): Internal.IERecipeJS;
        hasInput(ingredient: Internal.IngredientJS, exact: boolean): boolean;
        customIngredientAction(filter: Internal.IngredientActionFilter, id: string): Internal.RecipeJS;
        parseResultItem(o: object): Internal.ItemStackJS;
        replaceIngredient(filter: Internal.IngredientActionFilter, item: Internal.ItemStackJS): Internal.RecipeJS;
        static currentRecipe : Internal.RecipeJS;
        readonly inputItems : Internal.List<Internal.IngredientJS>;
        static itemErrors : false;
        type : Internal.RecipeTypeJS;
        originalJson : Internal.JsonObject;
        serializeOutputs : boolean;
        readonly outputFluids : Internal.List<Internal.FluidStack>;
        originalRecipe : Internal.Recipe<object>;
        readonly inputFluids : Internal.List<Internal.FluidTagInput>;
        json : Internal.JsonObject;
        readonly outputItems : Internal.List<Internal.ItemStackJS>;
        serializeInputs : boolean;
        get mod(): string;
        get uniqueId(): string;
        get fromToString(): string;
        get path(): string;
        get orCreateId(): ResourceLocation;
        get originalRecipeResult(): Internal.ItemStackJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Hashtable <K, V> extends Internal.Dictionary<K, V> implements Map<K, V>, Internal.Cloneable, Internal.Serializable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        getOrDefault(arg0: object, arg1: V): V;
        keys(): Internal.Enumeration<K>;
        notifyAll(): void;
        computeIfAbsent(arg0: K, arg1: (arg0: K) => V): V;
        values(): Internal.Collection<V>;
        replace(arg0: K, arg1: V): V;
        replace(arg0: K, arg1: V, arg2: V): boolean;
        replaceAll(arg0: (arg0: K, arg1: V) => V): void;
        notify(): void;
        containsValue(arg0: object): boolean;
        put(arg0: K, arg1: V): V;
        remove(arg0: object): V;
        remove(arg0: object, arg1: object): boolean;
        compute(arg0: K, arg1: (arg0: K, arg1: V) => V): V;
        hashCode(): number;
        putAll(arg0: Map<K, V>): void;
        merge(arg0: K, arg1: V, arg2: (arg0: V, arg1: V) => V): V;
        get(arg0: object): V;
        keySet(): Internal.Set<K>;
        entrySet(): Internal.Set<Internal.Map$Entry<K, V>>;
        containsKey(arg0: object): boolean;
        forEach(arg0: (arg0: K, arg1: V) => void): void;
        isEmpty(): boolean;
        clear(): void;
        contains(arg0: object): boolean;
        computeIfPresent(arg0: K, arg1: (arg0: K, arg1: V) => V): V;
        size(): number;
        elements(): Internal.Enumeration<V>;
        equals(arg0: object): boolean;
        clone(): object;
        toString(): string;
        putIfAbsent(arg0: K, arg1: V): V;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class LivingEntityEventJS extends Internal.EntityEventJS {
        cancel(): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isCancelled(): boolean;
        post(id: string, sub: string): boolean;
        post(id: string): boolean;
        post(t: Internal.ScriptType, id: string, sub: string): boolean;
        post(t: Internal.ScriptType, id: string): boolean;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        canCancel(): boolean;
        get server(): Internal.ServerJS;
        get level(): Internal.LevelJS;
        get entity(): Internal.EntityJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface EventListener {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class JsonWriter implements Internal.Closeable, Internal.Flushable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        jsonValue(arg0: string): Internal.JsonWriter;
        isLenient(): boolean;
        notifyAll(): void;
        endArray(): Internal.JsonWriter;
        nullValue(): Internal.JsonWriter;
        notify(): void;
        endObject(): Internal.JsonWriter;
        beginArray(): Internal.JsonWriter;
        flush(): void;
        beginObject(): Internal.JsonWriter;
        hashCode(): number;
        equals(arg0: object): boolean;
        name(arg0: string): Internal.JsonWriter;
        toString(): string;
        isHtmlSafe(): boolean;
        close(): void;
        value(arg0: boolean): Internal.JsonWriter;
        value(arg0: number): Internal.JsonWriter;
        value(arg0: number): Internal.JsonWriter;
        value(arg0: boolean): Internal.JsonWriter;
        value(arg0: string): Internal.JsonWriter;
        value(arg0: Internal.Number): Internal.JsonWriter;
        set serializeNulls(arg0: boolean);
        set htmlSafe(arg0: boolean);
        set lenient(arg0: boolean);
        get serializeNulls(): boolean;
        set indent(arg0: string);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class VariantBlockStateGenerator$Variant {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        toJson(): Internal.JsonElement;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        model(s: string): Internal.VariantBlockStateGenerator$Model;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class NativeContinuation extends Internal.IdScriptableObject implements dev.latvian.mods.rhino.Function {
        isSealed(): boolean;
        static redefineProperty(obj: Internal.Scriptable, name: string, isConst: boolean): void;
        putConst(name: string, start: Internal.Scriptable, value: object): void;
        static getArrayPrototype(scope: Internal.Scriptable): Internal.Scriptable;
        construct(cx: Internal.Context, scope: Internal.Scriptable, args: object[]): Internal.Scriptable;
        put(key: Internal.Symbol, start: Internal.Scriptable, value: object): void;
        put(name: string, start: Internal.Scriptable, value: object): void;
        put(index: number, start: Internal.Scriptable, value: object): void;
        defineOwnProperties(cx: Internal.Context, props: Internal.ScriptableObject): void;
        static defineProperty(destination: Internal.Scriptable, propertyName: string, value: object, attributes: number): void;
        defineProperty(key: Internal.Symbol, value: object, attributes: number): void;
        defineProperty(propertyName: string, value: object, attributes: number): void;
        defineProperty(propertyName: string, delegateTo: object, getter: Internal.Method, setter: Internal.Method, attributes: number): void;
        hasPrototypeMap(): boolean;
        setGetterOrSetter(name: string, index: number, getterOrSetter: Internal.Callable, isSetter: boolean): void;
        avoidObjectDetection(): boolean;
        has(key: Internal.Symbol, start: Internal.Scriptable): boolean;
        has(name: string, start: Internal.Scriptable): boolean;
        has(index: number, start: Internal.Scriptable): boolean;
        static init(cx: Internal.Context, scope: Internal.Scriptable, sealed: boolean): void;
        getAttributes(name: string): number;
        getAttributes(key: Internal.Symbol): number;
        getAttributes(index: number): number;
        hasInstance(instance: Internal.Scriptable): boolean;
        getAssociatedValue(key: object): object;
        execIdCall(f: Internal.IdFunctionObject, cx: Internal.Context, scope: Internal.Scriptable, thisObj: Internal.Scriptable, args: object[]): object;
        static getPropertyIds(obj: Internal.Scriptable): object[];
        static hasProperty(obj: Internal.Scriptable, key: Internal.Symbol): boolean;
        static hasProperty(obj: Internal.Scriptable, index: number): boolean;
        static hasProperty(obj: Internal.Scriptable, name: string): boolean;
        size(): number;
        initPrototypeMethod(tag: object, id: number, key: Internal.Symbol, functionName: string, arity: number): Internal.IdFunctionObject;
        initPrototypeMethod(tag: object, id: number, propertyName: string, functionName: string, arity: number): Internal.IdFunctionObject;
        initPrototypeMethod(tag: object, id: number, name: string, arity: number): Internal.IdFunctionObject;
        defineOwnProperty(cx: Internal.Context, key: object, desc: Internal.ScriptableObject): void;
        initPrototypeValue(id: number, key: Internal.Symbol, value: object, attributes: number): void;
        initPrototypeValue(id: number, name: string, value: object, attributes: number): void;
        static equalImplementations(c1: Internal.NativeContinuation, c2: Internal.NativeContinuation): boolean;
        static getFunctionPrototype(scope: Internal.Scriptable): Internal.Scriptable;
        preventExtensions(): void;
        static callMethod(obj: Internal.Scriptable, methodName: string, args: object[]): object;
        static callMethod(cx: Internal.Context, obj: Internal.Scriptable, methodName: string, args: object[]): object;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        static getTopScopeValue(scope: Internal.Scriptable, key: object): object;
        initPrototypeConstructor(f: Internal.IdFunctionObject): void;
        notifyAll(): void;
        sealObject(): void;
        setAttributes(name: string, attributes: number): void;
        setAttributes(key: Internal.Symbol, attributes: number): void;
        setAttributes(index: number, attributes: number): void;
        static putProperty(obj: Internal.Scriptable, index: number, value: object): void;
        static putProperty(obj: Internal.Scriptable, name: string, value: object): void;
        static putProperty(obj: Internal.Scriptable, key: Internal.Symbol, value: object): void;
        delete(key: Internal.Symbol): void;
        delete(name: string): void;
        delete(index: number): void;
        initImplementation(implementation: object): void;
        notify(): void;
        associateValue(key: object, value: object): object;
        static deleteProperty(obj: Internal.Scriptable, name: string): boolean;
        static deleteProperty(obj: Internal.Scriptable, index: number): boolean;
        static getObjectPrototype(scope: Internal.Scriptable): Internal.Scriptable;
        isExtensible(): boolean;
        hashCode(): number;
        isConst(name: string): boolean;
        get(name: string, start: Internal.Scriptable): object;
        get(key: Internal.Symbol, start: Internal.Scriptable): object;
        get(index: number, start: Internal.Scriptable): object;
        get(key: object): object;
        static putConstProperty(obj: Internal.Scriptable, name: string, value: object): void;
        getGetterOrSetter(name: string, index: number, isSetter: boolean): object;
        static getTopLevelScope(obj: Internal.Scriptable): Internal.Scriptable;
        static getProperty(obj: Internal.Scriptable, key: Internal.Symbol): object;
        static getProperty(obj: Internal.Scriptable, index: number): object;
        static getProperty(obj: Internal.Scriptable, name: string): object;
        activatePrototypeMap(maxPrototypeId: number): void;
        isEmpty(): boolean;
        static getClassPrototype(scope: Internal.Scriptable, className: string): Internal.Scriptable;
        exportAsJSClass(maxPrototypeId: number, scope: Internal.Scriptable, sealed: boolean): Internal.IdFunctionObject;
        call(cx: Internal.Context, scope: Internal.Scriptable, thisObj: Internal.Scriptable, args: object[]): object;
        defineConst(name: string, start: Internal.Scriptable): void;
        equals(arg0: object): boolean;
        static defineConstProperty(destination: Internal.Scriptable, propertyName: string): void;
        toString(): string;
        static getGeneratorFunctionPrototype(scope: Internal.Scriptable): Internal.Scriptable;
        static isContinuationConstructor(f: Internal.IdFunctionObject): boolean;
        static readonly DONTENUM : 2;
        static readonly CONST : 13;
        static readonly NOT_FOUND : object;
        static readonly UNINITIALIZED_CONST : 8;
        static readonly EMPTY : 0;
        static readonly READONLY : 1;
        static readonly PERMANENT : 4;
        set parentScope(m: Internal.Scriptable);
        get ids(): object[];
        get allIds(): object[];
        get externalArrayLength(): object;
        get externalArrayData(): Internal.ExternalArrayData;
        get className(): string;
        get parentScope(): Internal.Scriptable;
        set externalArrayData(array: Internal.ExternalArrayData);
        get typeOf(): string;
        get implementation(): object;
        get prototype(): Internal.Scriptable;
        set prototype(m: Internal.Scriptable);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class EventsJS$ScriptEventHandler {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class FastMap <Value> {
        getKey(keyIndex: number): Internal.FastMapKey<object>;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        numProperties(): number;
        notifyAll(): void;
        isSingleState(): boolean;
        notify(): void;
        with<T>(oldIndex: number, prop: Internal.Property<T>, value: T): Value;
        getValue<T>(stateIndex: number, property: Internal.Property<T>): T;
        getValue(stateIndex: number, key: object): Internal.Comparable<object>;
        getIndexOf(state: Map<Internal.Property<object>, Internal.Comparable<object>>): number;
        hashCode(): number;
        equals(arg0: object): boolean;
        withUnsafe<T>(globalTableIndex: number, property: Internal.Property<T>, newValue: object): Value;
        toString(): string;
        getEntry(propertyIndex: number, stateIndex: number): Internal.Map$Entry<Internal.Property<object>, Internal.Comparable<object>>;
        get propertySet(): Internal.ImmutableSet<Internal.Property<object>>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Float2LongFunction implements it.unimi.dsi.fastutil.Function<number, number>, Internal.DoubleToLongFunction {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        andThenShort(arg0: Internal.Long2ShortFunction): Internal.Float2ShortFunction;
        composeByte(arg0: Internal.Byte2FloatFunction): Internal.Byte2LongFunction;
        andThenInt(arg0: Internal.Long2IntFunction): Internal.Float2IntFunction;
        composeReference<T>(arg0: Internal.Reference2FloatFunction<T>): Internal.Reference2LongFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: number) => T;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: number): number;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: object): object;
        remove(arg0: object): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Long2DoubleFunction): Internal.Float2DoubleFunction;
        andThenObject<T>(arg0: Internal.Long2ObjectFunction<T>): Internal.Float2ObjectFunction<T>;
        get(arg0: object): number;
        get(arg0: object): object;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Long2LongFunction): Internal.Float2LongFunction;
        composeLong(arg0: Internal.Long2FloatFunction): Internal.Long2LongFunction;
        andThenByte(arg0: Internal.Long2ByteFunction): Internal.Float2ByteFunction;
        andThenFloat(arg0: Internal.Long2FloatFunction): Internal.Float2FloatFunction;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2FloatFunction): Internal.Int2LongFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2FloatFunction): Internal.Float2LongFunction;
        andThenChar(arg0: Internal.Long2CharFunction): Internal.Float2CharFunction;
        applyAsLong(arg0: number): number;
        composeObject<T>(arg0: Internal.Object2FloatFunction<T>): Internal.Object2LongFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => number;
        composeShort(arg0: Internal.Short2FloatFunction): Internal.Short2LongFunction;
        andThenReference<T>(arg0: Internal.Long2ReferenceFunction<T>): Internal.Float2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2FloatFunction): Internal.Char2LongFunction;
        composeDouble(arg0: Internal.Double2FloatFunction): Internal.Double2LongFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class PainterObject implements Internal.SpecialEquality {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(o: object): boolean;
        update(tag: Internal.CompoundTag): void;
        toString(): string;
        id(i: string): Internal.PainterObject;
        notify(): void;
        specialEquals(o: object, shallow: boolean): boolean;
        parent : Internal.PainterObjectStorage;
        visible : boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ClientLevel extends Internal.Level implements Internal.ClientLevelExtension, Internal.WorldEntityByChunkAccess, Internal.ClientWorldAccessor, Internal.BiomeSeedProvider, Internal.ExtendedWorld {
        handler$zch000$onOnChunkLoaded(arg0: Internal.ChunkPos, arg1: Internal.CallbackInfo): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        getChunkAtImmediately(arg0: number, arg1: number): Internal.LevelChunk;
        notifyAll(): void;
        getLoadedExistingBlockEntity(pos: BlockPos): Internal.BlockEntity;
        notify(): void;
        getEntitiesInChunk(chunkX: number, chunkZ: number): Internal.Collection<any>;
        markAndNotifyBlock(arg0: BlockPos, arg1: Internal.LevelChunk, arg2: Internal.BlockState, arg3: Internal.BlockState, arg4: number, arg5: number): void;
        invalidateCaps(): void;
        hashCode(): number;
        increaseMaxEntityRadius(arg0: number): number;
        redirect$zom000$redirectTick(blockEntity: Internal.TickingBlockEntity): void;
        close(): void;
        flywheel$getAllLoadedEntities(): Internal.Iterable<any>;
        areCapsCompatible(arg0: Internal.CapabilityDispatcher): boolean;
        asKJS(): object;
        reviveCaps(): void;
        getAnyChunkImmediately(arg0: number, arg1: number): Internal.ChunkAccess;
        equals(arg0: object): boolean;
        isAreaLoaded(arg0: BlockPos, arg1: number): boolean;
        handler$cao000$onDisconnect(arg0: Internal.CallbackInfo): void;
        toString(): string;
        getRandomPosInChunk(x: number, y: number, z: number, mask: number, out: Internal.BlockPos$MutableBlockPos): void;
        handler$zch000$onClearColorCaches(arg0: Internal.CallbackInfo): void;
        restoringBlockSnapshots : boolean;
        capturedBlockSnapshots : Internal.ArrayList<Internal.BlockSnapshot>;
        captureBlockSnapshots : boolean;
        get entityManager(): Internal.TransientEntitySectionManager<any>;
        get lunarContext(): Internal.LunarContext;
        get maxEntityRadius(): number;
        set lunarContext(arg0: Internal.LunarContext);
        get biomeSeed(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Object2IntFunction <K> implements it.unimi.dsi.fastutil.Function<K, number>, Internal.ToIntFunction<K> {
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        andThenShort(arg0: Internal.Int2ShortFunction): Internal.Object2ShortFunction<K>;
        composeByte(arg0: Internal.Byte2ObjectFunction<K>): Internal.Byte2IntFunction;
        andThenInt(arg0: Internal.Int2IntFunction): Internal.Object2IntFunction<K>;
        composeReference<T>(arg0: (arg0: T) => K): Internal.Reference2IntFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: K) => T;
        put(arg0: K, arg1: number): number;
        put(arg0: K, arg1: number): number;
        put(arg0: object, arg1: object): object;
        remove(arg0: object): number;
        remove(arg0: object): object;
        defaultReturnValue(): number;
        defaultReturnValue(arg0: number): void;
        andThenDouble(arg0: Internal.Int2DoubleFunction): Internal.Object2DoubleFunction<K>;
        andThenObject<T>(arg0: Internal.Int2ObjectFunction<T>): (arg0: K) => T;
        get(arg0: object): object;
        get(arg0: object): number;
        andThenLong(arg0: Internal.Int2LongFunction): Internal.Object2LongFunction<K>;
        composeLong(arg0: Internal.Long2ObjectFunction<K>): Internal.Long2IntFunction;
        andThenByte(arg0: Internal.Int2ByteFunction): Internal.Object2ByteFunction<K>;
        andThenFloat(arg0: Internal.Int2FloatFunction): Internal.Object2FloatFunction<K>;
        applyAsInt(arg0: K): number;
        removeInt(arg0: object): number;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        composeInt(arg0: Internal.Int2ObjectFunction<K>): Internal.Int2IntFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2ObjectFunction<K>): Internal.Float2IntFunction;
        andThenChar(arg0: Internal.Int2CharFunction): Internal.Object2CharFunction<K>;
        getInt(arg0: object): number;
        composeObject<T>(arg0: (arg0: T) => K): Internal.Object2IntFunction<T>;
        size(): number;
        composeShort(arg0: Internal.Short2ObjectFunction<K>): Internal.Short2IntFunction;
        andThenReference<T>(arg0: Internal.Int2ReferenceFunction<T>): (arg0: K) => T;
        composeChar(arg0: Internal.Char2ObjectFunction<K>): Internal.Char2IntFunction;
        composeDouble(arg0: Internal.Double2ObjectFunction<K>): Internal.Double2IntFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class SmithingRecipeJS extends Internal.RecipeJS {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        ingredientAction(filter: Internal.IngredientActionFilter, action: Internal.IngredientAction): Internal.RecipeJS;
        notifyAll(): void;
        convertReplacedInput(index: number, oldIngredient: Internal.IngredientJS, newIngredient: Internal.IngredientJS): Internal.IngredientJS;
        convertReplacedOutput(index: number, oldStack: Internal.ItemStackJS, newStack: Internal.ItemStackJS): Internal.ItemStackJS;
        save(): void;
        damageIngredient(filter: Internal.IngredientActionFilter, damage: number): Internal.RecipeJS;
        damageIngredient(filter: Internal.IngredientActionFilter): Internal.RecipeJS;
        getId(): string;
        dontAdd(): void;
        notify(): void;
        serializeJson(): void;
        replaceOutput(i: Internal.IngredientJS, with_: Internal.ItemStackJS, exact: boolean): boolean;
        hashCode(): number;
        merge(data: object): Internal.RecipeJS;
        create(args: Internal.ListJS): void;
        deserializeJson(): void;
        id(_id: ResourceLocation): Internal.RecipeJS;
        parseIngredientItem(o: object, key: string): Internal.IngredientJS;
        parseIngredientItem(o: object): Internal.IngredientJS;
        group(g: string): Internal.RecipeJS;
        deserialize(): void;
        serializeNBTAsJson(): boolean;
        getOutputIndex(ingredient: Internal.IngredientJS, exact: boolean): number;
        getInputIndex(ingredient: Internal.IngredientJS, exact: boolean): number;
        setGroup(g: string): void;
        serialize(): void;
        resultFromRecipeJson(json: Internal.JsonObject): Internal.ItemStackJS;
        serializeIngredientStack(in_: Internal.IngredientStackJS): Internal.JsonElement;
        stage(s: string): Internal.RecipeJS;
        replaceInput(i: Internal.IngredientJS, with_: Internal.IngredientJS, exact: boolean): boolean;
        getType(): string;
        equals(arg0: object): boolean;
        getGroup(): string;
        serializeItemStack(stack: Internal.ItemStackJS): Internal.JsonElement;
        hasOutput(ingredient: Internal.IngredientJS, exact: boolean): boolean;
        toString(): string;
        keepIngredient(filter: Internal.IngredientActionFilter): Internal.RecipeJS;
        parseResultItem(o: object): Internal.ItemStackJS;
        hasInput(ingredient: Internal.IngredientJS, exact: boolean): boolean;
        customIngredientAction(filter: Internal.IngredientActionFilter, id: string): Internal.RecipeJS;
        replaceIngredient(filter: Internal.IngredientActionFilter, item: Internal.ItemStackJS): Internal.RecipeJS;
        static currentRecipe : Internal.RecipeJS;
        originalJson : Internal.JsonObject;
        serializeOutputs : boolean;
        originalRecipe : Internal.Recipe<object>;
        readonly inputItems : Internal.List<Internal.IngredientJS>;
        static itemErrors : false;
        json : Internal.JsonObject;
        readonly outputItems : Internal.List<Internal.ItemStackJS>;
        type : Internal.RecipeTypeJS;
        serializeInputs : boolean;
        get mod(): string;
        get uniqueId(): string;
        get fromToString(): string;
        get path(): string;
        get orCreateId(): ResourceLocation;
        get originalRecipeResult(): Internal.ItemStackJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface InstantSource {
        withZone(arg0: Internal.ZoneId): Internal.Clock;
        millis(): number;
        instant(): Internal.Instant;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ListenerStatus extends Internal.Enum<Internal.ListenerStatus> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        shouldRemove(): boolean;
        hashCode(): number;
        static valueOf(arg0: string): Internal.ListenerStatus;
        notifyAll(): void;
        equals(arg0: object): boolean;
        isOk(): boolean;
        static values(): Internal.ListenerStatus[];
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly OKAY : Internal.ListenerStatus;
        static readonly REMOVE : Internal.ListenerStatus;
        static readonly UPDATE : Internal.ListenerStatus;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Map$Entry <K, V> {
        hashCode(): number;
        equals(arg0: object): boolean;
        get key(): K;
        get value(): V;
        set value(arg0: V);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class BigInteger extends Internal.Number implements Internal.Comparable<Internal.BigInteger> {
        bitLength(): number;
        mod(arg0: Internal.BigInteger): Internal.BigInteger;
        byteValueExact(): number;
        gcd(arg0: Internal.BigInteger): Internal.BigInteger;
        compareTo(arg0: Internal.BigInteger): number;
        compareTo(arg0: object): number;
        sqrtAndRemainder(): Internal.BigInteger[];
        shiftLeft(arg0: number): Internal.BigInteger;
        sqrt(): Internal.BigInteger;
        shortValue(): number;
        clearBit(arg0: number): Internal.BigInteger;
        signum(): number;
        add(arg0: Internal.BigInteger): Internal.BigInteger;
        subtract(arg0: Internal.BigInteger): Internal.BigInteger;
        floatValue(): number;
        isProbablePrime(arg0: number): boolean;
        doubleValue(): number;
        nextProbablePrime(): Internal.BigInteger;
        testBit(arg0: number): boolean;
        shiftRight(arg0: number): Internal.BigInteger;
        divideAndRemainder(arg0: Internal.BigInteger): Internal.BigInteger[];
        modPow(arg0: Internal.BigInteger, arg1: Internal.BigInteger): Internal.BigInteger;
        intValueExact(): number;
        andNot(arg0: Internal.BigInteger): Internal.BigInteger;
        modInverse(arg0: Internal.BigInteger): Internal.BigInteger;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        longValueExact(): number;
        notifyAll(): void;
        shortValueExact(): number;
        notify(): void;
        longValue(): number;
        not(): Internal.BigInteger;
        min(arg0: Internal.BigInteger): Internal.BigInteger;
        and(arg0: Internal.BigInteger): Internal.BigInteger;
        hashCode(): number;
        pow(arg0: number): Internal.BigInteger;
        xor(arg0: Internal.BigInteger): Internal.BigInteger;
        divide(arg0: Internal.BigInteger): Internal.BigInteger;
        multiply(arg0: Internal.BigInteger): Internal.BigInteger;
        flipBit(arg0: number): Internal.BigInteger;
        or(arg0: Internal.BigInteger): Internal.BigInteger;
        max(arg0: Internal.BigInteger): Internal.BigInteger;
        static valueOf(arg0: number): Internal.BigInteger;
        intValue(): number;
        abs(): Internal.BigInteger;
        negate(): Internal.BigInteger;
        toByteArray(): number[];
        equals(arg0: object): boolean;
        toString(arg0: number): string;
        toString(): string;
        bitCount(): number;
        static probablePrime(arg0: number, arg1: Internal.Random): Internal.BigInteger;
        remainder(arg0: Internal.BigInteger): Internal.BigInteger;
        byteValue(): number;
        static readonly ZERO : Internal.BigInteger;
        static readonly ONE : Internal.BigInteger;
        static readonly TEN : Internal.BigInteger;
        static readonly TWO : Internal.BigInteger;
        get lowestSetBit(): number;
        set bit(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface StateManager$IResettable {
        resetState(): void;
        register(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ResolverStyle extends Internal.Enum<Internal.ResolverStyle> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(arg0: string): Internal.ResolverStyle;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.ResolverStyle[];
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly STRICT : Internal.ResolverStyle;
        static readonly LENIENT : Internal.ResolverStyle;
        static readonly SMART : Internal.ResolverStyle;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class OffsetTime implements Internal.Temporal, Internal.TemporalAdjuster, Internal.Comparable<Internal.OffsetTime>, Internal.Serializable {
        static ofInstant(arg0: Internal.Instant, arg1: Internal.ZoneId): Internal.OffsetTime;
        minus(arg0: number, arg1: Internal.TemporalUnit): Internal.Temporal;
        minus(arg0: number, arg1: Internal.TemporalUnit): Internal.OffsetTime;
        minus(arg0: Internal.TemporalAmount): Internal.Temporal;
        minus(arg0: Internal.TemporalAmount): Internal.OffsetTime;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        plusHours(arg0: number): Internal.OffsetTime;
        minusHours(arg0: number): Internal.OffsetTime;
        notifyAll(): void;
        isEqual(arg0: Internal.OffsetTime): boolean;
        atDate(arg0: Internal.LocalDate): Internal.OffsetDateTime;
        toLocalTime(): Internal.LocalTime;
        adjustInto(arg0: Internal.Temporal): Internal.Temporal;
        range(arg0: Internal.TemporalField): Internal.ValueRange;
        compareTo(arg0: object): number;
        compareTo(arg0: Internal.OffsetTime): number;
        plusMinutes(arg0: number): Internal.OffsetTime;
        withOffsetSameLocal(arg0: Internal.ZoneOffset): Internal.OffsetTime;
        notify(): void;
        minusMinutes(arg0: number): Internal.OffsetTime;
        hashCode(): number;
        static now(): Internal.OffsetTime;
        static now(arg0: Internal.ZoneId): Internal.OffsetTime;
        static now(arg0: Internal.Clock): Internal.OffsetTime;
        static of(arg0: Internal.LocalTime, arg1: Internal.ZoneOffset): Internal.OffsetTime;
        static of(arg0: number, arg1: number, arg2: number, arg3: number, arg4: Internal.ZoneOffset): Internal.OffsetTime;
        get(arg0: Internal.TemporalField): number;
        plusSeconds(arg0: number): Internal.OffsetTime;
        static from(arg0: Internal.TemporalAccessor): Internal.OffsetTime;
        plusNanos(arg0: number): Internal.OffsetTime;
        withMinute(arg0: number): Internal.OffsetTime;
        withHour(arg0: number): Internal.OffsetTime;
        truncatedTo(arg0: Internal.TemporalUnit): Internal.OffsetTime;
        query<R>(arg0: Internal.TemporalQuery<R>): R;
        minusNanos(arg0: number): Internal.OffsetTime;
        format(arg0: Internal.DateTimeFormatter): string;
        static parse(arg0: Internal.CharSequence, arg1: Internal.DateTimeFormatter): Internal.OffsetTime;
        static parse(arg0: Internal.CharSequence): Internal.OffsetTime;
        isSupported(arg0: Internal.TemporalUnit): boolean;
        isSupported(arg0: Internal.TemporalField): boolean;
        isBefore(arg0: Internal.OffsetTime): boolean;
        plus(arg0: Internal.TemporalAmount): Internal.Temporal;
        plus(arg0: Internal.TemporalAmount): Internal.OffsetTime;
        plus(arg0: number, arg1: Internal.TemporalUnit): Internal.OffsetTime;
        plus(arg0: number, arg1: Internal.TemporalUnit): Internal.Temporal;
        withNano(arg0: number): Internal.OffsetTime;
        getLong(arg0: Internal.TemporalField): number;
        with(arg0: Internal.TemporalAdjuster): Internal.OffsetTime;
        with(arg0: Internal.TemporalAdjuster): Internal.Temporal;
        with(arg0: Internal.TemporalField, arg1: number): Internal.OffsetTime;
        with(arg0: Internal.TemporalField, arg1: number): Internal.Temporal;
        withOffsetSameInstant(arg0: Internal.ZoneOffset): Internal.OffsetTime;
        toEpochSecond(arg0: Internal.LocalDate): number;
        equals(arg0: object): boolean;
        until(arg0: Internal.Temporal, arg1: Internal.TemporalUnit): number;
        toString(): string;
        minusSeconds(arg0: number): Internal.OffsetTime;
        isAfter(arg0: Internal.OffsetTime): boolean;
        withSecond(arg0: number): Internal.OffsetTime;
        static readonly MIN : Internal.OffsetTime;
        static readonly MAX : Internal.OffsetTime;
        get offset(): Internal.ZoneOffset;
        get minute(): number;
        get hour(): number;
        get nano(): number;
        get second(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class OreConfiguration$TargetBlockState {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Thread implements Internal.Runnable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        static onSpinWait(): void;
        run(): void;
        notify(): void;
        static sleep(arg0: number): void;
        static sleep(arg0: number, arg1: number): void;
        hashCode(): number;
        isDaemon(): boolean;
        static yield(): void;
        interrupt(): void;
        static enumerate(arg0: Internal.Thread[]): number;
        join(): void;
        join(arg0: number, arg1: number): void;
        join(arg0: number): void;
        suspend(): void;
        static activeCount(): number;
        resume(): void;
        static currentThread(): Internal.Thread;
        isInterrupted(): boolean;
        static dumpStack(): void;
        start(): void;
        static interrupted(): boolean;
        checkAccess(): void;
        isAlive(): boolean;
        static holdsLock(arg0: object): boolean;
        stop(): void;
        equals(arg0: object): boolean;
        countStackFrames(): number;
        toString(): string;
        static readonly MIN_PRIORITY : 1;
        static readonly MAX_PRIORITY : 10;
        static readonly NORM_PRIORITY : 5;
        set name(arg0: string);
        get threadGroup(): Internal.ThreadGroup;
        get name(): string;
        get allStackTraces(): Map<Internal.Thread, Internal.StackTraceElement[]>;
        get id(): number;
        set contextClassLoader(arg0: Internal.ClassLoader);
        get stackTrace(): Internal.StackTraceElement[];
        set uncaughtExceptionHandler(arg0: Internal.Thread$UncaughtExceptionHandler);
        set defaultUncaughtExceptionHandler(arg0: Internal.Thread$UncaughtExceptionHandler);
        get uncaughtExceptionHandler(): Internal.Thread$UncaughtExceptionHandler;
        get defaultUncaughtExceptionHandler(): Internal.Thread$UncaughtExceptionHandler;
        set daemon(arg0: boolean);
        get state(): Internal.Thread$State;
        get contextClassLoader(): Internal.ClassLoader;
        get priority(): number;
        set priority(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Block extends Internal.BlockBehaviour implements Internal.ItemLike, Internal.IForgeBlock, Internal.BlockPathingBehavior {
        rotate(arg0: Internal.BlockState, arg1: Internal.LevelAccessor, arg2: BlockPos, arg3: Internal.Rotation): Internal.BlockState;
        getStateAtViewpoint(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos, arg3: Vec3): Internal.BlockState;
        onBlockExploded(arg0: Internal.BlockState, arg1: Internal.Level, arg2: BlockPos, arg3: Internal.Explosion): void;
        getBedDirection(arg0: Internal.BlockState, arg1: Internal.LevelReader, arg2: BlockPos): Internal.Direction;
        isBed(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos, arg3: Internal.Entity): boolean;
        makesOpenTrapdoorAboveClimbable(arg0: Internal.BlockState, arg1: Internal.LevelReader, arg2: BlockPos, arg3: Internal.BlockState): boolean;
        canHarvestBlock(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos, arg3: Internal.Player): boolean;
        isLadder(arg0: Internal.BlockState, arg1: Internal.LevelReader, arg2: BlockPos, arg3: Internal.LivingEntity): boolean;
        shouldDisplayFluidOverlay(arg0: Internal.BlockState, arg1: Internal.BlockAndTintGetter, arg2: BlockPos, arg3: Internal.FluidState): boolean;
        onNeighborChange(arg0: Internal.BlockState, arg1: Internal.LevelReader, arg2: BlockPos, arg3: BlockPos): void;
        canStickTo(arg0: Internal.BlockState, arg1: Internal.BlockState): boolean;
        getWeakChanges(arg0: Internal.BlockState, arg1: Internal.LevelReader, arg2: BlockPos): boolean;
        canEntityDestroy(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos, arg3: Internal.Entity): boolean;
        isBurning(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos): boolean;
        getFriction(arg0: Internal.BlockState, arg1: Internal.LevelReader, arg2: BlockPos, arg3: Internal.Entity): number;
        isValidSpawn(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos, arg3: Internal.SpawnPlacements$Type, arg4: Internal.EntityType<object>): boolean;
        isPortalFrame(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos): boolean;
        getExplosionResistance(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos, arg3: Internal.Explosion): number;
        getPathNodeType(state: Internal.BlockState): Internal.BlockPathTypes;
        isScaffolding(arg0: Internal.BlockState, arg1: Internal.LevelReader, arg2: BlockPos, arg3: Internal.LivingEntity): boolean;
        canSustainPlant(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos, arg3: Internal.Direction, arg4: Internal.IPlantable): boolean;
        canDropFromExplosion(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos, arg3: Internal.Explosion): boolean;
        isStickyBlock(arg0: Internal.BlockState): boolean;
        isFertile(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos): boolean;
        getAiPathNodeType(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos, arg3: Internal.Mob): Internal.BlockPathTypes;
        isSlimeBlock(arg0: Internal.BlockState): boolean;
        getFireSpreadSpeed(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos, arg3: Internal.Direction): number;
        getToolModifiedState(arg0: Internal.BlockState, arg1: Internal.Level, arg2: BlockPos, arg3: Internal.Player, arg4: Internal.ItemStack, arg5: Internal.ToolAction): Internal.BlockState;
        getBeaconColorMultiplier(arg0: Internal.BlockState, arg1: Internal.LevelReader, arg2: BlockPos, arg3: BlockPos): number[];
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        getExpDrop(arg0: Internal.BlockState, arg1: Internal.LevelReader, arg2: BlockPos, arg3: number, arg4: number): number;
        isConduitFrame(arg0: Internal.BlockState, arg1: Internal.LevelReader, arg2: BlockPos, arg3: BlockPos): boolean;
        notifyAll(): void;
        getPathNodeTypeAsNeighbor(state: Internal.BlockState): Internal.BlockPathTypes;
        getLightEmission(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos): number;
        onDestroyedByPlayer(arg0: Internal.BlockState, arg1: Internal.Level, arg2: BlockPos, arg3: Internal.Player, arg4: boolean, arg5: Internal.FluidState): boolean;
        shouldCheckWeakPower(arg0: Internal.BlockState, arg1: Internal.LevelReader, arg2: BlockPos, arg3: Internal.Direction): boolean;
        collisionExtendsVertically(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos, arg3: Internal.Entity): boolean;
        notify(): void;
        addLandingEffects(arg0: Internal.BlockState, arg1: Internal.ServerLevel, arg2: BlockPos, arg3: Internal.BlockState, arg4: Internal.LivingEntity, arg5: number): boolean;
        getSoundType(arg0: Internal.BlockState, arg1: Internal.LevelReader, arg2: BlockPos, arg3: Internal.Entity): Internal.SoundType;
        hashCode(): number;
        addRunningEffects(arg0: Internal.BlockState, arg1: Internal.Level, arg2: BlockPos, arg3: Internal.Entity): boolean;
        initializeClient(arg0: (arg0: Internal.IBlockRenderProperties) => void): void;
        getCloneItemStack(arg0: Internal.BlockState, arg1: Internal.HitResult, arg2: Internal.BlockGetter, arg3: BlockPos, arg4: Internal.Player): Internal.ItemStack;
        isFlammable(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos, arg3: Internal.Direction): boolean;
        onCaughtFire(arg0: Internal.BlockState, arg1: Internal.Level, arg2: BlockPos, arg3: Internal.Direction, arg4: Internal.LivingEntity): void;
        getEnchantPowerBonus(arg0: Internal.BlockState, arg1: Internal.LevelReader, arg2: BlockPos): number;
        setBedOccupied(arg0: Internal.BlockState, arg1: Internal.Level, arg2: BlockPos, arg3: Internal.LivingEntity, arg4: boolean): void;
        setRegistryName(arg0: string, arg1: string): V;
        isFireSource(arg0: Internal.BlockState, arg1: Internal.LevelReader, arg2: BlockPos, arg3: Internal.Direction): boolean;
        getRespawnPosition(arg0: Internal.BlockState, arg1: Internal.EntityType<object>, arg2: Internal.LevelReader, arg3: BlockPos, arg4: number, arg5: Internal.LivingEntity): Internal.Optional<Vec3>;
        equals(arg0: object): boolean;
        canConnectRedstone(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos, arg3: Internal.Direction): boolean;
        toString(): string;
        getFlammability(arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos, arg3: Internal.Direction): number;
        readonly delegate : () => V;
        get tags(): Internal.Set<ResourceLocation>;
        set materialKJS(arg0: net.minecraft.world.level.material.Material);
        set explosionResistanceKJS(arg0: number);
        set jumpFactorKJS(arg0: number);
        get material(): net.minecraft.world.level.material.Material;
        set soundTypeKJS(arg0: Internal.SoundType);
        get blockBuilderKJS(): Internal.BlockBuilder;
        get id(): string;
        get renderPropertiesInternal(): object;
        set frictionKJS(arg0: number);
        set hasCollisionKJS(arg0: boolean);
        get registryName(): ResourceLocation;
        set registryName(arg0: ResourceLocation);
        set registryName(arg0: ResourceLocation);
        set registryName(arg0: string);
        set isRandomlyTickingKJS(arg0: boolean);
        set speedFactorKJS(arg0: number);
        set blockBuilderKJS(b: Internal.BlockBuilder);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class SqueezerRecipeJS extends Internal.IERecipeJS {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        ingredientAction(filter: Internal.IngredientActionFilter, action: Internal.IngredientAction): Internal.RecipeJS;
        notifyAll(): void;
        convertReplacedOutput(index: number, oldStack: Internal.ItemStackJS, newStack: Internal.ItemStackJS): Internal.ItemStackJS;
        convertReplacedInput(index: number, oldIngredient: Internal.IngredientJS, newIngredient: Internal.IngredientJS): Internal.IngredientJS;
        save(): void;
        damageIngredient(filter: Internal.IngredientActionFilter, damage: number): Internal.RecipeJS;
        damageIngredient(filter: Internal.IngredientActionFilter): Internal.RecipeJS;
        getId(): string;
        dontAdd(): void;
        notify(): void;
        serializeJson(): void;
        parseIngredientItemIE(json: Internal.JsonElement): Internal.IngredientStackJS;
        replaceOutput(i: Internal.IngredientJS, with_: Internal.ItemStackJS, exact: boolean): boolean;
        hashCode(): number;
        merge(data: object): Internal.RecipeJS;
        create(args: Internal.ListJS): void;
        deserializeJson(): void;
        id(_id: ResourceLocation): Internal.RecipeJS;
        parseIngredientItem(o: object, key: string): Internal.IngredientJS;
        parseIngredientItem(o: object): Internal.IngredientJS;
        group(g: string): Internal.RecipeJS;
        energy(e: number): Internal.IERecipeJS;
        deserialize(): void;
        serializeNBTAsJson(): boolean;
        getOutputIndex(ingredient: Internal.IngredientJS, exact: boolean): number;
        getInputIndex(ingredient: Internal.IngredientJS, exact: boolean): number;
        setGroup(g: string): void;
        serialize(): void;
        resultFromRecipeJson(json: Internal.JsonObject): Internal.ItemStackJS;
        stage(s: string): Internal.RecipeJS;
        serializeIngredientStack(in_: Internal.IngredientStackJS): Internal.JsonElement;
        replaceInput(i: Internal.IngredientJS, with_: Internal.IngredientJS, exact: boolean): boolean;
        getType(): string;
        equals(arg0: object): boolean;
        getGroup(): string;
        serializeItemStack(stack: Internal.ItemStackJS): Internal.JsonElement;
        hasOutput(ingredient: Internal.IngredientJS, exact: boolean): boolean;
        toString(): string;
        keepIngredient(filter: Internal.IngredientActionFilter): Internal.RecipeJS;
        time(t: number): Internal.IERecipeJS;
        hasInput(ingredient: Internal.IngredientJS, exact: boolean): boolean;
        customIngredientAction(filter: Internal.IngredientActionFilter, id: string): Internal.RecipeJS;
        parseResultItem(o: object): Internal.ItemStackJS;
        replaceIngredient(filter: Internal.IngredientActionFilter, item: Internal.ItemStackJS): Internal.RecipeJS;
        static currentRecipe : Internal.RecipeJS;
        readonly inputItems : Internal.List<Internal.IngredientJS>;
        static itemErrors : false;
        type : Internal.RecipeTypeJS;
        originalJson : Internal.JsonObject;
        serializeOutputs : boolean;
        readonly outputFluids : Internal.List<Internal.FluidStack>;
        originalRecipe : Internal.Recipe<object>;
        readonly inputFluids : Internal.List<Internal.FluidTagInput>;
        json : Internal.JsonObject;
        readonly outputItems : Internal.List<Internal.ItemStackJS>;
        serializeInputs : boolean;
        get mod(): string;
        get uniqueId(): string;
        get fromToString(): string;
        get path(): string;
        get orCreateId(): ResourceLocation;
        get originalRecipeResult(): Internal.ItemStackJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ExtendedWorld {
        getChunkAtImmediately(arg0: number, arg1: number): Internal.LevelChunk;
        getAnyChunkImmediately(arg0: number, arg1: number): Internal.ChunkAccess;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class GsonBuilder {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        enableComplexMapKeySerialization(): Internal.GsonBuilder;
        notifyAll(): void;
        disableInnerClassSerialization(): Internal.GsonBuilder;
        excludeFieldsWithModifiers(arg0: number[]): Internal.GsonBuilder;
        setLenient(): Internal.GsonBuilder;
        notify(): void;
        serializeNulls(): Internal.GsonBuilder;
        addSerializationExclusionStrategy(arg0: Internal.ExclusionStrategy): Internal.GsonBuilder;
        generateNonExecutableJson(): Internal.GsonBuilder;
        registerTypeHierarchyAdapter(arg0: Internal.Class<object>, arg1: object): Internal.GsonBuilder;
        addDeserializationExclusionStrategy(arg0: Internal.ExclusionStrategy): Internal.GsonBuilder;
        hashCode(): number;
        registerTypeAdapterFactory(arg0: Internal.TypeAdapterFactory): Internal.GsonBuilder;
        create(): Internal.Gson;
        disableHtmlEscaping(): Internal.GsonBuilder;
        setDateFormat(arg0: number, arg1: number): Internal.GsonBuilder;
        serializeSpecialFloatingPointValues(): Internal.GsonBuilder;
        registerTypeAdapter(arg0: Internal.Type, arg1: object): Internal.GsonBuilder;
        setPrettyPrinting(): Internal.GsonBuilder;
        equals(arg0: object): boolean;
        toString(): string;
        excludeFieldsWithoutExposeAnnotation(): Internal.GsonBuilder;
        set fieldNamingPolicy(arg0: Internal.FieldNamingPolicy);
        set longSerializationPolicy(arg0: Internal.LongSerializationPolicy);
        set dateFormat(arg0: number);
        set dateFormat(arg0: string);
        set version(arg0: number);
        set fieldNamingStrategy(arg0: Internal.FieldNamingStrategy);
        set exclusionStrategies(arg0: Internal.ExclusionStrategy[]);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface VertexBufferView {
        ensureBufferCapacity(arg0: number): boolean;
        flush(arg0: number, arg1: Internal.BufferVertexFormat): void;
        get writerPosition(): number;
        get vertexFormat(): Internal.BufferVertexFormat;
        get directBuffer(): Internal.ByteBuffer;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IntUnaryOperator {
        applyAsInt(arg0: number): number;
        compose(arg0: Internal.IntUnaryOperator): Internal.IntUnaryOperator;
        andThen(arg0: Internal.IntUnaryOperator): Internal.IntUnaryOperator;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class AbstractIntCollection extends Internal.AbstractCollection<number> implements Internal.IntCollection {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        intIterator(): Internal.IntIterator;
        intSpliterator(): Internal.IntSpliterator;
        notify(): void;
        remove(arg0: object): boolean;
        intStream(): Internal.IntStream;
        removeAll(arg0: Internal.IntCollection): boolean;
        removeAll(arg0: Internal.Collection<object>): boolean;
        iterator(): Internal.Iterator<any>;
        iterator(): Internal.IntIterator;
        stream(): Internal.Stream<number>;
        hashCode(): number;
        toIntArray(arg0: number[]): number[];
        toIntArray(): number[];
        toArray(arg0: number[]): number[];
        toArray(): object[];
        toArray<T>(arg0: T[]): T[];
        parallelStream(): Internal.Stream<number>;
        rem(arg0: number): boolean;
        add(arg0: number): boolean;
        add(arg0: number): boolean;
        add(arg0: object): boolean;
        spliterator(): Internal.Spliterator<any>;
        spliterator(): Internal.IntSpliterator;
        forEach(arg0: it.unimi.dsi.fastutil.ints.IntConsumer): void;
        forEach(arg0: (arg0: number) => void): void;
        forEach(arg0: Internal.IntConsumer): void;
        containsAll(arg0: Internal.Collection<object>): boolean;
        containsAll(arg0: Internal.IntCollection): boolean;
        isEmpty(): boolean;
        clear(): void;
        removeIf(arg0: it.unimi.dsi.fastutil.ints.IntPredicate): boolean;
        removeIf(arg0: (arg0: number) => boolean): boolean;
        removeIf(arg0: Internal.IntPredicate): boolean;
        contains(arg0: number): boolean;
        contains(arg0: object): boolean;
        size(): number;
        addAll(arg0: Internal.IntCollection): boolean;
        addAll(arg0: Internal.Collection<number>): boolean;
        equals(arg0: object): boolean;
        toString(): string;
        intParallelStream(): Internal.IntStream;
        retainAll(arg0: Internal.Collection<object>): boolean;
        retainAll(arg0: Internal.IntCollection): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class FieldPosition {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        get endIndex(): number;
        get fieldAttribute(): Internal.Format$Field;
        get field(): number;
        set endIndex(arg0: number);
        get beginIndex(): number;
        set beginIndex(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class Entity extends Internal.CapabilityProvider<Internal.Entity> implements Internal.Nameable, Internal.EntityAccess, Internal.CommandSource, Internal.IForgeEntity, Internal.IMovedAccess, Internal.IDataManager, Internal.Endimatable, blusunrize.immersiveengineering.mixin.accessors.EntityAccess, Internal.EntityKJS, net.blay09.mods.netherportalfix.mixin.EntityAccessor, Internal.NearbyEntityListenerProvider, Internal.EntityAccessor, Internal.BlockCachingEntity {
        backpackedMoved(): boolean;
        captureDrops(): Internal.Collection<Internal.ItemEntity>;
        captureDrops(arg0: Internal.Collection<Internal.ItemEntity>): Internal.Collection<Internal.ItemEntity>;
        onEndimationEnd(arg0: Internal.PlayableEndimation, arg1: Internal.PlayableEndimation): void;
        canBeRiddenInWater(arg0: Internal.Entity): boolean;
        handler$zzo000$tickHead(arg0: Internal.CallbackInfo): void;
        isEndimationPlaying(arg0: Internal.PlayableEndimation): boolean;
        isActive(): boolean;
        handler$zgm001$tick(arg0: Internal.CallbackInfo): void;
        handler$zjn000$onUpdateFluidOnEyes(arg0: Internal.CallbackInfo): void;
        changeDimension(arg0: Internal.ServerLevel, arg1: Internal.ITeleporter): Internal.Entity;
        serializeNBT(): Internal.Tag;
        serializeNBT(): Internal.CompoundTag;
        invalidateCaps(): void;
        revive(): void;
        canUpdate(): boolean;
        canUpdate(arg0: boolean): void;
        handler$bgc000$tryShortcutFluidPushing(tag: net.minecraft.tags.Tag<any>, speed: number, cir: Internal.CallbackInfoReturnable<any>, box: Internal.AABB, x1: number, x2: number, y1: number, y2: number, z1: number, z2: number, zero: number): void;
        resetEndimation(): void;
        areCapsCompatible(arg0: Internal.CapabilityDispatcher): boolean;
        getEyeHeightAccess(arg0: Internal.Pose, arg1: Internal.EntityDimensions): number;
        reviveCaps(): void;
        lithiumOnBlockCacheDeleted(): void;
        canRiderInteract(): boolean;
        getEntries(arg0: boolean): Internal.Set<any>;
        onAddedToWorld(): void;
        handler$zcp000$read(arg0: Internal.CompoundTag, arg1: Internal.CallbackInfo): void;
        canTrample(arg0: Internal.BlockState, arg1: BlockPos, arg2: number): boolean;
        getClassification(arg0: boolean): Internal.MobCategory;
        lithiumSetClimbingMobCachingSectionUpdateBehavior(listening: boolean): void;
        onEndimationStart(arg0: Internal.PlayableEndimation, arg1: Internal.PlayableEndimation): void;
        isNoEndimationPlaying(): boolean;
        shouldRiderSit(): boolean;
        getPickedResult(arg0: Internal.HitResult): Internal.ItemStack;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        lithiumOnBlockCacheSet(newState: Internal.BlockState): void;
        handler$zjn000$onUpdateFluidOnEyeAssign(arg0: Internal.CallbackInfo): void;
        notify(): void;
        handler$zzo000$moveStep(arg0: Internal.MoverType, arg1: Vec3, arg2: Internal.CallbackInfo): void;
        endimateTick(): void;
        isDirty(): boolean;
        hashCode(): number;
        isAddedToWorld(): boolean;
        addListener(listener: Internal.NearbyEntityListener): void;
        onRemovedFromWorld(): void;
        isMultipartEntity(): boolean;
        deserializeNBT(arg0: Internal.CompoundTag): void;
        deserializeNBT(arg0: Internal.Tag): void;
        clean(): void;
        asKJS(): object;
        getValue(arg0: Internal.TrackedData<any>): object;
        setValue(arg0: Internal.TrackedData<any>, arg1: object): void;
        equals(arg0: object): boolean;
        toString(): string;
        get cachedFeetBlockState(): Internal.BlockState;
        get pos(): Internal.Position;
        get persistentDataKJS(): Internal.CompoundTag;
        get endimatedState(): Internal.Endimatable$EndimatedState;
        get effectHandler(): Internal.EndimationEffectHandler;
        set animationTick(arg0: number);
        get listener(): Internal.NearbyEntityListenerMulti;
        get isInsidePortal(): boolean;
        get persistentData(): Internal.CompoundTag;
        get remainingFireTicks(): number;
        get dataMap(): Map<any, any>;
        get entityChangeListener(): Internal.EntityInLevelCallback;
        set dataMap(arg0: Map<any, any>);
        get parts(): Internal.PartEntity<object>[];
        get playingEndimation(): Internal.PlayableEndimation;
        get dirtyEntries(): Internal.Set<any>;
        set playingEndimation(arg0: Internal.PlayableEndimation);
        get animationTick(): number;
        set remainingFireTicks(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class AbstractContainerMenu implements Internal.ContainerAccess, Internal.AbstractContainerMenuInvoker, Internal.AbstractContainerMenuAccessor {
        handler$zjl000$doClick(arg0: number, arg1: number, arg2: Internal.ClickType, arg3: Internal.Player, arg4: Internal.CallbackInfo): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        _moveItemStackTo(arg0: Internal.ItemStack, arg1: number, arg2: number, arg3: boolean): boolean;
        get menuType(): Internal.MenuType<any>;
        get remoteSlots(): Internal.NonNullList<any>;
        get lastSlots(): Internal.NonNullList<any>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface BlockPredicate {
        check(arg0: Internal.BlockContainerJS): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class MutableUnit extends Internal.Unit {
        sub(with_: Internal.Unit): Internal.Unit;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        mod(with_: Internal.Unit): Internal.Unit;
        mul(with_: Internal.Unit): Internal.Unit;
        log(): Internal.Unit;
        log1p(): Internal.Unit;
        log10(): Internal.Unit;
        cos(): Internal.Unit;
        notifyAll(): void;
        deg(): Internal.Unit;
        lt(with_: Internal.Unit): Internal.Unit;
        atan(): Internal.Unit;
        notify(): void;
        div(with_: Internal.Unit): Internal.Unit;
        neg(): Internal.Unit;
        not(): Internal.Unit;
        shiftLeft(with_: Internal.Unit): Internal.Unit;
        min(with_: Internal.Unit): Internal.Unit;
        rad(): Internal.Unit;
        sqrt(): Internal.Unit;
        hashCode(): number;
        and(with_: Internal.Unit): Internal.Unit;
        get(): number;
        gte(with_: Internal.Unit): Internal.Unit;
        pow(with_: Internal.Unit): Internal.Unit;
        sin(): Internal.Unit;
        xor(with_: Internal.Unit): Internal.Unit;
        neq(with_: Internal.Unit): Internal.Unit;
        lte(with_: Internal.Unit): Internal.Unit;
        floor(): Internal.Unit;
        isFixed(): boolean;
        sq(): Internal.Unit;
        atan2(with_: Internal.Unit): Internal.Unit;
        tan(): Internal.Unit;
        add(with_: Internal.Unit): Internal.Unit;
        or(with_: Internal.Unit): Internal.Unit;
        set(v: number): void;
        max(with_: Internal.Unit): Internal.Unit;
        toBool(): Internal.Unit;
        ceil(): Internal.Unit;
        eq(with_: Internal.Unit): Internal.Unit;
        gt(with_: Internal.Unit): Internal.Unit;
        shiftRight(with_: Internal.Unit): Internal.Unit;
        abs(): Internal.Unit;
        equals(arg0: object): boolean;
        toString(): string;
        append(sb: Internal.StringBuilder): void;
        get asInt(): number;
        get asBoolean(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Item extends Internal.ForgeRegistryEntry<Internal.Item> implements Internal.ItemLike, Internal.IForgeItem, Internal.ItemInvokerMixin, Internal.ItemAccessor, Internal.IPlaceableItem, Internal.ItemKJS {
        canElytraFly(arg0: Internal.ItemStack, arg1: Internal.LivingEntity): boolean;
        setDamage(arg0: Internal.ItemStack, arg1: number): void;
        canPerformAction(arg0: Internal.ItemStack, arg1: Internal.ToolAction): boolean;
        getItemEnchantability(arg0: Internal.ItemStack): number;
        shouldCauseBlockBreakReset(arg0: Internal.ItemStack, arg1: Internal.ItemStack): boolean;
        damageItem<T>(arg0: Internal.ItemStack, arg1: number, arg2: T, arg3: (arg0: T) => void): number;
        shouldCauseReequipAnimation(arg0: Internal.ItemStack, arg1: Internal.ItemStack, arg2: boolean): boolean;
        getXpRepairRatio(arg0: Internal.ItemStack): number;
        readShareTag(arg0: Internal.ItemStack, arg1: Internal.CompoundTag): void;
        onEntityItemUpdate(arg0: Internal.ItemStack, arg1: Internal.ItemEntity): boolean;
        getDamage(arg0: Internal.ItemStack): number;
        isBookEnchantable(arg0: Internal.ItemStack, arg1: Internal.ItemStack): boolean;
        canDisableShield(arg0: Internal.ItemStack, arg1: Internal.ItemStack, arg2: Internal.LivingEntity, arg3: Internal.LivingEntity): boolean;
        onUsingTick(arg0: Internal.ItemStack, arg1: Internal.LivingEntity, arg2: number): void;
        createEntity(arg0: Internal.Level, arg1: Internal.Entity, arg2: Internal.ItemStack): Internal.Entity;
        isPiglinCurrency(arg0: Internal.ItemStack): boolean;
        callAllowdedIn(arg0: Internal.CreativeModeTab): boolean;
        getSweepHitBox(arg0: Internal.ItemStack, arg1: Internal.Player, arg2: Internal.Entity): Internal.AABB;
        isRepairable(arg0: Internal.ItemStack): boolean;
        getShareTag(arg0: Internal.ItemStack): Internal.CompoundTag;
        getBurnTime(arg0: Internal.ItemStack, arg1: Internal.RecipeType<object>): number;
        onDroppedByPlayer(arg0: Internal.ItemStack, arg1: Internal.Player): boolean;
        isDamageable(arg0: Internal.ItemStack): boolean;
        onEntitySwing(arg0: Internal.ItemStack, arg1: Internal.LivingEntity): boolean;
        elytraFlightTick(arg0: Internal.ItemStack, arg1: Internal.LivingEntity, arg2: number): boolean;
        getAttributeModifiers(arg0: EquipmentSlot, arg1: Internal.ItemStack): Internal.Multimap<Internal.Attribute, Internal.AttributeModifier>;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        onLeftClickEntity(arg0: Internal.ItemStack, arg1: Internal.Player, arg2: Internal.Entity): boolean;
        canEquip(arg0: Internal.ItemStack, arg1: EquipmentSlot, arg2: Internal.Entity): boolean;
        notifyAll(): void;
        notify(): void;
        onBlockStartBreak(arg0: Internal.ItemStack, arg1: BlockPos, arg2: Internal.Player): boolean;
        onHorseArmorTick(arg0: Internal.ItemStack, arg1: Internal.Level, arg2: Internal.Mob): void;
        handler$zkh000$getUseDuration(arg0: Internal.ItemStack, arg1: Internal.CallbackInfoReturnable<any>): void;
        canContinueUsing(arg0: Internal.ItemStack, arg1: Internal.ItemStack): boolean;
        getEntityLifespan(arg0: Internal.ItemStack, arg1: Internal.Level): number;
        handler$bao000$overrideOtherStackedOnMe(arg0: Internal.ItemStack, arg1: Internal.ItemStack, arg2: Internal.Slot, arg3: Internal.ClickAction, arg4: Internal.Player, arg5: Internal.SlotAccess, arg6: Internal.CallbackInfoReturnable<any>): void;
        getDefaultTooltipHideFlags(arg0: Internal.ItemStack): number;
        getArmorTexture(arg0: Internal.ItemStack, arg1: Internal.Entity, arg2: EquipmentSlot, arg3: string): string;
        hashCode(): number;
        hasCustomEntity(arg0: Internal.ItemStack): boolean;
        getHighlightTip(arg0: Internal.ItemStack, arg1: Internal.Component): Internal.Component;
        initializeClient(arg0: (arg0: Internal.IItemRenderProperties) => void): void;
        getMaxDamage(arg0: Internal.ItemStack): number;
        getCreatorModId(arg0: Internal.ItemStack): string;
        isDamaged(arg0: Internal.ItemStack): boolean;
        onArmorTick(arg0: Internal.ItemStack, arg1: Internal.Level, arg2: Internal.Player): void;
        addPlaceable(arg0: Internal.Block): void;
        hasContainerItem(arg0: Internal.ItemStack): boolean;
        doesSneakBypassUse(arg0: Internal.ItemStack, arg1: Internal.LevelReader, arg2: BlockPos, arg3: Internal.Player): boolean;
        onItemUseFirst(arg0: Internal.ItemStack, arg1: Internal.UseOnContext): Internal.InteractionResult;
        getContainerItem(arg0: Internal.ItemStack): Internal.ItemStack;
        setRegistryName(arg0: string, arg1: string): V;
        onDestroyed(arg0: Internal.ItemEntity, arg1: Internal.DamageSource): void;
        isCorrectToolForDrops(arg0: Internal.ItemStack, arg1: Internal.BlockState): boolean;
        handler$bao000$overrideStackedOnOther(arg0: Internal.ItemStack, arg1: Internal.Slot, arg2: Internal.ClickAction, arg3: Internal.Player, arg4: Internal.CallbackInfoReturnable<any>): void;
        getEquipmentSlot(arg0: Internal.ItemStack): EquipmentSlot;
        initCapabilities(arg0: Internal.ItemStack, arg1: Internal.CompoundTag): Internal.ICapabilityProvider;
        getItemStackLimit(arg0: Internal.ItemStack): number;
        equals(arg0: object): boolean;
        makesPiglinsNeutral(arg0: Internal.ItemStack, arg1: Internal.LivingEntity): boolean;
        toString(): string;
        isEnderMask(arg0: Internal.ItemStack, arg1: Internal.Player, arg2: Internal.EnderMan): boolean;
        canApplyAtEnchantingTable(arg0: Internal.ItemStack, arg1: Internal.Enchantment): boolean;
        readonly delegate : () => V;
        renderProperties : object;
        set burnTime(i: number);
        get tags(): Internal.Set<ResourceLocation>;
        set fireResistantKJS(arg0: boolean);
        set category(arg0: Internal.CreativeModeTab);
        set foodPropertiesKJS(arg0: Internal.FoodProperties);
        get category(): Internal.CreativeModeTab;
        get creativeTabs(): Internal.Collection<Internal.CreativeModeTab>;
        set itemBuilderKJS(b: Internal.ItemBuilder);
        get itemBuilderKJS(): Internal.ItemBuilder;
        get blockItemOverride(): Internal.BlockItem;
        set maxStackSizeKJS(arg0: number);
        get id(): string;
        get renderPropertiesInternal(): object;
        set craftingRemainderKJS(arg0: Internal.Item);
        set maxDamageKJS(arg0: number);
        set rarityKJS(arg0: Internal.Rarity);
        get registryName(): ResourceLocation;
        set registryName(arg0: ResourceLocation);
        set registryName(arg0: ResourceLocation);
        set registryName(arg0: string);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class ImmutableList <E> extends Internal.ImmutableCollection<E> implements Internal.List<E>, Internal.RandomAccess {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        replaceAll(arg0: Internal.UnaryOperator<E>): void;
        notify(): void;
        asList(): Internal.ImmutableList<E>;
        remove(arg0: number): E;
        remove(arg0: object): boolean;
        static sortedCopyOf<E>(arg0: Internal.Comparator<E>, arg1: Internal.Iterable<E>): Internal.ImmutableList<E>;
        static sortedCopyOf<E>(arg0: Internal.Iterable<E>): Internal.ImmutableList<E>;
        iterator(): Internal.UnmodifiableIterator<E>;
        iterator(): Internal.Iterator<any>;
        hashCode(): number;
        get(arg0: number): E;
        static of<E>(arg0: E, arg1: E, arg2: E, arg3: E): Internal.ImmutableList<E>;
        static of<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E): Internal.ImmutableList<E>;
        static of<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E): Internal.ImmutableList<E>;
        static of<E>(): Internal.ImmutableList<E>;
        static of<E>(arg0: E): Internal.ImmutableList<E>;
        static of<E>(arg0: E, arg1: E): Internal.ImmutableList<E>;
        static of<E>(arg0: E, arg1: E, arg2: E): Internal.ImmutableList<E>;
        static of<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E, arg6: E, arg7: E, arg8: E, arg9: E): Internal.ImmutableList<E>;
        static of<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E, arg6: E, arg7: E, arg8: E, arg9: E, arg10: E, arg11: E, arg12: E[]): Internal.ImmutableList<E>;
        static of<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E, arg6: E, arg7: E, arg8: E): Internal.ImmutableList<E>;
        static of<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E, arg6: E, arg7: E, arg8: E, arg9: E, arg10: E): Internal.ImmutableList<E>;
        static of<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E, arg6: E): Internal.ImmutableList<E>;
        static of<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E, arg6: E, arg7: E): Internal.ImmutableList<E>;
        toArray(): object[];
        toArray<T>(arg0: T[]): T[];
        static builder<E>(): Internal.ImmutableList$Builder<E>;
        indexOf(arg0: object): number;
        add(arg0: number, arg1: E): void;
        add(arg0: E): boolean;
        subList(arg0: number, arg1: number): Internal.ImmutableList<E>;
        subList(arg0: number, arg1: number): Internal.List<any>;
        set(arg0: number, arg1: E): E;
        spliterator(): Internal.Spliterator<E>;
        forEach(arg0: (arg0: E) => void): void;
        isEmpty(): boolean;
        clear(): void;
        sort(arg0: Internal.Comparator<E>): void;
        reverse(): Internal.ImmutableList<E>;
        static copyOf<E>(arg0: E[]): Internal.ImmutableList<E>;
        static copyOf<E>(arg0: Internal.Iterator<E>): Internal.ImmutableList<E>;
        static copyOf<E>(arg0: Internal.Collection<E>): Internal.ImmutableList<E>;
        static copyOf<E>(arg0: Internal.Iterable<E>): Internal.ImmutableList<E>;
        static builderWithExpectedSize<E>(arg0: number): Internal.ImmutableList$Builder<E>;
        lastIndexOf(arg0: object): number;
        contains(arg0: object): boolean;
        size(): number;
        addAll(arg0: number, arg1: Internal.Collection<E>): boolean;
        equals(arg0: object): boolean;
        static toImmutableList<E>(): Internal.Collector<E, object, Internal.ImmutableList<E>>;
        listIterator(arg0: number): Internal.ListIterator<any>;
        listIterator(arg0: number): Internal.UnmodifiableListIterator<E>;
        listIterator(): Internal.ListIterator<any>;
        listIterator(): Internal.UnmodifiableListIterator<E>;
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Closeable implements Internal.AutoCloseable {
        close(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Enumeration <E> {
        hasMoreElements(): boolean;
        asIterator(): Internal.Iterator<E>;
        nextElement(): E;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class HitResult {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface LevelWriter {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class LongSerializationPolicy extends Internal.Enum<Internal.LongSerializationPolicy> {
        serialize(arg0: number): Internal.JsonElement;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(arg0: string): Internal.LongSerializationPolicy;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.LongSerializationPolicy[];
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly STRING : Internal.LongSerializationPolicy;
        static readonly DEFAULT : Internal.LongSerializationPolicy;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Products$P3 <F, T1, T2, T3> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        apply<R>(arg0: Internal.Applicative<F, object>, arg1: Internal.Function3<T1, T2, T3, R>): Internal.App<F, R>;
        apply<R>(arg0: Internal.Applicative<F, object>, arg1: Internal.App<F, Internal.Function3<T1, T2, T3, R>>): Internal.App<F, R>;
        hashCode(): number;
        and<T4, T5, T6, T7>(arg0: Internal.Products$P4<F, T4, T5, T6, T7>): Internal.Products$P7<F, T1, T2, T3, T4, T5, T6, T7>;
        and<T4, T5, T6, T7, T8>(arg0: Internal.Products$P5<F, T4, T5, T6, T7, T8>): Internal.Products$P8<F, T1, T2, T3, T4, T5, T6, T7, T8>;
        and<T4>(arg0: Internal.App<F, T4>): Internal.Products$P4<F, T1, T2, T3, T4>;
        and<T4, T5>(arg0: Internal.Products$P2<F, T4, T5>): Internal.Products$P5<F, T1, T2, T3, T4, T5>;
        and<T4, T5, T6>(arg0: Internal.Products$P3<F, T4, T5, T6>): Internal.Products$P6<F, T1, T2, T3, T4, T5, T6>;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        t1(): Internal.App<F, T1>;
        notify(): void;
        t2(): Internal.App<F, T2>;
        t3(): Internal.App<F, T3>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface TemporalAccessor {
        getLong(arg0: Internal.TemporalField): number;
        query<R>(arg0: Internal.TemporalQuery<R>): R;
        get(arg0: Internal.TemporalField): number;
        range(arg0: Internal.TemporalField): Internal.ValueRange;
        isSupported(arg0: Internal.TemporalField): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface FormattedCharSequence {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface EquipmentEntity {
        lithiumOnEquipmentChanged(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class GenericLootEventJS extends Internal.LootEventJS {
        cancel(): void;
        addGeneric(id: ResourceLocation, b: (arg0: Internal.LootBuilder) => void): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isCancelled(): boolean;
        notifyAll(): void;
        addJson(id: ResourceLocation, json: Internal.JsonObject): void;
        notify(): void;
        removeAll(): void;
        post(t: Internal.ScriptType, id: string, sub: string): boolean;
        post(t: Internal.ScriptType, id: string): boolean;
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        canCancel(): boolean;
        get type(): string;
        get directory(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Long2FloatFunction implements it.unimi.dsi.fastutil.Function<number, number>, Internal.LongToDoubleFunction {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        applyAsDouble(arg0: number): number;
        andThenShort(arg0: Internal.Float2ShortFunction): Internal.Long2ShortFunction;
        composeByte(arg0: Internal.Byte2LongFunction): Internal.Byte2FloatFunction;
        andThenInt(arg0: Internal.Float2IntFunction): Internal.Long2IntFunction;
        composeReference<T>(arg0: Internal.Reference2LongFunction<T>): Internal.Reference2FloatFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: number) => T;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: number): number;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: object): object;
        remove(arg0: object): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Float2DoubleFunction): Internal.Long2DoubleFunction;
        andThenObject<T>(arg0: Internal.Float2ObjectFunction<T>): Internal.Long2ObjectFunction<T>;
        get(arg0: object): number;
        get(arg0: object): object;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Float2LongFunction): Internal.Long2LongFunction;
        composeLong(arg0: Internal.Long2LongFunction): Internal.Long2FloatFunction;
        andThenByte(arg0: Internal.Float2ByteFunction): Internal.Long2ByteFunction;
        andThenFloat(arg0: Internal.Float2FloatFunction): Internal.Long2FloatFunction;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2LongFunction): Internal.Int2FloatFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2LongFunction): Internal.Float2FloatFunction;
        andThenChar(arg0: Internal.Float2CharFunction): Internal.Long2CharFunction;
        composeObject<T>(arg0: Internal.Object2LongFunction<T>): Internal.Object2FloatFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => number;
        composeShort(arg0: Internal.Short2LongFunction): Internal.Short2FloatFunction;
        andThenReference<T>(arg0: Internal.Float2ReferenceFunction<T>): Internal.Long2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2LongFunction): Internal.Char2FloatFunction;
        composeDouble(arg0: Internal.Double2LongFunction): Internal.Double2FloatFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface PrivilegedAction <T> {
        run(): T;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class RoundingMode extends Internal.Enum<Internal.RoundingMode> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(arg0: string): Internal.RoundingMode;
        static valueOf(arg0: number): Internal.RoundingMode;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.RoundingMode[];
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly DOWN : Internal.RoundingMode;
        static readonly FLOOR : Internal.RoundingMode;
        static readonly UNNECESSARY : Internal.RoundingMode;
        static readonly CEILING : Internal.RoundingMode;
        static readonly HALF_EVEN : Internal.RoundingMode;
        static readonly UP : Internal.RoundingMode;
        static readonly HALF_UP : Internal.RoundingMode;
        static readonly HALF_DOWN : Internal.RoundingMode;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Byte2ByteFunction implements it.unimi.dsi.fastutil.Function<number, number>, Internal.IntUnaryOperator {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: number, arg1: number): number;
        getOrDefault(arg0: object, arg1: number): number;
        andThenShort(arg0: Internal.Byte2ShortFunction): Internal.Byte2ShortFunction;
        composeByte(arg0: Internal.Byte2ByteFunction): Internal.Byte2ByteFunction;
        andThenInt(arg0: Internal.Byte2IntFunction): Internal.Byte2IntFunction;
        composeReference<T>(arg0: Internal.Reference2ByteFunction<T>): Internal.Reference2ByteFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: number) => T;
        andThen(arg0: Internal.IntUnaryOperator): Internal.IntUnaryOperator;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: number): number;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: object): object;
        remove(arg0: object): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Byte2DoubleFunction): Internal.Byte2DoubleFunction;
        andThenObject<T>(arg0: Internal.Byte2ObjectFunction<T>): Internal.Byte2ObjectFunction<T>;
        get(arg0: object): number;
        get(arg0: object): object;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Byte2LongFunction): Internal.Byte2LongFunction;
        composeLong(arg0: Internal.Long2ByteFunction): Internal.Long2ByteFunction;
        andThenByte(arg0: Internal.Byte2ByteFunction): Internal.Byte2ByteFunction;
        andThenFloat(arg0: Internal.Byte2FloatFunction): Internal.Byte2FloatFunction;
        applyAsInt(arg0: number): number;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2ByteFunction): Internal.Int2ByteFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2ByteFunction): Internal.Float2ByteFunction;
        andThenChar(arg0: Internal.Byte2CharFunction): Internal.Byte2CharFunction;
        composeObject<T>(arg0: Internal.Object2ByteFunction<T>): Internal.Object2ByteFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => number;
        compose(arg0: Internal.IntUnaryOperator): Internal.IntUnaryOperator;
        composeShort(arg0: Internal.Short2ByteFunction): Internal.Short2ByteFunction;
        andThenReference<T>(arg0: Internal.Byte2ReferenceFunction<T>): Internal.Byte2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2ByteFunction): Internal.Char2ByteFunction;
        composeDouble(arg0: Internal.Double2ByteFunction): Internal.Double2ByteFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class FoodBuilder {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        removeEffect(mobEffect: Internal.MobEffect): Internal.FoodBuilder;
        notifyAll(): void;
        alwaysEdible(flag: boolean): Internal.FoodBuilder;
        alwaysEdible(): Internal.FoodBuilder;
        fastToEat(flag: boolean): Internal.FoodBuilder;
        fastToEat(): Internal.FoodBuilder;
        notify(): void;
        hunger(h: number): Internal.FoodBuilder;
        saturation(s: number): Internal.FoodBuilder;
        build(): Internal.FoodProperties;
        hashCode(): number;
        equals(arg0: object): boolean;
        effect(mobEffectId: ResourceLocation, duration: number, amplifier: number, probability: number): Internal.FoodBuilder;
        meat(flag: boolean): Internal.FoodBuilder;
        meat(): Internal.FoodBuilder;
        toString(): string;
        eaten(e: (arg0: Internal.ItemFoodEatenEventJS) => void): Internal.FoodBuilder;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface UnaryOperator <T> implements Internal.Function<T, T> {
        apply(arg0: T): R;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class LunarEventInstance {
        getEvent(arg0: Map<string, Internal.LunarEvent>): Internal.LunarEvent;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        scheduledDay(): number;
        hashCode(): number;
        setScheduledDay(arg0: number): void;
        notifyAll(): void;
        equals(arg0: object): boolean;
        active(arg0: number): boolean;
        toString(): string;
        getDaysUntil(arg0: number): number;
        passed(arg0: number): boolean;
        notify(): void;
        static readonly CODEC : Internal.Codec<Internal.LunarEventInstance>;
        get lunarEventKey(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ContextAction <T> {
        run(arg0: Internal.Context): T;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Encoder <A> {
        encode<T>(arg0: A, arg1: Internal.DynamicOps<T>, arg2: T): Internal.DataResult<T>;
        flatComap<B>(arg0: (arg0: B) => Internal.DataResult<A>): Internal.Encoder<B>;
        comap<B>(arg0: (arg0: B) => A): Internal.Encoder<B>;
        fieldOf(arg0: string): Internal.MapEncoder<A>;
        withLifecycle(arg0: Internal.Lifecycle): Internal.Encoder<A>;
        encodeStart<T>(arg0: Internal.DynamicOps<T>, arg1: A): Internal.DataResult<T>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Slot implements Internal.SlotAccessor {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        isSameInventory(arg0: Internal.Slot): boolean;
        setBackground(arg0: ResourceLocation, arg1: ResourceLocation): Internal.Slot;
        notify(): void;
        set y(arg0: number);
        set x(arg0: number);
        get slotIndex(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class Direction$Axis extends Internal.Enum<Internal.Direction$Axis> implements Internal.StringRepresentable, Internal.Predicate<Internal.Direction> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        or(arg0: (arg0: T) => boolean): (arg0: T) => boolean;
        test(arg0: Internal.Direction): boolean;
        test(arg0: object): boolean;
        static valueOf(arg0: string): Internal.Direction$Axis;
        notifyAll(): void;
        static values(): Internal.Direction$Axis[];
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        and(arg0: (arg0: T) => boolean): (arg0: T) => boolean;
        negate(): (arg0: T) => boolean;
        hashCode(): number;
        equals(arg0: object): boolean;
        name(): string;
        toString(): string;
        ordinal(): number;
        static readonly X : Internal.Direction$Axis;
        static readonly Y : Internal.Direction$Axis;
        static readonly Z : Internal.Direction$Axis;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class AbstractObjectList <K> extends Internal.AbstractObjectCollection<K> implements Internal.ObjectList<K>, Internal.Stack<K> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        compareTo(arg0: object): number;
        compareTo(arg0: Internal.List<K>): number;
        replaceAll(arg0: Internal.UnaryOperator<E>): void;
        notify(): void;
        remove(arg0: number): K;
        remove(arg0: object): boolean;
        pop(): K;
        iterator(): Internal.Iterator<any>;
        iterator(): Internal.ObjectListIterator<K>;
        iterator(): Internal.ObjectIterator<any>;
        top(): K;
        addElements(arg0: number, arg1: K[]): void;
        addElements(arg0: number, arg1: K[], arg2: number, arg3: number): void;
        hashCode(): number;
        get(arg0: number): E;
        toArray<T>(arg0: T[]): T[];
        toArray(): object[];
        indexOf(arg0: object): number;
        add(arg0: K): boolean;
        add(arg0: number, arg1: K): void;
        subList(arg0: number, arg1: number): Internal.List<any>;
        subList(arg0: number, arg1: number): Internal.ObjectList<K>;
        set(arg0: number, arg1: K): K;
        spliterator(): Internal.Spliterator<any>;
        spliterator(): Internal.ObjectSpliterator<K>;
        forEach(arg0: (arg0: K) => void): void;
        isEmpty(): boolean;
        clear(): void;
        setElements(arg0: number, arg1: K[], arg2: number, arg3: number): void;
        setElements(arg0: number, arg1: K[]): void;
        sort(arg0: Internal.Comparator<K>): void;
        removeElements(arg0: number, arg1: number): void;
        push(arg0: K): void;
        peek(arg0: number): K;
        lastIndexOf(arg0: object): number;
        contains(arg0: object): boolean;
        size(arg0: number): void;
        size(): number;
        addAll(arg0: number, arg1: Internal.Collection<K>): boolean;
        addAll(arg0: Internal.Collection<K>): boolean;
        addAll(arg0: Internal.ObjectList<K>): boolean;
        addAll(arg0: number, arg1: Internal.ObjectList<K>): boolean;
        getElements(arg0: number, arg1: object[], arg2: number, arg3: number): void;
        equals(arg0: object): boolean;
        listIterator(arg0: number): Internal.ListIterator<any>;
        listIterator(arg0: number): Internal.ObjectListIterator<K>;
        listIterator(): Internal.ObjectListIterator<K>;
        listIterator(): Internal.ListIterator<any>;
        toString(): string;
        unstableSort(arg0: Internal.Comparator<K>): void;
        set elements(arg0: K[]);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface MethodHandleDesc implements Internal.ConstantDesc {
        invocationType(): Internal.MethodTypeDesc;
        equals(arg0: object): boolean;
        resolveConstantDesc(arg0: Internal.MethodHandles$Lookup): object;
        asType(arg0: Internal.MethodTypeDesc): Internal.MethodHandleDesc;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface BidirectionalIterator <K> implements Internal.Iterator<K> {
        next(): E;
        previous(): K;
        hasPrevious(): boolean;
        hasNext(): boolean;
        remove(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface FileFilter {
        accept(arg0: Internal.File): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Key implements Internal.Serializable {
        get encoded(): number[];
        get algorithm(): string;
        get format(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Applicative <F, Mu> implements Internal.Functor<F, Mu> {
        point<A>(arg0: A): Internal.App<F, A>;
        apply2<A, B, R>(arg0: (arg0: A, arg1: B) => R, arg1: Internal.App<F, A>, arg2: Internal.App<F, B>): Internal.App<F, R>;
        apply3<T1, T2, T3, R>(arg0: Internal.Function3<T1, T2, T3, R>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>): Internal.App<F, R>;
        ap2<A, B, R>(arg0: Internal.App<F, (arg0: A, arg1: B) => R>, arg1: Internal.App<F, A>, arg2: Internal.App<F, B>): Internal.App<F, R>;
        apply4<T1, T2, T3, T4, R>(arg0: Internal.Function4<T1, T2, T3, T4, R>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>): Internal.App<F, R>;
        ap11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R>(arg0: Internal.App<F, Internal.Function11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R>>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>, arg6: Internal.App<F, T6>, arg7: Internal.App<F, T7>, arg8: Internal.App<F, T8>, arg9: Internal.App<F, T9>, arg10: Internal.App<F, T10>, arg11: Internal.App<F, T11>): Internal.App<F, R>;
        apply5<T1, T2, T3, T4, T5, R>(arg0: Internal.Function5<T1, T2, T3, T4, T5, R>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>): Internal.App<F, R>;
        ap10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>(arg0: Internal.App<F, Internal.Function10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>, arg6: Internal.App<F, T6>, arg7: Internal.App<F, T7>, arg8: Internal.App<F, T8>, arg9: Internal.App<F, T9>, arg10: Internal.App<F, T10>): Internal.App<F, R>;
        ap4<T1, T2, T3, T4, R>(arg0: Internal.App<F, Internal.Function4<T1, T2, T3, T4, R>>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>): Internal.App<F, R>;
        lift2<A, B, R>(arg0: Internal.App<F, (arg0: A, arg1: B) => R>): (arg0: Internal.App<F, A>, arg1: Internal.App<F, B>) => Internal.App<F, R>;
        ap3<T1, T2, T3, R>(arg0: Internal.App<F, Internal.Function3<T1, T2, T3, R>>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>): Internal.App<F, R>;
        lift1<A, R>(arg0: Internal.App<F, (arg0: A) => R>): (arg0: Internal.App<F, A>) => Internal.App<F, R>;
        ap6<T1, T2, T3, T4, T5, T6, R>(arg0: Internal.App<F, Internal.Function6<T1, T2, T3, T4, T5, T6, R>>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>, arg6: Internal.App<F, T6>): Internal.App<F, R>;
        ap5<T1, T2, T3, T4, T5, R>(arg0: Internal.App<F, Internal.Function5<T1, T2, T3, T4, T5, R>>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>): Internal.App<F, R>;
        lift6<T1, T2, T3, T4, T5, T6, R>(arg0: Internal.App<F, Internal.Function6<T1, T2, T3, T4, T5, T6, R>>): Internal.Function6<Internal.App<F, T1>, Internal.App<F, T2>, Internal.App<F, T3>, Internal.App<F, T4>, Internal.App<F, T5>, Internal.App<F, T6>, Internal.App<F, R>>;
        ap8<T1, T2, T3, T4, T5, T6, T7, T8, R>(arg0: Internal.App<F, Internal.Function8<T1, T2, T3, T4, T5, T6, T7, T8, R>>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>, arg6: Internal.App<F, T6>, arg7: Internal.App<F, T7>, arg8: Internal.App<F, T8>): Internal.App<F, R>;
        ap7<T1, T2, T3, T4, T5, T6, T7, R>(arg0: Internal.App<F, Internal.Function7<T1, T2, T3, T4, T5, T6, T7, R>>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>, arg6: Internal.App<F, T6>, arg7: Internal.App<F, T7>): Internal.App<F, R>;
        lift5<T1, T2, T3, T4, T5, R>(arg0: Internal.App<F, Internal.Function5<T1, T2, T3, T4, T5, R>>): Internal.Function5<Internal.App<F, T1>, Internal.App<F, T2>, Internal.App<F, T3>, Internal.App<F, T4>, Internal.App<F, T5>, Internal.App<F, R>>;
        lift4<T1, T2, T3, T4, R>(arg0: Internal.App<F, Internal.Function4<T1, T2, T3, T4, R>>): Internal.Function4<Internal.App<F, T1>, Internal.App<F, T2>, Internal.App<F, T3>, Internal.App<F, T4>, Internal.App<F, R>>;
        ap9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>(arg0: Internal.App<F, Internal.Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>, arg6: Internal.App<F, T6>, arg7: Internal.App<F, T7>, arg8: Internal.App<F, T8>, arg9: Internal.App<F, T9>): Internal.App<F, R>;
        lift3<T1, T2, T3, R>(arg0: Internal.App<F, Internal.Function3<T1, T2, T3, R>>): Internal.Function3<Internal.App<F, T1>, Internal.App<F, T2>, Internal.App<F, T3>, Internal.App<F, R>>;
        apply6<T1, T2, T3, T4, T5, T6, R>(arg0: Internal.Function6<T1, T2, T3, T4, T5, T6, R>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>, arg6: Internal.App<F, T6>): Internal.App<F, R>;
        apply7<T1, T2, T3, T4, T5, T6, T7, R>(arg0: Internal.Function7<T1, T2, T3, T4, T5, T6, T7, R>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>, arg6: Internal.App<F, T6>, arg7: Internal.App<F, T7>): Internal.App<F, R>;
        lift9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>(arg0: Internal.App<F, Internal.Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>>): Internal.Function9<Internal.App<F, T1>, Internal.App<F, T2>, Internal.App<F, T3>, Internal.App<F, T4>, Internal.App<F, T5>, Internal.App<F, T6>, Internal.App<F, T7>, Internal.App<F, T8>, Internal.App<F, T9>, Internal.App<F, R>>;
        apply8<T1, T2, T3, T4, T5, T6, T7, T8, R>(arg0: Internal.Function8<T1, T2, T3, T4, T5, T6, T7, T8, R>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>, arg6: Internal.App<F, T6>, arg7: Internal.App<F, T7>, arg8: Internal.App<F, T8>): Internal.App<F, R>;
        lift8<T1, T2, T3, T4, T5, T6, T7, T8, R>(arg0: Internal.App<F, Internal.Function8<T1, T2, T3, T4, T5, T6, T7, T8, R>>): Internal.Function8<Internal.App<F, T1>, Internal.App<F, T2>, Internal.App<F, T3>, Internal.App<F, T4>, Internal.App<F, T5>, Internal.App<F, T6>, Internal.App<F, T7>, Internal.App<F, T8>, Internal.App<F, R>>;
        apply9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>(arg0: Internal.Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>, arg6: Internal.App<F, T6>, arg7: Internal.App<F, T7>, arg8: Internal.App<F, T8>, arg9: Internal.App<F, T9>): Internal.App<F, R>;
        lift7<T1, T2, T3, T4, T5, T6, T7, R>(arg0: Internal.App<F, Internal.Function7<T1, T2, T3, T4, T5, T6, T7, R>>): Internal.Function7<Internal.App<F, T1>, Internal.App<F, T2>, Internal.App<F, T3>, Internal.App<F, T4>, Internal.App<F, T5>, Internal.App<F, T6>, Internal.App<F, T7>, Internal.App<F, R>>;
        ap<A, R>(arg0: Internal.App<F, (arg0: A) => R>, arg1: Internal.App<F, A>): Internal.App<F, R>;
        ap<A, R>(arg0: (arg0: A) => R, arg1: Internal.App<F, A>): Internal.App<F, R>;
        ap16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R>(arg0: Internal.App<F, Internal.Function16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R>>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>, arg6: Internal.App<F, T6>, arg7: Internal.App<F, T7>, arg8: Internal.App<F, T8>, arg9: Internal.App<F, T9>, arg10: Internal.App<F, T10>, arg11: Internal.App<F, T11>, arg12: Internal.App<F, T12>, arg13: Internal.App<F, T13>, arg14: Internal.App<F, T14>, arg15: Internal.App<F, T15>, arg16: Internal.App<F, T16>): Internal.App<F, R>;
        ap13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R>(arg0: Internal.App<F, Internal.Function13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R>>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>, arg6: Internal.App<F, T6>, arg7: Internal.App<F, T7>, arg8: Internal.App<F, T8>, arg9: Internal.App<F, T9>, arg10: Internal.App<F, T10>, arg11: Internal.App<F, T11>, arg12: Internal.App<F, T12>, arg13: Internal.App<F, T13>): Internal.App<F, R>;
        ap12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R>(arg0: Internal.App<F, Internal.Function12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R>>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>, arg6: Internal.App<F, T6>, arg7: Internal.App<F, T7>, arg8: Internal.App<F, T8>, arg9: Internal.App<F, T9>, arg10: Internal.App<F, T10>, arg11: Internal.App<F, T11>, arg12: Internal.App<F, T12>): Internal.App<F, R>;
        ap15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R>(arg0: Internal.App<F, Internal.Function15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R>>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>, arg6: Internal.App<F, T6>, arg7: Internal.App<F, T7>, arg8: Internal.App<F, T8>, arg9: Internal.App<F, T9>, arg10: Internal.App<F, T10>, arg11: Internal.App<F, T11>, arg12: Internal.App<F, T12>, arg13: Internal.App<F, T13>, arg14: Internal.App<F, T14>, arg15: Internal.App<F, T15>): Internal.App<F, R>;
        ap14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R>(arg0: Internal.App<F, Internal.Function14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R>>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>, arg6: Internal.App<F, T6>, arg7: Internal.App<F, T7>, arg8: Internal.App<F, T8>, arg9: Internal.App<F, T9>, arg10: Internal.App<F, T10>, arg11: Internal.App<F, T11>, arg12: Internal.App<F, T12>, arg13: Internal.App<F, T13>, arg14: Internal.App<F, T14>): Internal.App<F, R>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Class <T> implements Internal.Serializable, Internal.GenericDeclaration, Internal.Type, Internal.AnnotatedElement, Internal.TypeDescriptor$OfField<Internal.Class<object>>, Internal.Constable {
        isSealed(): boolean;
        getResource(arg0: string): Internal.URL;
        isLocalClass(): boolean;
        isSynthetic(): boolean;
        getMethod(arg0: string, arg1: Internal.Class<object>[]): Internal.Method;
        describeConstable(): Internal.Optional<Internal.ClassDesc>;
        isMemberClass(): boolean;
        cast(arg0: object): T;
        isInstance(arg0: object): boolean;
        isInterface(): boolean;
        arrayType(): Internal.TypeDescriptor$OfField<any>;
        arrayType(): Internal.Class<object>;
        asSubclass<U>(arg0: Internal.Class<U>): Internal.Class<U>;
        getField(arg0: string): Internal.Field;
        descriptorString(): string;
        newInstance(): T;
        getAnnotation<A>(arg0: Internal.Class<A>): A;
        getComponentType(): Internal.Class<object>;
        getDeclaredAnnotation<A>(arg0: Internal.Class<A>): A;
        isArray(): boolean;
        isPrimitive(): boolean;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isAnnotation(): boolean;
        isAnnotationPresent(arg0: Internal.Class<Internal.Annotation>): boolean;
        notifyAll(): void;
        desiredAssertionStatus(): boolean;
        isAssignableFrom(arg0: Internal.Class<object>): boolean;
        notify(): void;
        getAnnotationsByType<A>(arg0: Internal.Class<A>): A[];
        hashCode(): number;
        toGenericString(): string;
        isNestmateOf(arg0: Internal.Class<object>): boolean;
        getDeclaredField(arg0: string): Internal.Field;
        componentType(): Internal.TypeDescriptor$OfField<any>;
        componentType(): Internal.Class<object>;
        static forName(arg0: string, arg1: boolean, arg2: Internal.ClassLoader): Internal.Class<object>;
        static forName(arg0: string): Internal.Class<object>;
        static forName(arg0: Internal.Module, arg1: string): Internal.Class<object>;
        getResourceAsStream(arg0: string): Internal.InputStream;
        isRecord(): boolean;
        getDeclaredMethod(arg0: string, arg1: Internal.Class<object>[]): Internal.Method;
        isEnum(): boolean;
        getDeclaredConstructor(arg0: Internal.Class<object>[]): Internal.Constructor<T>;
        getConstructor(arg0: Internal.Class<object>[]): Internal.Constructor<T>;
        isHidden(): boolean;
        getDeclaredAnnotationsByType<A>(arg0: Internal.Class<A>): A[];
        equals(arg0: object): boolean;
        isAnonymousClass(): boolean;
        toString(): string;
        get module(): Internal.Module;
        get name(): string;
        get canonicalName(): string;
        get declaredFields(): Internal.Field[];
        get enclosingMethod(): Internal.Method;
        get permittedSubclasses(): Internal.Class<object>[];
        get signers(): object[];
        get typeParameters(): Internal.TypeVariable<Internal.Class<T>>[];
        get package(): Internal.Package;
        get nestHost(): Internal.Class<object>;
        get interfaces(): Internal.Class<object>[];
        get annotatedInterfaces(): Internal.AnnotatedType[];
        get fields(): Internal.Field[];
        get recordComponents(): Internal.RecordComponent[];
        get simpleName(): string;
        get packageName(): string;
        get methods(): Internal.Method[];
        get protectionDomain(): Internal.ProtectionDomain;
        get declaredConstructors(): Internal.Constructor<object>[];
        get nestMembers(): Internal.Class<object>[];
        get genericInterfaces(): Internal.Type[];
        get classLoader(): Internal.ClassLoader;
        get declaredAnnotations(): Internal.Annotation[];
        get declaredMethods(): Internal.Method[];
        get declaringClass(): Internal.Class<object>;
        get constructors(): Internal.Constructor<object>[];
        get annotatedSuperclass(): Internal.AnnotatedType;
        get modifiers(): number;
        get typeName(): string;
        get enclosingConstructor(): Internal.Constructor<object>;
        get classes(): Internal.Class<object>[];
        get superclass(): Internal.Class<T>;
        get annotations(): Internal.Annotation[];
        get enumConstants(): T[];
        get declaredClasses(): Internal.Class<object>[];
        get enclosingClass(): Internal.Class<object>;
        get genericSuperclass(): Internal.Type;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface DoubleStream implements Internal.BaseStream<number, Internal.DoubleStream> {
        average(): Internal.OptionalDouble;
        sequential(): Internal.BaseStream<any, any>;
        sequential(): Internal.DoubleStream;
        takeWhile(arg0: Internal.DoublePredicate): Internal.DoubleStream;
        distinct(): Internal.DoubleStream;
        findFirst(): Internal.OptionalDouble;
        sum(): number;
        skip(arg0: number): Internal.DoubleStream;
        allMatch(arg0: Internal.DoublePredicate): boolean;
        mapToObj<U>(arg0: Internal.DoubleFunction<U>): Internal.Stream<U>;
        mapMulti(arg0: Internal.DoubleStream$DoubleMapMultiConsumer): Internal.DoubleStream;
        iterator(): Internal.PrimitiveIterator$OfDouble;
        iterator(): Internal.Iterator<any>;
        min(): Internal.OptionalDouble;
        mapToLong(arg0: Internal.DoubleToLongFunction): Internal.LongStream;
        parallel(): Internal.BaseStream<any, any>;
        parallel(): Internal.DoubleStream;
        noneMatch(arg0: Internal.DoublePredicate): boolean;
        findAny(): Internal.OptionalDouble;
        isParallel(): boolean;
        limit(arg0: number): Internal.DoubleStream;
        toArray(): number[];
        forEachOrdered(arg0: Internal.DoubleConsumer): void;
        close(): void;
        anyMatch(arg0: Internal.DoublePredicate): boolean;
        map(arg0: Internal.DoubleUnaryOperator): Internal.DoubleStream;
        unordered(): S;
        reduce(arg0: number, arg1: Internal.DoubleBinaryOperator): number;
        reduce(arg0: Internal.DoubleBinaryOperator): Internal.OptionalDouble;
        spliterator(): Internal.Spliterator<any>;
        spliterator(): Internal.Spliterator$OfDouble;
        max(): Internal.OptionalDouble;
        forEach(arg0: Internal.DoubleConsumer): void;
        count(): number;
        dropWhile(arg0: Internal.DoublePredicate): Internal.DoubleStream;
        peek(arg0: Internal.DoubleConsumer): Internal.DoubleStream;
        flatMap(arg0: Internal.DoubleFunction<Internal.DoubleStream>): Internal.DoubleStream;
        filter(arg0: Internal.DoublePredicate): Internal.DoubleStream;
        onClose(arg0: Internal.Runnable): S;
        sorted(): Internal.DoubleStream;
        boxed(): Internal.Stream<number>;
        summaryStatistics(): Internal.DoubleSummaryStatistics;
        mapToInt(arg0: Internal.DoubleToIntFunction): Internal.IntStream;
        collect<R>(arg0: () => R, arg1: Internal.ObjDoubleConsumer<R>, arg2: (arg0: R, arg1: R) => void): R;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Duration implements Internal.TemporalAmount, Internal.Comparable<Internal.Duration>, Internal.Serializable {
        negated(): Internal.Duration;
        plusHours(arg0: number): Internal.Duration;
        compareTo(arg0: object): number;
        compareTo(arg0: Internal.Duration): number;
        multipliedBy(arg0: number): Internal.Duration;
        plusSeconds(arg0: number): Internal.Duration;
        toMillis(): number;
        static from(arg0: Internal.TemporalAmount): Internal.Duration;
        plusNanos(arg0: number): Internal.Duration;
        static ofMinutes(arg0: number): Internal.Duration;
        static between(arg0: Internal.Temporal, arg1: Internal.Temporal): Internal.Duration;
        static ofSeconds(arg0: number, arg1: number): Internal.Duration;
        static ofSeconds(arg0: number): Internal.Duration;
        truncatedTo(arg0: Internal.TemporalUnit): Internal.Duration;
        minusNanos(arg0: number): Internal.Duration;
        toMillisPart(): number;
        plus(arg0: Internal.Duration): Internal.Duration;
        plus(arg0: number, arg1: Internal.TemporalUnit): Internal.Duration;
        toMinutesPart(): number;
        toNanos(): number;
        toMinutes(): number;
        toHours(): number;
        plusMillis(arg0: number): Internal.Duration;
        subtractFrom(arg0: Internal.Temporal): Internal.Temporal;
        toSecondsPart(): number;
        static ofMillis(arg0: number): Internal.Duration;
        minus(arg0: Internal.Duration): Internal.Duration;
        minus(arg0: number, arg1: Internal.TemporalUnit): Internal.Duration;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        minusHours(arg0: number): Internal.Duration;
        notifyAll(): void;
        withSeconds(arg0: number): Internal.Duration;
        minusMillis(arg0: number): Internal.Duration;
        plusMinutes(arg0: number): Internal.Duration;
        notify(): void;
        toSeconds(): number;
        dividedBy(arg0: number): Internal.Duration;
        dividedBy(arg0: Internal.Duration): number;
        minusMinutes(arg0: number): Internal.Duration;
        plusDays(arg0: number): Internal.Duration;
        hashCode(): number;
        static of(arg0: number, arg1: Internal.TemporalUnit): Internal.Duration;
        get(arg0: Internal.TemporalUnit): number;
        isZero(): boolean;
        toDays(): number;
        toNanosPart(): number;
        isNegative(): boolean;
        static ofDays(arg0: number): Internal.Duration;
        static parse(arg0: Internal.CharSequence): Internal.Duration;
        minusDays(arg0: number): Internal.Duration;
        toHoursPart(): number;
        toDaysPart(): number;
        static ofNanos(arg0: number): Internal.Duration;
        abs(): Internal.Duration;
        static ofHours(arg0: number): Internal.Duration;
        withNanos(arg0: number): Internal.Duration;
        equals(arg0: object): boolean;
        addTo(arg0: Internal.Temporal): Internal.Temporal;
        toString(): string;
        minusSeconds(arg0: number): Internal.Duration;
        static readonly ZERO : Internal.Duration;
        get nano(): number;
        get seconds(): number;
        get units(): Internal.List<Internal.TemporalUnit>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class BlockIDPredicate implements Internal.BlockPredicate {
        with(key: string, value: string): Internal.BlockIDPredicate;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        checkState(state: Internal.BlockState): boolean;
        toString(): string;
        check(b: Internal.BlockContainerJS): boolean;
        notify(): void;
        get blockProperties(): Internal.List<Internal.BlockIDPredicate$PropertyObject>;
        get blockState(): Internal.BlockState;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface LootItemCondition implements Internal.LootContextUser, Internal.Predicate<Internal.LootContext>, Internal.ILootHandler, Internal.LootItemConditionMixin {
        test(arg0: T): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class VertexFormat implements Internal.BufferVertexFormat {
        hasColor(): boolean;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hasPosition(): boolean;
        hasNormal(): boolean;
        hashCode(): number;
        notifyAll(): void;
        getOffset(arg0: number): number;
        equals(arg0: object): boolean;
        toString(): string;
        hasUV(arg0: number): boolean;
        notify(): void;
        get stride(): number;
        get elementMapping(): Internal.ImmutableMap<string, Internal.VertexFormatElement>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Object2ObjectFunction <K, V> implements it.unimi.dsi.fastutil.Function<K, V> {
        getOrDefault(arg0: object, arg1: V): V;
        andThenShort(arg0: Internal.Object2ShortFunction<V>): Internal.Object2ShortFunction<K>;
        composeByte(arg0: Internal.Byte2ObjectFunction<K>): Internal.Byte2ObjectFunction<V>;
        andThenInt(arg0: Internal.Object2IntFunction<V>): Internal.Object2IntFunction<K>;
        composeReference<T>(arg0: (arg0: T) => K): (arg0: T) => V;
        put(arg0: K, arg1: V): V;
        remove(arg0: object): V;
        defaultReturnValue(): V;
        defaultReturnValue(arg0: V): void;
        andThenDouble(arg0: Internal.Object2DoubleFunction<V>): Internal.Object2DoubleFunction<K>;
        andThenObject<T>(arg0: (arg0: V) => T): (arg0: K) => T;
        get(arg0: object): V;
        andThenLong(arg0: Internal.Object2LongFunction<V>): Internal.Object2LongFunction<K>;
        composeLong(arg0: Internal.Long2ObjectFunction<K>): Internal.Long2ObjectFunction<V>;
        andThenByte(arg0: Internal.Object2ByteFunction<V>): Internal.Object2ByteFunction<K>;
        andThenFloat(arg0: Internal.Object2FloatFunction<V>): Internal.Object2FloatFunction<K>;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        composeInt(arg0: Internal.Int2ObjectFunction<K>): Internal.Int2ObjectFunction<V>;
        clear(): void;
        composeFloat(arg0: Internal.Float2ObjectFunction<K>): Internal.Float2ObjectFunction<V>;
        andThenChar(arg0: Internal.Object2CharFunction<V>): Internal.Object2CharFunction<K>;
        composeObject<T>(arg0: (arg0: T) => K): (arg0: T) => V;
        size(): number;
        composeShort(arg0: Internal.Short2ObjectFunction<K>): Internal.Short2ObjectFunction<V>;
        andThenReference<T>(arg0: (arg0: V) => T): (arg0: K) => T;
        composeChar(arg0: Internal.Char2ObjectFunction<K>): Internal.Char2ObjectFunction<V>;
        composeDouble(arg0: Internal.Double2ObjectFunction<K>): Internal.Double2ObjectFunction<V>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ColorAccess {
        get colorRaw(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class BlockContainerJS implements Internal.SpecialEquality {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        spawnFireworks(fireworks: Internal.FireworksJS): void;
        notifyAll(): void;
        clearCache(): void;
        notify(): void;
        hashCode(): number;
        mergeEntityData(tag: Internal.CompoundTag): void;
        getInventory(facing: Internal.Direction): Internal.InventoryJS;
        getPlayersInRadius(radius: number): Internal.EntityArrayList;
        set(id: ResourceLocation, properties: Map<object, object>): void;
        set(id: ResourceLocation, properties: Map<object, object>, flags: number): void;
        set(id: ResourceLocation): void;
        hasTag(tag: ResourceLocation): boolean;
        offset(x: number, y: number, z: number): Internal.BlockContainerJS;
        offset(f: Internal.Direction): Internal.BlockContainerJS;
        offset(f: Internal.Direction, d: number): Internal.BlockContainerJS;
        createExplosion(): Internal.ExplosionJS;
        setBlockState(state: Internal.BlockState, flags: number): void;
        createEntity(id: ResourceLocation): Internal.EntityJS;
        spawnLightning(effectOnly: boolean, player: Internal.EntityJS): void;
        spawnLightning(effectOnly: boolean): void;
        equals(obj: object): boolean;
        toString(): string;
        specialEquals(o: object, shallow: boolean): boolean;
        readonly minecraftLevel : Internal.Level;
        get biomeId(): string;
        get item(): Internal.ItemStackJS;
        get up(): Internal.BlockContainerJS;
        get tags(): Internal.Collection<ResourceLocation>;
        get id(): string;
        get canSeeSky(): boolean;
        get east(): Internal.BlockContainerJS;
        get north(): Internal.BlockContainerJS;
        get pos(): BlockPos;
        set entityData(tag: Internal.CompoundTag);
        get dimension(): string;
        get entityId(): string;
        get light(): number;
        get west(): Internal.BlockContainerJS;
        get playersInRadius(): Internal.EntityArrayList;
        get down(): Internal.BlockContainerJS;
        get properties(): Map<string, string>;
        get entity(): Internal.BlockEntity;
        get material(): Internal.MaterialJS;
        get south(): Internal.BlockContainerJS;
        get level(): Internal.LevelJS;
        get x(): number;
        get y(): number;
        get z(): number;
        get entityData(): Internal.CompoundTag;
        get blockState(): Internal.BlockState;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ChannelProgressiveFuture implements Internal.ChannelFuture, Internal.ProgressiveFuture<void> {
        cancel(arg0: boolean): boolean;
        isCancelled(): boolean;
        removeListeners(arg0: Internal.GenericFutureListener<Internal.Future<void>>[]): Internal.ChannelProgressiveFuture;
        removeListeners(arg0: Internal.GenericFutureListener<Internal.Future<void>>[]): Internal.ChannelFuture;
        channel(): io.netty.channel.Channel;
        cause(): Internal.Throwable;
        awaitUninterruptibly(): Internal.ChannelProgressiveFuture;
        awaitUninterruptibly(): Internal.ChannelFuture;
        awaitUninterruptibly(arg0: number): boolean;
        awaitUninterruptibly(arg0: number, arg1: Internal.TimeUnit): boolean;
        removeListener(arg0: Internal.GenericFutureListener<Internal.Future<void>>): Internal.ChannelProgressiveFuture;
        isDone(): boolean;
        sync(): Internal.ChannelProgressiveFuture;
        sync(): Internal.ChannelFuture;
        isVoid(): boolean;
        syncUninterruptibly(): Internal.ChannelProgressiveFuture;
        syncUninterruptibly(): Internal.ChannelFuture;
        get(arg0: number, arg1: Internal.TimeUnit): V;
        get(): V;
        isCancellable(): boolean;
        await(): Internal.ChannelProgressiveFuture;
        await(): Internal.ChannelFuture;
        await(arg0: number, arg1: Internal.TimeUnit): boolean;
        await(arg0: number): boolean;
        addListeners(arg0: Internal.GenericFutureListener<Internal.Future<void>>[]): Internal.ChannelProgressiveFuture;
        addListeners(arg0: Internal.GenericFutureListener<Internal.Future<void>>[]): Internal.ChannelFuture;
        isSuccess(): boolean;
        addListener(arg0: Internal.GenericFutureListener<Internal.Future<void>>): Internal.ChannelProgressiveFuture;
        get now(): V;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ClientPlayerDataJS extends Internal.PlayerDataJS<Internal.Player, Internal.ClientPlayerJS> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        notify(): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        hasClientMod(): boolean;
        toString(): string;
        get player(): Internal.PlayerJS<any>;
        get player(): Internal.ClientPlayerJS;
        get name(): string;
        get profile(): Internal.GameProfile;
        get id(): Internal.UUID;
        get overworld(): Internal.LevelJS;
        get level(): Internal.ClientLevelJS;
        get minecraftPlayer(): Internal.Player;
        get data(): Internal.AttachedData;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface NeutralMob {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Set <E> implements Internal.Collection<E> {
        add(arg0: E): boolean;
        spliterator(): Internal.Spliterator<E>;
        containsAll(arg0: Internal.Collection<object>): boolean;
        isEmpty(): boolean;
        clear(): void;
        remove(arg0: object): boolean;
        removeAll(arg0: Internal.Collection<object>): boolean;
        contains(arg0: object): boolean;
        iterator(): Internal.Iterator<E>;
        size(): number;
        addAll(arg0: Internal.Collection<E>): boolean;
        hashCode(): number;
        equals(arg0: object): boolean;
        toArray<T>(arg0: T[]): T[];
        toArray(): object[];
        retainAll(arg0: Internal.Collection<object>): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class NetworkDirection extends Internal.Enum<Internal.NetworkDirection> {
        getEvent(arg0: Internal.ICustomPacket<object>, arg1: () => Internal.NetworkEvent$Context): Internal.NetworkEvent;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        static directionFor<T>(arg0: Internal.Class<T>): Internal.NetworkDirection;
        static valueOf(arg0: string): Internal.NetworkDirection;
        notifyAll(): void;
        static values(): Internal.NetworkDirection[];
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        buildPacket<T>(arg0: org.apache.commons.lang3.tuple.Pair<Internal.FriendlyByteBuf, number>, arg1: ResourceLocation): Internal.ICustomPacket<T>;
        hashCode(): number;
        equals(arg0: object): boolean;
        name(): string;
        toString(): string;
        reply(): Internal.NetworkDirection;
        ordinal(): number;
        static readonly LOGIN_TO_CLIENT : Internal.NetworkDirection;
        static readonly PLAY_TO_SERVER : Internal.NetworkDirection;
        static readonly LOGIN_TO_SERVER : Internal.NetworkDirection;
        static readonly PLAY_TO_CLIENT : Internal.NetworkDirection;
        get originationSide(): Internal.LogicalSide;
        get receptionSide(): Internal.LogicalSide;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class JsonElement {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        isJsonArray(): boolean;
        notify(): void;
        isJsonPrimitive(): boolean;
        hashCode(): number;
        isJsonObject(): boolean;
        isJsonNull(): boolean;
        deepCopy(): Internal.JsonElement;
        equals(arg0: object): boolean;
        toString(): string;
        get asFloat(): number;
        get asByte(): number;
        get asBigDecimal(): Internal.BigDecimal;
        get asNumber(): Internal.Number;
        get asCharacter(): string;
        get asString(): string;
        get asInt(): number;
        get asLong(): number;
        get asBigInteger(): Internal.BigInteger;
        get asJsonObject(): Internal.JsonObject;
        get asJsonNull(): Internal.JsonNull;
        get asDouble(): number;
        get asJsonArray(): Internal.JsonArray;
        get asJsonPrimitive(): Internal.JsonPrimitive;
        get asBoolean(): boolean;
        get asShort(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class SWMRNibbleArray {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        setNull(): void;
        notifyAll(): void;
        static fromVanilla(arg0: Internal.DataLayer): Internal.SWMRNibbleArray;
        notify(): void;
        updateVisible(): boolean;
        isUninitialisedUpdating(): boolean;
        getUpdating(arg0: number): number;
        getUpdating(arg0: number, arg1: number, arg2: number): number;
        isDirty(): boolean;
        isHiddenUpdating(): boolean;
        hashCode(): number;
        setHidden(): void;
        setFull(): void;
        getVisible(arg0: number): number;
        getVisible(arg0: number, arg1: number, arg2: number): number;
        set(arg0: number, arg1: number): void;
        set(arg0: number, arg1: number, arg2: number, arg3: number): void;
        isNullNibbleVisible(): boolean;
        isUninitialisedVisible(): boolean;
        setUninitialised(): void;
        toVanillaNibble(): Internal.DataLayer;
        isNullNibbleUpdating(): boolean;
        isInitialisedUpdating(): boolean;
        isInitialisedVisible(): boolean;
        isHiddenVisible(): boolean;
        equals(arg0: object): boolean;
        setZero(): void;
        toString(): string;
        setNonNull(): void;
        extrudeLower(arg0: Internal.SWMRNibbleArray): void;
        static readonly ARRAY_SIZE : 2048;
        get saveState(): Internal.SWMRNibbleArray$SaveState;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class InetAddress implements Internal.Serializable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isMCOrgLocal(): boolean;
        notifyAll(): void;
        notify(): void;
        isMCLinkLocal(): boolean;
        isLoopbackAddress(): boolean;
        isSiteLocalAddress(): boolean;
        isMulticastAddress(): boolean;
        hashCode(): number;
        static getByName(arg0: string): Internal.InetAddress;
        isMCNodeLocal(): boolean;
        isMCSiteLocal(): boolean;
        isReachable(arg0: number): boolean;
        isReachable(arg0: Internal.NetworkInterface, arg1: number, arg2: number): boolean;
        isMCGlobal(): boolean;
        static getAllByName(arg0: string): Internal.InetAddress[];
        isAnyLocalAddress(): boolean;
        isLinkLocalAddress(): boolean;
        equals(arg0: object): boolean;
        static getByAddress(arg0: number[]): Internal.InetAddress;
        static getByAddress(arg0: string, arg1: number[]): Internal.InetAddress;
        toString(): string;
        get loopbackAddress(): Internal.InetAddress;
        get address(): number[];
        get hostAddress(): string;
        get hostName(): string;
        get canonicalHostName(): string;
        get localHost(): Internal.InetAddress;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class JsonArray extends Internal.JsonElement implements Internal.Iterable<Internal.JsonElement> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        isJsonArray(): boolean;
        notify(): void;
        remove(arg0: number): Internal.JsonElement;
        remove(arg0: Internal.JsonElement): boolean;
        isJsonPrimitive(): boolean;
        iterator(): Internal.Iterator<Internal.JsonElement>;
        isJsonObject(): boolean;
        hashCode(): number;
        get(arg0: number): Internal.JsonElement;
        add(arg0: string): void;
        add(arg0: Internal.Number): void;
        add(arg0: Internal.JsonElement): void;
        add(arg0: string): void;
        add(arg0: boolean): void;
        set(arg0: number, arg1: Internal.JsonElement): Internal.JsonElement;
        spliterator(): Internal.Spliterator<T>;
        forEach(arg0: (arg0: T) => void): void;
        isJsonNull(): boolean;
        isEmpty(): boolean;
        deepCopy(): Internal.JsonElement;
        deepCopy(): Internal.JsonArray;
        contains(arg0: Internal.JsonElement): boolean;
        size(): number;
        addAll(arg0: Internal.JsonArray): void;
        equals(arg0: object): boolean;
        toString(): string;
        get asFloat(): number;
        get asByte(): number;
        get asBigDecimal(): Internal.BigDecimal;
        get asNumber(): Internal.Number;
        get asCharacter(): string;
        get asString(): string;
        get asInt(): number;
        get asLong(): number;
        get asBigInteger(): Internal.BigInteger;
        get asJsonObject(): Internal.JsonObject;
        get asJsonNull(): Internal.JsonNull;
        get asDouble(): number;
        get asJsonArray(): Internal.JsonArray;
        get asJsonPrimitive(): Internal.JsonPrimitive;
        get asBoolean(): boolean;
        get asShort(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ClientEventJS extends Internal.EventJS {
        cancel(): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isCancelled(): boolean;
        post(id: string, sub: string): boolean;
        post(id: string): boolean;
        post(t: Internal.ScriptType, id: string, sub: string): boolean;
        post(t: Internal.ScriptType, id: string): boolean;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        canCancel(): boolean;
        get level(): Internal.ClientLevelJS;
        get player(): Internal.ClientPlayerJS;
        get entity(): Internal.EntityJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ByteOrder {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static nativeOrder(): Internal.ByteOrder;
        toString(): string;
        notify(): void;
        static readonly BIG_ENDIAN : Internal.ByteOrder;
        static readonly LITTLE_ENDIAN : Internal.ByteOrder;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class RecordCodecBuilder$Instance <O> implements Internal.Applicative<Internal.RecordCodecBuilder$Mu<O>, Unknown<O>> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        deprecated<A>(arg0: A, arg1: number): Internal.App<Internal.RecordCodecBuilder$Mu<O>, A>;
        notify(): void;
        point<A>(arg0: A, arg1: Internal.Lifecycle): Internal.App<Internal.RecordCodecBuilder$Mu<O>, A>;
        point<A>(arg0: A): Internal.App<Internal.RecordCodecBuilder$Mu<O>, A>;
        hashCode(): number;
        map<T, R>(arg0: (arg0: T) => R, arg1: Internal.App<Internal.RecordCodecBuilder$Mu<O>, T>): Internal.App<Internal.RecordCodecBuilder$Mu<O>, R>;
        group<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(arg0: Internal.App<F, T1>, arg1: Internal.App<F, T2>, arg2: Internal.App<F, T3>, arg3: Internal.App<F, T4>, arg4: Internal.App<F, T5>, arg5: Internal.App<F, T6>, arg6: Internal.App<F, T7>, arg7: Internal.App<F, T8>, arg8: Internal.App<F, T9>, arg9: Internal.App<F, T10>, arg10: Internal.App<F, T11>): Internal.Products$P11<F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>;
        group<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(arg0: Internal.App<F, T1>, arg1: Internal.App<F, T2>, arg2: Internal.App<F, T3>, arg3: Internal.App<F, T4>, arg4: Internal.App<F, T5>, arg5: Internal.App<F, T6>, arg6: Internal.App<F, T7>, arg7: Internal.App<F, T8>, arg8: Internal.App<F, T9>, arg9: Internal.App<F, T10>): Internal.Products$P10<F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>;
        group<T1, T2, T3, T4, T5, T6, T7, T8, T9>(arg0: Internal.App<F, T1>, arg1: Internal.App<F, T2>, arg2: Internal.App<F, T3>, arg3: Internal.App<F, T4>, arg4: Internal.App<F, T5>, arg5: Internal.App<F, T6>, arg6: Internal.App<F, T7>, arg7: Internal.App<F, T8>, arg8: Internal.App<F, T9>): Internal.Products$P9<F, T1, T2, T3, T4, T5, T6, T7, T8, T9>;
        group<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(arg0: Internal.App<F, T1>, arg1: Internal.App<F, T2>, arg2: Internal.App<F, T3>, arg3: Internal.App<F, T4>, arg4: Internal.App<F, T5>, arg5: Internal.App<F, T6>, arg6: Internal.App<F, T7>, arg7: Internal.App<F, T8>, arg8: Internal.App<F, T9>, arg9: Internal.App<F, T10>, arg10: Internal.App<F, T11>, arg11: Internal.App<F, T12>, arg12: Internal.App<F, T13>, arg13: Internal.App<F, T14>, arg14: Internal.App<F, T15>, arg15: Internal.App<F, T16>): Internal.Products$P16<F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>;
        group<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(arg0: Internal.App<F, T1>, arg1: Internal.App<F, T2>, arg2: Internal.App<F, T3>, arg3: Internal.App<F, T4>, arg4: Internal.App<F, T5>, arg5: Internal.App<F, T6>, arg6: Internal.App<F, T7>, arg7: Internal.App<F, T8>, arg8: Internal.App<F, T9>, arg9: Internal.App<F, T10>, arg10: Internal.App<F, T11>, arg11: Internal.App<F, T12>, arg12: Internal.App<F, T13>, arg13: Internal.App<F, T14>, arg14: Internal.App<F, T15>): Internal.Products$P15<F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>;
        group<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(arg0: Internal.App<F, T1>, arg1: Internal.App<F, T2>, arg2: Internal.App<F, T3>, arg3: Internal.App<F, T4>, arg4: Internal.App<F, T5>, arg5: Internal.App<F, T6>, arg6: Internal.App<F, T7>, arg7: Internal.App<F, T8>, arg8: Internal.App<F, T9>, arg9: Internal.App<F, T10>, arg10: Internal.App<F, T11>, arg11: Internal.App<F, T12>, arg12: Internal.App<F, T13>, arg13: Internal.App<F, T14>): Internal.Products$P14<F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>;
        group<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(arg0: Internal.App<F, T1>, arg1: Internal.App<F, T2>, arg2: Internal.App<F, T3>, arg3: Internal.App<F, T4>, arg4: Internal.App<F, T5>, arg5: Internal.App<F, T6>, arg6: Internal.App<F, T7>, arg7: Internal.App<F, T8>, arg8: Internal.App<F, T9>, arg9: Internal.App<F, T10>, arg10: Internal.App<F, T11>, arg11: Internal.App<F, T12>, arg12: Internal.App<F, T13>): Internal.Products$P13<F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>;
        group<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(arg0: Internal.App<F, T1>, arg1: Internal.App<F, T2>, arg2: Internal.App<F, T3>, arg3: Internal.App<F, T4>, arg4: Internal.App<F, T5>, arg5: Internal.App<F, T6>, arg6: Internal.App<F, T7>, arg7: Internal.App<F, T8>, arg8: Internal.App<F, T9>, arg9: Internal.App<F, T10>, arg10: Internal.App<F, T11>, arg11: Internal.App<F, T12>): Internal.Products$P12<F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>;
        group<T1, T2, T3>(arg0: Internal.App<F, T1>, arg1: Internal.App<F, T2>, arg2: Internal.App<F, T3>): Internal.Products$P3<F, T1, T2, T3>;
        group<T1, T2>(arg0: Internal.App<F, T1>, arg1: Internal.App<F, T2>): Internal.Products$P2<F, T1, T2>;
        group<T1>(arg0: Internal.App<F, T1>): Internal.Products$P1<F, T1>;
        group<T1, T2, T3, T4, T5, T6, T7, T8>(arg0: Internal.App<F, T1>, arg1: Internal.App<F, T2>, arg2: Internal.App<F, T3>, arg3: Internal.App<F, T4>, arg4: Internal.App<F, T5>, arg5: Internal.App<F, T6>, arg6: Internal.App<F, T7>, arg7: Internal.App<F, T8>): Internal.Products$P8<F, T1, T2, T3, T4, T5, T6, T7, T8>;
        group<T1, T2, T3, T4, T5, T6, T7>(arg0: Internal.App<F, T1>, arg1: Internal.App<F, T2>, arg2: Internal.App<F, T3>, arg3: Internal.App<F, T4>, arg4: Internal.App<F, T5>, arg5: Internal.App<F, T6>, arg6: Internal.App<F, T7>): Internal.Products$P7<F, T1, T2, T3, T4, T5, T6, T7>;
        group<T1, T2, T3, T4, T5, T6>(arg0: Internal.App<F, T1>, arg1: Internal.App<F, T2>, arg2: Internal.App<F, T3>, arg3: Internal.App<F, T4>, arg4: Internal.App<F, T5>, arg5: Internal.App<F, T6>): Internal.Products$P6<F, T1, T2, T3, T4, T5, T6>;
        group<T1, T2, T3, T4, T5>(arg0: Internal.App<F, T1>, arg1: Internal.App<F, T2>, arg2: Internal.App<F, T3>, arg3: Internal.App<F, T4>, arg4: Internal.App<F, T5>): Internal.Products$P5<F, T1, T2, T3, T4, T5>;
        group<T1, T2, T3, T4>(arg0: Internal.App<F, T1>, arg1: Internal.App<F, T2>, arg2: Internal.App<F, T3>, arg3: Internal.App<F, T4>): Internal.Products$P4<F, T1, T2, T3, T4>;
        apply2<A, B, R>(arg0: (arg0: A, arg1: B) => R, arg1: Internal.App<F, A>, arg2: Internal.App<F, B>): Internal.App<F, R>;
        apply3<T1, T2, T3, R>(arg0: Internal.Function3<T1, T2, T3, R>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>): Internal.App<F, R>;
        apply4<T1, T2, T3, T4, R>(arg0: Internal.Function4<T1, T2, T3, T4, R>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>): Internal.App<F, R>;
        ap11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R>(arg0: Internal.App<F, Internal.Function11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R>>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>, arg6: Internal.App<F, T6>, arg7: Internal.App<F, T7>, arg8: Internal.App<F, T8>, arg9: Internal.App<F, T9>, arg10: Internal.App<F, T10>, arg11: Internal.App<F, T11>): Internal.App<F, R>;
        ap2<A, B, R>(arg0: Internal.App<Internal.RecordCodecBuilder$Mu<O>, (arg0: A, arg1: B) => R>, arg1: Internal.App<Internal.RecordCodecBuilder$Mu<O>, A>, arg2: Internal.App<Internal.RecordCodecBuilder$Mu<O>, B>): Internal.App<Internal.RecordCodecBuilder$Mu<O>, R>;
        apply5<T1, T2, T3, T4, T5, R>(arg0: Internal.Function5<T1, T2, T3, T4, T5, R>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>): Internal.App<F, R>;
        ap10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>(arg0: Internal.App<F, Internal.Function10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>, arg6: Internal.App<F, T6>, arg7: Internal.App<F, T7>, arg8: Internal.App<F, T8>, arg9: Internal.App<F, T9>, arg10: Internal.App<F, T10>): Internal.App<F, R>;
        lift2<A, B, R>(arg0: Internal.App<F, (arg0: A, arg1: B) => R>): (arg0: Internal.App<F, A>, arg1: Internal.App<F, B>) => Internal.App<F, R>;
        ap4<T1, T2, T3, T4, R>(arg0: Internal.App<Internal.RecordCodecBuilder$Mu<O>, Internal.Function4<T1, T2, T3, T4, R>>, arg1: Internal.App<Internal.RecordCodecBuilder$Mu<O>, T1>, arg2: Internal.App<Internal.RecordCodecBuilder$Mu<O>, T2>, arg3: Internal.App<Internal.RecordCodecBuilder$Mu<O>, T3>, arg4: Internal.App<Internal.RecordCodecBuilder$Mu<O>, T4>): Internal.App<Internal.RecordCodecBuilder$Mu<O>, R>;
        ap3<T1, T2, T3, R>(arg0: Internal.App<Internal.RecordCodecBuilder$Mu<O>, Internal.Function3<T1, T2, T3, R>>, arg1: Internal.App<Internal.RecordCodecBuilder$Mu<O>, T1>, arg2: Internal.App<Internal.RecordCodecBuilder$Mu<O>, T2>, arg3: Internal.App<Internal.RecordCodecBuilder$Mu<O>, T3>): Internal.App<Internal.RecordCodecBuilder$Mu<O>, R>;
        lift1<A, R>(arg0: Internal.App<Internal.RecordCodecBuilder$Mu<O>, (arg0: A) => R>): (arg0: Internal.App<Internal.RecordCodecBuilder$Mu<O>, A>) => Internal.App<Internal.RecordCodecBuilder$Mu<O>, R>;
        ap6<T1, T2, T3, T4, T5, T6, R>(arg0: Internal.App<F, Internal.Function6<T1, T2, T3, T4, T5, T6, R>>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>, arg6: Internal.App<F, T6>): Internal.App<F, R>;
        ap5<T1, T2, T3, T4, T5, R>(arg0: Internal.App<F, Internal.Function5<T1, T2, T3, T4, T5, R>>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>): Internal.App<F, R>;
        lift6<T1, T2, T3, T4, T5, T6, R>(arg0: Internal.App<F, Internal.Function6<T1, T2, T3, T4, T5, T6, R>>): Internal.Function6<Internal.App<F, T1>, Internal.App<F, T2>, Internal.App<F, T3>, Internal.App<F, T4>, Internal.App<F, T5>, Internal.App<F, T6>, Internal.App<F, R>>;
        ap8<T1, T2, T3, T4, T5, T6, T7, T8, R>(arg0: Internal.App<F, Internal.Function8<T1, T2, T3, T4, T5, T6, T7, T8, R>>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>, arg6: Internal.App<F, T6>, arg7: Internal.App<F, T7>, arg8: Internal.App<F, T8>): Internal.App<F, R>;
        ap7<T1, T2, T3, T4, T5, T6, T7, R>(arg0: Internal.App<F, Internal.Function7<T1, T2, T3, T4, T5, T6, T7, R>>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>, arg6: Internal.App<F, T6>, arg7: Internal.App<F, T7>): Internal.App<F, R>;
        lift5<T1, T2, T3, T4, T5, R>(arg0: Internal.App<F, Internal.Function5<T1, T2, T3, T4, T5, R>>): Internal.Function5<Internal.App<F, T1>, Internal.App<F, T2>, Internal.App<F, T3>, Internal.App<F, T4>, Internal.App<F, T5>, Internal.App<F, R>>;
        lift4<T1, T2, T3, T4, R>(arg0: Internal.App<F, Internal.Function4<T1, T2, T3, T4, R>>): Internal.Function4<Internal.App<F, T1>, Internal.App<F, T2>, Internal.App<F, T3>, Internal.App<F, T4>, Internal.App<F, R>>;
        ap9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>(arg0: Internal.App<F, Internal.Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>, arg6: Internal.App<F, T6>, arg7: Internal.App<F, T7>, arg8: Internal.App<F, T8>, arg9: Internal.App<F, T9>): Internal.App<F, R>;
        lift3<T1, T2, T3, R>(arg0: Internal.App<F, Internal.Function3<T1, T2, T3, R>>): Internal.Function3<Internal.App<F, T1>, Internal.App<F, T2>, Internal.App<F, T3>, Internal.App<F, R>>;
        apply6<T1, T2, T3, T4, T5, T6, R>(arg0: Internal.Function6<T1, T2, T3, T4, T5, T6, R>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>, arg6: Internal.App<F, T6>): Internal.App<F, R>;
        apply7<T1, T2, T3, T4, T5, T6, T7, R>(arg0: Internal.Function7<T1, T2, T3, T4, T5, T6, T7, R>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>, arg6: Internal.App<F, T6>, arg7: Internal.App<F, T7>): Internal.App<F, R>;
        lift9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>(arg0: Internal.App<F, Internal.Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>>): Internal.Function9<Internal.App<F, T1>, Internal.App<F, T2>, Internal.App<F, T3>, Internal.App<F, T4>, Internal.App<F, T5>, Internal.App<F, T6>, Internal.App<F, T7>, Internal.App<F, T8>, Internal.App<F, T9>, Internal.App<F, R>>;
        apply8<T1, T2, T3, T4, T5, T6, T7, T8, R>(arg0: Internal.Function8<T1, T2, T3, T4, T5, T6, T7, T8, R>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>, arg6: Internal.App<F, T6>, arg7: Internal.App<F, T7>, arg8: Internal.App<F, T8>): Internal.App<F, R>;
        lift8<T1, T2, T3, T4, T5, T6, T7, T8, R>(arg0: Internal.App<F, Internal.Function8<T1, T2, T3, T4, T5, T6, T7, T8, R>>): Internal.Function8<Internal.App<F, T1>, Internal.App<F, T2>, Internal.App<F, T3>, Internal.App<F, T4>, Internal.App<F, T5>, Internal.App<F, T6>, Internal.App<F, T7>, Internal.App<F, T8>, Internal.App<F, R>>;
        apply9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>(arg0: Internal.Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>, arg6: Internal.App<F, T6>, arg7: Internal.App<F, T7>, arg8: Internal.App<F, T8>, arg9: Internal.App<F, T9>): Internal.App<F, R>;
        lift7<T1, T2, T3, T4, T5, T6, T7, R>(arg0: Internal.App<F, Internal.Function7<T1, T2, T3, T4, T5, T6, T7, R>>): Internal.Function7<Internal.App<F, T1>, Internal.App<F, T2>, Internal.App<F, T3>, Internal.App<F, T4>, Internal.App<F, T5>, Internal.App<F, T6>, Internal.App<F, T7>, Internal.App<F, R>>;
        ap<A, R>(arg0: Internal.App<F, (arg0: A) => R>, arg1: Internal.App<F, A>): Internal.App<F, R>;
        ap<A, R>(arg0: (arg0: A) => R, arg1: Internal.App<F, A>): Internal.App<F, R>;
        stable<A>(arg0: A): Internal.App<Internal.RecordCodecBuilder$Mu<O>, A>;
        equals(arg0: object): boolean;
        ap16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R>(arg0: Internal.App<F, Internal.Function16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R>>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>, arg6: Internal.App<F, T6>, arg7: Internal.App<F, T7>, arg8: Internal.App<F, T8>, arg9: Internal.App<F, T9>, arg10: Internal.App<F, T10>, arg11: Internal.App<F, T11>, arg12: Internal.App<F, T12>, arg13: Internal.App<F, T13>, arg14: Internal.App<F, T14>, arg15: Internal.App<F, T15>, arg16: Internal.App<F, T16>): Internal.App<F, R>;
        toString(): string;
        ap13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R>(arg0: Internal.App<F, Internal.Function13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R>>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>, arg6: Internal.App<F, T6>, arg7: Internal.App<F, T7>, arg8: Internal.App<F, T8>, arg9: Internal.App<F, T9>, arg10: Internal.App<F, T10>, arg11: Internal.App<F, T11>, arg12: Internal.App<F, T12>, arg13: Internal.App<F, T13>): Internal.App<F, R>;
        ap12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R>(arg0: Internal.App<F, Internal.Function12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R>>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>, arg6: Internal.App<F, T6>, arg7: Internal.App<F, T7>, arg8: Internal.App<F, T8>, arg9: Internal.App<F, T9>, arg10: Internal.App<F, T10>, arg11: Internal.App<F, T11>, arg12: Internal.App<F, T12>): Internal.App<F, R>;
        ap15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R>(arg0: Internal.App<F, Internal.Function15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R>>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>, arg6: Internal.App<F, T6>, arg7: Internal.App<F, T7>, arg8: Internal.App<F, T8>, arg9: Internal.App<F, T9>, arg10: Internal.App<F, T10>, arg11: Internal.App<F, T11>, arg12: Internal.App<F, T12>, arg13: Internal.App<F, T13>, arg14: Internal.App<F, T14>, arg15: Internal.App<F, T15>): Internal.App<F, R>;
        ap14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R>(arg0: Internal.App<F, Internal.Function14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R>>, arg1: Internal.App<F, T1>, arg2: Internal.App<F, T2>, arg3: Internal.App<F, T3>, arg4: Internal.App<F, T4>, arg5: Internal.App<F, T5>, arg6: Internal.App<F, T6>, arg7: Internal.App<F, T7>, arg8: Internal.App<F, T8>, arg9: Internal.App<F, T9>, arg10: Internal.App<F, T10>, arg11: Internal.App<F, T11>, arg12: Internal.App<F, T12>, arg13: Internal.App<F, T13>, arg14: Internal.App<F, T14>): Internal.App<F, R>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface LevelAccessor implements Internal.CommonLevelAccessor, Internal.LevelTimeAccess {
        isAreaLoaded(arg0: BlockPos, arg1: number): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class Mob extends Internal.LivingEntity implements Internal.NavigatingEntity, Internal.EquipmentEntity, Internal.EquipmentEntity$EquipmentTrackingEntity {
        backpackedMoved(): boolean;
        updateNavigationRegistration(): void;
        onEndimationEnd(arg0: Internal.PlayableEndimation, arg1: Internal.PlayableEndimation): void;
        canBeRiddenInWater(arg0: Internal.Entity): boolean;
        handler$zzo000$tickHead(arg0: Internal.CallbackInfo): void;
        isEndimationPlaying(arg0: Internal.PlayableEndimation): boolean;
        isActive(): boolean;
        handler$zgm001$tick(arg0: Internal.CallbackInfo): void;
        create$callSpawnItemParticles(arg0: Internal.ItemStack, arg1: number): void;
        handler$zjn000$onUpdateFluidOnEyes(arg0: Internal.CallbackInfo): void;
        changeDimension(arg0: Internal.ServerLevel, arg1: Internal.ITeleporter): Internal.Entity;
        serializeNBT(): Internal.Tag;
        serializeNBT(): Internal.CompoundTag;
        invalidateCaps(): void;
        foodEatenKJS(is: Internal.ItemStack): void;
        revive(): void;
        canUpdate(): boolean;
        canUpdate(arg0: boolean): void;
        handler$bgc000$tryShortcutFluidPushing(tag: net.minecraft.tags.Tag<any>, speed: number, cir: Internal.CallbackInfoReturnable<any>, box: Internal.AABB, x1: number, x2: number, y1: number, y2: number, z1: number, z2: number, zero: number): void;
        resetEndimation(): void;
        areCapsCompatible(arg0: Internal.CapabilityDispatcher): boolean;
        getEyeHeightAccess(arg0: Internal.Pose, arg1: Internal.EntityDimensions): number;
        reviveCaps(): void;
        lithiumOnBlockCacheDeleted(): void;
        canRiderInteract(): boolean;
        getEntries(arg0: boolean): Internal.Set<any>;
        onAddedToWorld(): void;
        isRegisteredToWorld(): boolean;
        handler$zcp000$read(arg0: Internal.CompoundTag, arg1: Internal.CallbackInfo): void;
        canTrample(arg0: Internal.BlockState, arg1: BlockPos, arg2: number): boolean;
        getClassification(arg0: boolean): Internal.MobCategory;
        onEndimationStart(arg0: Internal.PlayableEndimation, arg1: Internal.PlayableEndimation): void;
        isNoEndimationPlaying(): boolean;
        lithiumSetClimbingMobCachingSectionUpdateBehavior(listenForCachedBlockChanges: boolean): void;
        shouldRiderSit(): boolean;
        getPickedResult(arg0: Internal.HitResult): Internal.ItemStack;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        lithiumOnEquipmentChanged(): void;
        lithiumOnBlockCacheSet(newState: Internal.BlockState): void;
        handler$zjn000$onUpdateFluidOnEyeAssign(arg0: Internal.CallbackInfo): void;
        notify(): void;
        handler$zzo000$moveStep(arg0: Internal.MoverType, arg1: Vec3, arg2: Internal.CallbackInfo): void;
        endimateTick(): void;
        isDirty(): boolean;
        hashCode(): number;
        isAddedToWorld(): boolean;
        addListener(listener: Internal.NearbyEntityListener): void;
        onRemovedFromWorld(): void;
        isMultipartEntity(): boolean;
        deserializeNBT(arg0: Internal.CompoundTag): void;
        deserializeNBT(arg0: Internal.Tag): void;
        curePotionEffects(arg0: Internal.ItemStack): boolean;
        clean(): void;
        asKJS(): object;
        getValue(arg0: Internal.TrackedData<any>): object;
        shouldRiderFaceForward(arg0: Internal.Player): boolean;
        setValue(arg0: Internal.TrackedData<any>, arg1: object): void;
        equals(arg0: object): boolean;
        toString(): string;
        set citadelEntityData(arg0: Internal.CompoundTag);
        get cachedFeetBlockState(): Internal.BlockState;
        get pos(): Internal.Position;
        get persistentDataKJS(): Internal.CompoundTag;
        get endimatedState(): Internal.Endimatable$EndimatedState;
        get registeredNavigation(): Internal.PathNavigation;
        get effectHandler(): Internal.EndimationEffectHandler;
        get dataEffectColorId_$md$85ada3$1(): Internal.EntityDataAccessor<any>;
        set animationTick(arg0: number);
        get citadelEntityData(): Internal.CompoundTag;
        get listener(): Internal.NearbyEntityListenerMulti;
        get isInsidePortal(): boolean;
        get persistentData(): Internal.CompoundTag;
        get remainingFireTicks(): number;
        get dataMap(): Map<any, any>;
        get entityChangeListener(): Internal.EntityInLevelCallback;
        set dataMap(arg0: Map<any, any>);
        get dataEffectAmbienceId_$md$85ada3$0(): Internal.EntityDataAccessor<any>;
        get lastPos(): BlockPos;
        set registeredToWorld(navigation: Internal.PathNavigation);
        get parts(): Internal.PartEntity<object>[];
        get playingEndimation(): Internal.PlayableEndimation;
        get dirtyEntries(): Internal.Set<any>;
        set playingEndimation(arg0: Internal.PlayableEndimation);
        get animationTick(): number;
        set remainingFireTicks(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class Reader implements Internal.Readable, Internal.Closeable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        read(arg0: string[]): number;
        read(arg0: string[], arg1: number, arg2: number): number;
        read(arg0: Internal.CharBuffer): number;
        read(): number;
        markSupported(): boolean;
        notifyAll(): void;
        skip(arg0: number): number;
        transferTo(arg0: Internal.Writer): number;
        notify(): void;
        static nullReader(): Internal.Reader;
        hashCode(): number;
        ready(): boolean;
        equals(arg0: object): boolean;
        reset(): void;
        toString(): string;
        close(): void;
        mark(arg0: number): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface EntityInLevelCallback {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Iterator <E> {
        next(): E;
        hasNext(): boolean;
        forEachRemaining(arg0: (arg0: E) => void): void;
        remove(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class DataLayer {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Subject implements Internal.Serializable {
        static getSubject(arg0: Internal.AccessControlContext): Internal.Subject;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        getPrivateCredentials<T>(arg0: Internal.Class<T>): Internal.Set<T>;
        notifyAll(): void;
        getPrincipals<T>(arg0: Internal.Class<T>): Internal.Set<T>;
        notify(): void;
        getPublicCredentials<T>(arg0: Internal.Class<T>): Internal.Set<T>;
        static doAsPrivileged<T>(arg0: Internal.Subject, arg1: Internal.PrivilegedAction<T>, arg2: Internal.AccessControlContext): T;
        static doAsPrivileged<T>(arg0: Internal.Subject, arg1: Internal.PrivilegedExceptionAction<T>, arg2: Internal.AccessControlContext): T;
        static doAs<T>(arg0: Internal.Subject, arg1: Internal.PrivilegedAction<T>): T;
        static doAs<T>(arg0: Internal.Subject, arg1: Internal.PrivilegedExceptionAction<T>): T;
        isReadOnly(): boolean;
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        setReadOnly(): void;
        get privateCredentials(): Internal.Set<object>;
        get principals(): Internal.Set<Internal.Principal>;
        get publicCredentials(): Internal.Set<object>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ScriptManager {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        loadFromDirectory(): void;
        load(): void;
        hashCode(): number;
        isClassAllowed(name: string): boolean;
        notifyAll(): void;
        equals(arg0: object): boolean;
        loadJavaClass(scope: Internal.Scriptable, args: object[]): Internal.NativeJavaClass;
        unload(): void;
        toString(): string;
        notify(): void;
        readonly exampleScript : string;
        readonly type : Internal.ScriptType;
        firstLoad : boolean;
        readonly directory : Internal.Path;
        readonly packs : Map<string, Internal.ScriptPack>;
        readonly events : Internal.EventsJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Delayed implements Internal.Comparable<Internal.Delayed> {
        getDelay(arg0: Internal.TimeUnit): number;
        compareTo(arg0: T): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class BlockLootEventJS extends Internal.LootEventJS {
        cancel(): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isCancelled(): boolean;
        addSimpleBlock(blocks: BlockStatePredicate, item: Internal.ItemStack): void;
        addSimpleBlock(blocks: BlockStatePredicate): void;
        notifyAll(): void;
        modifyBlock(blocks: BlockStatePredicate, b: (arg0: Internal.LootBuilder) => void): void;
        addJson(id: ResourceLocation, json: Internal.JsonObject): void;
        notify(): void;
        removeAll(): void;
        post(t: Internal.ScriptType, id: string, sub: string): boolean;
        post(t: Internal.ScriptType, id: string): boolean;
        build(blocks: BlockStatePredicate, b: (arg0: Internal.LootBuilder) => void): void;
        hashCode(): number;
        addBlock(blocks: BlockStatePredicate, b: (arg0: Internal.LootBuilder) => void): void;
        equals(arg0: object): boolean;
        toString(): string;
        canCancel(): boolean;
        get type(): string;
        get directory(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class StartupEventJS extends Internal.EventJS {
        cancel(): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isCancelled(): boolean;
        post(id: string): boolean;
        post(id: string, sub: string): boolean;
        post(t: Internal.ScriptType, id: string, sub: string): boolean;
        post(t: Internal.ScriptType, id: string): boolean;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        canCancel(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface LithiumDefaultedList {
        setUnstableInteractionConditions(): void;
        changedInteractionConditions(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Comparable <T> {
        compareTo(arg0: T): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ScriptSource {
        createStream(arg0: Internal.ScriptFileInfo): Internal.InputStream;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ObjectCollection <K> implements Internal.Collection<K>, Internal.ObjectIterable<K> {
        add(arg0: E): boolean;
        contains(arg0: object): boolean;
        iterator(): Internal.Iterator<any>;
        iterator(): Internal.ObjectIterator<K>;
        size(): number;
        spliterator(): Internal.ObjectSpliterator<K>;
        spliterator(): Internal.Spliterator<any>;
        hashCode(): number;
        equals(arg0: object): boolean;
        toArray<T>(arg0: T[]): T[];
        toArray(): object[];
        isEmpty(): boolean;
        clear(): void;
        remove(arg0: object): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface StructType <S> {
        create(): S;
        get layout(): Internal.BufferLayout;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class NonNullList <E> extends Internal.AbstractList<E> implements Internal.DefaultedListAccessor {
        add(arg0: number, arg1: E): void;
        add(arg0: E): boolean;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        set(arg0: number, arg1: E): E;
        notifyAll(): void;
        isEmpty(): boolean;
        clear(): void;
        notify(): void;
        remove(arg0: number): E;
        remove(arg0: object): boolean;
        lastIndexOf(arg0: object): number;
        contains(arg0: object): boolean;
        size(): number;
        hashCode(): number;
        equals(arg0: object): boolean;
        get(arg0: number): E;
        toArray(): object[];
        toArray<T>(arg0: T[]): T[];
        toString(): string;
        indexOf(arg0: object): number;
        get delegate(): Internal.List<any>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class LightTexture implements Internal.AutoCloseable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        close(): void;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class CallbackInfo implements Internal.Cancellable {
        cancel(): void;
        static getCallInfoClassName(arg0: org.objectweb.asm.Type): string;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isCancelled(): boolean;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        isCancellable(): boolean;
        toString(): string;
        notify(): void;
        get id(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class CapabilityDispatcher implements Internal.INBTSerializable<Internal.CompoundTag>, Internal.ICapabilityProvider {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        serializeNBT(): Internal.CompoundTag;
        serializeNBT(): Internal.Tag;
        getCapability<T>(arg0: Internal.Capability<T>, arg1: Internal.Direction): Internal.LazyOptional<T>;
        getCapability<T>(arg0: Internal.Capability<T>): Internal.LazyOptional<T>;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        deserializeNBT(arg0: Internal.Tag): void;
        deserializeNBT(arg0: Internal.CompoundTag): void;
        toString(): string;
        invalidate(): void;
        areCompatible(arg0: Internal.CapabilityDispatcher): boolean;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class CodeSource implements Internal.Serializable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        implies(arg0: Internal.CodeSource): boolean;
        notify(): void;
        get location(): Internal.URL;
        get codeSigners(): Internal.CodeSigner[];
        get certificates(): Internal.Certificate[];
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface RecvByteBufAllocator {
        newHandle(): Internal.RecvByteBufAllocator$Handle;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class FileChannel extends Internal.AbstractInterruptibleChannel implements Internal.SeekableByteChannel, Internal.GatheringByteChannel, Internal.ScatteringByteChannel {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        transferFrom(arg0: Internal.ReadableByteChannel, arg1: number, arg2: number): number;
        read(arg0: Internal.ByteBuffer): number;
        read(arg0: Internal.ByteBuffer, arg1: number): number;
        read(arg0: Internal.ByteBuffer[]): number;
        read(arg0: Internal.ByteBuffer[], arg1: number, arg2: number): number;
        notifyAll(): void;
        transferTo(arg0: number, arg1: number, arg2: Internal.WritableByteChannel): number;
        notify(): void;
        tryLock(arg0: number, arg1: number, arg2: boolean): Internal.FileLock;
        tryLock(): Internal.FileLock;
        isOpen(): boolean;
        truncate(arg0: number): Internal.SeekableByteChannel;
        truncate(arg0: number): Internal.FileChannel;
        size(): number;
        hashCode(): number;
        equals(arg0: object): boolean;
        lock(): Internal.FileLock;
        lock(arg0: number, arg1: number, arg2: boolean): Internal.FileLock;
        toString(): string;
        force(arg0: boolean): void;
        position(arg0: number): Internal.SeekableByteChannel;
        position(arg0: number): Internal.FileChannel;
        position(): number;
        close(): void;
        write(arg0: Internal.ByteBuffer, arg1: number): number;
        write(arg0: Internal.ByteBuffer): number;
        write(arg0: Internal.ByteBuffer[], arg1: number, arg2: number): number;
        write(arg0: Internal.ByteBuffer[]): number;
        map(arg0: Internal.FileChannel$MapMode, arg1: number, arg2: number): Internal.MappedByteBuffer;
        static open(arg0: Internal.Path, arg1: Internal.Set<Internal.OpenOption>, arg2: Internal.FileAttribute<object>[]): Internal.FileChannel;
        static open(arg0: Internal.Path, arg1: Internal.OpenOption[]): Internal.FileChannel;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class RenderStateShard implements Internal.RenderTypeAccess {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        get name(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ChronoLocalDateTime <D> implements Internal.Temporal, Internal.TemporalAdjuster, Internal.Comparable<Internal.ChronoLocalDateTime<object>> {
        minus(arg0: Internal.TemporalAmount): Internal.Temporal;
        minus(arg0: Internal.TemporalAmount): Internal.ChronoLocalDateTime<D>;
        minus(arg0: number, arg1: Internal.TemporalUnit): Internal.Temporal;
        minus(arg0: number, arg1: Internal.TemporalUnit): Internal.ChronoLocalDateTime<D>;
        isEqual(arg0: Internal.ChronoLocalDateTime<object>): boolean;
        toLocalTime(): Internal.LocalTime;
        adjustInto(arg0: Internal.Temporal): Internal.Temporal;
        range(arg0: Internal.TemporalField): Internal.ValueRange;
        compareTo(arg0: object): number;
        compareTo(arg0: Internal.ChronoLocalDateTime<object>): number;
        hashCode(): number;
        get(arg0: Internal.TemporalField): number;
        query<R>(arg0: Internal.TemporalQuery<R>): R;
        format(arg0: Internal.DateTimeFormatter): string;
        isSupported(arg0: Internal.TemporalUnit): boolean;
        isSupported(arg0: Internal.TemporalField): boolean;
        atZone(arg0: Internal.ZoneId): Internal.ChronoZonedDateTime<D>;
        toInstant(arg0: Internal.ZoneOffset): Internal.Instant;
        isBefore(arg0: Internal.ChronoLocalDateTime<object>): boolean;
        plus(arg0: number, arg1: Internal.TemporalUnit): Internal.Temporal;
        plus(arg0: number, arg1: Internal.TemporalUnit): Internal.ChronoLocalDateTime<D>;
        plus(arg0: Internal.TemporalAmount): Internal.ChronoLocalDateTime<D>;
        plus(arg0: Internal.TemporalAmount): Internal.Temporal;
        getLong(arg0: Internal.TemporalField): number;
        with(arg0: Internal.TemporalField, arg1: number): Internal.ChronoLocalDateTime<D>;
        with(arg0: Internal.TemporalField, arg1: number): Internal.Temporal;
        with(arg0: Internal.TemporalAdjuster): Internal.ChronoLocalDateTime<D>;
        with(arg0: Internal.TemporalAdjuster): Internal.Temporal;
        toLocalDate(): D;
        toEpochSecond(arg0: Internal.ZoneOffset): number;
        equals(arg0: object): boolean;
        until(arg0: Internal.Temporal, arg1: Internal.TemporalUnit): number;
        toString(): string;
        isAfter(arg0: Internal.ChronoLocalDateTime<object>): boolean;
        get chronology(): Internal.Chronology;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class LevelChunk extends Internal.ChunkAccess implements Internal.ICapabilityProviderImpl<Internal.LevelChunk>, corgitaco.enhancedcelestials.mixin.access.ChunkAccess, Internal.LevelHeightAccessor, Internal.ExtendedChunk {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        getCapability<T>(arg0: Internal.Capability<T>, arg1: Internal.Direction): Internal.LazyOptional<T>;
        getCapability<T>(arg0: Internal.Capability<T>): Internal.LazyOptional<T>;
        notifyAll(): void;
        notify(): void;
        readCapsFromNBT(arg0: Internal.CompoundTag): void;
        handler$bne000$onTransitionToFull(arg0: Internal.ServerLevel, arg1: Internal.ProtoChunk, arg2: Internal.LevelChunk$PostLoadProcessor, arg3: Internal.CallbackInfo): void;
        invalidateCaps(): void;
        hashCode(): number;
        localvar$bnj000$modifyHeightmapType(arg0: Internal.Heightmap$Types): Internal.Heightmap$Types;
        areCapsCompatible(arg0: Internal.CapabilityProvider<Internal.LevelChunk>): boolean;
        areCapsCompatible(arg0: Internal.CapabilityDispatcher): boolean;
        writeCapsToNBT(): Internal.CompoundTag;
        reviveCaps(): void;
        equals(arg0: object): boolean;
        handler$bne000$onConstruct(arg0: Internal.Level, arg1: Internal.ChunkPos, arg2: Internal.UpgradeData, arg3: Internal.LevelChunkTicks<any>, arg4: Internal.LevelChunkTicks<any>, arg5: number, arg6: Internal.LevelChunkSection[], arg7: Internal.LevelChunk$PostLoadProcessor, arg8: Internal.BlendingData, arg9: Internal.CallbackInfo): void;
        toString(): string;
        get worldForge(): Internal.LevelAccessor;
        get worldForge(): Internal.Level;
        set blockEmptinessMap(arg0: boolean[]);
        get skyEmptinessMap(): boolean[];
        set skyEmptinessMap(arg0: boolean[]);
        get blockEmptinessMap(): boolean[];
        get blockNibbles(): Internal.SWMRNibbleArray[];
        set skyNibbles(arg0: Internal.SWMRNibbleArray[]);
        get level(): Internal.Level;
        get skyNibbles(): Internal.SWMRNibbleArray[];
        set blockNibbles(arg0: Internal.SWMRNibbleArray[]);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class AndConditionBuilder implements Internal.ConditionsContainer<Internal.AndConditionBuilder> {
        killerPredicate(arg0: (arg0: Internal.EntityJS) => boolean): B;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        survivesExplosion(): B;
        notifyAll(): void;
        addCondition(arg0: Internal.LootItemCondition): Internal.ConditionsContainer<any>;
        addCondition(arg0: Internal.LootItemCondition): Internal.AndConditionBuilder;
        addCondition(arg0: Internal.LootItemCondition$Builder): B;
        matchFluid(arg0: string): B;
        customDistanceToPlayer(arg0: (arg0: Internal.DistancePredicateBuilder) => void): B;
        notify(): void;
        not(arg0: (arg0: Internal.NotConditionBuilder) => void): B;
        directKillerPredicate(arg0: (arg0: Internal.EntityJS) => boolean): B;
        matchEquip(arg0: EquipmentSlot, arg1: Internal.IngredientJS): B;
        and(arg0: (arg0: Internal.AndConditionBuilder) => void): B;
        hashCode(): number;
        matchLoot(arg0: Internal.IngredientJS): B;
        matchLoot(arg0: Internal.IngredientJS, arg1: boolean): B;
        anyBiome(arg0: string[]): B;
        distanceToKiller(arg0: Internal.MinMaxBounds$Doubles): B;
        matchEntity(arg0: (arg0: Internal.EntityPredicateBuilderJS) => void): B;
        entityPredicate(arg0: (arg0: Internal.EntityJS) => boolean): B;
        anyDimension(arg0: ResourceLocation[]): B;
        killedByPlayer(): B;
        or(arg0: (arg0: Internal.OrConditionBuilder) => void): B;
        randomChance(arg0: number): B;
        timeCheck(arg0: number, arg1: number): B;
        timeCheck(arg0: number, arg1: number, arg2: number): B;
        matchOffHand(arg0: Internal.IngredientJS): B;
        playerPredicate(arg0: (arg0: Internal.PlayerJS<object>) => boolean): B;
        weatherCheck(arg0: Map<string, boolean>): B;
        matchDirectKiller(arg0: (arg0: Internal.EntityPredicateBuilderJS) => void): B;
        matchBlockState(arg0: Internal.Block, arg1: Map<string, string>): B;
        matchMainHand(arg0: Internal.IngredientJS): B;
        matchPlayer(arg0: (arg0: Internal.EntityPredicateBuilderJS) => void): B;
        lightLevel(arg0: number, arg1: number): B;
        build(): Internal.AndCondition;
        biome(arg0: string[]): B;
        customCondition(arg0: Internal.JsonObject): B;
        equals(arg0: object): boolean;
        matchKiller(arg0: (arg0: Internal.EntityPredicateBuilderJS) => void): B;
        randomChanceWithLooting(arg0: number, arg1: number): B;
        hasAnyStage(arg0: string[]): B;
        toString(): string;
        randomChanceWithEnchantment(arg0: Internal.Enchantment, arg1: number[]): B;
        matchDamageSource(arg0: (arg0: Internal.DamageSourcePredicateBuilderJS) => void): B;
        anyStructure(arg0: ResourceLocation[], arg1: boolean): B;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ClientLevelJS extends Internal.LevelJS {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        getPlayer(entity: Internal.Entity): Internal.PlayerJS<any>;
        getEntitiesWithin(aabb: Internal.AABB): Internal.EntityArrayList;
        getPlayerData(arg0: Internal.Player): Internal.PlayerDataJS<any, any>;
        getPlayerData(player: Internal.Player): Internal.ClientPlayerDataJS;
        spawnFireworks(x: number, y: number, z: number, f: Internal.FireworksJS): void;
        notifyAll(): void;
        notify(): void;
        hashCode(): number;
        isDaytime(): boolean;
        getMinecraftLevel(): Internal.Level;
        getMinecraftLevel(): Internal.ClientLevel;
        getLivingEntity(entity: Internal.Entity): Internal.LivingEntityJS;
        getBlock(x: number, y: number, z: number): Internal.BlockContainerJS;
        getBlock(pos: BlockPos): Internal.BlockContainerJS;
        getBlock(blockEntity: Internal.BlockEntity): Internal.BlockContainerJS;
        isOverworld(): boolean;
        createExplosion(x: number, y: number, z: number): Internal.ExplosionJS;
        getEntity(e: Internal.Entity): Internal.EntityJS;
        createEntity(id: ResourceLocation): Internal.EntityJS;
        spawnLightning(x: number, y: number, z: number, effectOnly: boolean): void;
        spawnLightning(x: number, y: number, z: number, effectOnly: boolean, player: Internal.EntityJS): void;
        equals(arg0: object): boolean;
        isThundering(): boolean;
        toString(): string;
        isRaining(): boolean;
        readonly clientPlayerData : Internal.ClientPlayerDataJS;
        readonly minecraftLevel : Internal.Level;
        get time(): number;
        get side(): Internal.ScriptType;
        get gameRules(): Internal.GameRulesJS;
        set rainStrength(strength: number);
        get minecraftPlayer(): Internal.LocalPlayer;
        get dimension(): string;
        get players(): Internal.EntityArrayList;
        get data(): Internal.AttachedData;
        get server(): Internal.ServerJS;
        get minecraft(): Internal.Minecraft;
        get localTime(): number;
        get entities(): Internal.EntityArrayList;
        get instance(): Internal.ClientLevelJS;
        set instance(instance: Internal.ClientLevelJS);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class LevelSettings {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Format$Field extends Internal.AttributedCharacterIterator$Attribute {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        static readonly LANGUAGE : Internal.AttributedCharacterIterator$Attribute;
        static readonly INPUT_METHOD_SEGMENT : Internal.AttributedCharacterIterator$Attribute;
        static readonly READING : Internal.AttributedCharacterIterator$Attribute;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class UnboundedMapCodec <K, V> implements Internal.BaseMapCodec<K, V>, Internal.Codec<Map<K, V>> {
        encode(arg0: object, arg1: Internal.DynamicOps<any>, arg2: object): Internal.DataResult<any>;
        encode<T>(arg0: Map<K, V>, arg1: Internal.DynamicOps<T>, arg2: T): Internal.DataResult<T>;
        encode<T>(arg0: Map<K, V>, arg1: Internal.DynamicOps<T>, arg2: Internal.RecordBuilder<T>): Internal.RecordBuilder<T>;
        flatComapMap<S>(arg0: (arg0: A) => S, arg1: (arg0: S) => Internal.DataResult<A>): Internal.Codec<S>;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        dispatch<E>(arg0: (arg0: E) => A, arg1: (arg0: A) => Internal.Codec<E>): Internal.Codec<E>;
        dispatch<E>(arg0: string, arg1: (arg0: E) => A, arg2: (arg0: A) => Internal.Codec<E>): Internal.Codec<E>;
        deprecated(arg0: number): Internal.Codec<A>;
        notifyAll(): void;
        simple(): Internal.Decoder$Simple<A>;
        dispatchMap<E>(arg0: string, arg1: (arg0: E) => A, arg2: (arg0: A) => Internal.Codec<E>): Internal.MapCodec<E>;
        dispatchMap<E>(arg0: (arg0: E) => A, arg1: (arg0: A) => Internal.Codec<E>): Internal.MapCodec<E>;
        comapFlatMap<S>(arg0: (arg0: A) => Internal.DataResult<S>, arg1: (arg0: S) => A): Internal.Codec<S>;
        decode<T>(arg0: Internal.DynamicOps<T>, arg1: T): Internal.DataResult<Internal.Pair<Map<K, V>, T>>;
        decode<T>(arg0: Internal.DynamicOps<T>, arg1: Internal.MapLike<T>): Internal.DataResult<Map<K, V>>;
        decode<T>(arg0: Internal.Dynamic<T>): Internal.DataResult<Internal.Pair<A, T>>;
        notify(): void;
        promotePartial(arg0: Internal.Consumer<any>): Internal.Decoder<any>;
        promotePartial(arg0: (arg0: string) => void): Internal.Codec<A>;
        flatXmap<S>(arg0: (arg0: A) => Internal.DataResult<S>, arg1: (arg0: S) => Internal.DataResult<A>): Internal.Codec<S>;
        hashCode(): number;
        comap<B>(arg0: (arg0: B) => A): Internal.Encoder<B>;
        fieldOf(arg0: string): Internal.MapEncoder<any>;
        fieldOf(arg0: string): Internal.MapDecoder<any>;
        fieldOf(arg0: string): Internal.MapCodec<A>;
        xmap<S>(arg0: (arg0: A) => S, arg1: (arg0: S) => A): Internal.Codec<S>;
        listOf(): Internal.Codec<Internal.List<A>>;
        map<B>(arg0: (arg0: A) => B): Internal.Decoder<B>;
        encodeStart<T>(arg0: Internal.DynamicOps<T>, arg1: A): Internal.DataResult<T>;
        optionalFieldOf(arg0: string, arg1: Internal.Lifecycle, arg2: A, arg3: Internal.Lifecycle): Internal.MapCodec<A>;
        optionalFieldOf(arg0: string): Internal.MapCodec<Internal.Optional<A>>;
        optionalFieldOf(arg0: string, arg1: A, arg2: Internal.Lifecycle): Internal.MapCodec<A>;
        optionalFieldOf(arg0: string, arg1: A): Internal.MapCodec<A>;
        flatComap<B>(arg0: (arg0: B) => Internal.DataResult<A>): Internal.Encoder<B>;
        keyCodec(): Internal.Codec<K>;
        partialDispatch<E>(arg0: string, arg1: (arg0: E) => Internal.DataResult<A>, arg2: (arg0: A) => Internal.DataResult<Internal.Codec<E>>): Internal.Codec<E>;
        terminal(): Internal.Decoder$Terminal<A>;
        parse<T>(arg0: Internal.Dynamic<T>): Internal.DataResult<A>;
        parse<T>(arg0: Internal.DynamicOps<T>, arg1: T): Internal.DataResult<A>;
        withLifecycle(arg0: Internal.Lifecycle): Internal.Decoder<any>;
        withLifecycle(arg0: Internal.Lifecycle): Internal.Encoder<any>;
        withLifecycle(arg0: Internal.Lifecycle): Internal.Codec<A>;
        orElse(arg0: A): Internal.Codec<A>;
        orElse(arg0: (arg0: string) => void, arg1: A): Internal.Codec<A>;
        orElse(arg0: Internal.UnaryOperator<string>, arg1: A): Internal.Codec<A>;
        flatMap<B>(arg0: (arg0: A) => Internal.DataResult<B>): Internal.Decoder<B>;
        elementCodec(): Internal.Codec<V>;
        boxed(): Internal.Decoder$Boxed<A>;
        dispatchStable<E>(arg0: (arg0: E) => A, arg1: (arg0: A) => Internal.Codec<E>): Internal.Codec<E>;
        orElseGet(arg0: Internal.UnaryOperator<string>, arg1: () => A): Internal.Codec<A>;
        orElseGet(arg0: () => A): Internal.Codec<A>;
        orElseGet(arg0: (arg0: string) => void, arg1: () => A): Internal.Codec<A>;
        stable(): Internal.Codec<A>;
        equals(arg0: object): boolean;
        mapResult(arg0: Internal.Codec$ResultFunction<A>): Internal.Codec<A>;
        toString(): string;
        static readonly FLOAT : Internal.PrimitiveCodec<number>;
        static readonly INT : Internal.PrimitiveCodec<number>;
        static readonly SHORT : Internal.PrimitiveCodec<number>;
        static readonly PASSTHROUGH : Internal.Codec<Internal.Dynamic<object>>;
        static readonly BOOL : Internal.PrimitiveCodec<boolean>;
        static readonly BYTE_BUFFER : Internal.PrimitiveCodec<Internal.ByteBuffer>;
        static readonly INT_STREAM : Internal.PrimitiveCodec<Internal.IntStream>;
        static readonly BYTE : Internal.PrimitiveCodec<number>;
        static readonly LONG_STREAM : Internal.PrimitiveCodec<Internal.LongStream>;
        static readonly STRING : Internal.PrimitiveCodec<string>;
        static readonly DOUBLE : Internal.PrimitiveCodec<number>;
        static readonly EMPTY : Internal.MapCodec<com.mojang.datafixers.util.Unit>;
        static readonly LONG : Internal.PrimitiveCodec<number>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class LunarEventClientSettings {
        createClient(): Internal.LunarEventClient<object>;
        codec(): Internal.Codec<Internal.LunarEventClientSettings>;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        static readonly CODEC : Internal.Codec<Internal.LunarEventClientSettings>;
        get moonSize(): number;
        get moonTextureLocation(): ResourceLocation;
        get soundTrack(): Internal.SoundEvent;
        get colorSettings(): Internal.ColorSettings;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class MobSpawnSettings$SpawnerData extends Internal.WeightedEntry$IntrusiveBase {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Instancer <D> {
        notifyRemoval(): void;
        createInstance(): D;
        createInstances(arg0: D[]): void;
        notifyDirty(): void;
        stealInstance(arg0: D): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class PainterObjectStorage {
        createScreenObjects(): Internal.ScreenPainterObject[];
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        getObject(key: string): Internal.PainterObject;
        createWorldObjects(): Internal.WorldPainterObject[];
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        clear(): void;
        toString(): string;
        handle(root: Internal.CompoundTag): void;
        notify(): void;
        remove(id: string): void;
        get objects(): Internal.Collection<Internal.PainterObject>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class VertexFormat$Mode extends Internal.Enum<Internal.VertexFormat$Mode> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(arg0: string): Internal.VertexFormat$Mode;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.VertexFormat$Mode[];
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly QUADS : Internal.VertexFormat$Mode;
        static readonly TRIANGLE_FAN : Internal.VertexFormat$Mode;
        static readonly DEBUG_LINES : Internal.VertexFormat$Mode;
        static readonly TRIANGLES : Internal.VertexFormat$Mode;
        static readonly DEBUG_LINE_STRIP : Internal.VertexFormat$Mode;
        static readonly LINE_STRIP : Internal.VertexFormat$Mode;
        static readonly LINES : Internal.VertexFormat$Mode;
        static readonly TRIANGLE_STRIP : Internal.VertexFormat$Mode;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Dynamic <T> extends Internal.DynamicLike<T> {
        updateGeneric(arg0: T, arg1: (arg0: T) => T): Internal.Dynamic<T>;
        getElementGeneric(arg0: T): Internal.DataResult<T>;
        getElementGeneric(arg0: T, arg1: T): T;
        asLongStreamOpt(): Internal.DataResult<Internal.LongStream>;
        updateMapValues(arg0: (arg0: Internal.Pair<Internal.Dynamic<object>, Internal.Dynamic<object>>) => Internal.Pair<Internal.Dynamic<object>, Internal.Dynamic<object>>): Internal.Dynamic<T>;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        asStreamOpt(): Internal.DataResult<Internal.Stream<Internal.Dynamic<T>>>;
        notifyAll(): void;
        update(arg0: string, arg1: (arg0: Internal.Dynamic<object>) => Internal.Dynamic<object>): Internal.Dynamic<T>;
        asIntStream(): Internal.IntStream;
        asByteBuffer(): Internal.ByteBuffer;
        static convert<S, T>(arg0: Internal.DynamicOps<S>, arg1: Internal.DynamicOps<T>, arg2: S): T;
        convert<R>(arg0: Internal.DynamicOps<R>): Internal.Dynamic<R>;
        asFloat(arg0: number): number;
        decode<A>(arg0: Internal.Decoder<A>): Internal.DataResult<Internal.Pair<A, T>>;
        asLongStream(): Internal.LongStream;
        asIntStreamOpt(): Internal.DataResult<Internal.IntStream>;
        notify(): void;
        remove(arg0: string): Internal.Dynamic<T>;
        asInt(arg0: number): number;
        into<V>(arg0: (arg0: Internal.Dynamic<T>) => V): V;
        cast<U>(arg0: Internal.DynamicOps<U>): U;
        asShort(arg0: number): number;
        hashCode(): number;
        merge(arg0: Internal.Dynamic<object>): Internal.OptionalDynamic<T>;
        merge(arg0: Internal.Dynamic<object>, arg1: Internal.Dynamic<object>): Internal.OptionalDynamic<T>;
        get(arg0: string): Internal.OptionalDynamic<T>;
        asString(): Internal.DataResult<string>;
        asString(arg0: string): string;
        map(arg0: (arg0: T) => T): Internal.Dynamic<T>;
        asByte(arg0: number): number;
        asByteBufferOpt(): Internal.DataResult<Internal.ByteBuffer>;
        set(arg0: string, arg1: Internal.Dynamic<object>): Internal.Dynamic<T>;
        getGeneric(arg0: T): Internal.DataResult<T>;
        asNumber(): Internal.DataResult<Internal.Number>;
        asNumber(arg0: Internal.Number): Internal.Number;
        asMapOpt(): Internal.DataResult<Internal.Stream<Internal.Pair<Internal.Dynamic<T>, Internal.Dynamic<T>>>>;
        castTyped<U>(arg0: Internal.DynamicOps<U>): Internal.Dynamic<U>;
        asLong(arg0: number): number;
        getElement(arg0: string): Internal.DataResult<T>;
        getElement(arg0: string, arg1: T): T;
        equals(arg0: object): boolean;
        asDouble(arg0: number): number;
        toString(): string;
        asBoolean(arg0: boolean): boolean;
        get mapValues(): Internal.DataResult<Map<Internal.Dynamic<T>, Internal.Dynamic<T>>>;
        get value(): T;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class LevelJS implements Internal.WithAttachedData {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        getPlayer(entity: Internal.Entity): Internal.PlayerJS<any>;
        getEntitiesWithin(aabb: Internal.AABB): Internal.EntityArrayList;
        getPlayerData(arg0: Internal.Player): Internal.PlayerDataJS<any, any>;
        spawnFireworks(x: number, y: number, z: number, f: Internal.FireworksJS): void;
        notifyAll(): void;
        notify(): void;
        hashCode(): number;
        isDaytime(): boolean;
        createEntityList(entities: Internal.Collection<Internal.Entity>): Internal.EntityArrayList;
        getMinecraftLevel(): Internal.Level;
        getLivingEntity(entity: Internal.Entity): Internal.LivingEntityJS;
        getBlock(x: number, y: number, z: number): Internal.BlockContainerJS;
        getBlock(pos: BlockPos): Internal.BlockContainerJS;
        getBlock(blockEntity: Internal.BlockEntity): Internal.BlockContainerJS;
        isOverworld(): boolean;
        createExplosion(x: number, y: number, z: number): Internal.ExplosionJS;
        getEntity(e: Internal.Entity): Internal.EntityJS;
        createEntity(id: ResourceLocation): Internal.EntityJS;
        spawnLightning(x: number, y: number, z: number, effectOnly: boolean): void;
        spawnLightning(x: number, y: number, z: number, effectOnly: boolean, player: Internal.EntityJS): void;
        equals(arg0: object): boolean;
        isThundering(): boolean;
        toString(): string;
        isRaining(): boolean;
        readonly minecraftLevel : Internal.Level;
        get time(): number;
        get side(): Internal.ScriptType;
        get gameRules(): Internal.GameRulesJS;
        set rainStrength(strength: number);
        get dimension(): string;
        get players(): Internal.EntityArrayList;
        get data(): Internal.AttachedData;
        get server(): Internal.ServerJS;
        get localTime(): number;
        get entities(): Internal.EntityArrayList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class LootTableEntry implements Internal.FunctionContainer, Internal.ConditionContainer {
        enchantWithLevels(levels: Internal.NumberProvider, treasure: boolean): Internal.FunctionContainer;
        damage(damage: Internal.NumberProvider): Internal.FunctionContainer;
        nbt(tag: Internal.CompoundTag): Internal.FunctionContainer;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        survivesExplosion(): Internal.ConditionContainer;
        notifyAll(): void;
        addConditionalFunction(func: (arg0: Internal.ConditionalFunction) => void): Internal.FunctionContainer;
        addCondition(o: Internal.JsonObject): Internal.LootTableEntry;
        addCondition(arg0: Internal.JsonObject): Internal.ConditionContainer;
        notify(): void;
        lootTable(table: ResourceLocation, seed: number): Internal.FunctionContainer;
        hashCode(): number;
        killedByPlayer(): Internal.ConditionContainer;
        randomChance(chance: number): Internal.ConditionContainer;
        addFunction(o: Internal.JsonObject): Internal.LootTableEntry;
        addFunction(arg0: Internal.JsonObject): Internal.FunctionContainer;
        count(count: Internal.NumberProvider): Internal.FunctionContainer;
        weight(weight: number): Internal.LootTableEntry;
        quality(quality: number): Internal.LootTableEntry;
        lootingEnchant(count: Internal.NumberProvider, limit: number): Internal.FunctionContainer;
        entityScores(entity: Internal.LootContext$EntityTarget, scores: Map<string, object>): Internal.ConditionContainer;
        copyName(source: Internal.CopyNameFunction$NameSource): Internal.FunctionContainer;
        equals(arg0: object): boolean;
        name(name: Internal.Text, entity: Internal.LootContext$EntityTarget): Internal.FunctionContainer;
        name(name: Internal.Text): Internal.FunctionContainer;
        randomChanceWithLooting(chance: number, multiplier: number): Internal.ConditionContainer;
        furnaceSmelt(): Internal.FunctionContainer;
        toString(): string;
        enchantRandomly(enchantments: ResourceLocation[]): Internal.FunctionContainer;
        entityProperties(entity: Internal.LootContext$EntityTarget, properties: Internal.JsonObject): Internal.ConditionContainer;
        readonly json : Internal.JsonObject;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Char2CharFunction implements it.unimi.dsi.fastutil.Function<string, string>, Internal.IntUnaryOperator {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: string, arg1: string): string;
        getOrDefault(arg0: object, arg1: string): string;
        andThenShort(arg0: Internal.Char2ShortFunction): Internal.Char2ShortFunction;
        composeByte(arg0: Internal.Byte2CharFunction): Internal.Byte2CharFunction;
        andThenInt(arg0: Internal.Char2IntFunction): Internal.Char2IntFunction;
        composeReference<T>(arg0: Internal.Reference2CharFunction<T>): Internal.Reference2CharFunction<T>;
        andThen<T>(arg0: (arg0: string) => T): (arg0: string) => T;
        andThen(arg0: Internal.IntUnaryOperator): Internal.IntUnaryOperator;
        put(arg0: object, arg1: object): object;
        put(arg0: string, arg1: string): string;
        put(arg0: string, arg1: string): string;
        remove(arg0: string): string;
        remove(arg0: object): object;
        remove(arg0: object): string;
        defaultReturnValue(arg0: string): void;
        defaultReturnValue(): string;
        andThenDouble(arg0: Internal.Char2DoubleFunction): Internal.Char2DoubleFunction;
        andThenObject<T>(arg0: Internal.Char2ObjectFunction<T>): Internal.Char2ObjectFunction<T>;
        get(arg0: object): string;
        get(arg0: object): object;
        get(arg0: string): string;
        andThenLong(arg0: Internal.Char2LongFunction): Internal.Char2LongFunction;
        composeLong(arg0: Internal.Long2CharFunction): Internal.Long2CharFunction;
        andThenByte(arg0: Internal.Char2ByteFunction): Internal.Char2ByteFunction;
        andThenFloat(arg0: Internal.Char2FloatFunction): Internal.Char2FloatFunction;
        applyAsInt(arg0: number): number;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: string): boolean;
        composeInt(arg0: Internal.Int2CharFunction): Internal.Int2CharFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2CharFunction): Internal.Float2CharFunction;
        andThenChar(arg0: Internal.Char2CharFunction): Internal.Char2CharFunction;
        composeObject<T>(arg0: Internal.Object2CharFunction<T>): Internal.Object2CharFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => string): (arg0: T) => string;
        compose(arg0: Internal.IntUnaryOperator): Internal.IntUnaryOperator;
        composeShort(arg0: Internal.Short2CharFunction): Internal.Short2CharFunction;
        andThenReference<T>(arg0: Internal.Char2ReferenceFunction<T>): Internal.Char2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2CharFunction): Internal.Char2CharFunction;
        composeDouble(arg0: Internal.Double2CharFunction): Internal.Double2CharFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface CustomJavaObjectWrapper {
        wrapAsJavaObject(arg0: Internal.Context, arg1: Internal.Scriptable, arg2: Internal.Class<object>): Internal.Scriptable;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface FlowMessage implements Internal.Message {
        get text(): string;
        get parameters(): object[];
        get formattedMessage(): string;
        get message(): Internal.Message;
        get format(): string;
        get throwable(): Internal.Throwable;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ErrorReporter {
        runtimeError(arg0: string, arg1: string, arg2: number, arg3: string, arg4: number): Internal.EvaluatorException;
        warning(arg0: string, arg1: string, arg2: number, arg3: string, arg4: number): void;
        error(arg0: string, arg1: string, arg2: number, arg3: string, arg4: number): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface UnbakedModel {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Inventory implements Internal.Container, Internal.Nameable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        handler$zbe000$removeItemTail(arg0: Internal.ItemStack, arg1: Internal.CallbackInfo): void;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Table$Cell <R, C, V> {
        hashCode(): number;
        equals(arg0: object): boolean;
        get value(): V;
        get columnKey(): C;
        get rowKey(): R;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class PartialModel {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        static onModelRegistry(arg0: Internal.ModelRegistryEvent): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        get(): Internal.BakedModel;
        toString(): string;
        static onModelBake(arg0: Internal.ModelBakeEvent): void;
        notify(): void;
        get location(): ResourceLocation;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface SlotAccessor {
        set y(arg0: number);
        set x(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class NotConditionBuilder implements Internal.ConditionsContainer<Internal.NotConditionBuilder> {
        killerPredicate(arg0: (arg0: Internal.EntityJS) => boolean): B;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        survivesExplosion(): B;
        notifyAll(): void;
        addCondition(arg0: Internal.LootItemCondition): Internal.ConditionsContainer<any>;
        addCondition(arg0: Internal.LootItemCondition): Internal.NotConditionBuilder;
        addCondition(arg0: Internal.LootItemCondition$Builder): B;
        matchFluid(arg0: string): B;
        customDistanceToPlayer(arg0: (arg0: Internal.DistancePredicateBuilder) => void): B;
        notify(): void;
        not(arg0: (arg0: Internal.NotConditionBuilder) => void): B;
        directKillerPredicate(arg0: (arg0: Internal.EntityJS) => boolean): B;
        matchEquip(arg0: EquipmentSlot, arg1: Internal.IngredientJS): B;
        and(arg0: (arg0: Internal.AndConditionBuilder) => void): B;
        hashCode(): number;
        matchLoot(arg0: Internal.IngredientJS): B;
        matchLoot(arg0: Internal.IngredientJS, arg1: boolean): B;
        anyBiome(arg0: string[]): B;
        distanceToKiller(arg0: Internal.MinMaxBounds$Doubles): B;
        matchEntity(arg0: (arg0: Internal.EntityPredicateBuilderJS) => void): B;
        entityPredicate(arg0: (arg0: Internal.EntityJS) => boolean): B;
        anyDimension(arg0: ResourceLocation[]): B;
        killedByPlayer(): B;
        or(arg0: (arg0: Internal.OrConditionBuilder) => void): B;
        randomChance(arg0: number): B;
        timeCheck(arg0: number, arg1: number): B;
        timeCheck(arg0: number, arg1: number, arg2: number): B;
        matchOffHand(arg0: Internal.IngredientJS): B;
        playerPredicate(arg0: (arg0: Internal.PlayerJS<object>) => boolean): B;
        weatherCheck(arg0: Map<string, boolean>): B;
        matchDirectKiller(arg0: (arg0: Internal.EntityPredicateBuilderJS) => void): B;
        matchBlockState(arg0: Internal.Block, arg1: Map<string, string>): B;
        matchMainHand(arg0: Internal.IngredientJS): B;
        matchPlayer(arg0: (arg0: Internal.EntityPredicateBuilderJS) => void): B;
        lightLevel(arg0: number, arg1: number): B;
        build(): Internal.InvertedLootItemCondition;
        biome(arg0: string[]): B;
        customCondition(arg0: Internal.JsonObject): B;
        equals(arg0: object): boolean;
        matchKiller(arg0: (arg0: Internal.EntityPredicateBuilderJS) => void): B;
        randomChanceWithLooting(arg0: number, arg1: number): B;
        hasAnyStage(arg0: string[]): B;
        toString(): string;
        randomChanceWithEnchantment(arg0: Internal.Enchantment, arg1: number[]): B;
        matchDamageSource(arg0: (arg0: Internal.DamageSourcePredicateBuilderJS) => void): B;
        anyStructure(arg0: ResourceLocation[], arg1: boolean): B;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class Projectile extends Internal.Entity {
        backpackedMoved(): boolean;
        onEndimationEnd(arg0: Internal.PlayableEndimation, arg1: Internal.PlayableEndimation): void;
        canBeRiddenInWater(arg0: Internal.Entity): boolean;
        handler$zzo000$tickHead(arg0: Internal.CallbackInfo): void;
        isEndimationPlaying(arg0: Internal.PlayableEndimation): boolean;
        isActive(): boolean;
        handler$zgm001$tick(arg0: Internal.CallbackInfo): void;
        handler$zjn000$onUpdateFluidOnEyes(arg0: Internal.CallbackInfo): void;
        changeDimension(arg0: Internal.ServerLevel, arg1: Internal.ITeleporter): Internal.Entity;
        serializeNBT(): Internal.Tag;
        serializeNBT(): Internal.CompoundTag;
        invalidateCaps(): void;
        revive(): void;
        canUpdate(): boolean;
        canUpdate(arg0: boolean): void;
        handler$bgc000$tryShortcutFluidPushing(tag: net.minecraft.tags.Tag<any>, speed: number, cir: Internal.CallbackInfoReturnable<any>, box: Internal.AABB, x1: number, x2: number, y1: number, y2: number, z1: number, z2: number, zero: number): void;
        resetEndimation(): void;
        areCapsCompatible(arg0: Internal.CapabilityDispatcher): boolean;
        getEyeHeightAccess(arg0: Internal.Pose, arg1: Internal.EntityDimensions): number;
        reviveCaps(): void;
        lithiumOnBlockCacheDeleted(): void;
        canRiderInteract(): boolean;
        getEntries(arg0: boolean): Internal.Set<any>;
        onAddedToWorld(): void;
        handler$zcp000$read(arg0: Internal.CompoundTag, arg1: Internal.CallbackInfo): void;
        canTrample(arg0: Internal.BlockState, arg1: BlockPos, arg2: number): boolean;
        getClassification(arg0: boolean): Internal.MobCategory;
        lithiumSetClimbingMobCachingSectionUpdateBehavior(listening: boolean): void;
        onEndimationStart(arg0: Internal.PlayableEndimation, arg1: Internal.PlayableEndimation): void;
        isNoEndimationPlaying(): boolean;
        shouldRiderSit(): boolean;
        getPickedResult(arg0: Internal.HitResult): Internal.ItemStack;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        lithiumOnBlockCacheSet(newState: Internal.BlockState): void;
        handler$zjn000$onUpdateFluidOnEyeAssign(arg0: Internal.CallbackInfo): void;
        notify(): void;
        handler$zzo000$moveStep(arg0: Internal.MoverType, arg1: Vec3, arg2: Internal.CallbackInfo): void;
        endimateTick(): void;
        isDirty(): boolean;
        hashCode(): number;
        isAddedToWorld(): boolean;
        addListener(listener: Internal.NearbyEntityListener): void;
        onRemovedFromWorld(): void;
        isMultipartEntity(): boolean;
        deserializeNBT(arg0: Internal.CompoundTag): void;
        deserializeNBT(arg0: Internal.Tag): void;
        clean(): void;
        asKJS(): object;
        getValue(arg0: Internal.TrackedData<any>): object;
        setValue(arg0: Internal.TrackedData<any>, arg1: object): void;
        equals(arg0: object): boolean;
        toString(): string;
        get cachedFeetBlockState(): Internal.BlockState;
        get pos(): Internal.Position;
        get persistentDataKJS(): Internal.CompoundTag;
        get endimatedState(): Internal.Endimatable$EndimatedState;
        get effectHandler(): Internal.EndimationEffectHandler;
        set animationTick(arg0: number);
        get listener(): Internal.NearbyEntityListenerMulti;
        get isInsidePortal(): boolean;
        get persistentData(): Internal.CompoundTag;
        get remainingFireTicks(): number;
        get dataMap(): Map<any, any>;
        get entityChangeListener(): Internal.EntityInLevelCallback;
        set dataMap(arg0: Map<any, any>);
        get parts(): Internal.PartEntity<object>[];
        get playingEndimation(): Internal.PlayableEndimation;
        get dirtyEntries(): Internal.Set<any>;
        set playingEndimation(arg0: Internal.PlayableEndimation);
        get animationTick(): number;
        set remainingFireTicks(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Int2IntFunction implements it.unimi.dsi.fastutil.Function<number, number>, Internal.IntUnaryOperator {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: number, arg1: number): number;
        getOrDefault(arg0: object, arg1: number): number;
        andThenShort(arg0: Internal.Int2ShortFunction): Internal.Int2ShortFunction;
        composeByte(arg0: Internal.Byte2IntFunction): Internal.Byte2IntFunction;
        andThenInt(arg0: Internal.Int2IntFunction): Internal.Int2IntFunction;
        composeReference<T>(arg0: Internal.Reference2IntFunction<T>): Internal.Reference2IntFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: number) => T;
        andThen(arg0: Internal.IntUnaryOperator): Internal.IntUnaryOperator;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: number): number;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: object): object;
        remove(arg0: object): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Int2DoubleFunction): Internal.Int2DoubleFunction;
        andThenObject<T>(arg0: Internal.Int2ObjectFunction<T>): Internal.Int2ObjectFunction<T>;
        get(arg0: object): number;
        get(arg0: object): object;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Int2LongFunction): Internal.Int2LongFunction;
        composeLong(arg0: Internal.Long2IntFunction): Internal.Long2IntFunction;
        andThenByte(arg0: Internal.Int2ByteFunction): Internal.Int2ByteFunction;
        andThenFloat(arg0: Internal.Int2FloatFunction): Internal.Int2FloatFunction;
        applyAsInt(arg0: number): number;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2IntFunction): Internal.Int2IntFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2IntFunction): Internal.Float2IntFunction;
        andThenChar(arg0: Internal.Int2CharFunction): Internal.Int2CharFunction;
        composeObject<T>(arg0: Internal.Object2IntFunction<T>): Internal.Object2IntFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => number;
        compose(arg0: Internal.IntUnaryOperator): Internal.IntUnaryOperator;
        composeShort(arg0: Internal.Short2IntFunction): Internal.Short2IntFunction;
        andThenReference<T>(arg0: Internal.Int2ReferenceFunction<T>): Internal.Int2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2IntFunction): Internal.Char2IntFunction;
        composeDouble(arg0: Internal.Double2IntFunction): Internal.Double2IntFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class JsonReader implements Internal.Closeable {
        skipValue(): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isLenient(): boolean;
        notifyAll(): void;
        hasNext(): boolean;
        nextInt(): number;
        endArray(): void;
        nextString(): string;
        nextLong(): number;
        notify(): void;
        nextDouble(): number;
        endObject(): void;
        peek(): Internal.JsonToken;
        beginArray(): void;
        beginObject(): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        nextBoolean(): boolean;
        nextName(): string;
        close(): void;
        nextNull(): void;
        set lenient(arg0: boolean);
        get path(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface AbstractContainerMenuAccessor {
        get menuType(): Internal.MenuType<object>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface FrustumAdapter {
        sodium$createFrustum(): me.jellysquid.mods.sodium.client.util.frustum.Frustum;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IntStream implements Internal.BaseStream<number, Internal.IntStream> {
        average(): Internal.OptionalDouble;
        sequential(): Internal.BaseStream<any, any>;
        sequential(): Internal.IntStream;
        takeWhile(arg0: Internal.IntPredicate): Internal.IntStream;
        distinct(): Internal.IntStream;
        findFirst(): Internal.OptionalInt;
        sum(): number;
        skip(arg0: number): Internal.IntStream;
        asLongStream(): Internal.LongStream;
        allMatch(arg0: Internal.IntPredicate): boolean;
        mapToObj<U>(arg0: Internal.IntFunction<U>): Internal.Stream<U>;
        mapMulti(arg0: Internal.IntStream$IntMapMultiConsumer): Internal.IntStream;
        iterator(): Internal.Iterator<any>;
        iterator(): Internal.PrimitiveIterator$OfInt;
        asDoubleStream(): Internal.DoubleStream;
        min(): Internal.OptionalInt;
        mapToLong(arg0: Internal.IntToLongFunction): Internal.LongStream;
        parallel(): Internal.IntStream;
        parallel(): Internal.BaseStream<any, any>;
        noneMatch(arg0: Internal.IntPredicate): boolean;
        findAny(): Internal.OptionalInt;
        isParallel(): boolean;
        limit(arg0: number): Internal.IntStream;
        toArray(): number[];
        forEachOrdered(arg0: Internal.IntConsumer): void;
        close(): void;
        anyMatch(arg0: Internal.IntPredicate): boolean;
        map(arg0: Internal.IntUnaryOperator): Internal.IntStream;
        mapToDouble(arg0: Internal.IntToDoubleFunction): Internal.DoubleStream;
        unordered(): S;
        reduce(arg0: number, arg1: java_.util.function_.IntBinaryOperator): number;
        reduce(arg0: java_.util.function_.IntBinaryOperator): Internal.OptionalInt;
        spliterator(): Internal.Spliterator$OfInt;
        spliterator(): Internal.Spliterator<any>;
        max(): Internal.OptionalInt;
        forEach(arg0: Internal.IntConsumer): void;
        count(): number;
        dropWhile(arg0: Internal.IntPredicate): Internal.IntStream;
        peek(arg0: Internal.IntConsumer): Internal.IntStream;
        flatMap(arg0: Internal.IntFunction<Internal.IntStream>): Internal.IntStream;
        filter(arg0: Internal.IntPredicate): Internal.IntStream;
        onClose(arg0: Internal.Runnable): S;
        sorted(): Internal.IntStream;
        boxed(): Internal.Stream<number>;
        summaryStatistics(): Internal.IntSummaryStatistics;
        collect<R>(arg0: () => R, arg1: Internal.ObjIntConsumer<R>, arg2: (arg0: R, arg1: R) => void): R;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class PropertyMap extends Internal.ForwardingMultimap<string, Unknown> {
        containsEntry(arg0: object, arg1: object): boolean;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        containsKey(arg0: object): boolean;
        notifyAll(): void;
        isEmpty(): boolean;
        clear(): void;
        notify(): void;
        containsValue(arg0: object): boolean;
        put(arg0: K, arg1: V): boolean;
        remove(arg0: object, arg1: object): boolean;
        size(): number;
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Char2IntFunction implements it.unimi.dsi.fastutil.Function<string, number>, Internal.IntUnaryOperator {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: string, arg1: number): number;
        andThenShort(arg0: Internal.Int2ShortFunction): Internal.Char2ShortFunction;
        composeByte(arg0: Internal.Byte2CharFunction): Internal.Byte2IntFunction;
        andThenInt(arg0: Internal.Int2IntFunction): Internal.Char2IntFunction;
        composeReference<T>(arg0: Internal.Reference2CharFunction<T>): Internal.Reference2IntFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: string) => T;
        andThen(arg0: Internal.IntUnaryOperator): Internal.IntUnaryOperator;
        put(arg0: object, arg1: object): object;
        put(arg0: string, arg1: number): number;
        put(arg0: string, arg1: number): number;
        remove(arg0: string): number;
        remove(arg0: object): object;
        remove(arg0: object): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Int2DoubleFunction): Internal.Char2DoubleFunction;
        andThenObject<T>(arg0: Internal.Int2ObjectFunction<T>): Internal.Char2ObjectFunction<T>;
        get(arg0: object): number;
        get(arg0: object): object;
        get(arg0: string): number;
        andThenLong(arg0: Internal.Int2LongFunction): Internal.Char2LongFunction;
        composeLong(arg0: Internal.Long2CharFunction): Internal.Long2IntFunction;
        andThenByte(arg0: Internal.Int2ByteFunction): Internal.Char2ByteFunction;
        andThenFloat(arg0: Internal.Int2FloatFunction): Internal.Char2FloatFunction;
        applyAsInt(arg0: number): number;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: string): boolean;
        composeInt(arg0: Internal.Int2CharFunction): Internal.Int2IntFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2CharFunction): Internal.Float2IntFunction;
        andThenChar(arg0: Internal.Int2CharFunction): Internal.Char2CharFunction;
        composeObject<T>(arg0: Internal.Object2CharFunction<T>): Internal.Object2IntFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => string): (arg0: T) => number;
        compose(arg0: Internal.IntUnaryOperator): Internal.IntUnaryOperator;
        composeShort(arg0: Internal.Short2CharFunction): Internal.Short2IntFunction;
        andThenReference<T>(arg0: Internal.Int2ReferenceFunction<T>): Internal.Char2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2CharFunction): Internal.Char2IntFunction;
        composeDouble(arg0: Internal.Double2CharFunction): Internal.Double2IntFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Function10 <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R> {
        curry9(): Internal.Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, (arg0: T10) => R>;
        apply(arg0: T1, arg1: T2, arg2: T3, arg3: T4, arg4: T5, arg5: T6, arg6: T7, arg7: T8, arg8: T9, arg9: T10): R;
        curry7(): Internal.Function7<T1, T2, T3, T4, T5, T6, T7, Internal.Function3<T8, T9, T10, R>>;
        curry8(): Internal.Function8<T1, T2, T3, T4, T5, T6, T7, T8, (arg0: T9, arg1: T10) => R>;
        curry5(): Internal.Function5<T1, T2, T3, T4, T5, Internal.Function5<T6, T7, T8, T9, T10, R>>;
        curry6(): Internal.Function6<T1, T2, T3, T4, T5, T6, Internal.Function4<T7, T8, T9, T10, R>>;
        curry3(): Internal.Function3<T1, T2, T3, Internal.Function7<T4, T5, T6, T7, T8, T9, T10, R>>;
        curry4(): Internal.Function4<T1, T2, T3, T4, Internal.Function6<T5, T6, T7, T8, T9, T10, R>>;
        curry2(): (arg0: T1, arg1: T2) => Internal.Function8<T3, T4, T5, T6, T7, T8, T9, T10, R>;
        curry(): (arg0: T1) => Internal.Function9<T2, T3, T4, T5, T6, T7, T8, T9, T10, R>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface LivingEntityKJS {
        foodEatenKJS(is: Internal.ItemStack): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Long2DoubleFunction implements it.unimi.dsi.fastutil.Function<number, number>, Internal.LongToDoubleFunction {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        applyAsDouble(arg0: number): number;
        andThenShort(arg0: Internal.Double2ShortFunction): Internal.Long2ShortFunction;
        composeByte(arg0: Internal.Byte2LongFunction): Internal.Byte2DoubleFunction;
        andThenInt(arg0: Internal.Double2IntFunction): Internal.Long2IntFunction;
        composeReference<T>(arg0: Internal.Reference2LongFunction<T>): Internal.Reference2DoubleFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: number) => T;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: number): number;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: object): object;
        remove(arg0: object): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Double2DoubleFunction): Internal.Long2DoubleFunction;
        andThenObject<T>(arg0: Internal.Double2ObjectFunction<T>): Internal.Long2ObjectFunction<T>;
        get(arg0: object): number;
        get(arg0: object): object;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Double2LongFunction): Internal.Long2LongFunction;
        composeLong(arg0: Internal.Long2LongFunction): Internal.Long2DoubleFunction;
        andThenByte(arg0: Internal.Double2ByteFunction): Internal.Long2ByteFunction;
        andThenFloat(arg0: Internal.Double2FloatFunction): Internal.Long2FloatFunction;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2LongFunction): Internal.Int2DoubleFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2LongFunction): Internal.Float2DoubleFunction;
        andThenChar(arg0: Internal.Double2CharFunction): Internal.Long2CharFunction;
        composeObject<T>(arg0: Internal.Object2LongFunction<T>): Internal.Object2DoubleFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => number;
        composeShort(arg0: Internal.Short2LongFunction): Internal.Short2DoubleFunction;
        andThenReference<T>(arg0: Internal.Double2ReferenceFunction<T>): Internal.Long2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2LongFunction): Internal.Char2DoubleFunction;
        composeDouble(arg0: Internal.Double2LongFunction): Internal.Double2DoubleFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ModuleDescriptor$Exports implements Internal.Comparable<Internal.ModuleDescriptor$Exports> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        isQualified(): boolean;
        toString(): string;
        source(): string;
        compareTo(arg0: Internal.ModuleDescriptor$Exports): number;
        compareTo(arg0: object): number;
        modifiers(): Internal.Set<Internal.ModuleDescriptor$Exports$Modifier>;
        targets(): Internal.Set<string>;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class HideREIEventJS <T> extends Internal.EventJS {
        cancel(): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isCancelled(): boolean;
        hide(o: object): void;
        post(t: Internal.ScriptType, id: string, sub: string): boolean;
        post(t: Internal.ScriptType, id: string): boolean;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        hideAll(): void;
        notify(): void;
        canCancel(): boolean;
        get allIngredients(): Internal.Collection<T>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class RecordCodecBuilder <O, F> implements Internal.App<Internal.RecordCodecBuilder$Mu<O>, F> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        static instance<O>(): Internal.RecordCodecBuilder$Instance<O>;
        static mapCodec<O>(arg0: (arg0: Internal.RecordCodecBuilder$Instance<O>) => Internal.App<Internal.RecordCodecBuilder$Mu<O>, O>): Internal.MapCodec<O>;
        notifyAll(): void;
        static deprecated<O, F>(arg0: F, arg1: number): Internal.RecordCodecBuilder<O, F>;
        notify(): void;
        static point<O, F>(arg0: F): Internal.RecordCodecBuilder<O, F>;
        static point<O, F>(arg0: F, arg1: Internal.Lifecycle): Internal.RecordCodecBuilder<O, F>;
        static build<O>(arg0: Internal.App<Internal.RecordCodecBuilder$Mu<O>, O>): Internal.MapCodec<O>;
        hashCode(): number;
        static stable<O, F>(arg0: F): Internal.RecordCodecBuilder<O, F>;
        static unbox<O, F>(arg0: Internal.App<Internal.RecordCodecBuilder$Mu<O>, F>): Internal.RecordCodecBuilder<O, F>;
        equals(arg0: object): boolean;
        static of<O, F>(arg0: (arg0: O) => F, arg1: string, arg2: Internal.Codec<F>): Internal.RecordCodecBuilder<O, F>;
        static of<O, F>(arg0: (arg0: O) => F, arg1: Internal.MapCodec<F>): Internal.RecordCodecBuilder<O, F>;
        static create<O>(arg0: (arg0: Internal.RecordCodecBuilder$Instance<O>) => Internal.App<Internal.RecordCodecBuilder$Mu<O>, O>): Internal.Codec<O>;
        toString(): string;
        dependent<E>(arg0: (arg0: O) => E, arg1: Internal.MapEncoder<E>, arg2: (arg0: F) => Internal.MapDecoder<E>): Internal.RecordCodecBuilder<O, E>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class Executable extends Internal.AccessibleObject implements Internal.Member, Internal.GenericDeclaration {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        isSynthetic(): boolean;
        notify(): void;
        getAnnotationsByType<T>(arg0: Internal.Class<T>): T[];
        hashCode(): number;
        canAccess(arg0: object): boolean;
        toGenericString(): string;
        trySetAccessible(): boolean;
        isAccessible(): boolean;
        static setAccessible(arg0: Internal.AccessibleObject[], arg1: boolean): void;
        isVarArgs(): boolean;
        getAnnotation<T>(arg0: Internal.Class<T>): T;
        equals(arg0: object): boolean;
        toString(): string;
        static readonly PUBLIC : 0;
        static readonly DECLARED : 1;
        get name(): string;
        get parameterCount(): number;
        get annotatedParameterTypes(): Internal.AnnotatedType[];
        get parameterTypes(): Internal.Class<object>[];
        get genericExceptionTypes(): Internal.Type[];
        get annotatedReceiverType(): Internal.AnnotatedType;
        get declaredAnnotations(): Internal.Annotation[];
        get declaringClass(): Internal.Class<object>;
        get typeParameters(): Internal.TypeVariable<object>[];
        get modifiers(): number;
        set accessible(arg0: boolean);
        get annotations(): Internal.Annotation[];
        get annotatedExceptionTypes(): Internal.AnnotatedType[];
        get exceptionTypes(): Internal.Class<object>[];
        get genericParameterTypes(): Internal.Type[];
        get parameters(): Internal.Parameter[];
        get annotatedReturnType(): Internal.AnnotatedType;
        get parameterAnnotations(): Internal.Annotation[][];
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IPlantable {
        getPlantType(arg0: Internal.BlockGetter, arg1: BlockPos): Internal.PlantType;
        getPlant(arg0: Internal.BlockGetter, arg1: BlockPos): Internal.BlockState;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Matcher implements Internal.MatchResult {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hasTransparentBounds(): boolean;
        requireEnd(): boolean;
        notifyAll(): void;
        useTransparentBounds(arg0: boolean): Internal.Matcher;
        pattern(): Internal.Pattern;
        replaceFirst(arg0: string): string;
        replaceFirst(arg0: (arg0: Internal.MatchResult) => string): string;
        regionStart(): number;
        replaceAll(arg0: (arg0: Internal.MatchResult) => string): string;
        replaceAll(arg0: string): string;
        notify(): void;
        lookingAt(): boolean;
        toMatchResult(): Internal.MatchResult;
        static quoteReplacement(arg0: string): string;
        hashCode(): number;
        find(): boolean;
        find(arg0: number): boolean;
        end(arg0: string): number;
        end(arg0: number): number;
        end(): number;
        results(): Internal.Stream<Internal.MatchResult>;
        group(arg0: string): string;
        group(arg0: number): string;
        group(): string;
        start(arg0: number): number;
        start(): number;
        start(arg0: string): number;
        regionEnd(): number;
        matches(): boolean;
        hasAnchoringBounds(): boolean;
        appendReplacement(arg0: Internal.StringBuffer, arg1: string): Internal.Matcher;
        appendReplacement(arg0: Internal.StringBuilder, arg1: string): Internal.Matcher;
        appendTail(arg0: Internal.StringBuffer): Internal.StringBuffer;
        appendTail(arg0: Internal.StringBuilder): Internal.StringBuilder;
        groupCount(): number;
        equals(arg0: object): boolean;
        reset(): Internal.Matcher;
        reset(arg0: Internal.CharSequence): Internal.Matcher;
        toString(): string;
        region(arg0: number, arg1: number): Internal.Matcher;
        useAnchoringBounds(arg0: boolean): Internal.Matcher;
        hitEnd(): boolean;
        usePattern(arg0: Internal.Pattern): Internal.Matcher;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class IntSummaryStatistics implements Internal.IntConsumer {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        andThen(arg0: Internal.IntConsumer): Internal.IntConsumer;
        notify(): void;
        accept(arg0: number): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        combine(arg0: Internal.IntSummaryStatistics): void;
        get max(): number;
        get average(): number;
        get min(): number;
        get sum(): number;
        get count(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Widget {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Promise <V> implements Internal.Future<V> {
        cancel(arg0: boolean): boolean;
        isCancelled(): boolean;
        removeListeners(arg0: Internal.GenericFutureListener<Internal.Future<V>>[]): Internal.Promise<V>;
        cause(): Internal.Throwable;
        awaitUninterruptibly(): Internal.Promise<V>;
        awaitUninterruptibly(arg0: number): boolean;
        awaitUninterruptibly(arg0: number, arg1: Internal.TimeUnit): boolean;
        removeListener(arg0: Internal.GenericFutureListener<Internal.Future<V>>): Internal.Promise<V>;
        tryFailure(arg0: Internal.Throwable): boolean;
        isDone(): boolean;
        sync(): Internal.Promise<V>;
        trySuccess(arg0: V): boolean;
        syncUninterruptibly(): Internal.Promise<V>;
        get(arg0: number, arg1: Internal.TimeUnit): V;
        get(): V;
        isCancellable(): boolean;
        await(): Internal.Promise<V>;
        await(arg0: number, arg1: Internal.TimeUnit): boolean;
        await(arg0: number): boolean;
        addListeners(arg0: Internal.GenericFutureListener<Internal.Future<V>>[]): Internal.Promise<V>;
        isSuccess(): boolean;
        setUncancellable(): boolean;
        addListener(arg0: Internal.GenericFutureListener<Internal.Future<V>>): Internal.Promise<V>;
        get now(): V;
        set success(arg0: V);
        set failure(arg0: Internal.Throwable);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class Clock implements Internal.InstantSource {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        withZone(arg0: Internal.ZoneId): Internal.Clock;
        static tickMinutes(arg0: Internal.ZoneId): Internal.Clock;
        static tickMillis(arg0: Internal.ZoneId): Internal.Clock;
        static offset(arg0: Internal.Clock, arg1: Internal.Duration): Internal.Clock;
        notifyAll(): void;
        static tick(arg0: Internal.Clock, arg1: Internal.Duration): Internal.Clock;
        notify(): void;
        instant(): Internal.Instant;
        static system(arg0: Internal.ZoneId): Internal.Clock;
        hashCode(): number;
        equals(arg0: object): boolean;
        static tickSeconds(arg0: Internal.ZoneId): Internal.Clock;
        static systemDefaultZone(): Internal.Clock;
        static systemUTC(): Internal.Clock;
        toString(): string;
        static fixed(arg0: Internal.Instant, arg1: Internal.ZoneId): Internal.Clock;
        millis(): number;
        get zone(): Internal.ZoneId;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Executor {
        execute(arg0: Internal.Runnable): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface EventLoop implements Internal.OrderedEventExecutor, Internal.EventLoopGroup {
        inEventLoop(arg0: Internal.Thread): boolean;
        inEventLoop(): boolean;
        next(): Internal.EventExecutor;
        next(): Internal.EventLoop;
        isShuttingDown(): boolean;
        parent(): Internal.EventLoopGroup;
        parent(): Internal.EventExecutorGroup;
        isTerminated(): boolean;
        awaitTermination(arg0: number, arg1: Internal.TimeUnit): boolean;
        execute(arg0: Internal.Runnable): void;
        shutdown(): void;
        register(arg0: io.netty.channel.Channel, arg1: Internal.ChannelPromise): Internal.ChannelFuture;
        register(arg0: Internal.ChannelPromise): Internal.ChannelFuture;
        register(arg0: io.netty.channel.Channel): Internal.ChannelFuture;
        isShutdown(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Pattern implements Internal.Serializable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        splitAsStream(arg0: Internal.CharSequence): Internal.Stream<string>;
        pattern(): string;
        flags(): number;
        asMatchPredicate(): (arg0: string) => boolean;
        matcher(arg0: Internal.CharSequence): Internal.Matcher;
        static matches(arg0: string, arg1: Internal.CharSequence): boolean;
        notify(): void;
        static quote(arg0: string): string;
        split(arg0: Internal.CharSequence, arg1: number): string[];
        split(arg0: Internal.CharSequence): string[];
        static compile(arg0: string): Internal.Pattern;
        static compile(arg0: string, arg1: number): Internal.Pattern;
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        asPredicate(): (arg0: string) => boolean;
        static readonly DOTALL : 32;
        static readonly UNICODE_CASE : 64;
        static readonly LITERAL : 16;
        static readonly UNICODE_CHARACTER_CLASS : 256;
        static readonly CASE_INSENSITIVE : 2;
        static readonly CANON_EQ : 128;
        static readonly COMMENTS : 4;
        static readonly UNIX_LINES : 1;
        static readonly MULTILINE : 8;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ChannelProgressivePromise implements Internal.ProgressivePromise<void>, Internal.ChannelProgressiveFuture, Internal.ChannelPromise {
        cancel(arg0: boolean): boolean;
        unvoid(): Internal.ChannelProgressivePromise;
        unvoid(): Internal.ChannelPromise;
        channel(): io.netty.channel.Channel;
        setProgress(arg0: number, arg1: number): Internal.ChannelProgressivePromise;
        cause(): Internal.Throwable;
        awaitUninterruptibly(): Internal.ChannelProgressivePromise;
        awaitUninterruptibly(): Internal.ChannelProgressiveFuture;
        awaitUninterruptibly(): Internal.ChannelFuture;
        awaitUninterruptibly(): Internal.ChannelPromise;
        awaitUninterruptibly(arg0: number): boolean;
        awaitUninterruptibly(arg0: number, arg1: Internal.TimeUnit): boolean;
        trySuccess(arg0: V): boolean;
        trySuccess(): boolean;
        tryProgress(arg0: number, arg1: number): boolean;
        syncUninterruptibly(): Internal.ChannelProgressivePromise;
        syncUninterruptibly(): Internal.ChannelProgressiveFuture;
        syncUninterruptibly(): Internal.ChannelFuture;
        syncUninterruptibly(): Internal.ChannelPromise;
        get(arg0: number, arg1: Internal.TimeUnit): V;
        get(): V;
        await(): Internal.ChannelProgressivePromise;
        await(): Internal.ChannelProgressiveFuture;
        await(): Internal.ChannelFuture;
        await(): Internal.ChannelPromise;
        await(arg0: number, arg1: Internal.TimeUnit): boolean;
        await(arg0: number): boolean;
        isSuccess(): boolean;
        addListener(arg0: Internal.GenericFutureListener<Internal.Future<void>>): Internal.ChannelProgressivePromise;
        isCancelled(): boolean;
        removeListeners(arg0: Internal.GenericFutureListener<Internal.Future<void>>[]): Internal.ChannelProgressivePromise;
        removeListeners(arg0: Internal.GenericFutureListener<Internal.Future<void>>[]): Internal.ChannelProgressiveFuture;
        removeListeners(arg0: Internal.GenericFutureListener<Internal.Future<void>>[]): Internal.ChannelFuture;
        removeListeners(arg0: Internal.GenericFutureListener<Internal.Future<void>>[]): Internal.ChannelPromise;
        removeListener(arg0: Internal.GenericFutureListener<Internal.Future<void>>): Internal.ChannelProgressivePromise;
        tryFailure(arg0: Internal.Throwable): boolean;
        isDone(): boolean;
        sync(): Internal.ChannelProgressivePromise;
        sync(): Internal.ChannelProgressiveFuture;
        sync(): Internal.ChannelFuture;
        sync(): Internal.ChannelPromise;
        setSuccess(): Internal.ChannelProgressivePromise;
        setSuccess(): Internal.ChannelPromise;
        isVoid(): boolean;
        isCancellable(): boolean;
        addListeners(arg0: Internal.GenericFutureListener<Internal.Future<void>>[]): Internal.ChannelProgressivePromise;
        addListeners(arg0: Internal.GenericFutureListener<Internal.Future<void>>[]): Internal.ChannelProgressiveFuture;
        addListeners(arg0: Internal.GenericFutureListener<Internal.Future<void>>[]): Internal.ChannelFuture;
        addListeners(arg0: Internal.GenericFutureListener<Internal.Future<void>>[]): Internal.ChannelPromise;
        setUncancellable(): boolean;
        get now(): V;
        set success(arg0: void);
        set success(arg0: void);
        set failure(arg0: Internal.Throwable);
        set failure(arg0: Internal.Throwable);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ModelQuadView {
        getLight(arg0: number): number;
        getTexV(arg0: number): number;
        getNormal(arg0: number): number;
        getTexU(arg0: number): number;
        getX(arg0: number): number;
        getY(arg0: number): number;
        getZ(arg0: number): number;
        getColor(arg0: number): number;
        get colorIndex(): number;
        get flags(): number;
        get sprite(): Internal.TextureAtlasSprite;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ClickType extends Internal.Enum<Internal.ClickType> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(arg0: string): Internal.ClickType;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.ClickType[];
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly QUICK_MOVE : Internal.ClickType;
        static readonly SWAP : Internal.ClickType;
        static readonly PICKUP_ALL : Internal.ClickType;
        static readonly THROW : Internal.ClickType;
        static readonly QUICK_CRAFT : Internal.ClickType;
        static readonly PICKUP : Internal.ClickType;
        static readonly CLONE : Internal.ClickType;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface MinecraftServerKJS implements Internal.AsKJS {
        asKJS(): object;
        get serverResourcesKJS(): Internal.ServerResources;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class PlayerDataJS <E, P> implements Internal.WithAttachedData {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        notify(): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        hasClientMod(): boolean;
        toString(): string;
        get player(): P;
        get name(): string;
        get profile(): Internal.GameProfile;
        get id(): Internal.UUID;
        get overworld(): Internal.LevelJS;
        get minecraftPlayer(): E;
        get data(): Internal.AttachedData;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface CharSequence {
        isEmpty(): boolean;
        length(): number;
        toString(): string;
        subSequence(arg0: number, arg1: number): Internal.CharSequence;
        chars(): Internal.IntStream;
        charAt(arg0: number): string;
        codePoints(): Internal.IntStream;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class MultiBufferSource$BufferSource implements Internal.MultiBufferSource {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class JsonGenerator {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        json(id: ResourceLocation, json: Internal.JsonElement): void;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class AccessControlContext {
        checkPermission(arg0: Internal.Permission): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        get domainCombiner(): Internal.DomainCombiner;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class DayOfWeek extends Internal.Enum<Internal.DayOfWeek> implements Internal.TemporalAccessor, Internal.TemporalAdjuster {
        minus(arg0: number): Internal.DayOfWeek;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        static valueOf(arg0: string): Internal.DayOfWeek;
        notifyAll(): void;
        query<R>(arg0: Internal.TemporalQuery<R>): R;
        static values(): Internal.DayOfWeek[];
        adjustInto(arg0: Internal.Temporal): Internal.Temporal;
        range(arg0: Internal.TemporalField): Internal.ValueRange;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        isSupported(arg0: Internal.TemporalField): boolean;
        notify(): void;
        plus(arg0: number): Internal.DayOfWeek;
        getLong(arg0: Internal.TemporalField): number;
        getDisplayName(arg0: Internal.TextStyle, arg1: Internal.Locale): string;
        hashCode(): number;
        equals(arg0: object): boolean;
        static of(arg0: number): Internal.DayOfWeek;
        get(arg0: Internal.TemporalField): number;
        name(): string;
        toString(): string;
        static from(arg0: Internal.TemporalAccessor): Internal.DayOfWeek;
        ordinal(): number;
        static readonly WEDNESDAY : Internal.DayOfWeek;
        static readonly MONDAY : Internal.DayOfWeek;
        static readonly THURSDAY : Internal.DayOfWeek;
        static readonly SUNDAY : Internal.DayOfWeek;
        static readonly TUESDAY : Internal.DayOfWeek;
        static readonly FRIDAY : Internal.DayOfWeek;
        static readonly SATURDAY : Internal.DayOfWeek;
        get value(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface PropertyChangeListener implements Internal.EventListener {
        propertyChange(arg0: Internal.PropertyChangeEvent): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ServerJS implements Internal.MessageSender, Internal.WithAttachedData {
        getAdvancement(id: ResourceLocation): Internal.AdvancementJS;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        getPlayer(uuid: Internal.UUID): Internal.ServerPlayerJS;
        getPlayer(name: string): Internal.ServerPlayerJS;
        getPlayer(minecraftPlayer: Internal.Player): Internal.ServerPlayerJS;
        updateWorldList(): void;
        release(): void;
        notifyAll(): void;
        tell(message: Internal.Component): void;
        getAllLevels(): Internal.List<Internal.ServerLevelJS>;
        getOverworld(): Internal.ServerLevelJS;
        notify(): void;
        runCommandSilent(command: string): number;
        scheduleInTicks(ticks: number, event: Internal.IScheduledEventCallback): Internal.ScheduledEvent;
        scheduleInTicks(ticks: number, data: object, event: Internal.IScheduledEventCallback): Internal.ScheduledEvent;
        isRunning(): boolean;
        hashCode(): number;
        runCommand(command: string): number;
        isSinglePlayer(): boolean;
        sendDataToAll(channel: string, data: Internal.CompoundTag): void;
        isDedicated(): boolean;
        schedule(timer: number, event: Internal.IScheduledEventCallback): Internal.ScheduledEvent;
        schedule(timer: number, data: object, event: Internal.IScheduledEventCallback): Internal.ScheduledEvent;
        getLevel(dimension: string): Internal.LevelJS;
        getLevel(minecraftLevel: Internal.Level): Internal.LevelJS;
        stop(): void;
        equals(arg0: object): boolean;
        getEntities(filter: string): Internal.EntityArrayList;
        toString(): string;
        readonly playerMap : Map<Internal.UUID, Internal.ServerPlayerDataJS>;
        readonly serverScriptManager : Internal.ServerScriptManager;
        static instance : Internal.ServerJS;
        readonly allLevels : Internal.List<Internal.ServerLevelJS>;
        readonly persistentData : Internal.CompoundTag;
        readonly fakePlayerMap : Map<Internal.UUID, Internal.FakeServerPlayerDataJS>;
        readonly scheduledEvents : Internal.List<Internal.ScheduledEvent>;
        readonly levelMap : Map<string, Internal.ServerLevelJS>;
        overworld : Internal.ServerLevelJS;
        readonly scheduledTickEvents : Internal.List<Internal.ScheduledEvent>;
        get name(): Internal.Text;
        get hardcore(): boolean;
        get motd(): string;
        set motd(text: Internal.Component);
        get players(): Internal.EntityArrayList;
        get data(): Internal.AttachedData;
        set statusMessage(message: Internal.Component);
        get minecraftServer(): Internal.MinecraftServer;
        get displayName(): Internal.Text;
        get entities(): Internal.EntityArrayList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface WrappedJS {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IntToLongFunction {
        applyAsLong(arg0: number): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class BufferLayout$Builder {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        build(): Internal.BufferLayout;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        addItems(arg0: Internal.LayoutItem[]): Internal.BufferLayout$Builder;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class StackTraceElement implements Internal.Serializable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        notify(): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        isNativeMethod(): boolean;
        get methodName(): string;
        get moduleName(): string;
        get moduleVersion(): string;
        get lineNumber(): number;
        get className(): string;
        get classLoaderName(): string;
        get fileName(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class BlendingData {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface AttributeMap {
        hasAttr<T>(arg0: Internal.AttributeKey<T>): boolean;
        attr<T>(arg0: Internal.AttributeKey<T>): io.netty.util.Attribute<T>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface MinecraftClientAccess {
        get recorder(): Internal.MetricsRecorder;
        set recorder(arg0: Internal.MetricsRecorder);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class FluidState extends Internal.StateHolder<Internal.Fluid, Internal.FluidState> implements Internal.IForgeFluidState {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        getExplosionResistance(arg0: Internal.BlockGetter, arg1: BlockPos, arg2: Internal.Explosion): number;
        notifyAll(): void;
        redirect$zie000$getNeighborFromFastMap(ignore: Internal.Table<any, any, any>, rowKey: object, columnKey: object): object;
        isEntityInside(arg0: Internal.LevelReader, arg1: BlockPos, arg2: Internal.Entity, arg3: number, arg4: Internal.SetTag<Internal.Fluid>, arg5: boolean): boolean;
        notify(): void;
        replacePropertyMap(newMap: Internal.ImmutableMap<any, any>): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        get stateIndex(): number;
        get neighborTable(): Internal.Table<any, any, any>;
        set neighborTable(table: Internal.Table<any, any, any>);
        set stateMap(newValue: Internal.FastMap<any>);
        get stateMap(): Internal.FastMap<any>;
        set stateIndex(newValue: number);
        get vanillaPropertyMap(): Internal.ImmutableMap<any, any>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Event$Result extends Internal.Enum<Internal.Event$Result> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(arg0: string): Internal.Event$Result;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.Event$Result[];
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly DENY : Internal.Event$Result;
        static readonly DEFAULT : Internal.Event$Result;
        static readonly ALLOW : Internal.Event$Result;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface DoubleSupplier {
        get asDouble(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IntSpliterator implements Internal.Spliterator$OfInt {
        trySplit(): Internal.Spliterator<any>;
        trySplit(): Internal.Spliterator$OfInt;
        trySplit(): Internal.IntSpliterator;
        trySplit(): Internal.Spliterator$OfPrimitive<any, any, any>;
        characteristics(): number;
        tryAdvance(arg0: (arg0: number) => void): boolean;
        tryAdvance(arg0: it.unimi.dsi.fastutil.ints.IntConsumer): boolean;
        tryAdvance(arg0: Internal.IntConsumer): boolean;
        tryAdvance(arg0: object): boolean;
        estimateSize(): number;
        skip(arg0: number): number;
        hasCharacteristics(arg0: number): boolean;
        forEachRemaining(arg0: (arg0: number) => void): void;
        forEachRemaining(arg0: it.unimi.dsi.fastutil.ints.IntConsumer): void;
        forEachRemaining(arg0: object): void;
        forEachRemaining(arg0: Internal.IntConsumer): void;
        get comparator(): Internal.Comparator<any>;
        get comparator(): Internal.IntComparator;
        get exactSizeIfKnown(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Double2ByteFunction implements it.unimi.dsi.fastutil.Function<number, number>, Internal.DoubleToIntFunction {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        andThenShort(arg0: Internal.Byte2ShortFunction): Internal.Double2ShortFunction;
        composeByte(arg0: Internal.Byte2DoubleFunction): Internal.Byte2ByteFunction;
        andThenInt(arg0: Internal.Byte2IntFunction): Internal.Double2IntFunction;
        composeReference<T>(arg0: Internal.Reference2DoubleFunction<T>): Internal.Reference2ByteFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: number) => T;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: number): number;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: object): object;
        remove(arg0: object): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Byte2DoubleFunction): Internal.Double2DoubleFunction;
        andThenObject<T>(arg0: Internal.Byte2ObjectFunction<T>): Internal.Double2ObjectFunction<T>;
        get(arg0: object): number;
        get(arg0: object): object;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Byte2LongFunction): Internal.Double2LongFunction;
        composeLong(arg0: Internal.Long2DoubleFunction): Internal.Long2ByteFunction;
        andThenByte(arg0: Internal.Byte2ByteFunction): Internal.Double2ByteFunction;
        andThenFloat(arg0: Internal.Byte2FloatFunction): Internal.Double2FloatFunction;
        applyAsInt(arg0: number): number;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2DoubleFunction): Internal.Int2ByteFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2DoubleFunction): Internal.Float2ByteFunction;
        andThenChar(arg0: Internal.Byte2CharFunction): Internal.Double2CharFunction;
        composeObject<T>(arg0: Internal.Object2DoubleFunction<T>): Internal.Object2ByteFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => number;
        composeShort(arg0: Internal.Short2DoubleFunction): Internal.Short2ByteFunction;
        andThenReference<T>(arg0: Internal.Byte2ReferenceFunction<T>): Internal.Double2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2DoubleFunction): Internal.Char2ByteFunction;
        composeDouble(arg0: Internal.Double2DoubleFunction): Internal.Double2ByteFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class AsynchronousFileChannel implements Internal.AsynchronousChannel {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        read(arg0: Internal.ByteBuffer, arg1: number): java_.util.concurrent.Future<number>;
        read<A>(arg0: Internal.ByteBuffer, arg1: number, arg2: A, arg3: Internal.CompletionHandler<number, A>): void;
        notifyAll(): void;
        notify(): void;
        tryLock(): Internal.FileLock;
        tryLock(arg0: number, arg1: number, arg2: boolean): Internal.FileLock;
        isOpen(): boolean;
        truncate(arg0: number): Internal.AsynchronousFileChannel;
        size(): number;
        hashCode(): number;
        equals(arg0: object): boolean;
        lock(arg0: number, arg1: number, arg2: boolean): java_.util.concurrent.Future<Internal.FileLock>;
        lock<A>(arg0: A, arg1: Internal.CompletionHandler<Internal.FileLock, A>): void;
        lock<A>(arg0: number, arg1: number, arg2: boolean, arg3: A, arg4: Internal.CompletionHandler<Internal.FileLock, A>): void;
        lock(): java_.util.concurrent.Future<Internal.FileLock>;
        toString(): string;
        force(arg0: boolean): void;
        close(): void;
        write(arg0: Internal.ByteBuffer, arg1: number): java_.util.concurrent.Future<number>;
        write<A>(arg0: Internal.ByteBuffer, arg1: number, arg2: A, arg3: Internal.CompletionHandler<number, A>): void;
        static open(arg0: Internal.Path, arg1: Internal.Set<Internal.OpenOption>, arg2: Internal.ExecutorService, arg3: Internal.FileAttribute<object>[]): Internal.AsynchronousFileChannel;
        static open(arg0: Internal.Path, arg1: Internal.OpenOption[]): Internal.AsynchronousFileChannel;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ChannelOption <T> extends Internal.AbstractConstant<Internal.ChannelOption<T>> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf<T>(arg0: string): Internal.ChannelOption<T>;
        static valueOf<T>(arg0: Internal.Class<object>, arg1: string): Internal.ChannelOption<T>;
        notifyAll(): void;
        equals(arg0: object): boolean;
        name(): string;
        static exists(arg0: string): boolean;
        toString(): string;
        static newInstance<T>(arg0: string): Internal.ChannelOption<T>;
        id(): number;
        compareTo(arg0: T): number;
        compareTo(arg0: object): number;
        notify(): void;
        validate(arg0: T): void;
        static readonly WRITE_BUFFER_HIGH_WATER_MARK : Internal.ChannelOption<number>;
        static readonly WRITE_BUFFER_LOW_WATER_MARK : Internal.ChannelOption<number>;
        static readonly DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION : Internal.ChannelOption<boolean>;
        static readonly IP_TOS : Internal.ChannelOption<number>;
        static readonly SINGLE_EVENTEXECUTOR_PER_GROUP : Internal.ChannelOption<boolean>;
        static readonly SO_SNDBUF : Internal.ChannelOption<number>;
        static readonly IP_MULTICAST_IF : Internal.ChannelOption<Internal.NetworkInterface>;
        static readonly WRITE_BUFFER_WATER_MARK : Internal.ChannelOption<Internal.WriteBufferWaterMark>;
        static readonly TCP_NODELAY : Internal.ChannelOption<boolean>;
        static readonly TCP_FASTOPEN : Internal.ChannelOption<number>;
        static readonly SO_LINGER : Internal.ChannelOption<number>;
        static readonly SO_RCVBUF : Internal.ChannelOption<number>;
        static readonly SO_KEEPALIVE : Internal.ChannelOption<boolean>;
        static readonly ALLOCATOR : Internal.ChannelOption<Internal.ByteBufAllocator>;
        static readonly IP_MULTICAST_ADDR : Internal.ChannelOption<Internal.InetAddress>;
        static readonly IP_MULTICAST_LOOP_DISABLED : Internal.ChannelOption<boolean>;
        static readonly TCP_FASTOPEN_CONNECT : Internal.ChannelOption<boolean>;
        static readonly MESSAGE_SIZE_ESTIMATOR : Internal.ChannelOption<Internal.MessageSizeEstimator>;
        static readonly WRITE_SPIN_COUNT : Internal.ChannelOption<number>;
        static readonly SO_TIMEOUT : Internal.ChannelOption<number>;
        static readonly SO_REUSEADDR : Internal.ChannelOption<boolean>;
        static readonly CONNECT_TIMEOUT_MILLIS : Internal.ChannelOption<number>;
        static readonly ALLOW_HALF_CLOSURE : Internal.ChannelOption<boolean>;
        static readonly SO_BACKLOG : Internal.ChannelOption<number>;
        static readonly MAX_MESSAGES_PER_READ : Internal.ChannelOption<number>;
        static readonly AUTO_CLOSE : Internal.ChannelOption<boolean>;
        static readonly MAX_MESSAGES_PER_WRITE : Internal.ChannelOption<number>;
        static readonly SO_BROADCAST : Internal.ChannelOption<boolean>;
        static readonly AUTO_READ : Internal.ChannelOption<boolean>;
        static readonly IP_MULTICAST_TTL : Internal.ChannelOption<number>;
        static readonly RCVBUF_ALLOCATOR : Internal.ChannelOption<Internal.RecvByteBufAllocator>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ItemStackJS implements Internal.IngredientJS, Internal.NBTSerializable, Internal.ChangeListener<Internal.Tag>, Internal.SpecialEquality {
        isBlock(): boolean;
        static findGroup(id: string): Internal.CreativeModeTab;
        hasEnchantment(enchantment: Internal.Enchantment, level: number): boolean;
        withChance(c: number): Internal.ItemStackJS;
        withName(displayName: Internal.Component): Internal.ItemStackJS;
        hasTag(tag: ResourceLocation): boolean;
        testVanillaItem(item: Internal.Item): boolean;
        test(other: Internal.ItemStackJS): boolean;
        hasChance(): boolean;
        asIngredientStack(): Internal.IngredientStackJS;
        static getRawItem(o: object): Internal.Item;
        createVanillaIngredient(): Internal.Ingredient;
        isNBTEqual(other: Internal.ItemStackJS): boolean;
        isNBTEqual(other: Internal.ItemStack): boolean;
        toJson(): Internal.JsonElement;
        withCount(arg0: number): Internal.IngredientJS;
        withCount(c: number): Internal.ItemStackJS;
        specialEquals(o: object, shallow: boolean): boolean;
        anyStackMatches(ingredient: Internal.IngredientJS): boolean;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hasNBT(): boolean;
        areItemsEqual(other: Internal.ItemStack): boolean;
        areItemsEqual(other: Internal.ItemStackJS): boolean;
        notifyAll(): void;
        isInvalidRecipeIngredient(): boolean;
        notify(): void;
        weakNBT(): Internal.IngredientJS;
        static clearListCache(): void;
        not(): Internal.IngredientJS;
        toNBT(): Internal.CompoundTag;
        toNBT(): Internal.Tag;
        getHarvestSpeed(block: Internal.BlockContainerJS): number;
        hashCode(): number;
        toRawResultJson(): Internal.JsonElement;
        static of(o: object): Internal.ItemStackJS;
        copy(): Internal.Copyable;
        copy(): Internal.ItemStackJS;
        copy(): Internal.IngredientJS;
        withNBT(nbt: Internal.CompoundTag): Internal.ItemStackJS;
        toResultJson(): Internal.JsonElement;
        onChanged(arg0: object): void;
        onChanged(o: Internal.Tag): void;
        isEmpty(): boolean;
        strongEquals(o: object): boolean;
        filter(filter: Internal.IngredientJS): Internal.IngredientJS;
        removeNBT(): Internal.ItemStackJS;
        static resultFromRecipeJson(json: Internal.JsonElement): Internal.ItemStackJS;
        unwrapStackIngredient(): Internal.List<Internal.IngredientJS>;
        enchant(enchantments: Internal.MapJS): Internal.ItemStackJS;
        enchant(enchantment: Internal.Enchantment, level: number): Internal.ItemStackJS;
        testVanilla(other: Internal.ItemStack): boolean;
        equals(o: object): boolean;
        x(c: number): Internal.IngredientJS;
        ignoreNBT(): Internal.IngredientJS;
        toString(): string;
        removeChance(): void;
        static readonly EMPTY : Internal.ItemStackJS;
        get itemIds(): Internal.Set<string>;
        get nbt(): Internal.CompoundTag;
        get name(): Internal.Text;
        get stacks(): Internal.Set<Internal.ItemStackJS>;
        get vanillaItems(): Internal.Set<Internal.Item>;
        get item(): Internal.Item;
        get tags(): Internal.Collection<ResourceLocation>;
        get itemGroup(): string;
        set chance(c: number);
        get list(): Internal.List<Internal.ItemStackJS>;
        get first(): Internal.ItemStackJS;
        get count(): number;
        set count(count: number);
        get nbtString(): string;
        get listJS(): Internal.ListJS;
        get mod(): string;
        get chance(): number;
        get id(): string;
        get harvestSpeed(): number;
        get itemStack(): Internal.ItemStack;
        get typeList(): Internal.ListJS;
        get vanillaPredicate(): (arg0: Internal.ItemStack) => boolean;
        get enchantments(): Internal.MapJS;
        get fluidStack(): Internal.FluidStackJS;
        set nbt(tag: Internal.CompoundTag);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IntSupplier {
        get asInt(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Double2IntFunction implements it.unimi.dsi.fastutil.Function<number, number>, Internal.DoubleToIntFunction {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        andThenShort(arg0: Internal.Int2ShortFunction): Internal.Double2ShortFunction;
        composeByte(arg0: Internal.Byte2DoubleFunction): Internal.Byte2IntFunction;
        andThenInt(arg0: Internal.Int2IntFunction): Internal.Double2IntFunction;
        composeReference<T>(arg0: Internal.Reference2DoubleFunction<T>): Internal.Reference2IntFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: number) => T;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: number): number;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: object): object;
        remove(arg0: object): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Int2DoubleFunction): Internal.Double2DoubleFunction;
        andThenObject<T>(arg0: Internal.Int2ObjectFunction<T>): Internal.Double2ObjectFunction<T>;
        get(arg0: object): number;
        get(arg0: object): object;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Int2LongFunction): Internal.Double2LongFunction;
        composeLong(arg0: Internal.Long2DoubleFunction): Internal.Long2IntFunction;
        andThenByte(arg0: Internal.Int2ByteFunction): Internal.Double2ByteFunction;
        andThenFloat(arg0: Internal.Int2FloatFunction): Internal.Double2FloatFunction;
        applyAsInt(arg0: number): number;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2DoubleFunction): Internal.Int2IntFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2DoubleFunction): Internal.Float2IntFunction;
        andThenChar(arg0: Internal.Int2CharFunction): Internal.Double2CharFunction;
        composeObject<T>(arg0: Internal.Object2DoubleFunction<T>): Internal.Object2IntFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => number;
        composeShort(arg0: Internal.Short2DoubleFunction): Internal.Short2IntFunction;
        andThenReference<T>(arg0: Internal.Int2ReferenceFunction<T>): Internal.Double2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2DoubleFunction): Internal.Char2IntFunction;
        composeDouble(arg0: Internal.Double2DoubleFunction): Internal.Double2IntFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IntIterable implements Internal.Iterable<number> {
        iterator(): Internal.Iterator<any>;
        iterator(): Internal.IntIterator;
        spliterator(): Internal.Spliterator<any>;
        spliterator(): Internal.IntSpliterator;
        forEach(arg0: Internal.IntConsumer): void;
        forEach(arg0: (arg0: number) => void): void;
        forEach(arg0: it.unimi.dsi.fastutil.ints.IntConsumer): void;
        intIterator(): Internal.IntIterator;
        intSpliterator(): Internal.IntSpliterator;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class SectionedEntityMovementTracker <E, S> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        unRegister(world: Internal.ServerLevel): void;
        hashCode(): number;
        notifyAll(): void;
        equals(obj: object): boolean;
        onSectionLeftRange(section: Internal.EntityTrackerSection): void;
        toString(): string;
        onSectionEnteredRange(section: Internal.EntityTrackerSection): void;
        isUnchangedSince(lastCheckedTime: number): boolean;
        notify(): void;
        register(world: Internal.ServerLevel): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Timestamp implements Internal.Serializable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        get signerCertPath(): Internal.CertPath;
        get timestamp(): Internal.Date;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ShapelessRecipeJS extends Internal.RecipeJS {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        ingredientAction(filter: Internal.IngredientActionFilter, action: Internal.IngredientAction): Internal.RecipeJS;
        notifyAll(): void;
        convertReplacedInput(index: number, oldIngredient: Internal.IngredientJS, newIngredient: Internal.IngredientJS): Internal.IngredientJS;
        convertReplacedOutput(index: number, oldStack: Internal.ItemStackJS, newStack: Internal.ItemStackJS): Internal.ItemStackJS;
        save(): void;
        damageIngredient(filter: Internal.IngredientActionFilter, damage: number): Internal.RecipeJS;
        damageIngredient(filter: Internal.IngredientActionFilter): Internal.RecipeJS;
        getId(): string;
        dontAdd(): void;
        notify(): void;
        serializeJson(): void;
        replaceOutput(i: Internal.IngredientJS, with_: Internal.ItemStackJS, exact: boolean): boolean;
        hashCode(): number;
        merge(data: object): Internal.RecipeJS;
        create(args: Internal.ListJS): void;
        deserializeJson(): void;
        id(_id: ResourceLocation): Internal.RecipeJS;
        parseIngredientItem(o: object, key: string): Internal.IngredientJS;
        parseIngredientItem(o: object): Internal.IngredientJS;
        group(g: string): Internal.RecipeJS;
        deserialize(): void;
        serializeNBTAsJson(): boolean;
        getOutputIndex(ingredient: Internal.IngredientJS, exact: boolean): number;
        getInputIndex(ingredient: Internal.IngredientJS, exact: boolean): number;
        setGroup(g: string): void;
        serialize(): void;
        resultFromRecipeJson(json: Internal.JsonObject): Internal.ItemStackJS;
        serializeIngredientStack(in_: Internal.IngredientStackJS): Internal.JsonElement;
        stage(s: string): Internal.RecipeJS;
        replaceInput(i: Internal.IngredientJS, with_: Internal.IngredientJS, exact: boolean): boolean;
        getType(): string;
        equals(arg0: object): boolean;
        getGroup(): string;
        serializeItemStack(stack: Internal.ItemStackJS): Internal.JsonElement;
        hasOutput(ingredient: Internal.IngredientJS, exact: boolean): boolean;
        toString(): string;
        keepIngredient(filter: Internal.IngredientActionFilter): Internal.RecipeJS;
        parseResultItem(o: object): Internal.ItemStackJS;
        hasInput(ingredient: Internal.IngredientJS, exact: boolean): boolean;
        customIngredientAction(filter: Internal.IngredientActionFilter, id: string): Internal.RecipeJS;
        replaceIngredient(filter: Internal.IngredientActionFilter, item: Internal.ItemStackJS): Internal.RecipeJS;
        static currentRecipe : Internal.RecipeJS;
        originalJson : Internal.JsonObject;
        serializeOutputs : boolean;
        originalRecipe : Internal.Recipe<object>;
        readonly inputItems : Internal.List<Internal.IngredientJS>;
        static itemErrors : false;
        json : Internal.JsonObject;
        readonly outputItems : Internal.List<Internal.ItemStackJS>;
        type : Internal.RecipeTypeJS;
        serializeInputs : boolean;
        get mod(): string;
        get uniqueId(): string;
        get fromToString(): string;
        get path(): string;
        get orCreateId(): ResourceLocation;
        get originalRecipeResult(): Internal.ItemStackJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IntFunction <R> {
        apply(arg0: number): R;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ItemInvokerMixin {
        callAllowdedIn(arg0: Internal.CreativeModeTab): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Short2IntFunction implements it.unimi.dsi.fastutil.Function<number, number>, Internal.IntUnaryOperator {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        andThenShort(arg0: Internal.Int2ShortFunction): Internal.Short2ShortFunction;
        composeByte(arg0: Internal.Byte2ShortFunction): Internal.Byte2IntFunction;
        andThenInt(arg0: Internal.Int2IntFunction): Internal.Short2IntFunction;
        composeReference<T>(arg0: Internal.Reference2ShortFunction<T>): Internal.Reference2IntFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: number) => T;
        andThen(arg0: Internal.IntUnaryOperator): Internal.IntUnaryOperator;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: number): number;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: object): object;
        remove(arg0: object): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Int2DoubleFunction): Internal.Short2DoubleFunction;
        andThenObject<T>(arg0: Internal.Int2ObjectFunction<T>): Internal.Short2ObjectFunction<T>;
        get(arg0: object): number;
        get(arg0: object): object;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Int2LongFunction): Internal.Short2LongFunction;
        composeLong(arg0: Internal.Long2ShortFunction): Internal.Long2IntFunction;
        andThenByte(arg0: Internal.Int2ByteFunction): Internal.Short2ByteFunction;
        andThenFloat(arg0: Internal.Int2FloatFunction): Internal.Short2FloatFunction;
        applyAsInt(arg0: number): number;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2ShortFunction): Internal.Int2IntFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2ShortFunction): Internal.Float2IntFunction;
        andThenChar(arg0: Internal.Int2CharFunction): Internal.Short2CharFunction;
        composeObject<T>(arg0: Internal.Object2ShortFunction<T>): Internal.Object2IntFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => number;
        compose(arg0: Internal.IntUnaryOperator): Internal.IntUnaryOperator;
        composeShort(arg0: Internal.Short2ShortFunction): Internal.Short2IntFunction;
        andThenReference<T>(arg0: Internal.Int2ReferenceFunction<T>): Internal.Short2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2ShortFunction): Internal.Char2IntFunction;
        composeDouble(arg0: Internal.Double2ShortFunction): Internal.Double2IntFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface WeightedEntry {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class TagEventJS <T> extends Internal.EventJS {
        cancel(): void;
        add(tag: ResourceLocation, ids: object): Internal.TagEventJS$TagWrapper<T>;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isCancelled(): boolean;
        notifyAll(): void;
        removeAllTagsFrom(ids: object): void;
        notify(): void;
        remove(tag: ResourceLocation, ids: object): Internal.TagEventJS$TagWrapper<T>;
        removeAll(tag: ResourceLocation): Internal.TagEventJS$TagWrapper<T>;
        post(event: string): void;
        post(t: Internal.ScriptType, id: string, sub: string): boolean;
        post(t: Internal.ScriptType, id: string): boolean;
        hashCode(): number;
        equals(arg0: object): boolean;
        get(id: ResourceLocation): Internal.TagEventJS$TagWrapper<T>;
        toString(): string;
        canCancel(): boolean;
        set globalPriorityList(o: object);
        get type(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ItemLike {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Products$P4 <F, T1, T2, T3, T4> {
        t4(): Internal.App<F, T4>;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        apply<R>(arg0: Internal.Applicative<F, object>, arg1: Internal.Function4<T1, T2, T3, T4, R>): Internal.App<F, R>;
        apply<R>(arg0: Internal.Applicative<F, object>, arg1: Internal.App<F, Internal.Function4<T1, T2, T3, T4, R>>): Internal.App<F, R>;
        hashCode(): number;
        and<T5, T6, T7>(arg0: Internal.Products$P3<F, T5, T6, T7>): Internal.Products$P7<F, T1, T2, T3, T4, T5, T6, T7>;
        and<T5, T6, T7, T8>(arg0: Internal.Products$P4<F, T5, T6, T7, T8>): Internal.Products$P8<F, T1, T2, T3, T4, T5, T6, T7, T8>;
        and<T5, T6>(arg0: Internal.Products$P2<F, T5, T6>): Internal.Products$P6<F, T1, T2, T3, T4, T5, T6>;
        and<T5>(arg0: Internal.App<F, T5>): Internal.Products$P5<F, T1, T2, T3, T4, T5>;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        t1(): Internal.App<F, T1>;
        notify(): void;
        t2(): Internal.App<F, T2>;
        t3(): Internal.App<F, T3>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface FilenameFilter {
        accept(arg0: Internal.File, arg1: string): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface SpriteExtended {
        isActive(): boolean;
        set active(arg0: boolean);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface OpenOption {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Frustum$Visibility extends Internal.Enum<Internal.Frustum$Visibility> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(name: string): Internal.Frustum$Visibility;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.Frustum$Visibility[];
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly OUTSIDE : Internal.Frustum$Visibility;
        static readonly INTERSECT : Internal.Frustum$Visibility;
        static readonly INSIDE : Internal.Frustum$Visibility;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Decoder$Simple <A> {
        decoder(): Internal.Decoder<A>;
        decode<T>(arg0: Internal.Dynamic<T>): Internal.DataResult<A>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class AttributeKey <T> extends Internal.AbstractConstant<Internal.AttributeKey<T>> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf<T>(arg0: string): Internal.AttributeKey<T>;
        static valueOf<T>(arg0: Internal.Class<object>, arg1: string): Internal.AttributeKey<T>;
        notifyAll(): void;
        equals(arg0: object): boolean;
        name(): string;
        static exists(arg0: string): boolean;
        toString(): string;
        static newInstance<T>(arg0: string): Internal.AttributeKey<T>;
        id(): number;
        compareTo(arg0: T): number;
        compareTo(arg0: object): number;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Iterable <T> {
        iterator(): Internal.Iterator<T>;
        spliterator(): Internal.Spliterator<T>;
        forEach(arg0: (arg0: T) => void): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Products$P15 <F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        apply<R>(arg0: Internal.Applicative<F, object>, arg1: Internal.Function15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R>): Internal.App<F, R>;
        apply<R>(arg0: Internal.Applicative<F, object>, arg1: Internal.App<F, Internal.Function15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R>>): Internal.App<F, R>;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class EntityPredicateBuilderJS implements Internal.ExtendedEntityFlagsPredicate$IBuilder<Internal.EntityPredicate> {
        isBaby(arg0: boolean): Internal.ExtendedEntityFlagsPredicate$IBuilder<any>;
        isBaby(arg0: boolean): Internal.EntityPredicateBuilderJS;
        nbt(arg0: Internal.CompoundTag): Internal.EntityPredicateBuilderJS;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        anyType(arg0: string[]): Internal.EntityPredicateBuilderJS;
        isCrouching(arg0: boolean): Internal.EntityPredicateBuilderJS;
        isCrouching(arg0: boolean): Internal.ExtendedEntityFlagsPredicate$IBuilder<any>;
        notifyAll(): void;
        isUnderWater(arg0: boolean): Internal.ExtendedEntityFlagsPredicate$IBuilder<any>;
        isUnderWater(arg0: boolean): Internal.EntityPredicateBuilderJS;
        isSprinting(arg0: boolean): Internal.ExtendedEntityFlagsPredicate$IBuilder<any>;
        isSprinting(arg0: boolean): Internal.EntityPredicateBuilderJS;
        matchFluid(arg0: string): Internal.EntityPredicateBuilderJS;
        notify(): void;
        hashCode(): number;
        matchBlock(arg0: string, arg1: Map<string, string>): Internal.EntityPredicateBuilderJS;
        matchBlock(arg0: string): Internal.EntityPredicateBuilderJS;
        hasEffect(arg0: Internal.MobEffect, arg1: number): Internal.EntityPredicateBuilderJS;
        hasEffect(arg0: Internal.MobEffect): Internal.EntityPredicateBuilderJS;
        isIllegarMob(arg0: boolean): Internal.EntityPredicateBuilderJS;
        isIllegarMob(arg0: boolean): Internal.ExtendedEntityFlagsPredicate$IBuilder<any>;
        isSwimming(arg0: boolean): Internal.EntityPredicateBuilderJS;
        isSwimming(arg0: boolean): Internal.ExtendedEntityFlagsPredicate$IBuilder<any>;
        isInWater(arg0: boolean): Internal.ExtendedEntityFlagsPredicate$IBuilder<any>;
        isInWater(arg0: boolean): Internal.EntityPredicateBuilderJS;
        isWaterMob(arg0: boolean): Internal.ExtendedEntityFlagsPredicate$IBuilder<any>;
        isWaterMob(arg0: boolean): Internal.EntityPredicateBuilderJS;
        catType(arg0: ResourceLocation): Internal.EntityPredicateBuilderJS;
        isUndeadMob(arg0: boolean): Internal.EntityPredicateBuilderJS;
        isUndeadMob(arg0: boolean): Internal.ExtendedEntityFlagsPredicate$IBuilder<any>;
        isCreature(arg0: boolean): Internal.EntityPredicateBuilderJS;
        isCreature(arg0: boolean): Internal.ExtendedEntityFlagsPredicate$IBuilder<any>;
        build(): Internal.EntityPredicate;
        build(): object;
        isMonster(arg0: boolean): Internal.EntityPredicateBuilderJS;
        isMonster(arg0: boolean): Internal.ExtendedEntityFlagsPredicate$IBuilder<any>;
        equals(arg0: object): boolean;
        isOnFire(arg0: boolean): Internal.EntityPredicateBuilderJS;
        isOnFire(arg0: boolean): Internal.ExtendedEntityFlagsPredicate$IBuilder<any>;
        matchMount(arg0: (arg0: Internal.EntityPredicateBuilderJS) => void): Internal.EntityPredicateBuilderJS;
        toString(): string;
        isArthropodMob(arg0: boolean): Internal.ExtendedEntityFlagsPredicate$IBuilder<any>;
        isArthropodMob(arg0: boolean): Internal.EntityPredicateBuilderJS;
        isOnGround(arg0: boolean): Internal.EntityPredicateBuilderJS;
        isOnGround(arg0: boolean): Internal.ExtendedEntityFlagsPredicate$IBuilder<any>;
        matchSlot(arg0: EquipmentSlot, arg1: Internal.IngredientJS): Internal.EntityPredicateBuilderJS;
        matchTargetedEntity(arg0: (arg0: Internal.EntityPredicateBuilderJS) => void): Internal.EntityPredicateBuilderJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IngredientKJS implements Internal.AsKJS {
        asKJS(): object;
        get itemsKJS(): Internal.ItemStack[];
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class CharsetEncoder {
        encode(arg0: Internal.CharBuffer, arg1: Internal.ByteBuffer, arg2: boolean): Internal.CoderResult;
        encode(arg0: Internal.CharBuffer): Internal.ByteBuffer;
        charset(): Internal.Charset;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        onUnmappableCharacter(arg0: Internal.CodingErrorAction): Internal.CharsetEncoder;
        notifyAll(): void;
        maxBytesPerChar(): number;
        isLegalReplacement(arg0: number[]): boolean;
        notify(): void;
        unmappableCharacterAction(): Internal.CodingErrorAction;
        malformedInputAction(): Internal.CodingErrorAction;
        flush(arg0: Internal.ByteBuffer): Internal.CoderResult;
        hashCode(): number;
        equals(arg0: object): boolean;
        canEncode(arg0: Internal.CharSequence): boolean;
        canEncode(arg0: string): boolean;
        averageBytesPerChar(): number;
        onMalformedInput(arg0: Internal.CodingErrorAction): Internal.CharsetEncoder;
        reset(): Internal.CharsetEncoder;
        toString(): string;
        replacement(): number[];
        replaceWith(arg0: number[]): Internal.CharsetEncoder;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IntComparator implements Internal.Comparator<number> {
        compare(arg0: number, arg1: number): number;
        compare(arg0: object, arg1: object): number;
        compare(arg0: number, arg1: number): number;
        thenComparing(arg0: Internal.Comparator<number>): Internal.Comparator<number>;
        thenComparing(arg0: Internal.IntComparator): Internal.IntComparator;
        equals(arg0: object): boolean;
        reversed(): Internal.IntComparator;
        reversed(): Internal.Comparator<any>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface FeatureAccess {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class Certificate implements Internal.Serializable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        verify(arg0: Internal.PublicKey): void;
        verify(arg0: Internal.PublicKey, arg1: string): void;
        verify(arg0: Internal.PublicKey, arg1: Internal.Provider): void;
        toString(): string;
        notify(): void;
        get type(): string;
        get encoded(): number[];
        get publicKey(): Internal.PublicKey;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ImmutableBox {
        hasPowerOf2Sides(): boolean;
        intersect(arg0: Internal.ImmutableBox): Internal.GridAlignedBB;
        intersects(arg0: Internal.ImmutableBox): boolean;
        intersects(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): boolean;
        forEachContained(arg0: Internal.CoordinateConsumer): void;
        union(arg0: Internal.ImmutableBox): Internal.ImmutableBox;
        empty(): boolean;
        volume(): number;
        sizeX(): number;
        contains(arg0: number, arg1: number, arg2: number): boolean;
        contains(arg0: Internal.ImmutableBox): boolean;
        isContainedBy(arg0: Internal.GridAlignedBB): boolean;
        toAABB(): Internal.AABB;
        copy(): Internal.GridAlignedBB;
        sizeY(): number;
        sameAs(arg0: Internal.AABB): boolean;
        sameAs(arg0: Internal.ImmutableBox): boolean;
        sizeZ(): number;
        get maxX(): number;
        get maxY(): number;
        get maxZ(): number;
        get minZ(): number;
        get minX(): number;
        get minY(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ResourceProvider {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class TypeAdapter <T> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        toJson(arg0: Internal.Writer, arg1: T): void;
        toJson(arg0: T): string;
        read(arg0: Internal.JsonReader): T;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toJsonTree(arg0: T): Internal.JsonElement;
        fromJson(arg0: string): T;
        fromJson(arg0: Internal.Reader): T;
        toString(): string;
        nullSafe(): Internal.TypeAdapter<T>;
        write(arg0: Internal.JsonWriter, arg1: T): void;
        notify(): void;
        fromJsonTree(arg0: Internal.JsonElement): T;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class KeyCompressor <T> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        decompress(arg0: number): T;
        size(): number;
        compress(arg0: T): number;
        compress(arg0: string): number;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface FieldNamingStrategy {
        translateName(arg0: Internal.Field): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface PrimitiveIterator$OfDouble implements Internal.PrimitiveIterator<number, Internal.DoubleConsumer> {
        next(): object;
        next(): number;
        hasNext(): boolean;
        forEachRemaining(arg0: object): void;
        forEachRemaining(arg0: Internal.DoubleConsumer): void;
        forEachRemaining(arg0: (arg0: number) => void): void;
        remove(): void;
        nextDouble(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface LongPredicate {
        or(arg0: Internal.LongPredicate): Internal.LongPredicate;
        test(arg0: number): boolean;
        and(arg0: Internal.LongPredicate): Internal.LongPredicate;
        negate(): Internal.LongPredicate;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface WatchEvent$Kind <T> {
        name(): string;
        type(): Internal.Class<T>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface MinecraftServerAccessor {
        get resources(): Internal.ServerResources;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ScriptType extends Internal.Enum<Internal.ScriptType> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isServer(): boolean;
        static valueOf(name: string): Internal.ScriptType;
        notifyAll(): void;
        static values(): Internal.ScriptType[];
        isClient(): boolean;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        static of(level: Internal.LevelReader): Internal.ScriptType;
        name(): string;
        toString(): string;
        ordinal(): number;
        readonly console : Internal.ConsoleJS;
        readonly manager : () => Internal.ScriptManager;
        static readonly SERVER : Internal.ScriptType;
        readonly executor : Internal.ExecutorService;
        readonly warnings : Internal.List<string>;
        static readonly STARTUP : Internal.ScriptType;
        static readonly CLIENT : Internal.ScriptType;
        readonly errors : Internal.List<string>;
        get logFile(): Internal.Path;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Long2ShortFunction implements it.unimi.dsi.fastutil.Function<number, number>, Internal.LongToIntFunction {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        andThenShort(arg0: Internal.Short2ShortFunction): Internal.Long2ShortFunction;
        composeByte(arg0: Internal.Byte2LongFunction): Internal.Byte2ShortFunction;
        andThenInt(arg0: Internal.Short2IntFunction): Internal.Long2IntFunction;
        composeReference<T>(arg0: Internal.Reference2LongFunction<T>): Internal.Reference2ShortFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: number) => T;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: number): number;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: object): object;
        remove(arg0: object): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Short2DoubleFunction): Internal.Long2DoubleFunction;
        andThenObject<T>(arg0: Internal.Short2ObjectFunction<T>): Internal.Long2ObjectFunction<T>;
        get(arg0: object): number;
        get(arg0: object): object;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Short2LongFunction): Internal.Long2LongFunction;
        composeLong(arg0: Internal.Long2LongFunction): Internal.Long2ShortFunction;
        andThenByte(arg0: Internal.Short2ByteFunction): Internal.Long2ByteFunction;
        andThenFloat(arg0: Internal.Short2FloatFunction): Internal.Long2FloatFunction;
        applyAsInt(arg0: number): number;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2LongFunction): Internal.Int2ShortFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2LongFunction): Internal.Float2ShortFunction;
        andThenChar(arg0: Internal.Short2CharFunction): Internal.Long2CharFunction;
        composeObject<T>(arg0: Internal.Object2LongFunction<T>): Internal.Object2ShortFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => number;
        composeShort(arg0: Internal.Short2LongFunction): Internal.Short2ShortFunction;
        andThenReference<T>(arg0: Internal.Short2ReferenceFunction<T>): Internal.Long2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2LongFunction): Internal.Char2ShortFunction;
        composeDouble(arg0: Internal.Double2LongFunction): Internal.Double2ShortFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ImmutableSetMultimap <K, V> extends Internal.ImmutableMultimap<K, V> implements Internal.SetMultimap<K, V> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        asMap(): Map<any, any>;
        keys(): Internal.Multiset<any>;
        notifyAll(): void;
        values(): Internal.Collection<any>;
        notify(): void;
        containsValue(arg0: object): boolean;
        put(arg0: K, arg1: V): boolean;
        remove(arg0: object, arg1: object): boolean;
        static flatteningToImmutableSetMultimap<T, K, V>(arg0: (arg0: T) => K, arg1: (arg0: T) => Internal.Stream<V>): Internal.Collector<T, object, Internal.ImmutableSetMultimap<K, V>>;
        removeAll(arg0: object): Internal.Collection<any>;
        removeAll(arg0: object): Internal.ImmutableCollection<any>;
        removeAll(arg0: object): Internal.ImmutableSet<V>;
        removeAll(arg0: object): Internal.Set<any>;
        hashCode(): number;
        static of<K, V>(arg0: K, arg1: V): Internal.ImmutableSetMultimap<K, V>;
        static of<K, V>(arg0: K, arg1: V, arg2: K, arg3: V): Internal.ImmutableSetMultimap<K, V>;
        static of<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V): Internal.ImmutableSetMultimap<K, V>;
        static of<K, V>(): Internal.ImmutableSetMultimap<K, V>;
        static of<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V, arg6: K, arg7: V, arg8: K, arg9: V): Internal.ImmutableSetMultimap<K, V>;
        static of<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V, arg6: K, arg7: V): Internal.ImmutableSetMultimap<K, V>;
        get(arg0: object): Internal.Collection<any>;
        get(arg0: K): Internal.ImmutableSet<V>;
        get(arg0: object): Internal.ImmutableCollection<any>;
        get(arg0: object): Internal.Set<any>;
        static builder<K, V>(): Internal.ImmutableSetMultimap$Builder<K, V>;
        keySet(): Internal.Set<any>;
        containsEntry(arg0: object, arg1: object): boolean;
        inverse(): Internal.ImmutableMultimap<any, any>;
        inverse(): Internal.ImmutableSetMultimap<V, K>;
        containsKey(arg0: object): boolean;
        isEmpty(): boolean;
        clear(): void;
        static copyOf<K, V>(arg0: Internal.Multimap<K, V>): Internal.ImmutableSetMultimap<K, V>;
        static copyOf<K, V>(arg0: Internal.Iterable<Internal.Map$Entry<K, V>>): Internal.ImmutableSetMultimap<K, V>;
        replaceValues(arg0: object, arg1: Internal.Iterable<any>): Internal.Collection<any>;
        replaceValues(arg0: object, arg1: Internal.Iterable<any>): Internal.ImmutableCollection<any>;
        replaceValues(arg0: K, arg1: Internal.Iterable<V>): Internal.ImmutableSet<V>;
        replaceValues(arg0: object, arg1: Internal.Iterable<any>): Internal.Set<any>;
        static toImmutableSetMultimap<T, K, V>(arg0: (arg0: T) => K, arg1: (arg0: T) => V): Internal.Collector<T, object, Internal.ImmutableSetMultimap<K, V>>;
        entries(): Internal.Collection<any>;
        entries(): Internal.ImmutableCollection<any>;
        entries(): Internal.Set<any>;
        entries(): Internal.ImmutableSet<Internal.Map$Entry<K, V>>;
        size(): number;
        equals(arg0: object): boolean;
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class Buffer {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hasArray(): boolean;
        notifyAll(): void;
        hasRemaining(): boolean;
        clear(): Internal.Buffer;
        duplicate(): Internal.Buffer;
        notify(): void;
        remaining(): number;
        capacity(): number;
        isReadOnly(): boolean;
        rewind(): Internal.Buffer;
        slice(arg0: number, arg1: number): Internal.Buffer;
        slice(): Internal.Buffer;
        array(): object;
        hashCode(): number;
        equals(arg0: object): boolean;
        limit(arg0: number): Internal.Buffer;
        limit(): number;
        reset(): Internal.Buffer;
        arrayOffset(): number;
        toString(): string;
        position(): number;
        position(arg0: number): Internal.Buffer;
        flip(): Internal.Buffer;
        isDirect(): boolean;
        mark(): Internal.Buffer;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class StringBuilder extends Internal.AbstractStringBuilder implements Internal.Serializable, Internal.Comparable<Internal.StringBuilder>, Internal.CharSequence {
        deleteCharAt(arg0: number): Internal.AbstractStringBuilder;
        deleteCharAt(arg0: number): Internal.StringBuilder;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        codePointAt(arg0: number): number;
        notifyAll(): void;
        setCharAt(arg0: number, arg1: string): void;
        replace(arg0: number, arg1: number, arg2: string): Internal.AbstractStringBuilder;
        replace(arg0: number, arg1: number, arg2: string): Internal.StringBuilder;
        insert(arg0: number, arg1: number): Internal.AbstractStringBuilder;
        insert(arg0: number, arg1: number): Internal.StringBuilder;
        insert(arg0: number, arg1: number): Internal.StringBuilder;
        insert(arg0: number, arg1: number): Internal.AbstractStringBuilder;
        insert(arg0: number, arg1: number): Internal.StringBuilder;
        insert(arg0: number, arg1: number): Internal.AbstractStringBuilder;
        insert(arg0: number, arg1: string): Internal.AbstractStringBuilder;
        insert(arg0: number, arg1: string): Internal.StringBuilder;
        insert(arg0: number, arg1: object): Internal.AbstractStringBuilder;
        insert(arg0: number, arg1: object): Internal.StringBuilder;
        insert(arg0: number, arg1: string[], arg2: number, arg3: number): Internal.AbstractStringBuilder;
        insert(arg0: number, arg1: string[], arg2: number, arg3: number): Internal.StringBuilder;
        insert(arg0: number, arg1: Internal.CharSequence, arg2: number, arg3: number): Internal.StringBuilder;
        insert(arg0: number, arg1: Internal.CharSequence, arg2: number, arg3: number): Internal.AbstractStringBuilder;
        insert(arg0: number, arg1: Internal.CharSequence): Internal.StringBuilder;
        insert(arg0: number, arg1: Internal.CharSequence): Internal.AbstractStringBuilder;
        insert(arg0: number, arg1: string[]): Internal.StringBuilder;
        insert(arg0: number, arg1: string[]): Internal.AbstractStringBuilder;
        insert(arg0: number, arg1: boolean): Internal.StringBuilder;
        insert(arg0: number, arg1: boolean): Internal.AbstractStringBuilder;
        insert(arg0: number, arg1: string): Internal.StringBuilder;
        insert(arg0: number, arg1: string): Internal.AbstractStringBuilder;
        insert(arg0: number, arg1: number): Internal.AbstractStringBuilder;
        insert(arg0: number, arg1: number): Internal.StringBuilder;
        compareTo(arg0: object): number;
        compareTo(arg0: Internal.StringBuilder): number;
        delete(arg0: number, arg1: number): Internal.AbstractStringBuilder;
        delete(arg0: number, arg1: number): Internal.StringBuilder;
        notify(): void;
        substring(arg0: number, arg1: number): string;
        substring(arg0: number): string;
        capacity(): number;
        appendCodePoint(arg0: number): Internal.StringBuilder;
        appendCodePoint(arg0: number): Internal.AbstractStringBuilder;
        hashCode(): number;
        codePointBefore(arg0: number): number;
        indexOf(arg0: string): number;
        indexOf(arg0: string, arg1: number): number;
        codePointCount(arg0: number, arg1: number): number;
        codePoints(): Internal.IntStream;
        trimToSize(): void;
        getChars(arg0: number, arg1: number, arg2: string[], arg3: number): void;
        isEmpty(): boolean;
        length(): number;
        subSequence(arg0: number, arg1: number): Internal.CharSequence;
        reverse(): Internal.StringBuilder;
        reverse(): Internal.AbstractStringBuilder;
        lastIndexOf(arg0: string, arg1: number): number;
        lastIndexOf(arg0: string): number;
        setLength(arg0: number): void;
        equals(arg0: object): boolean;
        toString(): string;
        ensureCapacity(arg0: number): void;
        chars(): Internal.IntStream;
        offsetByCodePoints(arg0: number, arg1: number): number;
        charAt(arg0: number): string;
        append(arg0: Internal.StringBuffer): Internal.AbstractStringBuilder;
        append(arg0: Internal.StringBuffer): Internal.StringBuilder;
        append(arg0: Internal.CharSequence): Internal.AbstractStringBuilder;
        append(arg0: Internal.CharSequence): Internal.Appendable;
        append(arg0: Internal.CharSequence): Internal.StringBuilder;
        append(arg0: Internal.CharSequence, arg1: number, arg2: number): Internal.AbstractStringBuilder;
        append(arg0: Internal.CharSequence, arg1: number, arg2: number): Internal.Appendable;
        append(arg0: Internal.CharSequence, arg1: number, arg2: number): Internal.StringBuilder;
        append(arg0: string[]): Internal.AbstractStringBuilder;
        append(arg0: string[]): Internal.StringBuilder;
        append(arg0: object): Internal.AbstractStringBuilder;
        append(arg0: object): Internal.StringBuilder;
        append(arg0: string): Internal.AbstractStringBuilder;
        append(arg0: string): Internal.StringBuilder;
        append(arg0: number): Internal.AbstractStringBuilder;
        append(arg0: number): Internal.StringBuilder;
        append(arg0: number): Internal.AbstractStringBuilder;
        append(arg0: number): Internal.StringBuilder;
        append(arg0: number): Internal.AbstractStringBuilder;
        append(arg0: number): Internal.StringBuilder;
        append(arg0: number): Internal.AbstractStringBuilder;
        append(arg0: number): Internal.StringBuilder;
        append(arg0: string): Internal.AbstractStringBuilder;
        append(arg0: string): Internal.Appendable;
        append(arg0: string): Internal.StringBuilder;
        append(arg0: boolean): Internal.AbstractStringBuilder;
        append(arg0: boolean): Internal.StringBuilder;
        append(arg0: string[], arg1: number, arg2: number): Internal.AbstractStringBuilder;
        append(arg0: string[], arg1: number, arg2: number): Internal.StringBuilder;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class TextStyle extends Internal.Enum<Internal.TextStyle> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        static valueOf(arg0: string): Internal.TextStyle;
        notifyAll(): void;
        static values(): Internal.TextStyle[];
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        asNormal(): Internal.TextStyle;
        hashCode(): number;
        equals(arg0: object): boolean;
        isStandalone(): boolean;
        name(): string;
        toString(): string;
        asStandalone(): Internal.TextStyle;
        ordinal(): number;
        static readonly SHORT_STANDALONE : Internal.TextStyle;
        static readonly NARROW_STANDALONE : Internal.TextStyle;
        static readonly FULL_STANDALONE : Internal.TextStyle;
        static readonly FULL : Internal.TextStyle;
        static readonly SHORT : Internal.TextStyle;
        static readonly NARROW : Internal.TextStyle;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Era implements Internal.TemporalAccessor, Internal.TemporalAdjuster {
        getLong(arg0: Internal.TemporalField): number;
        getDisplayName(arg0: Internal.TextStyle, arg1: Internal.Locale): string;
        query<R>(arg0: Internal.TemporalQuery<R>): R;
        get(arg0: Internal.TemporalField): number;
        adjustInto(arg0: Internal.Temporal): Internal.Temporal;
        range(arg0: Internal.TemporalField): Internal.ValueRange;
        isSupported(arg0: Internal.TemporalField): boolean;
        get value(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class AbstractList <E> extends Internal.AbstractCollection<E> implements Internal.List<E> {
        add(arg0: number, arg1: E): void;
        add(arg0: E): boolean;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        subList(arg0: number, arg1: number): Internal.List<E>;
        set(arg0: number, arg1: E): E;
        spliterator(): Internal.Spliterator<E>;
        notifyAll(): void;
        isEmpty(): boolean;
        clear(): void;
        sort(arg0: Internal.Comparator<E>): void;
        replaceAll(arg0: Internal.UnaryOperator<E>): void;
        notify(): void;
        remove(arg0: number): E;
        remove(arg0: object): boolean;
        lastIndexOf(arg0: object): number;
        contains(arg0: object): boolean;
        iterator(): Internal.Iterator<E>;
        size(): number;
        addAll(arg0: number, arg1: Internal.Collection<E>): boolean;
        hashCode(): number;
        equals(arg0: object): boolean;
        get(arg0: number): E;
        toArray(): object[];
        toArray<T>(arg0: T[]): T[];
        listIterator(): Internal.ListIterator<E>;
        listIterator(arg0: number): Internal.ListIterator<E>;
        toString(): string;
        indexOf(arg0: object): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class SequencedAssemblyRecipeJS extends Internal.RecipeJS {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        ingredientAction(filter: Internal.IngredientActionFilter, action: Internal.IngredientAction): Internal.RecipeJS;
        notifyAll(): void;
        convertReplacedInput(index: number, oldIngredient: Internal.IngredientJS, newIngredient: Internal.IngredientJS): Internal.IngredientJS;
        convertReplacedOutput(index: number, oldStack: Internal.ItemStackJS, newStack: Internal.ItemStackJS): Internal.ItemStackJS;
        save(): void;
        damageIngredient(filter: Internal.IngredientActionFilter, damage: number): Internal.RecipeJS;
        damageIngredient(filter: Internal.IngredientActionFilter): Internal.RecipeJS;
        getId(): string;
        dontAdd(): void;
        notify(): void;
        serializeJson(): void;
        replaceOutput(i: Internal.IngredientJS, with_: Internal.ItemStackJS, exact: boolean): boolean;
        hashCode(): number;
        merge(data: object): Internal.RecipeJS;
        create(args: Internal.ListJS): void;
        deserializeJson(): void;
        id(_id: ResourceLocation): Internal.RecipeJS;
        parseIngredientItem(o: object, key: string): Internal.IngredientJS;
        parseIngredientItem(o: object): Internal.IngredientJS;
        group(g: string): Internal.RecipeJS;
        deserialize(): void;
        serializeNBTAsJson(): boolean;
        getOutputIndex(ingredient: Internal.IngredientJS, exact: boolean): number;
        loops(loops: number): Internal.SequencedAssemblyRecipeJS;
        getInputIndex(ingredient: Internal.IngredientJS, exact: boolean): number;
        setGroup(g: string): void;
        serialize(): void;
        transitionalItem(item: Internal.ItemStackJS): Internal.SequencedAssemblyRecipeJS;
        resultFromRecipeJson(json: Internal.JsonObject): Internal.ItemStackJS;
        serializeIngredientStack(in_: Internal.IngredientStackJS): Internal.JsonElement;
        stage(s: string): Internal.RecipeJS;
        replaceInput(i: Internal.IngredientJS, with_: Internal.IngredientJS, exact: boolean): boolean;
        getType(): string;
        equals(arg0: object): boolean;
        getGroup(): string;
        serializeItemStack(stack: Internal.ItemStackJS): Internal.JsonElement;
        hasOutput(ingredient: Internal.IngredientJS, exact: boolean): boolean;
        toString(): string;
        keepIngredient(filter: Internal.IngredientActionFilter): Internal.RecipeJS;
        parseResultItem(o: object): Internal.ItemStackJS;
        hasInput(ingredient: Internal.IngredientJS, exact: boolean): boolean;
        customIngredientAction(filter: Internal.IngredientActionFilter, id: string): Internal.RecipeJS;
        replaceIngredient(filter: Internal.IngredientActionFilter, item: Internal.ItemStackJS): Internal.RecipeJS;
        static currentRecipe : Internal.RecipeJS;
        originalJson : Internal.JsonObject;
        serializeOutputs : boolean;
        originalRecipe : Internal.Recipe<object>;
        readonly inputItems : Internal.List<Internal.IngredientJS>;
        static itemErrors : false;
        json : Internal.JsonObject;
        readonly outputItems : Internal.List<Internal.ItemStackJS>;
        type : Internal.RecipeTypeJS;
        serializeInputs : boolean;
        get mod(): string;
        get uniqueId(): string;
        get fromToString(): string;
        get path(): string;
        get orCreateId(): ResourceLocation;
        get originalRecipeResult(): Internal.ItemStackJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ParentTask implements Internal.MultiTask<Internal.ParentTask> {
        isActive(): boolean;
        isCompleted(): boolean;
        set nestedType(arg0: Internal.NestedType);
        get nestedType(): Internal.NestedType;
        get progress(): number;
        get description(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class MapJS extends Internal.LinkedHashMap<string, object> implements Internal.StringBuilderAppendable, Internal.ChangeListener<object>, Internal.Copyable, Internal.JsonSerializable, Internal.NBTSerializable {
        static nbt(map: object): Internal.CompoundTag;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        getOrDefault(arg0: object, arg1: V): V;
        notifyAll(): void;
        replace(arg0: K, arg1: V): V;
        replace(arg0: K, arg1: V, arg2: V): boolean;
        static isNbt(o: object): boolean;
        notify(): void;
        containsValue(arg0: object): boolean;
        put(key: string, value: object): object;
        put(arg0: object, arg1: object): object;
        remove(key: object): object;
        remove(arg0: object, arg1: object): boolean;
        toNBT(): Internal.Tag;
        toNBT(): Internal.CompoundTag;
        getOrNewList(id: string): Internal.ListJS;
        hashCode(): number;
        get(arg0: object): V;
        putAll(m: Map<string, object>): void;
        static of(o: object): Internal.MapJS;
        static json(map: object): Internal.JsonObject;
        copy(): Internal.MapJS;
        copy(): Internal.Copyable;
        appendString(builder: Internal.StringBuilder): void;
        onChanged(o: object): void;
        containsKey(arg0: object): boolean;
        containsAll(other: Internal.MapJS): boolean;
        isEmpty(): boolean;
        containsAny(other: Internal.MapJS): boolean;
        clear(): void;
        toJson(): Internal.JsonObject;
        toJson(): Internal.JsonElement;
        size(): number;
        getOrNewMap(id: string): Internal.MapJS;
        equals(arg0: object): boolean;
        clone(): object;
        toString(): string;
        putIfAbsent(arg0: K, arg1: V): V;
        changeListener : Internal.ChangeListener<Internal.MapJS>;
        get length(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IForgeFluid {
        getExplosionResistance(arg0: Internal.FluidState, arg1: Internal.BlockGetter, arg2: BlockPos, arg3: Internal.Explosion): number;
        isAABBInsideMaterial(arg0: Internal.FluidState, arg1: Internal.LevelReader, arg2: BlockPos, arg3: Internal.AABB, arg4: net.minecraft.world.level.material.Material): boolean;
        isEntityInside(arg0: Internal.FluidState, arg1: Internal.LevelReader, arg2: BlockPos, arg3: Internal.Entity, arg4: number, arg5: Internal.SetTag<Internal.Fluid>, arg6: boolean): boolean;
        isAABBInsideLiquid(arg0: Internal.FluidState, arg1: Internal.LevelReader, arg2: BlockPos, arg3: Internal.AABB): boolean;
        get attributes(): Internal.FluidAttributes;
        get tags(): Internal.Set<ResourceLocation>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface MaterialManager {
        defaultCutout(): Internal.MaterialGroup;
        solid(arg0: Internal.RenderType): Internal.MaterialGroup;
        defaultSolid(): Internal.MaterialGroup;
        defaultTransparent(): Internal.MaterialGroup;
        cutout(arg0: Internal.RenderType): Internal.MaterialGroup;
        state(arg0: Internal.RenderLayer, arg1: Internal.RenderType): Internal.MaterialGroup;
        transparent(arg0: Internal.RenderType): Internal.MaterialGroup;
        get originCoordinate(): Vec3i;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ModelGenerator$Element {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        face(direction: Internal.Direction, consumer: (arg0: Internal.ModelGenerator$Face) => void): void;
        toJson(): Internal.JsonObject;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        box(b: Internal.AABB): Internal.ModelGenerator$Element;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ThreadGroup implements Internal.Thread$UncaughtExceptionHandler {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        notify(): void;
        hashCode(): number;
        isDaemon(): boolean;
        interrupt(): void;
        activeGroupCount(): number;
        enumerate(arg0: Internal.ThreadGroup[], arg1: boolean): number;
        enumerate(arg0: Internal.ThreadGroup[]): number;
        enumerate(arg0: Internal.Thread[]): number;
        enumerate(arg0: Internal.Thread[], arg1: boolean): number;
        suspend(): void;
        activeCount(): number;
        resume(): void;
        isDestroyed(): boolean;
        destroy(): void;
        parentOf(arg0: Internal.ThreadGroup): boolean;
        list(): void;
        checkAccess(): void;
        allowThreadSuspension(arg0: boolean): boolean;
        stop(): void;
        equals(arg0: object): boolean;
        uncaughtException(arg0: Internal.Thread, arg1: Internal.Throwable): void;
        toString(): string;
        set maxPriority(arg0: number);
        get name(): string;
        get parent(): Internal.ThreadGroup;
        set daemon(arg0: boolean);
        get maxPriority(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class BlockEntityPredicate implements Internal.BlockPredicate {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        data(cd: Internal.BlockEntityPredicateDataCheck): Internal.BlockEntityPredicate;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        check(block: Internal.BlockContainerJS): boolean;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class PlayerEventJS extends Internal.LivingEntityEventJS {
        cancel(): void;
        addGameStage(stage: string): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isCancelled(): boolean;
        notifyAll(): void;
        notify(): void;
        post(id: string, sub: string): boolean;
        post(id: string): boolean;
        post(t: Internal.ScriptType, id: string, sub: string): boolean;
        post(t: Internal.ScriptType, id: string): boolean;
        hasGameStage(stage: string): boolean;
        hashCode(): number;
        equals(arg0: object): boolean;
        removeGameStage(stage: string): void;
        toString(): string;
        canCancel(): boolean;
        get server(): Internal.ServerJS;
        get player(): Internal.PlayerJS<any>;
        get entity(): Internal.EntityJS;
        get level(): Internal.LevelJS;
        get minecraftPlayer(): Internal.Player;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Int2ObjectFunction <V> implements it.unimi.dsi.fastutil.Function<number, V>, Internal.IntFunction<V> {
        getOrDefault(arg0: object, arg1: V): V;
        getOrDefault(arg0: number, arg1: V): V;
        andThenShort(arg0: Internal.Object2ShortFunction<V>): Internal.Int2ShortFunction;
        composeByte(arg0: Internal.Byte2IntFunction): Internal.Byte2ObjectFunction<V>;
        andThenInt(arg0: Internal.Object2IntFunction<V>): Internal.Int2IntFunction;
        composeReference<T>(arg0: Internal.Reference2IntFunction<T>): (arg0: T) => V;
        put(arg0: number, arg1: V): V;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: V): V;
        remove(arg0: number): V;
        remove(arg0: object): V;
        defaultReturnValue(): V;
        defaultReturnValue(arg0: V): void;
        andThenDouble(arg0: Internal.Object2DoubleFunction<V>): Internal.Int2DoubleFunction;
        andThenObject<T>(arg0: (arg0: V) => T): Internal.Int2ObjectFunction<T>;
        get(arg0: object): V;
        get(arg0: number): V;
        andThenLong(arg0: Internal.Object2LongFunction<V>): Internal.Int2LongFunction;
        composeLong(arg0: Internal.Long2IntFunction): Internal.Long2ObjectFunction<V>;
        andThenByte(arg0: Internal.Object2ByteFunction<V>): Internal.Int2ByteFunction;
        andThenFloat(arg0: Internal.Object2FloatFunction<V>): Internal.Int2FloatFunction;
        apply(arg0: number): V;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2IntFunction): Internal.Int2ObjectFunction<V>;
        clear(): void;
        composeFloat(arg0: Internal.Float2IntFunction): Internal.Float2ObjectFunction<V>;
        andThenChar(arg0: Internal.Object2CharFunction<V>): Internal.Int2CharFunction;
        composeObject<T>(arg0: Internal.Object2IntFunction<T>): (arg0: T) => V;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => V;
        composeShort(arg0: Internal.Short2IntFunction): Internal.Short2ObjectFunction<V>;
        andThenReference<T>(arg0: (arg0: V) => T): Internal.Int2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2IntFunction): Internal.Char2ObjectFunction<V>;
        composeDouble(arg0: Internal.Double2IntFunction): Internal.Double2ObjectFunction<V>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IModBusEvent {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface FunctionContainer {
        lootingEnchant(count: Internal.NumberProvider, limit: number): Internal.FunctionContainer;
        enchantWithLevels(levels: Internal.NumberProvider, treasure: boolean): Internal.FunctionContainer;
        damage(damage: Internal.NumberProvider): Internal.FunctionContainer;
        nbt(tag: Internal.CompoundTag): Internal.FunctionContainer;
        lootTable(table: ResourceLocation, seed: number): Internal.FunctionContainer;
        copyName(source: Internal.CopyNameFunction$NameSource): Internal.FunctionContainer;
        addFunction(arg0: Internal.JsonObject): Internal.FunctionContainer;
        count(count: Internal.NumberProvider): Internal.FunctionContainer;
        name(name: Internal.Text, entity: Internal.LootContext$EntityTarget): Internal.FunctionContainer;
        name(name: Internal.Text): Internal.FunctionContainer;
        furnaceSmelt(): Internal.FunctionContainer;
        addConditionalFunction(func: (arg0: Internal.ConditionalFunction) => void): Internal.FunctionContainer;
        enchantRandomly(enchantments: ResourceLocation[]): Internal.FunctionContainer;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ObjDoubleConsumer <T> {
        accept(arg0: T, arg1: number): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class PrintStream extends Internal.FilterOutputStream implements Internal.Appendable, Internal.Closeable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        format(arg0: string, arg1: object[]): Internal.PrintStream;
        format(arg0: Internal.Locale, arg1: string, arg2: object[]): Internal.PrintStream;
        checkError(): boolean;
        notify(): void;
        printf(arg0: Internal.Locale, arg1: string, arg2: object[]): Internal.PrintStream;
        printf(arg0: string, arg1: object[]): Internal.PrintStream;
        print(arg0: boolean): void;
        print(arg0: string): void;
        print(arg0: string[]): void;
        print(arg0: number): void;
        print(arg0: number): void;
        print(arg0: number): void;
        print(arg0: string): void;
        print(arg0: number): void;
        print(arg0: object): void;
        println(arg0: string): void;
        println(arg0: object): void;
        println(arg0: number): void;
        println(arg0: number): void;
        println(arg0: string[]): void;
        println(arg0: boolean): void;
        println(): void;
        println(arg0: string): void;
        println(arg0: number): void;
        println(arg0: number): void;
        writeBytes(arg0: number[]): void;
        flush(): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        static nullOutputStream(): Internal.OutputStream;
        close(): void;
        write(arg0: number[], arg1: number, arg2: number): void;
        write(arg0: number): void;
        write(arg0: number[]): void;
        append(arg0: Internal.CharSequence): Internal.Appendable;
        append(arg0: Internal.CharSequence): Internal.PrintStream;
        append(arg0: Internal.CharSequence, arg1: number, arg2: number): Internal.Appendable;
        append(arg0: Internal.CharSequence, arg1: number, arg2: number): Internal.PrintStream;
        append(arg0: string): Internal.Appendable;
        append(arg0: string): Internal.PrintStream;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Function12 <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R> {
        curry9(): Internal.Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, Internal.Function3<T10, T11, T12, R>>;
        apply(arg0: T1, arg1: T2, arg2: T3, arg3: T4, arg4: T5, arg5: T6, arg6: T7, arg7: T8, arg8: T9, arg9: T10, arg10: T11, arg11: T12): R;
        curry7(): Internal.Function7<T1, T2, T3, T4, T5, T6, T7, Internal.Function5<T8, T9, T10, T11, T12, R>>;
        curry8(): Internal.Function8<T1, T2, T3, T4, T5, T6, T7, T8, Internal.Function4<T9, T10, T11, T12, R>>;
        curry5(): Internal.Function5<T1, T2, T3, T4, T5, Internal.Function7<T6, T7, T8, T9, T10, T11, T12, R>>;
        curry6(): Internal.Function6<T1, T2, T3, T4, T5, T6, Internal.Function6<T7, T8, T9, T10, T11, T12, R>>;
        curry10(): Internal.Function10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, (arg0: T11, arg1: T12) => R>;
        curry3(): Internal.Function3<T1, T2, T3, Internal.Function9<T4, T5, T6, T7, T8, T9, T10, T11, T12, R>>;
        curry11(): Internal.Function11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, (arg0: T12) => R>;
        curry4(): Internal.Function4<T1, T2, T3, T4, Internal.Function8<T5, T6, T7, T8, T9, T10, T11, T12, R>>;
        curry2(): (arg0: T1, arg1: T2) => Internal.Function10<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R>;
        curry(): (arg0: T1) => Internal.Function11<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ContextFactory$Listener {
        contextReleased(arg0: Internal.Context): void;
        contextCreated(arg0: Internal.Context): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ScriptStackElement implements Internal.Serializable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        renderJavaStyle(sb: Internal.StringBuilder): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        renderMozillaStyle(sb: Internal.StringBuilder): void;
        toString(): string;
        notify(): void;
        readonly fileName : string;
        readonly functionName : string;
        readonly lineNumber : number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Reference2IntFunction <K> implements it.unimi.dsi.fastutil.Function<K, number>, Internal.ToIntFunction<K> {
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        andThenShort(arg0: Internal.Int2ShortFunction): Internal.Reference2ShortFunction<K>;
        composeByte(arg0: Internal.Byte2ReferenceFunction<K>): Internal.Byte2IntFunction;
        andThenInt(arg0: Internal.Int2IntFunction): Internal.Reference2IntFunction<K>;
        composeReference<T>(arg0: (arg0: T) => K): Internal.Reference2IntFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: K) => T;
        put(arg0: K, arg1: number): number;
        put(arg0: K, arg1: number): number;
        put(arg0: object, arg1: object): object;
        remove(arg0: object): number;
        remove(arg0: object): object;
        defaultReturnValue(): number;
        defaultReturnValue(arg0: number): void;
        andThenDouble(arg0: Internal.Int2DoubleFunction): Internal.Reference2DoubleFunction<K>;
        andThenObject<T>(arg0: Internal.Int2ObjectFunction<T>): (arg0: K) => T;
        get(arg0: object): object;
        get(arg0: object): number;
        andThenLong(arg0: Internal.Int2LongFunction): Internal.Reference2LongFunction<K>;
        composeLong(arg0: Internal.Long2ReferenceFunction<K>): Internal.Long2IntFunction;
        andThenByte(arg0: Internal.Int2ByteFunction): Internal.Reference2ByteFunction<K>;
        andThenFloat(arg0: Internal.Int2FloatFunction): Internal.Reference2FloatFunction<K>;
        applyAsInt(arg0: K): number;
        removeInt(arg0: object): number;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        composeInt(arg0: Internal.Int2ReferenceFunction<K>): Internal.Int2IntFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2ReferenceFunction<K>): Internal.Float2IntFunction;
        andThenChar(arg0: Internal.Int2CharFunction): Internal.Reference2CharFunction<K>;
        getInt(arg0: object): number;
        composeObject<T>(arg0: (arg0: T) => K): Internal.Object2IntFunction<T>;
        size(): number;
        composeShort(arg0: Internal.Short2ReferenceFunction<K>): Internal.Short2IntFunction;
        andThenReference<T>(arg0: Internal.Int2ReferenceFunction<T>): (arg0: K) => T;
        composeChar(arg0: Internal.Char2ReferenceFunction<K>): Internal.Char2IntFunction;
        composeDouble(arg0: Internal.Double2ReferenceFunction<K>): Internal.Double2IntFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class LivingEntity extends Internal.Entity implements Internal.ICitadelDataEntity, net.blay09.mods.clienttweaks.mixin.LivingEntityAccessor, Internal.LivingEntityKJS, Internal.LivingEntityAccessor, Internal.BlockCachingEntity, Internal.EquipmentEntity, com.simibubi.create.foundation.mixin.accessor.LivingEntityAccessor {
        backpackedMoved(): boolean;
        getCapability<T>(arg0: Internal.Capability<T>, arg1: Internal.Direction): Internal.LazyOptional<T>;
        onEndimationEnd(arg0: Internal.PlayableEndimation, arg1: Internal.PlayableEndimation): void;
        canBeRiddenInWater(arg0: Internal.Entity): boolean;
        handler$zzo000$tickHead(arg0: Internal.CallbackInfo): void;
        isEndimationPlaying(arg0: Internal.PlayableEndimation): boolean;
        isActive(): boolean;
        handler$zgm001$tick(arg0: Internal.CallbackInfo): void;
        create$callSpawnItemParticles(arg0: Internal.ItemStack, arg1: number): void;
        handler$zjn000$onUpdateFluidOnEyes(arg0: Internal.CallbackInfo): void;
        changeDimension(arg0: Internal.ServerLevel, arg1: Internal.ITeleporter): Internal.Entity;
        serializeNBT(): Internal.Tag;
        serializeNBT(): Internal.CompoundTag;
        invalidateCaps(): void;
        foodEatenKJS(is: Internal.ItemStack): void;
        revive(): void;
        canUpdate(): boolean;
        canUpdate(arg0: boolean): void;
        handler$bgc000$tryShortcutFluidPushing(tag: net.minecraft.tags.Tag<any>, speed: number, cir: Internal.CallbackInfoReturnable<any>, box: Internal.AABB, x1: number, x2: number, y1: number, y2: number, z1: number, z2: number, zero: number): void;
        resetEndimation(): void;
        areCapsCompatible(arg0: Internal.CapabilityDispatcher): boolean;
        getEyeHeightAccess(arg0: Internal.Pose, arg1: Internal.EntityDimensions): number;
        reviveCaps(): void;
        lithiumOnBlockCacheDeleted(): void;
        canRiderInteract(): boolean;
        getEntries(arg0: boolean): Internal.Set<any>;
        onAddedToWorld(): void;
        handler$zcp000$read(arg0: Internal.CompoundTag, arg1: Internal.CallbackInfo): void;
        canTrample(arg0: Internal.BlockState, arg1: BlockPos, arg2: number): boolean;
        getClassification(arg0: boolean): Internal.MobCategory;
        onEndimationStart(arg0: Internal.PlayableEndimation, arg1: Internal.PlayableEndimation): void;
        isNoEndimationPlaying(): boolean;
        lithiumSetClimbingMobCachingSectionUpdateBehavior(listenForCachedBlockChanges: boolean): void;
        shouldRiderSit(): boolean;
        getPickedResult(arg0: Internal.HitResult): Internal.ItemStack;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        lithiumOnEquipmentChanged(): void;
        lithiumOnBlockCacheSet(newState: Internal.BlockState): void;
        handler$zjn000$onUpdateFluidOnEyeAssign(arg0: Internal.CallbackInfo): void;
        notify(): void;
        handler$zzo000$moveStep(arg0: Internal.MoverType, arg1: Vec3, arg2: Internal.CallbackInfo): void;
        endimateTick(): void;
        isDirty(): boolean;
        hashCode(): number;
        isAddedToWorld(): boolean;
        addListener(listener: Internal.NearbyEntityListener): void;
        onRemovedFromWorld(): void;
        isMultipartEntity(): boolean;
        deserializeNBT(arg0: Internal.CompoundTag): void;
        deserializeNBT(arg0: Internal.Tag): void;
        curePotionEffects(arg0: Internal.ItemStack): boolean;
        clean(): void;
        asKJS(): object;
        getValue(arg0: Internal.TrackedData<any>): object;
        shouldRiderFaceForward(arg0: Internal.Player): boolean;
        setValue(arg0: Internal.TrackedData<any>, arg1: object): void;
        equals(arg0: object): boolean;
        toString(): string;
        set citadelEntityData(arg0: Internal.CompoundTag);
        get cachedFeetBlockState(): Internal.BlockState;
        get pos(): Internal.Position;
        get persistentDataKJS(): Internal.CompoundTag;
        get endimatedState(): Internal.Endimatable$EndimatedState;
        get effectHandler(): Internal.EndimationEffectHandler;
        get dataEffectColorId_$md$85ada3$1(): Internal.EntityDataAccessor<any>;
        set animationTick(arg0: number);
        get citadelEntityData(): Internal.CompoundTag;
        get listener(): Internal.NearbyEntityListenerMulti;
        get isInsidePortal(): boolean;
        get persistentData(): Internal.CompoundTag;
        get remainingFireTicks(): number;
        get dataMap(): Map<any, any>;
        get entityChangeListener(): Internal.EntityInLevelCallback;
        set dataMap(arg0: Map<any, any>);
        get dataEffectAmbienceId_$md$85ada3$0(): Internal.EntityDataAccessor<any>;
        get lastPos(): BlockPos;
        get parts(): Internal.PartEntity<object>[];
        get playingEndimation(): Internal.PlayableEndimation;
        get dirtyEntries(): Internal.Set<any>;
        set playingEndimation(arg0: Internal.PlayableEndimation);
        get animationTick(): number;
        set remainingFireTicks(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Endimation$Builder$Keyframes {
        static keyframes(): Internal.Endimation$Builder$Keyframes;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        build(): (arg0: string) => Internal.Endimation$PartKeyframes;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        part(arg0: string, arg1: Internal.Endimation$PartKeyframes$Builder): Internal.Endimation$Builder$Keyframes;
        part(arg0: string, arg1: Internal.Endimation$PartKeyframes): Internal.Endimation$Builder$Keyframes;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ZoneOffsetTransitionRule implements Internal.Serializable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        notify(): void;
        isMidnightEndOfDay(): boolean;
        hashCode(): number;
        static of(arg0: Internal.Month, arg1: number, arg2: Internal.DayOfWeek, arg3: Internal.LocalTime, arg4: boolean, arg5: Internal.ZoneOffsetTransitionRule$TimeDefinition, arg6: Internal.ZoneOffset, arg7: Internal.ZoneOffset, arg8: Internal.ZoneOffset): Internal.ZoneOffsetTransitionRule;
        equals(arg0: object): boolean;
        toString(): string;
        createTransition(arg0: number): Internal.ZoneOffsetTransition;
        get offsetBefore(): Internal.ZoneOffset;
        get offsetAfter(): Internal.ZoneOffset;
        get dayOfWeek(): Internal.DayOfWeek;
        get localTime(): Internal.LocalTime;
        get standardOffset(): Internal.ZoneOffset;
        get timeDefinition(): Internal.ZoneOffsetTransitionRule$TimeDefinition;
        get month(): Internal.Month;
        get dayOfMonthIndicator(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class EvaluatorException extends Internal.RhinoException {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        getScriptStack(limit: number, hideFunction: string): Internal.ScriptStackElement[];
        notifyAll(): void;
        initColumnNumber(columnNumber: number): void;
        notify(): void;
        getScriptStackTrace(limit: number, functionName: string): string;
        addSuppressed(arg0: Internal.Throwable): void;
        columnNumber(): number;
        hashCode(): number;
        details(): string;
        printStackTrace(s: Internal.PrintWriter): void;
        printStackTrace(s: Internal.PrintStream): void;
        printStackTrace(): void;
        initSourceName(sourceName: string): void;
        initCause(arg0: Internal.Throwable): Internal.Throwable;
        initLineSource(lineSource: string): void;
        lineSource(): string;
        equals(arg0: object): boolean;
        initLineNumber(lineNumber: number): void;
        toString(): string;
        sourceName(): string;
        lineNumber(): number;
        fillInStackTrace(): Internal.Throwable;
        get localizedMessage(): string;
        get scriptStack(): Internal.ScriptStackElement[];
        get cause(): Internal.Throwable;
        get scriptStackTrace(): string;
        get stackTrace(): Internal.StackTraceElement[];
        get suppressed(): Internal.Throwable[];
        get message(): string;
        set stackTrace(arg0: Internal.StackTraceElement[]);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ModuleDescriptor$Opens implements Internal.Comparable<Internal.ModuleDescriptor$Opens> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        isQualified(): boolean;
        toString(): string;
        source(): string;
        compareTo(arg0: Internal.ModuleDescriptor$Opens): number;
        compareTo(arg0: object): number;
        modifiers(): Internal.Set<Internal.ModuleDescriptor$Opens$Modifier>;
        targets(): Internal.Set<string>;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Products$P5 <F, T1, T2, T3, T4, T5> {
        t4(): Internal.App<F, T4>;
        t5(): Internal.App<F, T5>;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        apply<R>(arg0: Internal.Applicative<F, object>, arg1: Internal.Function5<T1, T2, T3, T4, T5, R>): Internal.App<F, R>;
        apply<R>(arg0: Internal.Applicative<F, object>, arg1: Internal.App<F, Internal.Function5<T1, T2, T3, T4, T5, R>>): Internal.App<F, R>;
        hashCode(): number;
        and<T6, T7>(arg0: Internal.Products$P2<F, T6, T7>): Internal.Products$P7<F, T1, T2, T3, T4, T5, T6, T7>;
        and<T6, T7, T8>(arg0: Internal.Products$P3<F, T6, T7, T8>): Internal.Products$P8<F, T1, T2, T3, T4, T5, T6, T7, T8>;
        and<T6>(arg0: Internal.App<F, T6>): Internal.Products$P6<F, T1, T2, T3, T4, T5, T6>;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        t1(): Internal.App<F, T1>;
        notify(): void;
        t2(): Internal.App<F, T2>;
        t3(): Internal.App<F, T3>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface BlockKJS {
        get blockStatesKJS(): Internal.List<Internal.BlockState>;
        set soundTypeKJS(arg0: Internal.SoundType);
        get blockBuilderKJS(): Internal.BlockBuilder;
        set explosionResistanceKJS(arg0: number);
        set jumpFactorKJS(arg0: number);
        set speedFactorKJS(arg0: number);
        set blockBuilderKJS(arg0: Internal.BlockBuilder);
        set frictionKJS(arg0: number);
        set isRandomlyTickingKJS(arg0: boolean);
        set hasCollisionKJS(arg0: boolean);
        set materialKJS(arg0: net.minecraft.world.level.material.Material);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class LunarContext$LunarTimeSettings {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        static readonly CODEC : Internal.Codec<Internal.LunarContext$LunarTimeSettings>;
        static readonly DEFAULT : Internal.LunarContext$LunarTimeSettings;
        get dayLength(): number;
        get minDaysBetweenLunarEvents(): number;
        get yearLength(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface LootContextUser {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface LevelReader implements Internal.BlockAndTintGetter, Internal.CollisionGetter, Internal.BiomeManager$NoiseBiomeSource {
        isAreaLoaded(arg0: BlockPos, arg1: number): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class CollectionTag <T> extends Internal.AbstractList<T> implements Internal.Tag, Internal.CustomJavaObjectWrapper$AsList {
        add(arg0: number, arg1: T): void;
        add(arg0: number, arg1: object): void;
        add(arg0: E): boolean;
        wrapAsJavaList(): Internal.List<any>;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        set(arg0: number, arg1: object): object;
        set(arg0: number, arg1: T): T;
        notifyAll(): void;
        isEmpty(): boolean;
        clear(): void;
        notify(): void;
        remove(arg0: number): object;
        remove(arg0: number): T;
        remove(arg0: object): boolean;
        wrapAsJavaObject(cx: Internal.Context, scope: Internal.Scriptable, staticType: Internal.Class<object>): Internal.Scriptable;
        lastIndexOf(arg0: object): number;
        contains(arg0: object): boolean;
        size(): number;
        hashCode(): number;
        equals(arg0: object): boolean;
        get(arg0: number): E;
        toArray(): object[];
        toArray<T>(arg0: T[]): T[];
        toString(): string;
        indexOf(arg0: object): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Symbol {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class InterfaceAddress {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        get broadcast(): Internal.InetAddress;
        get networkPrefixLength(): number;
        get address(): Internal.InetAddress;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface PrimitiveIterator$OfLong implements Internal.PrimitiveIterator<number, Internal.LongConsumer> {
        next(): object;
        next(): number;
        hasNext(): boolean;
        forEachRemaining(arg0: object): void;
        forEachRemaining(arg0: Internal.LongConsumer): void;
        forEachRemaining(arg0: (arg0: number) => void): void;
        nextLong(): number;
        remove(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Products$P16 <F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        apply<R>(arg0: Internal.Applicative<F, object>, arg1: Internal.Function16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R>): Internal.App<F, R>;
        apply<R>(arg0: Internal.Applicative<F, object>, arg1: Internal.App<F, Internal.Function16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R>>): Internal.App<F, R>;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class DataOutputStream extends Internal.FilterOutputStream implements Internal.DataOutput {
        writeInt(arg0: number): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        writeByte(arg0: number): void;
        notifyAll(): void;
        writeFloat(arg0: number): void;
        notify(): void;
        writeChar(arg0: number): void;
        writeLong(arg0: number): void;
        writeBytes(arg0: string): void;
        size(): number;
        flush(): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        writeUTF(arg0: string): void;
        toString(): string;
        static nullOutputStream(): Internal.OutputStream;
        writeShort(arg0: number): void;
        writeChars(arg0: string): void;
        close(): void;
        write(arg0: number[], arg1: number, arg2: number): void;
        write(arg0: number): void;
        write(arg0: number[]): void;
        writeBoolean(arg0: boolean): void;
        writeDouble(arg0: number): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Matrix4fExtended {
        rotate(arg0: Internal.Quaternion): void;
        transformVecZ(arg0: number, arg1: number, arg2: number): number;
        transformVecY(arg0: number, arg1: number, arg2: number): number;
        transformVecX(arg0: number, arg1: number, arg2: number): number;
        translate(arg0: number, arg1: number, arg2: number): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class Screen extends Internal.AbstractContainerEventHandler implements Internal.Widget, Internal.ScreenAccessor, Internal.AccessScreen {
        renderComponentTooltip(arg0: Internal.PoseStack, arg1: Internal.List<Internal.FormattedText>, arg2: number, arg3: number, arg4: Internal.Font): void;
        renderComponentTooltip(arg0: Internal.PoseStack, arg1: Internal.List<Internal.FormattedText>, arg2: number, arg3: number, arg4: Internal.ItemStack): void;
        renderComponentTooltip(arg0: Internal.PoseStack, arg1: Internal.List<Internal.FormattedText>, arg2: number, arg3: number, arg4: Internal.Font, arg5: Internal.ItemStack): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        balm_getChildren(): Internal.List<any>;
        renderTooltip(arg0: Internal.PoseStack, arg1: Internal.List<Internal.FormattedCharSequence>, arg2: number, arg3: number, arg4: Internal.Font): void;
        renderTooltip(arg0: Internal.PoseStack, arg1: Internal.List<Internal.Component>, arg2: Internal.Optional<Internal.TooltipComponent>, arg3: number, arg4: number, arg5: Internal.Font): void;
        renderTooltip(arg0: Internal.PoseStack, arg1: Internal.List<Internal.Component>, arg2: Internal.Optional<Internal.TooltipComponent>, arg3: number, arg4: number, arg5: Internal.ItemStack): void;
        renderTooltip(arg0: Internal.PoseStack, arg1: Internal.List<Internal.Component>, arg2: Internal.Optional<Internal.TooltipComponent>, arg3: number, arg4: number, arg5: Internal.Font, arg6: Internal.ItemStack): void;
        balm_getRenderables(): Internal.List<any>;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        balm_getNarratables(): Internal.List<any>;
        tooltipStack : Internal.ItemStack;
        get renderables(): Internal.List<any>;
        get minecraft(): Internal.Minecraft;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class PortalInfo {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class SoundType {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class Number implements Internal.Serializable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        intValue(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        floatValue(): number;
        toString(): string;
        shortValue(): number;
        doubleValue(): number;
        notify(): void;
        longValue(): number;
        byteValue(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface FuncSupplier$Func2 implements Internal.FuncSupplier {
        create2(arg0: Internal.Unit, arg1: Internal.Unit): Internal.Unit;
        create(args: Internal.List<Internal.Unit>): Internal.Unit;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface RecipeFilter implements Internal.Predicate<Internal.RecipeJS> {
        test(arg0: Internal.RecipeJS): boolean;
        test(arg0: object): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IForgeCommandSourceStack {
        getAdvancement(arg0: ResourceLocation): Internal.Advancement;
        get recipeManager(): Internal.RecipeManager;
        get unsidedLevel(): Internal.Level;
        get scoreboard(): Internal.Scoreboard;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ReadableByteChannel implements Internal.Channel {
        isOpen(): boolean;
        read(arg0: Internal.ByteBuffer): number;
        close(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Rotate <Self> {
        rotateZRadians(arg0: number): Self;
        rotate(arg0: Internal.Direction, arg1: number): Self;
        rotate(arg0: number, arg1: Internal.Direction$Axis): Self;
        rotateYRadians(arg0: number): Self;
        rotateXRadians(arg0: number): Self;
        multiplyRadians(arg0: Internal.Vector3f, arg1: number): Self;
        multiply(arg0: Internal.Vector3f, arg1: number): Self;
        multiply(arg0: Internal.Quaternion): Self;
        rotateX(arg0: number): Self;
        rotateY(arg0: number): Self;
        rotateToFace(arg0: Internal.Direction): Self;
        rotateZ(arg0: number): Self;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class BlastFurnaceRecipeJS extends Internal.IERecipeJS {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        ingredientAction(filter: Internal.IngredientActionFilter, action: Internal.IngredientAction): Internal.RecipeJS;
        notifyAll(): void;
        convertReplacedOutput(index: number, oldStack: Internal.ItemStackJS, newStack: Internal.ItemStackJS): Internal.ItemStackJS;
        convertReplacedInput(index: number, oldIngredient: Internal.IngredientJS, newIngredient: Internal.IngredientJS): Internal.IngredientJS;
        save(): void;
        damageIngredient(filter: Internal.IngredientActionFilter, damage: number): Internal.RecipeJS;
        damageIngredient(filter: Internal.IngredientActionFilter): Internal.RecipeJS;
        getId(): string;
        dontAdd(): void;
        notify(): void;
        serializeJson(): void;
        parseIngredientItemIE(json: Internal.JsonElement): Internal.IngredientStackJS;
        replaceOutput(i: Internal.IngredientJS, with_: Internal.ItemStackJS, exact: boolean): boolean;
        hashCode(): number;
        merge(data: object): Internal.RecipeJS;
        create(args: Internal.ListJS): void;
        deserializeJson(): void;
        id(_id: ResourceLocation): Internal.RecipeJS;
        parseIngredientItem(o: object, key: string): Internal.IngredientJS;
        parseIngredientItem(o: object): Internal.IngredientJS;
        group(g: string): Internal.RecipeJS;
        energy(e: number): Internal.IERecipeJS;
        deserialize(): void;
        serializeNBTAsJson(): boolean;
        getOutputIndex(ingredient: Internal.IngredientJS, exact: boolean): number;
        getInputIndex(ingredient: Internal.IngredientJS, exact: boolean): number;
        setGroup(g: string): void;
        serialize(): void;
        resultFromRecipeJson(json: Internal.JsonObject): Internal.ItemStackJS;
        stage(s: string): Internal.RecipeJS;
        serializeIngredientStack(in_: Internal.IngredientStackJS): Internal.JsonElement;
        replaceInput(i: Internal.IngredientJS, with_: Internal.IngredientJS, exact: boolean): boolean;
        getType(): string;
        equals(arg0: object): boolean;
        getGroup(): string;
        serializeItemStack(stack: Internal.ItemStackJS): Internal.JsonElement;
        hasOutput(ingredient: Internal.IngredientJS, exact: boolean): boolean;
        toString(): string;
        keepIngredient(filter: Internal.IngredientActionFilter): Internal.RecipeJS;
        time(t: number): Internal.IERecipeJS;
        hasInput(ingredient: Internal.IngredientJS, exact: boolean): boolean;
        customIngredientAction(filter: Internal.IngredientActionFilter, id: string): Internal.RecipeJS;
        parseResultItem(o: object): Internal.ItemStackJS;
        replaceIngredient(filter: Internal.IngredientActionFilter, item: Internal.ItemStackJS): Internal.RecipeJS;
        static currentRecipe : Internal.RecipeJS;
        readonly inputItems : Internal.List<Internal.IngredientJS>;
        static itemErrors : false;
        type : Internal.RecipeTypeJS;
        originalJson : Internal.JsonObject;
        serializeOutputs : boolean;
        readonly outputFluids : Internal.List<Internal.FluidStack>;
        originalRecipe : Internal.Recipe<object>;
        readonly inputFluids : Internal.List<Internal.FluidTagInput>;
        json : Internal.JsonObject;
        readonly outputItems : Internal.List<Internal.ItemStackJS>;
        serializeInputs : boolean;
        get mod(): string;
        get uniqueId(): string;
        get fromToString(): string;
        get path(): string;
        get orCreateId(): ResourceLocation;
        get originalRecipeResult(): Internal.ItemStackJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class EventJS {
        cancel(): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isCancelled(): boolean;
        post(t: Internal.ScriptType, id: string, sub: string): boolean;
        post(t: Internal.ScriptType, id: string): boolean;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        canCancel(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface CommandSource {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class WorldPaintEventJS extends Internal.PaintEventJS {
        cancel(): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        vertex(m: Internal.Matrix4f, x: number, y: number, z: number, col: number, u: number, v: number): void;
        vertex(m: Internal.Matrix4f, x: number, y: number, z: number, col: number): void;
        notifyAll(): void;
        rotateDegZ(angle: number): void;
        rotateDegY(angle: number): void;
        scale(scale: number): void;
        scale(x: number, y: number, z: number): void;
        rotateDegX(angle: number): void;
        notify(): void;
        translate(x: number, y: number, z: number): void;
        pop(): void;
        rotateRadY(angle: number): void;
        rotateRadX(angle: number): void;
        post(id: string, sub: string): boolean;
        post(id: string): boolean;
        post(t: Internal.ScriptType, id: string, sub: string): boolean;
        post(t: Internal.ScriptType, id: string): boolean;
        hashCode(): number;
        end(): void;
        bindTexture(tex: ResourceLocation): void;
        isCancelled(): boolean;
        beginQuads(texture: boolean): void;
        beginQuads(format: Internal.VertexFormat): void;
        rotateRadZ(angle: number): void;
        push(): void;
        equals(arg0: object): boolean;
        toString(): string;
        begin(type: Internal.VertexFormat$Mode, format: Internal.VertexFormat): void;
        canCancel(): boolean;
        readonly mc : Internal.Minecraft;
        readonly delta : number;
        readonly screen : Internal.Screen;
        readonly tesselator : Internal.Tesselator;
        readonly buffer : Internal.BufferBuilder;
        readonly matrices : Internal.PoseStack;
        readonly font : Internal.Font;
        get player(): Internal.ClientPlayerJS;
        get textureAtlas(): Internal.TextureAtlas;
        get matrix(): Internal.Matrix4f;
        set textureEnabled(enabled: boolean);
        get entity(): Internal.EntityJS;
        get level(): Internal.ClientLevelJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IForgeMinecraft {
        popGuiLayer(): void;
        pushGuiLayer(arg0: Internal.Screen): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Locale$Category extends Internal.Enum<Internal.Locale$Category> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(arg0: string): Internal.Locale$Category;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.Locale$Category[];
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly DISPLAY : Internal.Locale$Category;
        static readonly FORMAT : Internal.Locale$Category;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Direction extends Internal.Enum<Internal.Direction> implements Internal.StringRepresentable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        static valueOf(arg0: string): Internal.Direction;
        notifyAll(): void;
        static values(): Internal.Direction[];
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        name(): string;
        toString(): string;
        ordinal(): number;
        static readonly DOWN : Internal.Direction;
        static readonly NORTH : Internal.Direction;
        static readonly WEST : Internal.Direction;
        static readonly UP : Internal.Direction;
        static readonly SOUTH : Internal.Direction;
        static readonly EAST : Internal.Direction;
        get index(): number;
        get clockWise(): Internal.Direction;
        get yaw(): number;
        get horizontalIndex(): number;
        get x(): number;
        get y(): number;
        get pitch(): number;
        get z(): number;
        get counterClockWise(): Internal.Direction;
        get opposite(): Internal.Direction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface BlockCachingEntity {
        lithiumOnBlockCacheSet(newState: Internal.BlockState): void;
        lithiumOnBlockCacheDeleted(): void;
        lithiumSetClimbingMobCachingSectionUpdateBehavior(listening: boolean): void;
        get cachedFeetBlockState(): Internal.BlockState;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class HumanoidModel <T> extends Internal.AgeableListModel<T> implements Internal.ArmedModel, Internal.HeadedModel {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        handler$bmb000$poseRightArm(arg0: Internal.LivingEntity, arg1: Internal.CallbackInfo): void;
        handler$zlb000$rotationAngleCallback(arg0: Internal.LivingEntity, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: Internal.CallbackInfo): void;
        handler$bmb000$poseLeftArm(arg0: Internal.LivingEntity, arg1: Internal.CallbackInfo): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        handler$bmb000$setupAnim(arg0: Internal.LivingEntity, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: Internal.CallbackInfo): void;
        toString(): string;
        notify(): void;
        animationType : Internal.TwoHandedAnimation;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ModelBakeEvent extends Internal.Event implements Internal.IModBusEvent {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isCanceled(): boolean;
        notifyAll(): void;
        hasResult(): boolean;
        notify(): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        isCancelable(): boolean;
        set canceled(arg0: boolean);
        set result(arg0: Internal.Event$Result);
        get modelRegistry(): Map<ResourceLocation, Internal.BakedModel>;
        get modelManager(): Internal.ModelManager;
        get listenerList(): Internal.ListenerList;
        get result(): Internal.Event$Result;
        get phase(): Internal.EventPriority;
        get modelLoader(): Internal.ForgeModelBakery;
        set phase(arg0: Internal.EventPriority);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class VarHandle$AccessMode extends Internal.Enum<Internal.VarHandle$AccessMode> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(arg0: string): Internal.VarHandle$AccessMode;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static valueFromMethodName(arg0: string): Internal.VarHandle$AccessMode;
        static values(): Internal.VarHandle$AccessMode[];
        name(): string;
        methodName(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly WEAK_COMPARE_AND_SET : Internal.VarHandle$AccessMode;
        static readonly GET_VOLATILE : Internal.VarHandle$AccessMode;
        static readonly SET : Internal.VarHandle$AccessMode;
        static readonly GET_AND_BITWISE_OR_ACQUIRE : Internal.VarHandle$AccessMode;
        static readonly GET_AND_ADD : Internal.VarHandle$AccessMode;
        static readonly GET_AND_SET : Internal.VarHandle$AccessMode;
        static readonly GET_ACQUIRE : Internal.VarHandle$AccessMode;
        static readonly GET_AND_ADD_RELEASE : Internal.VarHandle$AccessMode;
        static readonly GET_AND_BITWISE_AND_ACQUIRE : Internal.VarHandle$AccessMode;
        static readonly GET_AND_BITWISE_XOR_ACQUIRE : Internal.VarHandle$AccessMode;
        static readonly GET_AND_ADD_ACQUIRE : Internal.VarHandle$AccessMode;
        static readonly GET_AND_BITWISE_OR_RELEASE : Internal.VarHandle$AccessMode;
        static readonly SET_OPAQUE : Internal.VarHandle$AccessMode;
        static readonly WEAK_COMPARE_AND_SET_ACQUIRE : Internal.VarHandle$AccessMode;
        static readonly COMPARE_AND_SET : Internal.VarHandle$AccessMode;
        static readonly COMPARE_AND_EXCHANGE_ACQUIRE : Internal.VarHandle$AccessMode;
        static readonly GET_AND_BITWISE_AND : Internal.VarHandle$AccessMode;
        static readonly SET_VOLATILE : Internal.VarHandle$AccessMode;
        static readonly COMPARE_AND_EXCHANGE_RELEASE : Internal.VarHandle$AccessMode;
        static readonly GET_AND_BITWISE_XOR : Internal.VarHandle$AccessMode;
        static readonly WEAK_COMPARE_AND_SET_PLAIN : Internal.VarHandle$AccessMode;
        static readonly SET_RELEASE : Internal.VarHandle$AccessMode;
        static readonly COMPARE_AND_EXCHANGE : Internal.VarHandle$AccessMode;
        static readonly GET_AND_BITWISE_OR : Internal.VarHandle$AccessMode;
        static readonly GET_AND_BITWISE_AND_RELEASE : Internal.VarHandle$AccessMode;
        static readonly WEAK_COMPARE_AND_SET_RELEASE : Internal.VarHandle$AccessMode;
        static readonly GET_AND_SET_RELEASE : Internal.VarHandle$AccessMode;
        static readonly GET : Internal.VarHandle$AccessMode;
        static readonly GET_AND_SET_ACQUIRE : Internal.VarHandle$AccessMode;
        static readonly GET_AND_BITWISE_XOR_RELEASE : Internal.VarHandle$AccessMode;
        static readonly GET_OPAQUE : Internal.VarHandle$AccessMode;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface GenericDeclaration implements Internal.AnnotatedElement {
        get typeParameters(): Internal.TypeVariable<object>[];
        get annotations(): Internal.Annotation[];
        get declaredAnnotations(): Internal.Annotation[];
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ModuleDescriptor implements Internal.Comparable<Internal.ModuleDescriptor> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        static read(arg0: Internal.InputStream): Internal.ModuleDescriptor;
        static read(arg0: Internal.InputStream, arg1: () => Internal.Set<string>): Internal.ModuleDescriptor;
        static read(arg0: Internal.ByteBuffer): Internal.ModuleDescriptor;
        static read(arg0: Internal.ByteBuffer, arg1: () => Internal.Set<string>): Internal.ModuleDescriptor;
        toNameAndVersion(): string;
        mainClass(): Internal.Optional<string>;
        exports(): Internal.Set<Internal.ModuleDescriptor$Exports>;
        notifyAll(): void;
        rawVersion(): Internal.Optional<string>;
        compareTo(arg0: Internal.ModuleDescriptor): number;
        compareTo(arg0: object): number;
        packages(): Internal.Set<string>;
        modifiers(): Internal.Set<Internal.ModuleDescriptor$Modifier>;
        version(): Internal.Optional<Internal.ModuleDescriptor$Version>;
        notify(): void;
        static newAutomaticModule(arg0: string): Internal.ModuleDescriptor$Builder;
        isOpen(): boolean;
        provides(): Internal.Set<Internal.ModuleDescriptor$Provides>;
        hashCode(): number;
        static newOpenModule(arg0: string): Internal.ModuleDescriptor$Builder;
        equals(arg0: object): boolean;
        static newModule(arg0: string, arg1: Internal.Set<Internal.ModuleDescriptor$Modifier>): Internal.ModuleDescriptor$Builder;
        static newModule(arg0: string): Internal.ModuleDescriptor$Builder;
        name(): string;
        opens(): Internal.Set<Internal.ModuleDescriptor$Opens>;
        uses(): Internal.Set<string>;
        toString(): string;
        isAutomatic(): boolean;
        requires(): Internal.Set<Internal.ModuleDescriptor$Requires>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IBlockRenderProperties {
        getFogColor(arg0: Internal.BlockState, arg1: Internal.LevelReader, arg2: BlockPos, arg3: Internal.Entity, arg4: Internal.Vector3d, arg5: number): Internal.Vector3d;
        addDestroyEffects(arg0: Internal.BlockState, arg1: Internal.Level, arg2: BlockPos, arg3: Internal.ParticleEngine): boolean;
        addHitEffects(arg0: Internal.BlockState, arg1: Internal.Level, arg2: Internal.HitResult, arg3: Internal.ParticleEngine): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface GuiEventListener {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class Registry <T> implements Internal.Keyable, Internal.IdMap<T>, corgitaco.enhancedcelestials.mixin.access.RegistryAccess {
        iterator(): Internal.Iterator<T>;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        spliterator(): Internal.Spliterator<T>;
        forEach(arg0: (arg0: T) => void): void;
        hashCode(): number;
        keys<U>(arg0: Internal.DynamicOps<U>): Internal.Stream<U>;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        static invokeRegisterSimple_$md$85ada3$0(arg0: Internal.ResourceKey<any>, arg1: java_.util.function_.Supplier<any>): Internal.Registry<any>;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class BaseComponent implements Internal.MutableComponent {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        get string(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ItemRegistryEventJS extends Internal.StartupEventJS {
        cancel(): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isCancelled(): boolean;
        post(id: string): boolean;
        post(id: string, sub: string): boolean;
        post(t: Internal.ScriptType, id: string, sub: string): boolean;
        post(t: Internal.ScriptType, id: string): boolean;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        create(name: string, callback: (arg0: Internal.ItemBuilder) => void): void;
        toString(): string;
        createFood(builder: () => Internal.FoodBuilder): () => Internal.FoodBuilder;
        notify(): void;
        canCancel(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class FluidStackJS implements Internal.WrappedJS, Internal.Copyable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        notify(): void;
        toNBT(): Internal.CompoundTag;
        hashCode(): number;
        static of(o: object, amount: number, nbt: Internal.CompoundTag): Internal.FluidStackJS;
        static of(o: object): Internal.FluidStackJS;
        withAmount(amount: number): Internal.FluidStackJS;
        withChance(c: number): Internal.FluidStackJS;
        copy(): Internal.FluidStackJS;
        copy(): Internal.Copyable;
        withNBT(nbt: Internal.CompoundTag): Internal.FluidStackJS;
        hasTag(tag: ResourceLocation): boolean;
        isEmpty(): boolean;
        strongEquals(o: object): boolean;
        hasChance(): boolean;
        toJson(): Internal.JsonObject;
        equals(o: object): boolean;
        static fromJson(e: Internal.JsonElement): Internal.FluidStackJS;
        toString(): string;
        removeChance(): void;
        get nbt(): Internal.CompoundTag;
        get chance(): number;
        get tags(): Internal.Collection<ResourceLocation>;
        get id(): string;
        set chance(c: number);
        set amount(arg0: number);
        get amount(): number;
        get fluidStack(): dev.architectury.fluid.FluidStack;
        get fluid(): Internal.Fluid;
        set nbt(arg0: Internal.CompoundTag);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class AbstractCollection <E> implements Internal.Collection<E> {
        add(arg0: E): boolean;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        spliterator(): Internal.Spliterator<E>;
        forEach(arg0: (arg0: T) => void): void;
        notifyAll(): void;
        containsAll(arg0: Internal.Collection<object>): boolean;
        isEmpty(): boolean;
        clear(): void;
        notify(): void;
        remove(arg0: object): boolean;
        removeIf(arg0: (arg0: E) => boolean): boolean;
        removeAll(arg0: Internal.Collection<object>): boolean;
        contains(arg0: object): boolean;
        iterator(): Internal.Iterator<E>;
        size(): number;
        stream(): Internal.Stream<E>;
        addAll(arg0: Internal.Collection<E>): boolean;
        hashCode(): number;
        equals(arg0: object): boolean;
        toArray(): object[];
        toArray<T>(arg0: T[]): T[];
        toArray<T>(arg0: Internal.IntFunction<T[]>): T[];
        parallelStream(): Internal.Stream<E>;
        toString(): string;
        retainAll(arg0: Internal.Collection<object>): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class CapabilityProvider <B> implements Internal.ICapabilityProviderImpl<B> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        invalidateCaps(): void;
        getCapability<T>(arg0: Internal.Capability<T>, arg1: Internal.Direction): Internal.LazyOptional<T>;
        getCapability<T>(arg0: Internal.Capability<T>): Internal.LazyOptional<T>;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        areCapsCompatible(arg0: Internal.CapabilityProvider<B>): boolean;
        areCapsCompatible(arg0: Internal.CapabilityDispatcher): boolean;
        toString(): string;
        notify(): void;
        reviveCaps(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ServerWorldExtended {
        set navigationActive(arg0: Internal.Mob);
        set navigationInactive(arg0: Internal.Mob);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class TextColor implements Internal.ColorAccess, Internal.Color {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        notify(): void;
        static create_$md$85ada3$0(arg0: number): Internal.TextColor;
        hashCode(): number;
        equals(arg0: object): boolean;
        createTextColorKJS(): Internal.TextColor;
        toString(): string;
        specialEquals(o: object, shallow: boolean): boolean;
        get rgbKJS(): number;
        get colorRaw(): number;
        get serializeKJS(): string;
        get hexKJS(): string;
        get argbKJS(): number;
        get fireworkColorKJS(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ArrayList <E> extends Internal.AbstractList<E> implements Internal.List<E>, Internal.RandomAccess, Internal.Cloneable, Internal.Serializable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        replaceAll(arg0: Internal.UnaryOperator<E>): void;
        notify(): void;
        remove(arg0: object): boolean;
        remove(arg0: number): E;
        removeAll(arg0: Internal.Collection<object>): boolean;
        iterator(): Internal.Iterator<E>;
        hashCode(): number;
        get(arg0: number): E;
        toArray<T>(arg0: T[]): T[];
        toArray(): object[];
        indexOf(arg0: object): number;
        add(arg0: E): boolean;
        add(arg0: number, arg1: E): void;
        subList(arg0: number, arg1: number): Internal.List<E>;
        trimToSize(): void;
        set(arg0: number, arg1: E): E;
        spliterator(): Internal.Spliterator<E>;
        forEach(arg0: (arg0: E) => void): void;
        isEmpty(): boolean;
        clear(): void;
        sort(arg0: Internal.Comparator<E>): void;
        removeIf(arg0: (arg0: E) => boolean): boolean;
        lastIndexOf(arg0: object): number;
        contains(arg0: object): boolean;
        size(): number;
        addAll(arg0: Internal.Collection<E>): boolean;
        addAll(arg0: number, arg1: Internal.Collection<E>): boolean;
        equals(arg0: object): boolean;
        clone(): object;
        listIterator(): Internal.ListIterator<E>;
        listIterator(arg0: number): Internal.ListIterator<E>;
        toString(): string;
        ensureCapacity(arg0: number): void;
        retainAll(arg0: Internal.Collection<object>): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class VarHandle implements Internal.Constable {
        toMethodHandle(arg0: Internal.VarHandle$AccessMode): Internal.MethodHandle;
        getAndBitwiseXor(arg0: object[]): object;
        static storeStoreFence(): void;
        compareAndExchange(arg0: object[]): object;
        getAndSetRelease(arg0: object[]): object;
        getAndBitwiseAnd(arg0: object[]): object;
        describeConstable(): Internal.Optional<Internal.VarHandle$VarHandleDesc>;
        varType(): Internal.Class<object>;
        getAndBitwiseOrAcquire(arg0: object[]): object;
        static releaseFence(): void;
        getAndAdd(arg0: object[]): object;
        weakCompareAndSetRelease(arg0: object[]): boolean;
        static loadLoadFence(): void;
        getAndAddAcquire(arg0: object[]): object;
        isAccessModeSupported(arg0: Internal.VarHandle$AccessMode): boolean;
        compareAndExchangeRelease(arg0: object[]): object;
        compareAndSet(arg0: object[]): boolean;
        compareAndExchangeAcquire(arg0: object[]): object;
        getAndBitwiseXorRelease(arg0: object[]): object;
        withInvokeBehavior(): Internal.VarHandle;
        withInvokeExactBehavior(): Internal.VarHandle;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        coordinateTypes(): Internal.List<Internal.Class<object>>;
        weakCompareAndSetPlain(arg0: object[]): boolean;
        getVolatile(arg0: object[]): object;
        static fullFence(): void;
        notifyAll(): void;
        getAcquire(arg0: object[]): object;
        accessModeType(arg0: Internal.VarHandle$AccessMode): Internal.MethodType;
        getAndBitwiseOr(arg0: object[]): object;
        static acquireFence(): void;
        hasInvokeExactBehavior(): boolean;
        notify(): void;
        getAndBitwiseOrRelease(arg0: object[]): object;
        getAndSetAcquire(arg0: object[]): object;
        getOpaque(arg0: object[]): object;
        getAndBitwiseXorAcquire(arg0: object[]): object;
        hashCode(): number;
        getAndBitwiseAndRelease(arg0: object[]): object;
        get(arg0: object[]): object;
        getAndSet(arg0: object[]): object;
        weakCompareAndSetAcquire(arg0: object[]): boolean;
        set(arg0: object[]): void;
        weakCompareAndSet(arg0: object[]): boolean;
        getAndAddRelease(arg0: object[]): object;
        equals(arg0: object): boolean;
        toString(): string;
        getAndBitwiseAndAcquire(arg0: object[]): object;
        set volatile(arg0: object[]);
        set opaque(arg0: object[]);
        set release(arg0: object[]);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class BiomeDictionary$Type {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        static getType(arg0: string, arg1: Internal.BiomeDictionary$Type[]): Internal.BiomeDictionary$Type;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        static fromVanilla(arg0: Internal.Biome$BiomeCategory): Internal.BiomeDictionary$Type;
        notify(): void;
        static hasType(arg0: string): boolean;
        static readonly SNOWY : Internal.BiomeDictionary$Type;
        static readonly BEACH : Internal.BiomeDictionary$Type;
        static readonly UNDERGROUND : Internal.BiomeDictionary$Type;
        static readonly SAVANNA : Internal.BiomeDictionary$Type;
        static readonly MESA : Internal.BiomeDictionary$Type;
        static readonly RARE : Internal.BiomeDictionary$Type;
        static readonly SPOOKY : Internal.BiomeDictionary$Type;
        static readonly WET : Internal.BiomeDictionary$Type;
        static readonly SPARSE : Internal.BiomeDictionary$Type;
        static readonly MOUNTAIN : Internal.BiomeDictionary$Type;
        static readonly DRY : Internal.BiomeDictionary$Type;
        static readonly RIVER : Internal.BiomeDictionary$Type;
        static readonly MAGICAL : Internal.BiomeDictionary$Type;
        static readonly NETHER : Internal.BiomeDictionary$Type;
        static readonly WATER : Internal.BiomeDictionary$Type;
        static readonly DENSE : Internal.BiomeDictionary$Type;
        static readonly JUNGLE : Internal.BiomeDictionary$Type;
        static readonly SANDY : Internal.BiomeDictionary$Type;
        static readonly OCEAN : Internal.BiomeDictionary$Type;
        static readonly HILLS : Internal.BiomeDictionary$Type;
        static readonly HOT : Internal.BiomeDictionary$Type;
        static readonly FOREST : Internal.BiomeDictionary$Type;
        static readonly MUSHROOM : Internal.BiomeDictionary$Type;
        static readonly OVERWORLD : Internal.BiomeDictionary$Type;
        static readonly PLATEAU : Internal.BiomeDictionary$Type;
        static readonly PLAINS : Internal.BiomeDictionary$Type;
        static readonly SWAMP : Internal.BiomeDictionary$Type;
        static readonly PEAK : Internal.BiomeDictionary$Type;
        static readonly END : Internal.BiomeDictionary$Type;
        static readonly COLD : Internal.BiomeDictionary$Type;
        static readonly DEAD : Internal.BiomeDictionary$Type;
        static readonly MODIFIED : Internal.BiomeDictionary$Type;
        static readonly VOID : Internal.BiomeDictionary$Type;
        static readonly LUSH : Internal.BiomeDictionary$Type;
        static readonly CONIFEROUS : Internal.BiomeDictionary$Type;
        static readonly SLOPE : Internal.BiomeDictionary$Type;
        static readonly WASTELAND : Internal.BiomeDictionary$Type;
        get all(): Internal.Collection<Internal.BiomeDictionary$Type>;
        get name(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Double2ShortFunction implements it.unimi.dsi.fastutil.Function<number, number>, Internal.DoubleToIntFunction {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        andThenShort(arg0: Internal.Short2ShortFunction): Internal.Double2ShortFunction;
        composeByte(arg0: Internal.Byte2DoubleFunction): Internal.Byte2ShortFunction;
        andThenInt(arg0: Internal.Short2IntFunction): Internal.Double2IntFunction;
        composeReference<T>(arg0: Internal.Reference2DoubleFunction<T>): Internal.Reference2ShortFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: number) => T;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: number): number;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: object): object;
        remove(arg0: object): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Short2DoubleFunction): Internal.Double2DoubleFunction;
        andThenObject<T>(arg0: Internal.Short2ObjectFunction<T>): Internal.Double2ObjectFunction<T>;
        get(arg0: object): number;
        get(arg0: object): object;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Short2LongFunction): Internal.Double2LongFunction;
        composeLong(arg0: Internal.Long2DoubleFunction): Internal.Long2ShortFunction;
        andThenByte(arg0: Internal.Short2ByteFunction): Internal.Double2ByteFunction;
        andThenFloat(arg0: Internal.Short2FloatFunction): Internal.Double2FloatFunction;
        applyAsInt(arg0: number): number;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2DoubleFunction): Internal.Int2ShortFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2DoubleFunction): Internal.Float2ShortFunction;
        andThenChar(arg0: Internal.Short2CharFunction): Internal.Double2CharFunction;
        composeObject<T>(arg0: Internal.Object2DoubleFunction<T>): Internal.Object2ShortFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => number;
        composeShort(arg0: Internal.Short2DoubleFunction): Internal.Short2ShortFunction;
        andThenReference<T>(arg0: Internal.Short2ReferenceFunction<T>): Internal.Double2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2DoubleFunction): Internal.Char2ShortFunction;
        composeDouble(arg0: Internal.Double2DoubleFunction): Internal.Double2ShortFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class ShortBuffer extends Internal.Buffer implements Internal.Comparable<Internal.ShortBuffer> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        compact(): Internal.ShortBuffer;
        notifyAll(): void;
        compareTo(arg0: object): number;
        compareTo(arg0: Internal.ShortBuffer): number;
        notify(): void;
        asReadOnlyBuffer(): Internal.ShortBuffer;
        put(arg0: number[]): Internal.ShortBuffer;
        put(arg0: number, arg1: number[], arg2: number, arg3: number): Internal.ShortBuffer;
        put(arg0: number, arg1: number[]): Internal.ShortBuffer;
        put(arg0: number[], arg1: number, arg2: number): Internal.ShortBuffer;
        put(arg0: number, arg1: Internal.ShortBuffer, arg2: number, arg3: number): Internal.ShortBuffer;
        put(arg0: Internal.ShortBuffer): Internal.ShortBuffer;
        put(arg0: number, arg1: number): Internal.ShortBuffer;
        put(arg0: number): Internal.ShortBuffer;
        capacity(): number;
        isReadOnly(): boolean;
        slice(): Internal.Buffer;
        slice(): Internal.ShortBuffer;
        slice(arg0: number, arg1: number): Internal.Buffer;
        slice(arg0: number, arg1: number): Internal.ShortBuffer;
        array(): number[];
        array(): object;
        hashCode(): number;
        get(): number;
        get(arg0: number, arg1: number[]): Internal.ShortBuffer;
        get(arg0: number): number;
        get(arg0: number, arg1: number[], arg2: number, arg3: number): Internal.ShortBuffer;
        get(arg0: number[], arg1: number, arg2: number): Internal.ShortBuffer;
        get(arg0: number[]): Internal.ShortBuffer;
        limit(arg0: number): Internal.ShortBuffer;
        limit(arg0: number): Internal.Buffer;
        limit(): number;
        arrayOffset(): number;
        flip(): Internal.Buffer;
        flip(): Internal.ShortBuffer;
        order(): Internal.ByteOrder;
        hasArray(): boolean;
        hasRemaining(): boolean;
        clear(): Internal.Buffer;
        clear(): Internal.ShortBuffer;
        duplicate(): Internal.ShortBuffer;
        duplicate(): Internal.Buffer;
        remaining(): number;
        static allocate(arg0: number): Internal.ShortBuffer;
        rewind(): Internal.Buffer;
        rewind(): Internal.ShortBuffer;
        mismatch(arg0: Internal.ShortBuffer): number;
        equals(arg0: object): boolean;
        reset(): Internal.Buffer;
        reset(): Internal.ShortBuffer;
        toString(): string;
        position(arg0: number): Internal.ShortBuffer;
        position(arg0: number): Internal.Buffer;
        position(): number;
        isDirect(): boolean;
        static wrap(arg0: number[]): Internal.ShortBuffer;
        static wrap(arg0: number[], arg1: number, arg2: number): Internal.ShortBuffer;
        mark(): Internal.Buffer;
        mark(): Internal.ShortBuffer;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ICitadelDataEntity {
        set citadelEntityData(arg0: Internal.CompoundTag);
        get citadelEntityData(): Internal.CompoundTag;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ProfilerFiller {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface MinecraftAccess {
        get fontManager(): Internal.FontManager;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class CopyNameFunction$NameSource extends Internal.Enum<Internal.CopyNameFunction$NameSource> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(arg0: string): Internal.CopyNameFunction$NameSource;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.CopyNameFunction$NameSource[];
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly KILLER_PLAYER : Internal.CopyNameFunction$NameSource;
        static readonly KILLER : Internal.CopyNameFunction$NameSource;
        static readonly BLOCK_ENTITY : Internal.CopyNameFunction$NameSource;
        static readonly THIS : Internal.CopyNameFunction$NameSource;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ExecutorService implements Internal.Executor {
        submit(arg0: Internal.Runnable): java_.util.concurrent.Future<object>;
        submit<T>(arg0: Internal.Runnable, arg1: T): java_.util.concurrent.Future<T>;
        submit<T>(arg0: java_.util.concurrent.Callable<T>): java_.util.concurrent.Future<T>;
        isTerminated(): boolean;
        invokeAll<T>(arg0: Internal.Collection<java_.util.concurrent.Callable<T>>, arg1: number, arg2: Internal.TimeUnit): Internal.List<java_.util.concurrent.Future<T>>;
        invokeAll<T>(arg0: Internal.Collection<java_.util.concurrent.Callable<T>>): Internal.List<java_.util.concurrent.Future<T>>;
        awaitTermination(arg0: number, arg1: Internal.TimeUnit): boolean;
        invokeAny<T>(arg0: Internal.Collection<java_.util.concurrent.Callable<T>>): T;
        invokeAny<T>(arg0: Internal.Collection<java_.util.concurrent.Callable<T>>, arg1: number, arg2: Internal.TimeUnit): T;
        shutdownNow(): Internal.List<Internal.Runnable>;
        execute(arg0: Internal.Runnable): void;
        shutdown(): void;
        isShutdown(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Int2IntOpenHashMap extends Internal.AbstractInt2IntMap implements Internal.Serializable, Internal.Cloneable, Internal.Hash {
        getOrDefault(arg0: number, arg1: number): number;
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        replace(arg0: number, arg1: number, arg2: number): boolean;
        replace(arg0: number, arg1: number): number;
        replace(arg0: number, arg1: number, arg2: number): boolean;
        replace(arg0: number, arg1: number): number;
        replace(arg0: object, arg1: object): object;
        replace(arg0: object, arg1: object, arg2: object): boolean;
        composeByte(arg0: Internal.Byte2IntFunction): Internal.Byte2IntFunction;
        andThen(arg0: Internal.IntUnaryOperator): Internal.IntUnaryOperator;
        containsValue(arg0: number): boolean;
        containsValue(arg0: object): boolean;
        put(arg0: number, arg1: number): number;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: number): number;
        mergeInt(arg0: number, arg1: number, arg2: Internal.IntBinaryOperator): number;
        mergeInt(arg0: number, arg1: number, arg2: java_.util.function_.IntBinaryOperator): number;
        compute(arg0: number, arg1: (arg0: number, arg1: number) => number): number;
        compute(arg0: object, arg1: Internal.BiFunction<any, any, any>): object;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        trim(): boolean;
        trim(arg0: number): boolean;
        merge(arg0: number, arg1: number, arg2: (arg0: number, arg1: number) => number): number;
        merge(arg0: object, arg1: object, arg2: Internal.BiFunction<any, any, any>): object;
        composeLong(arg0: Internal.Long2IntFunction): Internal.Long2IntFunction;
        applyAsInt(arg0: number): number;
        entrySet(): Internal.Set<any>;
        containsKey(arg0: number): boolean;
        containsKey(arg0: object): boolean;
        size(): number;
        compose(arg0: Internal.IntUnaryOperator): Internal.IntUnaryOperator;
        composeShort(arg0: Internal.Short2IntFunction): Internal.Short2IntFunction;
        composeChar(arg0: Internal.Char2IntFunction): Internal.Char2IntFunction;
        composeDouble(arg0: Internal.Double2IntFunction): Internal.Double2IntFunction;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        computeIfAbsent(arg0: number, arg1: Internal.IntUnaryOperator): number;
        computeIfAbsent(arg0: number, arg1: Internal.Int2IntFunction): number;
        computeIfAbsent(arg0: object, arg1: Internal.Function<any, any>): object;
        values(): Internal.Collection<any>;
        values(): Internal.IntCollection;
        andThenShort(arg0: Internal.Int2ShortFunction): Internal.Int2ShortFunction;
        computeIfAbsentPartial(arg0: number, arg1: Internal.Int2IntFunction): number;
        andThenInt(arg0: Internal.Int2IntFunction): Internal.Int2IntFunction;
        notify(): void;
        remove(arg0: number, arg1: number): boolean;
        remove(arg0: number): number;
        remove(arg0: object): object;
        remove(arg0: object): number;
        remove(arg0: object, arg1: object): boolean;
        int2IntEntrySet(): Internal.Int2IntMap$FastEntrySet;
        int2IntEntrySet(): Internal.ObjectSet<any>;
        andThenDouble(arg0: Internal.Int2DoubleFunction): Internal.Int2DoubleFunction;
        hashCode(): number;
        putAll(arg0: Map<number, number>): void;
        get(arg0: number): number;
        get(arg0: object): object;
        get(arg0: object): number;
        andThenLong(arg0: Internal.Int2LongFunction): Internal.Int2LongFunction;
        keySet(): Internal.Set<any>;
        keySet(): Internal.IntSet;
        andThenByte(arg0: Internal.Int2ByteFunction): Internal.Int2ByteFunction;
        andThenFloat(arg0: Internal.Int2FloatFunction): Internal.Int2FloatFunction;
        apply(arg0: K): V;
        computeIfAbsentNullable(arg0: number, arg1: Internal.IntFunction<number>): number;
        composeInt(arg0: Internal.Int2IntFunction): Internal.Int2IntFunction;
        isEmpty(): boolean;
        clear(): void;
        composeFloat(arg0: Internal.Float2IntFunction): Internal.Float2IntFunction;
        andThenChar(arg0: Internal.Int2CharFunction): Internal.Int2CharFunction;
        computeIfPresent(arg0: number, arg1: (arg0: number, arg1: number) => number): number;
        computeIfPresent(arg0: object, arg1: Internal.BiFunction<any, any, any>): object;
        equals(arg0: object): boolean;
        clone(): Internal.Int2IntOpenHashMap;
        clone(): object;
        addTo(arg0: number, arg1: number): number;
        toString(): string;
        putIfAbsent(arg0: number, arg1: number): number;
        putIfAbsent(arg0: object, arg1: object): object;
        putIfAbsent(arg0: number, arg1: number): number;
        static readonly DEFAULT_GROWTH_FACTOR : 16;
        static readonly FAST_LOAD_FACTOR : 0.5;
        static readonly DEFAULT_INITIAL_SIZE : 16;
        static readonly DEFAULT_LOAD_FACTOR : 0.75;
        static readonly OCCUPIED : -1;
        static readonly VERY_FAST_LOAD_FACTOR : 0.25;
        static readonly FREE : 0;
        static readonly PRIMES : number[];
        static readonly REMOVED : 1;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Byte2ShortFunction implements it.unimi.dsi.fastutil.Function<number, number>, Internal.IntUnaryOperator {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        andThenShort(arg0: Internal.Short2ShortFunction): Internal.Byte2ShortFunction;
        composeByte(arg0: Internal.Byte2ByteFunction): Internal.Byte2ShortFunction;
        andThenInt(arg0: Internal.Short2IntFunction): Internal.Byte2IntFunction;
        composeReference<T>(arg0: Internal.Reference2ByteFunction<T>): Internal.Reference2ShortFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: number) => T;
        andThen(arg0: Internal.IntUnaryOperator): Internal.IntUnaryOperator;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: number): number;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: object): object;
        remove(arg0: object): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Short2DoubleFunction): Internal.Byte2DoubleFunction;
        andThenObject<T>(arg0: Internal.Short2ObjectFunction<T>): Internal.Byte2ObjectFunction<T>;
        get(arg0: object): number;
        get(arg0: object): object;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Short2LongFunction): Internal.Byte2LongFunction;
        composeLong(arg0: Internal.Long2ByteFunction): Internal.Long2ShortFunction;
        andThenByte(arg0: Internal.Short2ByteFunction): Internal.Byte2ByteFunction;
        andThenFloat(arg0: Internal.Short2FloatFunction): Internal.Byte2FloatFunction;
        applyAsInt(arg0: number): number;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2ByteFunction): Internal.Int2ShortFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2ByteFunction): Internal.Float2ShortFunction;
        andThenChar(arg0: Internal.Short2CharFunction): Internal.Byte2CharFunction;
        composeObject<T>(arg0: Internal.Object2ByteFunction<T>): Internal.Object2ShortFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => number;
        compose(arg0: Internal.IntUnaryOperator): Internal.IntUnaryOperator;
        composeShort(arg0: Internal.Short2ByteFunction): Internal.Short2ShortFunction;
        andThenReference<T>(arg0: Internal.Short2ReferenceFunction<T>): Internal.Byte2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2ByteFunction): Internal.Char2ShortFunction;
        composeDouble(arg0: Internal.Double2ByteFunction): Internal.Double2ShortFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class LongSummaryStatistics implements Internal.LongConsumer, Internal.IntConsumer {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        andThen(arg0: Internal.LongConsumer): Internal.LongConsumer;
        andThen(arg0: Internal.IntConsumer): Internal.IntConsumer;
        notify(): void;
        accept(arg0: number): void;
        accept(arg0: number): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        combine(arg0: Internal.LongSummaryStatistics): void;
        get max(): number;
        get average(): number;
        get min(): number;
        get sum(): number;
        get count(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Reference2ObjectFunction <K, V> implements it.unimi.dsi.fastutil.Function<K, V> {
        getOrDefault(arg0: object, arg1: V): V;
        andThenShort(arg0: Internal.Object2ShortFunction<V>): Internal.Reference2ShortFunction<K>;
        composeByte(arg0: Internal.Byte2ReferenceFunction<K>): Internal.Byte2ObjectFunction<V>;
        andThenInt(arg0: Internal.Object2IntFunction<V>): Internal.Reference2IntFunction<K>;
        composeReference<T>(arg0: (arg0: T) => K): (arg0: T) => V;
        put(arg0: K, arg1: V): V;
        remove(arg0: object): V;
        defaultReturnValue(): V;
        defaultReturnValue(arg0: V): void;
        andThenDouble(arg0: Internal.Object2DoubleFunction<V>): Internal.Reference2DoubleFunction<K>;
        andThenObject<T>(arg0: (arg0: V) => T): (arg0: K) => T;
        get(arg0: object): V;
        andThenLong(arg0: Internal.Object2LongFunction<V>): Internal.Reference2LongFunction<K>;
        composeLong(arg0: Internal.Long2ReferenceFunction<K>): Internal.Long2ObjectFunction<V>;
        andThenByte(arg0: Internal.Object2ByteFunction<V>): Internal.Reference2ByteFunction<K>;
        andThenFloat(arg0: Internal.Object2FloatFunction<V>): Internal.Reference2FloatFunction<K>;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        composeInt(arg0: Internal.Int2ReferenceFunction<K>): Internal.Int2ObjectFunction<V>;
        clear(): void;
        composeFloat(arg0: Internal.Float2ReferenceFunction<K>): Internal.Float2ObjectFunction<V>;
        andThenChar(arg0: Internal.Object2CharFunction<V>): Internal.Reference2CharFunction<K>;
        composeObject<T>(arg0: (arg0: T) => K): (arg0: T) => V;
        size(): number;
        composeShort(arg0: Internal.Short2ReferenceFunction<K>): Internal.Short2ObjectFunction<V>;
        andThenReference<T>(arg0: (arg0: V) => T): (arg0: K) => T;
        composeChar(arg0: Internal.Char2ReferenceFunction<K>): Internal.Char2ObjectFunction<V>;
        composeDouble(arg0: Internal.Double2ReferenceFunction<K>): Internal.Double2ObjectFunction<V>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Int2IntMap implements Internal.Int2IntFunction, Map<number, number> {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: number, arg1: number): number;
        getOrDefault(arg0: object, arg1: number): number;
        computeIfAbsent(arg0: number, arg1: Internal.IntUnaryOperator): number;
        computeIfAbsent(arg0: object, arg1: Internal.Function<any, any>): object;
        computeIfAbsent(arg0: number, arg1: (arg0: number) => number): number;
        computeIfAbsent(arg0: number, arg1: Internal.Int2IntFunction): number;
        values(): Internal.Collection<any>;
        values(): Internal.IntCollection;
        andThenShort(arg0: Internal.Int2ShortFunction): Internal.Int2ShortFunction;
        replace(arg0: number, arg1: number, arg2: number): boolean;
        replace(arg0: number, arg1: number, arg2: number): boolean;
        replace(arg0: number, arg1: number): number;
        replace(arg0: number, arg1: number): number;
        replace(arg0: object, arg1: object): object;
        replace(arg0: object, arg1: object, arg2: object): boolean;
        composeByte(arg0: Internal.Byte2IntFunction): Internal.Byte2IntFunction;
        computeIfAbsentPartial(arg0: number, arg1: Internal.Int2IntFunction): number;
        andThenInt(arg0: Internal.Int2IntFunction): Internal.Int2IntFunction;
        andThen(arg0: Internal.IntUnaryOperator): Internal.IntUnaryOperator;
        containsValue(arg0: number): boolean;
        containsValue(arg0: object): boolean;
        put(arg0: number, arg1: number): number;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: number): number;
        remove(arg0: number, arg1: number): boolean;
        remove(arg0: object): object;
        remove(arg0: object): number;
        remove(arg0: object, arg1: object): boolean;
        remove(arg0: number): number;
        mergeInt(arg0: number, arg1: number, arg2: java_.util.function_.IntBinaryOperator): number;
        mergeInt(arg0: number, arg1: number, arg2: Internal.IntBinaryOperator): number;
        int2IntEntrySet(): Internal.ObjectSet<Internal.Int2IntMap$Entry>;
        compute(arg0: object, arg1: Internal.BiFunction<any, any, any>): object;
        compute(arg0: number, arg1: (arg0: number, arg1: number) => number): number;
        compute(arg0: number, arg1: (arg0: number, arg1: number) => number): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Int2DoubleFunction): Internal.Int2DoubleFunction;
        hashCode(): number;
        merge(arg0: object, arg1: object, arg2: Internal.BiFunction<any, any, any>): object;
        merge(arg0: number, arg1: number, arg2: (arg0: number, arg1: number) => number): number;
        merge(arg0: number, arg1: number, arg2: (arg0: number, arg1: number) => number): number;
        get(arg0: object): object;
        get(arg0: object): number;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Int2LongFunction): Internal.Int2LongFunction;
        composeLong(arg0: Internal.Long2IntFunction): Internal.Long2IntFunction;
        keySet(): Internal.Set<any>;
        keySet(): Internal.IntSet;
        andThenByte(arg0: Internal.Int2ByteFunction): Internal.Int2ByteFunction;
        andThenFloat(arg0: Internal.Int2FloatFunction): Internal.Int2FloatFunction;
        applyAsInt(arg0: number): number;
        apply(arg0: K): V;
        computeIfAbsentNullable(arg0: number, arg1: Internal.IntFunction<number>): number;
        entrySet(): Internal.ObjectSet<Internal.Map$Entry<number, number>>;
        entrySet(): Internal.Set<any>;
        containsKey(arg0: number): boolean;
        containsKey(arg0: object): boolean;
        forEach(arg0: (arg0: number, arg1: number) => void): void;
        composeInt(arg0: Internal.Int2IntFunction): Internal.Int2IntFunction;
        isEmpty(): boolean;
        clear(): void;
        composeFloat(arg0: Internal.Float2IntFunction): Internal.Float2IntFunction;
        andThenChar(arg0: Internal.Int2CharFunction): Internal.Int2CharFunction;
        computeIfPresent(arg0: number, arg1: (arg0: number, arg1: number) => number): number;
        computeIfPresent(arg0: object, arg1: Internal.BiFunction<any, any, any>): object;
        computeIfPresent(arg0: number, arg1: (arg0: number, arg1: number) => number): number;
        size(): number;
        compose(arg0: Internal.IntUnaryOperator): Internal.IntUnaryOperator;
        equals(arg0: object): boolean;
        composeShort(arg0: Internal.Short2IntFunction): Internal.Short2IntFunction;
        composeChar(arg0: Internal.Char2IntFunction): Internal.Char2IntFunction;
        composeDouble(arg0: Internal.Double2IntFunction): Internal.Double2IntFunction;
        putIfAbsent(arg0: object, arg1: object): object;
        putIfAbsent(arg0: number, arg1: number): number;
        putIfAbsent(arg0: number, arg1: number): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class RecordCodecBuilder$Mu <O> implements Internal.K1 {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class UnmodifiableIterator <E> implements Internal.Iterator<E> {
        next(): E;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        hasNext(): boolean;
        toString(): string;
        forEachRemaining(arg0: (arg0: E) => void): void;
        notify(): void;
        remove(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ExplosionAccess {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ScriptFileInfo {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        getProperty(s: string, def: string): string;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        isIgnored(): boolean;
        preload(source: Internal.ScriptSource): Internal.Throwable;
        notify(): void;
        readonly file : string;
        readonly location : string;
        readonly id : ResourceLocation;
        readonly pack : Internal.ScriptPackInfo;
        get packMode(): string;
        get priority(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class LunarForecast {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        static readonly CODEC : Internal.Codec<Internal.LunarForecast>;
        get lastCheckedGameTime(): number;
        get forecast(): Internal.List<Internal.LunarEventInstance>;
        set lastCheckedGameTime(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Camera implements Internal.CameraInvokerMixin {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        setAnglesInternal(arg0: number, arg1: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        callMove(arg0: number, arg1: number, arg2: number): void;
        notify(): void;
        get blockAtCamera(): Internal.BlockState;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ItemColors implements Internal.ItemColorsExtended {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        getColorProvider(stack: Internal.ItemStack): Internal.ItemColor;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IForgeMenuType <T> {
        create(arg0: number, arg1: Internal.Inventory, arg2: Internal.FriendlyByteBuf): T;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class ForgeRegistryEntry <V> implements Internal.IForgeRegistryEntry<V> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        setRegistryName(arg0: string, arg1: string): V;
        notify(): void;
        readonly delegate : () => V;
        get registryType(): Internal.Class<V>;
        get registryName(): ResourceLocation;
        set registryName(arg0: ResourceLocation);
        set registryName(arg0: ResourceLocation);
        set registryName(arg0: string);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface AttributedCharacterIterator implements Internal.CharacterIterator {
        next(): string;
        previous(): string;
        last(): string;
        getRunLimit(arg0: Internal.Set<Internal.AttributedCharacterIterator$Attribute>): number;
        getRunLimit(arg0: Internal.AttributedCharacterIterator$Attribute): number;
        current(): string;
        getAttribute(arg0: Internal.AttributedCharacterIterator$Attribute): object;
        clone(): object;
        getRunStart(arg0: Internal.Set<Internal.AttributedCharacterIterator$Attribute>): number;
        getRunStart(arg0: Internal.AttributedCharacterIterator$Attribute): number;
        first(): string;
        get attributes(): Map<Internal.AttributedCharacterIterator$Attribute, object>;
        get index(): number;
        get runLimit(): number;
        get beginIndex(): number;
        get endIndex(): number;
        set index(arg0: number);
        get runStart(): number;
        get allAttributeKeys(): Internal.Set<Internal.AttributedCharacterIterator$Attribute>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Collector$Characteristics extends Internal.Enum<Internal.Collector$Characteristics> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(arg0: string): Internal.Collector$Characteristics;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.Collector$Characteristics[];
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly IDENTITY_FINISH : Internal.Collector$Characteristics;
        static readonly UNORDERED : Internal.Collector$Characteristics;
        static readonly CONCURRENT : Internal.Collector$Characteristics;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IRegistryDelegate <T> implements java_.util.function_.Supplier<T> {
        get(): T;
        name(): ResourceLocation;
        type(): Internal.Class<T>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class WrapFactory {
        wrapAsJavaObject(cx: Internal.Context, scope: Internal.Scriptable, javaObject: object, staticType: Internal.Class<object>): Internal.Scriptable;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        wrapJavaClass(cx: Internal.Context, scope: Internal.Scriptable, javaClass: Internal.Class<object>): Internal.Scriptable;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        isJavaPrimitiveWrap(): boolean;
        toString(): string;
        wrapNewObject(cx: Internal.Context, scope: Internal.Scriptable, obj: object): Internal.Scriptable;
        wrap(cx: Internal.Context, scope: Internal.Scriptable, obj: object, staticType: Internal.Class<object>): object;
        notify(): void;
        set javaPrimitiveWrap(value: boolean);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ModelState implements Internal.IForgeModelState {
        getPartTransformation(arg0: object): Internal.Transformation;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class Enum <E> implements Internal.Constable, Internal.Comparable<E>, Internal.Serializable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        static valueOf<T>(arg0: Internal.Class<T>, arg1: string): T;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        describeConstable(): Internal.Optional<Internal.Enum$EnumDesc<E>>;
        notify(): void;
        ordinal(): number;
        get declaringClass(): Internal.Class<E>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface FuncSupplier$Func1 implements Internal.FuncSupplier {
        create(args: Internal.List<Internal.Unit>): Internal.Unit;
        create1(arg0: Internal.Unit): Internal.Unit;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ModelManager extends Internal.SimplePreparableReloadListener<Internal.ModelBakery> implements Internal.AutoCloseable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        getModel(arg0: ResourceLocation): Internal.BakedModel;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        close(): void;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Collector <T, A, R> {
        characteristics(): Internal.Set<Internal.Collector$Characteristics>;
        supplier(): () => A;
        finisher(): (arg0: A) => R;
        accumulator(): (arg0: A, arg1: T) => void;
        combiner(): Internal.BinaryOperator<A>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface GroupPrincipal implements Internal.UserPrincipal {
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        implies(arg0: Internal.Subject): boolean;
        get name(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IdEnumerationIterator {
        enumerationIteratorNext(arg0: Internal.Context, arg1: (arg0: object) => void): boolean;
        enumerationIteratorHasNext(arg0: Internal.Context, arg1: (arg0: object) => void): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface FuncSupplier {
        create(arg0: Internal.List<Internal.Unit>): Internal.Unit;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class VarHandle$VarHandleDesc extends Internal.DynamicConstantDesc<Internal.VarHandle> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        static ofCanonical<T>(arg0: Internal.DirectMethodHandleDesc, arg1: string, arg2: Internal.ClassDesc, arg3: Internal.ConstantDesc[]): Internal.ConstantDesc;
        bootstrapMethod(): Internal.DirectMethodHandleDesc;
        constantName(): string;
        notifyAll(): void;
        static ofArray(arg0: Internal.ClassDesc): Internal.VarHandle$VarHandleDesc;
        resolveConstantDesc(arg0: Internal.MethodHandles$Lookup): object;
        resolveConstantDesc(arg0: Internal.MethodHandles$Lookup): Internal.VarHandle;
        notify(): void;
        static ofField(arg0: Internal.ClassDesc, arg1: string, arg2: Internal.ClassDesc): Internal.VarHandle$VarHandleDesc;
        static ofStaticField(arg0: Internal.ClassDesc, arg1: string, arg2: Internal.ClassDesc): Internal.VarHandle$VarHandleDesc;
        varType(): Internal.ClassDesc;
        constantType(): Internal.ClassDesc;
        hashCode(): number;
        bootstrapArgs(): Internal.ConstantDesc[];
        equals(arg0: object): boolean;
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ModelGenerator$Face {
        uv(u0: number, v0: number, u1: number, v1: number): Internal.ModelGenerator$Face;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        toJson(): Internal.JsonObject;
        hashCode(): number;
        tex(t: string): Internal.ModelGenerator$Face;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        cull(d: Internal.Direction): Internal.ModelGenerator$Face;
        cull(): Internal.ModelGenerator$Face;
        notify(): void;
        tintindex(i: number): Internal.ModelGenerator$Face;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class CreativeModeTab {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        notify(): void;
        hasSearchBar(): boolean;
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        get labelColor(): number;
        get searchbarWidth(): number;
        set backgroundImage(arg0: ResourceLocation);
        get groupCountSafe(): number;
        get backgroundImage(): ResourceLocation;
        get slotColor(): number;
        get tabsImage(): ResourceLocation;
        get tabPage(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class LootBuilderPool implements Internal.FunctionContainer, Internal.ConditionContainer {
        enchantWithLevels(levels: Internal.NumberProvider, treasure: boolean): Internal.FunctionContainer;
        damage(damage: Internal.NumberProvider): Internal.FunctionContainer;
        nbt(tag: Internal.CompoundTag): Internal.FunctionContainer;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        survivesExplosion(): Internal.ConditionContainer;
        notifyAll(): void;
        addEmpty(weight: number): Internal.LootTableEntry;
        addConditionalFunction(func: (arg0: Internal.ConditionalFunction) => void): Internal.FunctionContainer;
        addCondition(o: Internal.JsonObject): Internal.LootBuilderPool;
        addCondition(arg0: Internal.JsonObject): Internal.ConditionContainer;
        addTag(tag: string, expand: boolean): Internal.LootTableEntry;
        notify(): void;
        addItem(item: Internal.ItemStack, weight: number, count: Internal.NumberProvider): Internal.LootTableEntry;
        addItem(item: Internal.ItemStack, weight: number): Internal.LootTableEntry;
        addItem(item: Internal.ItemStack): Internal.LootTableEntry;
        lootTable(table: ResourceLocation, seed: number): Internal.FunctionContainer;
        setBinomialRolls(n: number, p: number): void;
        hashCode(): number;
        killedByPlayer(): Internal.ConditionContainer;
        randomChance(chance: number): Internal.ConditionContainer;
        addFunction(o: Internal.JsonObject): Internal.LootBuilderPool;
        addFunction(arg0: Internal.JsonObject): Internal.FunctionContainer;
        count(count: Internal.NumberProvider): Internal.FunctionContainer;
        lootingEnchant(count: Internal.NumberProvider, limit: number): Internal.FunctionContainer;
        setUniformRolls(min: number, max: number): void;
        toJson(): Internal.JsonObject;
        entityScores(entity: Internal.LootContext$EntityTarget, scores: Map<string, object>): Internal.ConditionContainer;
        copyName(source: Internal.CopyNameFunction$NameSource): Internal.FunctionContainer;
        addEntry(json: Internal.JsonObject): Internal.LootTableEntry;
        equals(arg0: object): boolean;
        name(name: Internal.Text, entity: Internal.LootContext$EntityTarget): Internal.FunctionContainer;
        name(name: Internal.Text): Internal.FunctionContainer;
        randomChanceWithLooting(chance: number, multiplier: number): Internal.ConditionContainer;
        furnaceSmelt(): Internal.FunctionContainer;
        addLootTable(table: ResourceLocation): Internal.LootTableEntry;
        toString(): string;
        enchantRandomly(enchantments: ResourceLocation[]): Internal.FunctionContainer;
        entityProperties(entity: Internal.LootContext$EntityTarget, properties: Internal.JsonObject): Internal.ConditionContainer;
        readonly entries : Internal.JsonArray;
        readonly functions : Internal.JsonArray;
        rolls : Internal.NumberProvider;
        readonly conditions : Internal.JsonArray;
        bonusRolls : Internal.NumberProvider;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class PoseStack$Pose {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class ReentrantBlockableEventLoop <R> extends Internal.BlockableEventLoop<R> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        close(): void;
        execute(arg0: Internal.Runnable): void;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Short2ReferenceFunction <V> implements it.unimi.dsi.fastutil.Function<number, V>, Internal.IntFunction<V> {
        getOrDefault(arg0: object, arg1: V): V;
        getOrDefault(arg0: number, arg1: V): V;
        andThenShort(arg0: Internal.Reference2ShortFunction<V>): Internal.Short2ShortFunction;
        composeByte(arg0: Internal.Byte2ShortFunction): Internal.Byte2ReferenceFunction<V>;
        andThenInt(arg0: Internal.Reference2IntFunction<V>): Internal.Short2IntFunction;
        composeReference<T>(arg0: Internal.Reference2ShortFunction<T>): (arg0: T) => V;
        put(arg0: number, arg1: V): V;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: V): V;
        remove(arg0: number): V;
        remove(arg0: object): V;
        defaultReturnValue(): V;
        defaultReturnValue(arg0: V): void;
        andThenDouble(arg0: Internal.Reference2DoubleFunction<V>): Internal.Short2DoubleFunction;
        andThenObject<T>(arg0: (arg0: V) => T): Internal.Short2ObjectFunction<T>;
        get(arg0: object): V;
        get(arg0: number): V;
        andThenLong(arg0: Internal.Reference2LongFunction<V>): Internal.Short2LongFunction;
        composeLong(arg0: Internal.Long2ShortFunction): Internal.Long2ReferenceFunction<V>;
        andThenByte(arg0: Internal.Reference2ByteFunction<V>): Internal.Short2ByteFunction;
        andThenFloat(arg0: Internal.Reference2FloatFunction<V>): Internal.Short2FloatFunction;
        apply(arg0: number): V;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2ShortFunction): Internal.Int2ReferenceFunction<V>;
        clear(): void;
        composeFloat(arg0: Internal.Float2ShortFunction): Internal.Float2ReferenceFunction<V>;
        andThenChar(arg0: Internal.Reference2CharFunction<V>): Internal.Short2CharFunction;
        composeObject<T>(arg0: Internal.Object2ShortFunction<T>): (arg0: T) => V;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => V;
        composeShort(arg0: Internal.Short2ShortFunction): Internal.Short2ReferenceFunction<V>;
        andThenReference<T>(arg0: (arg0: V) => T): Internal.Short2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2ShortFunction): Internal.Char2ReferenceFunction<V>;
        composeDouble(arg0: Internal.Double2ShortFunction): Internal.Double2ReferenceFunction<V>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Float2ShortFunction implements it.unimi.dsi.fastutil.Function<number, number>, Internal.DoubleToIntFunction {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        andThenShort(arg0: Internal.Short2ShortFunction): Internal.Float2ShortFunction;
        composeByte(arg0: Internal.Byte2FloatFunction): Internal.Byte2ShortFunction;
        andThenInt(arg0: Internal.Short2IntFunction): Internal.Float2IntFunction;
        composeReference<T>(arg0: Internal.Reference2FloatFunction<T>): Internal.Reference2ShortFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: number) => T;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: number): number;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: object): object;
        remove(arg0: object): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Short2DoubleFunction): Internal.Float2DoubleFunction;
        andThenObject<T>(arg0: Internal.Short2ObjectFunction<T>): Internal.Float2ObjectFunction<T>;
        get(arg0: object): number;
        get(arg0: object): object;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Short2LongFunction): Internal.Float2LongFunction;
        composeLong(arg0: Internal.Long2FloatFunction): Internal.Long2ShortFunction;
        andThenByte(arg0: Internal.Short2ByteFunction): Internal.Float2ByteFunction;
        andThenFloat(arg0: Internal.Short2FloatFunction): Internal.Float2FloatFunction;
        applyAsInt(arg0: number): number;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2FloatFunction): Internal.Int2ShortFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2FloatFunction): Internal.Float2ShortFunction;
        andThenChar(arg0: Internal.Short2CharFunction): Internal.Float2CharFunction;
        composeObject<T>(arg0: Internal.Object2FloatFunction<T>): Internal.Object2ShortFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => number;
        composeShort(arg0: Internal.Short2FloatFunction): Internal.Short2ShortFunction;
        andThenReference<T>(arg0: Internal.Short2ReferenceFunction<T>): Internal.Float2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2FloatFunction): Internal.Char2ShortFunction;
        composeDouble(arg0: Internal.Double2FloatFunction): Internal.Double2ShortFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ExtendedEntityFlagsPredicate$IBuilder <T> {
        isBaby(arg0: boolean): Internal.ExtendedEntityFlagsPredicate$IBuilder<T>;
        isIllegarMob(arg0: boolean): Internal.ExtendedEntityFlagsPredicate$IBuilder<T>;
        isSwimming(arg0: boolean): Internal.ExtendedEntityFlagsPredicate$IBuilder<T>;
        isInWater(arg0: boolean): Internal.ExtendedEntityFlagsPredicate$IBuilder<T>;
        isWaterMob(arg0: boolean): Internal.ExtendedEntityFlagsPredicate$IBuilder<T>;
        isCrouching(arg0: boolean): Internal.ExtendedEntityFlagsPredicate$IBuilder<T>;
        isUnderWater(arg0: boolean): Internal.ExtendedEntityFlagsPredicate$IBuilder<T>;
        isSprinting(arg0: boolean): Internal.ExtendedEntityFlagsPredicate$IBuilder<T>;
        isUndeadMob(arg0: boolean): Internal.ExtendedEntityFlagsPredicate$IBuilder<T>;
        isCreature(arg0: boolean): Internal.ExtendedEntityFlagsPredicate$IBuilder<T>;
        build(): T;
        isMonster(arg0: boolean): Internal.ExtendedEntityFlagsPredicate$IBuilder<T>;
        isOnFire(arg0: boolean): Internal.ExtendedEntityFlagsPredicate$IBuilder<T>;
        isArthropodMob(arg0: boolean): Internal.ExtendedEntityFlagsPredicate$IBuilder<T>;
        isOnGround(arg0: boolean): Internal.ExtendedEntityFlagsPredicate$IBuilder<T>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface SortedMap <K, V> implements Map<K, V> {
        getOrDefault(arg0: object, arg1: V): V;
        entrySet(): Internal.Set<Internal.Map$Entry<K, V>>;
        containsKey(arg0: object): boolean;
        subMap(arg0: K, arg1: K): Internal.SortedMap<K, V>;
        values(): Internal.Collection<V>;
        replace(arg0: K, arg1: V): V;
        replace(arg0: K, arg1: V, arg2: V): boolean;
        isEmpty(): boolean;
        clear(): void;
        containsValue(arg0: object): boolean;
        put(arg0: K, arg1: V): V;
        remove(arg0: object): V;
        remove(arg0: object, arg1: object): boolean;
        comparator(): Internal.Comparator<K>;
        size(): number;
        hashCode(): number;
        firstKey(): K;
        equals(arg0: object): boolean;
        get(arg0: object): V;
        lastKey(): K;
        headMap(arg0: K): Internal.SortedMap<K, V>;
        putIfAbsent(arg0: K, arg1: V): V;
        keySet(): Internal.Set<K>;
        tailMap(arg0: K): Internal.SortedMap<K, V>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IScheduledEventCallback {
        onCallback(arg0: Internal.ScheduledEvent): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Products$P9 <F, T1, T2, T3, T4, T5, T6, T7, T8, T9> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        apply<R>(arg0: Internal.Applicative<F, object>, arg1: Internal.Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>): Internal.App<F, R>;
        apply<R>(arg0: Internal.Applicative<F, object>, arg1: Internal.App<F, Internal.Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>>): Internal.App<F, R>;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ProgressivePromise <V> implements Internal.Promise<V>, Internal.ProgressiveFuture<V> {
        cancel(arg0: boolean): boolean;
        isCancelled(): boolean;
        removeListeners(arg0: Internal.GenericFutureListener<Internal.Future<V>>[]): Internal.ProgressivePromise<V>;
        setProgress(arg0: number, arg1: number): Internal.ProgressivePromise<V>;
        cause(): Internal.Throwable;
        awaitUninterruptibly(): Internal.ProgressivePromise<V>;
        awaitUninterruptibly(arg0: number): boolean;
        awaitUninterruptibly(arg0: number, arg1: Internal.TimeUnit): boolean;
        removeListener(arg0: Internal.GenericFutureListener<Internal.Future<V>>): Internal.ProgressivePromise<V>;
        tryFailure(arg0: Internal.Throwable): boolean;
        isDone(): boolean;
        sync(): Internal.ProgressivePromise<V>;
        trySuccess(arg0: V): boolean;
        tryProgress(arg0: number, arg1: number): boolean;
        syncUninterruptibly(): Internal.ProgressivePromise<V>;
        get(arg0: number, arg1: Internal.TimeUnit): V;
        get(): V;
        isCancellable(): boolean;
        await(): Internal.ProgressivePromise<V>;
        await(arg0: number, arg1: Internal.TimeUnit): boolean;
        await(arg0: number): boolean;
        addListeners(arg0: Internal.GenericFutureListener<Internal.Future<V>>[]): Internal.ProgressivePromise<V>;
        isSuccess(): boolean;
        setUncancellable(): boolean;
        addListener(arg0: Internal.GenericFutureListener<Internal.Future<V>>): Internal.ProgressivePromise<V>;
        get now(): V;
        set success(arg0: V);
        set failure(arg0: Internal.Throwable);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class MetalPressRecipeJS extends Internal.IERecipeJS {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        ingredientAction(filter: Internal.IngredientActionFilter, action: Internal.IngredientAction): Internal.RecipeJS;
        notifyAll(): void;
        convertReplacedOutput(index: number, oldStack: Internal.ItemStackJS, newStack: Internal.ItemStackJS): Internal.ItemStackJS;
        convertReplacedInput(index: number, oldIngredient: Internal.IngredientJS, newIngredient: Internal.IngredientJS): Internal.IngredientJS;
        save(): void;
        damageIngredient(filter: Internal.IngredientActionFilter, damage: number): Internal.RecipeJS;
        damageIngredient(filter: Internal.IngredientActionFilter): Internal.RecipeJS;
        getId(): string;
        dontAdd(): void;
        notify(): void;
        serializeJson(): void;
        parseIngredientItemIE(json: Internal.JsonElement): Internal.IngredientStackJS;
        replaceOutput(i: Internal.IngredientJS, with_: Internal.ItemStackJS, exact: boolean): boolean;
        hashCode(): number;
        merge(data: object): Internal.RecipeJS;
        create(args: Internal.ListJS): void;
        deserializeJson(): void;
        id(_id: ResourceLocation): Internal.RecipeJS;
        parseIngredientItem(o: object, key: string): Internal.IngredientJS;
        parseIngredientItem(o: object): Internal.IngredientJS;
        group(g: string): Internal.RecipeJS;
        energy(e: number): Internal.IERecipeJS;
        deserialize(): void;
        serializeNBTAsJson(): boolean;
        getOutputIndex(ingredient: Internal.IngredientJS, exact: boolean): number;
        getInputIndex(ingredient: Internal.IngredientJS, exact: boolean): number;
        setGroup(g: string): void;
        serialize(): void;
        resultFromRecipeJson(json: Internal.JsonObject): Internal.ItemStackJS;
        stage(s: string): Internal.RecipeJS;
        serializeIngredientStack(in_: Internal.IngredientStackJS): Internal.JsonElement;
        replaceInput(i: Internal.IngredientJS, with_: Internal.IngredientJS, exact: boolean): boolean;
        getType(): string;
        equals(arg0: object): boolean;
        getGroup(): string;
        serializeItemStack(stack: Internal.ItemStackJS): Internal.JsonElement;
        hasOutput(ingredient: Internal.IngredientJS, exact: boolean): boolean;
        toString(): string;
        keepIngredient(filter: Internal.IngredientActionFilter): Internal.RecipeJS;
        time(t: number): Internal.IERecipeJS;
        hasInput(ingredient: Internal.IngredientJS, exact: boolean): boolean;
        customIngredientAction(filter: Internal.IngredientActionFilter, id: string): Internal.RecipeJS;
        parseResultItem(o: object): Internal.ItemStackJS;
        replaceIngredient(filter: Internal.IngredientActionFilter, item: Internal.ItemStackJS): Internal.RecipeJS;
        static currentRecipe : Internal.RecipeJS;
        readonly inputItems : Internal.List<Internal.IngredientJS>;
        static itemErrors : false;
        type : Internal.RecipeTypeJS;
        originalJson : Internal.JsonObject;
        serializeOutputs : boolean;
        readonly outputFluids : Internal.List<Internal.FluidStack>;
        originalRecipe : Internal.Recipe<object>;
        readonly inputFluids : Internal.List<Internal.FluidTagInput>;
        json : Internal.JsonObject;
        readonly outputItems : Internal.List<Internal.ItemStackJS>;
        serializeInputs : boolean;
        get mod(): string;
        get uniqueId(): string;
        get fromToString(): string;
        get path(): string;
        get orCreateId(): ResourceLocation;
        get originalRecipeResult(): Internal.ItemStackJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface BlockStateFlagHolder {
        get allFlags(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class PathfinderMob extends Internal.Mob {
        backpackedMoved(): boolean;
        updateNavigationRegistration(): void;
        onEndimationEnd(arg0: Internal.PlayableEndimation, arg1: Internal.PlayableEndimation): void;
        canBeRiddenInWater(arg0: Internal.Entity): boolean;
        handler$zzo000$tickHead(arg0: Internal.CallbackInfo): void;
        isEndimationPlaying(arg0: Internal.PlayableEndimation): boolean;
        isActive(): boolean;
        handler$zgm001$tick(arg0: Internal.CallbackInfo): void;
        create$callSpawnItemParticles(arg0: Internal.ItemStack, arg1: number): void;
        handler$zjn000$onUpdateFluidOnEyes(arg0: Internal.CallbackInfo): void;
        changeDimension(arg0: Internal.ServerLevel, arg1: Internal.ITeleporter): Internal.Entity;
        serializeNBT(): Internal.Tag;
        serializeNBT(): Internal.CompoundTag;
        invalidateCaps(): void;
        foodEatenKJS(is: Internal.ItemStack): void;
        revive(): void;
        canUpdate(): boolean;
        canUpdate(arg0: boolean): void;
        handler$bgc000$tryShortcutFluidPushing(tag: net.minecraft.tags.Tag<any>, speed: number, cir: Internal.CallbackInfoReturnable<any>, box: Internal.AABB, x1: number, x2: number, y1: number, y2: number, z1: number, z2: number, zero: number): void;
        resetEndimation(): void;
        areCapsCompatible(arg0: Internal.CapabilityDispatcher): boolean;
        getEyeHeightAccess(arg0: Internal.Pose, arg1: Internal.EntityDimensions): number;
        reviveCaps(): void;
        lithiumOnBlockCacheDeleted(): void;
        canRiderInteract(): boolean;
        getEntries(arg0: boolean): Internal.Set<any>;
        onAddedToWorld(): void;
        isRegisteredToWorld(): boolean;
        handler$zcp000$read(arg0: Internal.CompoundTag, arg1: Internal.CallbackInfo): void;
        canTrample(arg0: Internal.BlockState, arg1: BlockPos, arg2: number): boolean;
        getClassification(arg0: boolean): Internal.MobCategory;
        onEndimationStart(arg0: Internal.PlayableEndimation, arg1: Internal.PlayableEndimation): void;
        isNoEndimationPlaying(): boolean;
        lithiumSetClimbingMobCachingSectionUpdateBehavior(listenForCachedBlockChanges: boolean): void;
        shouldRiderSit(): boolean;
        getPickedResult(arg0: Internal.HitResult): Internal.ItemStack;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        lithiumOnEquipmentChanged(): void;
        lithiumOnBlockCacheSet(newState: Internal.BlockState): void;
        handler$zjn000$onUpdateFluidOnEyeAssign(arg0: Internal.CallbackInfo): void;
        notify(): void;
        handler$zzo000$moveStep(arg0: Internal.MoverType, arg1: Vec3, arg2: Internal.CallbackInfo): void;
        endimateTick(): void;
        isDirty(): boolean;
        hashCode(): number;
        isAddedToWorld(): boolean;
        addListener(listener: Internal.NearbyEntityListener): void;
        onRemovedFromWorld(): void;
        isMultipartEntity(): boolean;
        deserializeNBT(arg0: Internal.CompoundTag): void;
        deserializeNBT(arg0: Internal.Tag): void;
        curePotionEffects(arg0: Internal.ItemStack): boolean;
        clean(): void;
        asKJS(): object;
        getValue(arg0: Internal.TrackedData<any>): object;
        shouldRiderFaceForward(arg0: Internal.Player): boolean;
        setValue(arg0: Internal.TrackedData<any>, arg1: object): void;
        equals(arg0: object): boolean;
        toString(): string;
        set citadelEntityData(arg0: Internal.CompoundTag);
        get cachedFeetBlockState(): Internal.BlockState;
        get pos(): Internal.Position;
        get persistentDataKJS(): Internal.CompoundTag;
        get endimatedState(): Internal.Endimatable$EndimatedState;
        get registeredNavigation(): Internal.PathNavigation;
        get effectHandler(): Internal.EndimationEffectHandler;
        get dataEffectColorId_$md$85ada3$1(): Internal.EntityDataAccessor<any>;
        set animationTick(arg0: number);
        get citadelEntityData(): Internal.CompoundTag;
        get listener(): Internal.NearbyEntityListenerMulti;
        get isInsidePortal(): boolean;
        get persistentData(): Internal.CompoundTag;
        get remainingFireTicks(): number;
        get dataMap(): Map<any, any>;
        get entityChangeListener(): Internal.EntityInLevelCallback;
        set dataMap(arg0: Map<any, any>);
        get dataEffectAmbienceId_$md$85ada3$0(): Internal.EntityDataAccessor<any>;
        get lastPos(): BlockPos;
        set registeredToWorld(navigation: Internal.PathNavigation);
        get parts(): Internal.PartEntity<object>[];
        get playingEndimation(): Internal.PlayableEndimation;
        get dirtyEntries(): Internal.Set<any>;
        set playingEndimation(arg0: Internal.PlayableEndimation);
        get animationTick(): number;
        set remainingFireTicks(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Decoder <A> {
        simple(): Internal.Decoder$Simple<A>;
        terminal(): Internal.Decoder$Terminal<A>;
        parse<T>(arg0: Internal.Dynamic<T>): Internal.DataResult<A>;
        parse<T>(arg0: Internal.DynamicOps<T>, arg1: T): Internal.DataResult<A>;
        withLifecycle(arg0: Internal.Lifecycle): Internal.Decoder<A>;
        decode<T>(arg0: Internal.DynamicOps<T>, arg1: T): Internal.DataResult<Internal.Pair<A, T>>;
        decode<T>(arg0: Internal.Dynamic<T>): Internal.DataResult<Internal.Pair<A, T>>;
        promotePartial(arg0: (arg0: string) => void): Internal.Decoder<A>;
        flatMap<B>(arg0: (arg0: A) => Internal.DataResult<B>): Internal.Decoder<B>;
        boxed(): Internal.Decoder$Boxed<A>;
        fieldOf(arg0: string): Internal.MapDecoder<A>;
        map<B>(arg0: (arg0: A) => B): Internal.Decoder<B>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface MapDecoder <A> implements Internal.Keyable {
        flatMap<B>(arg0: (arg0: A) => Internal.DataResult<B>): Internal.MapDecoder<B>;
        compressedDecode<T>(arg0: Internal.DynamicOps<T>, arg1: T): Internal.DataResult<A>;
        decoder(): Internal.Decoder<A>;
        withLifecycle(arg0: Internal.Lifecycle): Internal.MapDecoder<A>;
        decode<T>(arg0: Internal.DynamicOps<T>, arg1: Internal.MapLike<T>): Internal.DataResult<A>;
        map<B>(arg0: (arg0: A) => B): Internal.MapDecoder<B>;
        compressor<T>(arg0: Internal.DynamicOps<T>): Internal.KeyCompressor<T>;
        ap<E>(arg0: Internal.MapDecoder<(arg0: A) => E>): Internal.MapDecoder<E>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Vector3d {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface JsonSerializable {
        toJson(): Internal.JsonElement;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class BlockEntity extends Internal.CapabilityProvider<Internal.BlockEntity> implements Internal.IForgeBlockEntity, Internal.RemovableBlockEntity {
        requestModelDataUpdate(): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        increaseRemoveCounter(): void;
        notifyAll(): void;
        areCapsCompatible(arg0: Internal.CapabilityDispatcher): boolean;
        deserializeNBT(arg0: Internal.Tag): void;
        deserializeNBT(arg0: Internal.CompoundTag): void;
        notify(): void;
        reviveCaps(): void;
        serializeNBT(): Internal.Tag;
        serializeNBT(): Internal.CompoundTag;
        invalidateCaps(): void;
        hashCode(): number;
        onChunkUnloaded(): void;
        equals(arg0: object): boolean;
        onDataPacket(arg0: Internal.Connection, arg1: Internal.ClientboundBlockEntityDataPacket): void;
        onLoad(): void;
        toString(): string;
        handleUpdateTag(arg0: Internal.CompoundTag): void;
        static readonly INFINITE_EXTENT_AABB : Internal.AABB;
        get tileData(): Internal.CompoundTag;
        get removedCountLithium(): number;
        get modelData(): Internal.IModelData;
        get renderBoundingBox(): Internal.AABB;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface BaseMapCodec <K, V> {
        encode<T>(arg0: Map<K, V>, arg1: Internal.DynamicOps<T>, arg2: Internal.RecordBuilder<T>): Internal.RecordBuilder<T>;
        elementCodec(): Internal.Codec<V>;
        keyCodec(): Internal.Codec<K>;
        decode<T>(arg0: Internal.DynamicOps<T>, arg1: Internal.MapLike<T>): Internal.DataResult<Map<K, V>>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ImmutableMultimap$Builder <K, V> {
        orderKeysBy(arg0: Internal.Comparator<K>): Internal.ImmutableMultimap$Builder<K, V>;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        build(): Internal.ImmutableMultimap<K, V>;
        hashCode(): number;
        orderValuesBy(arg0: Internal.Comparator<V>): Internal.ImmutableMultimap$Builder<K, V>;
        notifyAll(): void;
        equals(arg0: object): boolean;
        putAll(arg0: Internal.Multimap<K, V>): Internal.ImmutableMultimap$Builder<K, V>;
        putAll(arg0: K, arg1: V[]): Internal.ImmutableMultimap$Builder<K, V>;
        putAll(arg0: K, arg1: Internal.Iterable<V>): Internal.ImmutableMultimap$Builder<K, V>;
        putAll(arg0: Internal.Iterable<Internal.Map$Entry<K, V>>): Internal.ImmutableMultimap$Builder<K, V>;
        toString(): string;
        notify(): void;
        put(arg0: Internal.Map$Entry<K, V>): Internal.ImmutableMultimap$Builder<K, V>;
        put(arg0: K, arg1: V): Internal.ImmutableMultimap$Builder<K, V>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class PersistentEntitySectionManager <T> implements Internal.AutoCloseable, me.jellysquid.mods.lithium.mixin.ai.nearby_entity_tracking.ServerEntityManagerAccessor, Internal.ServerEntityManagerAccessor {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        addNewEntityWithoutEvent(arg0: T): boolean;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        close(): void;
        notify(): void;
        get cache(): Internal.EntitySectionStorage<any>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface VertexDrain {
        createSink<T>(arg0: me.jellysquid.mods.sodium.client.model.vertex.type.VertexType<T>): T;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ChronoPeriod implements Internal.TemporalAmount {
        minus(arg0: Internal.TemporalAmount): Internal.ChronoPeriod;
        isNegative(): boolean;
        negated(): Internal.ChronoPeriod;
        normalized(): Internal.ChronoPeriod;
        plus(arg0: Internal.TemporalAmount): Internal.ChronoPeriod;
        multipliedBy(arg0: number): Internal.ChronoPeriod;
        subtractFrom(arg0: Internal.Temporal): Internal.Temporal;
        hashCode(): number;
        equals(arg0: object): boolean;
        get(arg0: Internal.TemporalUnit): number;
        addTo(arg0: Internal.Temporal): Internal.Temporal;
        isZero(): boolean;
        toString(): string;
        get units(): Internal.List<Internal.TemporalUnit>;
        get chronology(): Internal.Chronology;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Function5 <T1, T2, T3, T4, T5, R> {
        apply(arg0: T1, arg1: T2, arg2: T3, arg3: T4, arg4: T5): R;
        curry3(): Internal.Function3<T1, T2, T3, (arg0: T4, arg1: T5) => R>;
        curry4(): Internal.Function4<T1, T2, T3, T4, (arg0: T5) => R>;
        curry2(): (arg0: T1, arg1: T2) => Internal.Function3<T3, T4, T5, R>;
        curry(): (arg0: T1) => Internal.Function4<T2, T3, T4, T5, R>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Constant <T> implements Internal.Comparable<T> {
        name(): string;
        compareTo(arg0: T): number;
        id(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class WorldGenSettings {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Int2ShortFunction implements it.unimi.dsi.fastutil.Function<number, number>, Internal.IntUnaryOperator {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        andThenShort(arg0: Internal.Short2ShortFunction): Internal.Int2ShortFunction;
        composeByte(arg0: Internal.Byte2IntFunction): Internal.Byte2ShortFunction;
        andThenInt(arg0: Internal.Short2IntFunction): Internal.Int2IntFunction;
        composeReference<T>(arg0: Internal.Reference2IntFunction<T>): Internal.Reference2ShortFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: number) => T;
        andThen(arg0: Internal.IntUnaryOperator): Internal.IntUnaryOperator;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: number): number;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: object): object;
        remove(arg0: object): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Short2DoubleFunction): Internal.Int2DoubleFunction;
        andThenObject<T>(arg0: Internal.Short2ObjectFunction<T>): Internal.Int2ObjectFunction<T>;
        get(arg0: object): number;
        get(arg0: object): object;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Short2LongFunction): Internal.Int2LongFunction;
        composeLong(arg0: Internal.Long2IntFunction): Internal.Long2ShortFunction;
        andThenByte(arg0: Internal.Short2ByteFunction): Internal.Int2ByteFunction;
        andThenFloat(arg0: Internal.Short2FloatFunction): Internal.Int2FloatFunction;
        applyAsInt(arg0: number): number;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2IntFunction): Internal.Int2ShortFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2IntFunction): Internal.Float2ShortFunction;
        andThenChar(arg0: Internal.Short2CharFunction): Internal.Int2CharFunction;
        composeObject<T>(arg0: Internal.Object2IntFunction<T>): Internal.Object2ShortFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => number;
        compose(arg0: Internal.IntUnaryOperator): Internal.IntUnaryOperator;
        composeShort(arg0: Internal.Short2IntFunction): Internal.Short2ShortFunction;
        andThenReference<T>(arg0: Internal.Short2ReferenceFunction<T>): Internal.Int2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2IntFunction): Internal.Char2ShortFunction;
        composeDouble(arg0: Internal.Double2IntFunction): Internal.Double2ShortFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface LootContextAccessor {
        repurposedstructures_setQueriedLootTableId(arg0: ResourceLocation): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ICapabilitySerializable <T> implements Internal.ICapabilityProvider, Internal.INBTSerializable<T> {
        serializeNBT(): T;
        deserializeNBT(arg0: T): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface FileAttributeView implements Internal.AttributeView {
        name(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IForgeFluidState {
        getExplosionResistance(arg0: Internal.BlockGetter, arg1: BlockPos, arg2: Internal.Explosion): number;
        isEntityInside(arg0: Internal.LevelReader, arg1: BlockPos, arg2: Internal.Entity, arg3: number, arg4: Internal.SetTag<Internal.Fluid>, arg5: boolean): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ParticleEngineAccessor {
        create$getProviders(): Map<ResourceLocation, Internal.ParticleProvider<object>>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Float2ReferenceFunction <V> implements it.unimi.dsi.fastutil.Function<number, V>, Internal.DoubleFunction<V> {
        getOrDefault(arg0: object, arg1: V): V;
        getOrDefault(arg0: number, arg1: V): V;
        andThenShort(arg0: Internal.Reference2ShortFunction<V>): Internal.Float2ShortFunction;
        composeByte(arg0: Internal.Byte2FloatFunction): Internal.Byte2ReferenceFunction<V>;
        andThenInt(arg0: Internal.Reference2IntFunction<V>): Internal.Float2IntFunction;
        composeReference<T>(arg0: Internal.Reference2FloatFunction<T>): (arg0: T) => V;
        put(arg0: number, arg1: V): V;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: V): V;
        remove(arg0: number): V;
        remove(arg0: object): V;
        defaultReturnValue(): V;
        defaultReturnValue(arg0: V): void;
        andThenDouble(arg0: Internal.Reference2DoubleFunction<V>): Internal.Float2DoubleFunction;
        andThenObject<T>(arg0: (arg0: V) => T): Internal.Float2ObjectFunction<T>;
        get(arg0: object): V;
        get(arg0: number): V;
        andThenLong(arg0: Internal.Reference2LongFunction<V>): Internal.Float2LongFunction;
        composeLong(arg0: Internal.Long2FloatFunction): Internal.Long2ReferenceFunction<V>;
        andThenByte(arg0: Internal.Reference2ByteFunction<V>): Internal.Float2ByteFunction;
        andThenFloat(arg0: Internal.Reference2FloatFunction<V>): Internal.Float2FloatFunction;
        apply(arg0: number): V;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2FloatFunction): Internal.Int2ReferenceFunction<V>;
        clear(): void;
        composeFloat(arg0: Internal.Float2FloatFunction): Internal.Float2ReferenceFunction<V>;
        andThenChar(arg0: Internal.Reference2CharFunction<V>): Internal.Float2CharFunction;
        composeObject<T>(arg0: Internal.Object2FloatFunction<T>): (arg0: T) => V;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => V;
        composeShort(arg0: Internal.Short2FloatFunction): Internal.Short2ReferenceFunction<V>;
        andThenReference<T>(arg0: (arg0: V) => T): Internal.Float2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2FloatFunction): Internal.Char2ReferenceFunction<V>;
        composeDouble(arg0: Internal.Double2FloatFunction): Internal.Double2ReferenceFunction<V>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ServerScriptManager {
        init(serverResources: Internal.ServerResources): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        reloadScriptManager(resourceManager: Internal.ResourceManager): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        resourcePackList(list0: Internal.List<Internal.PackResources>): Internal.List<Internal.PackResources>;
        notify(): void;
        readonly scriptManager : Internal.ScriptManager;
        static instance : Internal.ServerScriptManager;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Stream$Builder <T> implements Internal.Consumer<T> {
        add(arg0: T): (arg0: T) => void;
        build(): Internal.Stream<T>;
        accept(arg0: T): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class HoverEvent {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Readable {
        read(arg0: Internal.CharBuffer): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ItemEntity extends Internal.Entity implements Internal.ItemEntityAccess {
        backpackedMoved(): boolean;
        onEndimationEnd(arg0: Internal.PlayableEndimation, arg1: Internal.PlayableEndimation): void;
        canBeRiddenInWater(arg0: Internal.Entity): boolean;
        handler$zzo000$tickHead(arg0: Internal.CallbackInfo): void;
        isEndimationPlaying(arg0: Internal.PlayableEndimation): boolean;
        isActive(): boolean;
        handler$zgm001$tick(arg0: Internal.CallbackInfo): void;
        handler$zjn000$onUpdateFluidOnEyes(arg0: Internal.CallbackInfo): void;
        changeDimension(arg0: Internal.ServerLevel, arg1: Internal.ITeleporter): Internal.Entity;
        serializeNBT(): Internal.Tag;
        serializeNBT(): Internal.CompoundTag;
        invalidateCaps(): void;
        revive(): void;
        canUpdate(): boolean;
        canUpdate(arg0: boolean): void;
        handler$bgc000$tryShortcutFluidPushing(tag: net.minecraft.tags.Tag<any>, speed: number, cir: Internal.CallbackInfoReturnable<any>, box: Internal.AABB, x1: number, x2: number, y1: number, y2: number, z1: number, z2: number, zero: number): void;
        resetEndimation(): void;
        areCapsCompatible(arg0: Internal.CapabilityDispatcher): boolean;
        getEyeHeightAccess(arg0: Internal.Pose, arg1: Internal.EntityDimensions): number;
        handler$zfl000$onHurt(arg0: Internal.DamageSource, arg1: number, arg2: Internal.CallbackInfoReturnable<any>): void;
        reviveCaps(): void;
        lithiumOnBlockCacheDeleted(): void;
        canRiderInteract(): boolean;
        getEntries(arg0: boolean): Internal.Set<any>;
        onAddedToWorld(): void;
        handler$zcp000$read(arg0: Internal.CompoundTag, arg1: Internal.CallbackInfo): void;
        canTrample(arg0: Internal.BlockState, arg1: BlockPos, arg2: number): boolean;
        getClassification(arg0: boolean): Internal.MobCategory;
        lithiumSetClimbingMobCachingSectionUpdateBehavior(listening: boolean): void;
        onEndimationStart(arg0: Internal.PlayableEndimation, arg1: Internal.PlayableEndimation): void;
        isNoEndimationPlaying(): boolean;
        shouldRiderSit(): boolean;
        getPickedResult(arg0: Internal.HitResult): Internal.ItemStack;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        lithiumOnBlockCacheSet(newState: Internal.BlockState): void;
        handler$zjn000$onUpdateFluidOnEyeAssign(arg0: Internal.CallbackInfo): void;
        notify(): void;
        handler$zzo000$moveStep(arg0: Internal.MoverType, arg1: Vec3, arg2: Internal.CallbackInfo): void;
        endimateTick(): void;
        isDirty(): boolean;
        hashCode(): number;
        isAddedToWorld(): boolean;
        addListener(listener: Internal.NearbyEntityListener): void;
        handler$zzp000$fireImmuneHead(arg0: Internal.CallbackInfoReturnable<any>): void;
        onRemovedFromWorld(): void;
        isMultipartEntity(): boolean;
        deserializeNBT(arg0: Internal.CompoundTag): void;
        deserializeNBT(arg0: Internal.Tag): void;
        clean(): void;
        asKJS(): object;
        getValue(arg0: Internal.TrackedData<any>): object;
        setValue(arg0: Internal.TrackedData<any>, arg1: object): void;
        equals(arg0: object): boolean;
        toString(): string;
        lifespan : number;
        get cachedFeetBlockState(): Internal.BlockState;
        get pos(): Internal.Position;
        get persistentDataKJS(): Internal.CompoundTag;
        get endimatedState(): Internal.Endimatable$EndimatedState;
        get effectHandler(): Internal.EndimationEffectHandler;
        set animationTick(arg0: number);
        get listener(): Internal.NearbyEntityListenerMulti;
        set age(arg0: number);
        get isInsidePortal(): boolean;
        get persistentData(): Internal.CompoundTag;
        get remainingFireTicks(): number;
        get dataMap(): Map<any, any>;
        get entityChangeListener(): Internal.EntityInLevelCallback;
        set dataMap(arg0: Map<any, any>);
        get parts(): Internal.PartEntity<object>[];
        get playingEndimation(): Internal.PlayableEndimation;
        get dirtyEntries(): Internal.Set<any>;
        set playingEndimation(arg0: Internal.PlayableEndimation);
        get animationTick(): number;
        set remainingFireTicks(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Collection <E> implements Internal.Iterable<E> {
        add(arg0: E): boolean;
        spliterator(): Internal.Spliterator<E>;
        containsAll(arg0: Internal.Collection<object>): boolean;
        isEmpty(): boolean;
        clear(): void;
        remove(arg0: object): boolean;
        removeIf(arg0: (arg0: E) => boolean): boolean;
        removeAll(arg0: Internal.Collection<object>): boolean;
        contains(arg0: object): boolean;
        iterator(): Internal.Iterator<E>;
        size(): number;
        addAll(arg0: Internal.Collection<E>): boolean;
        stream(): Internal.Stream<E>;
        hashCode(): number;
        equals(arg0: object): boolean;
        toArray<T>(arg0: T[]): T[];
        toArray<T>(arg0: Internal.IntFunction<T[]>): T[];
        toArray(): object[];
        parallelStream(): Internal.Stream<E>;
        retainAll(arg0: Internal.Collection<object>): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface LongStream$LongMapMultiConsumer {
        accept(arg0: number, arg1: Internal.LongConsumer): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class StageChangeEvent {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        get stage(): string;
        get player(): Internal.Player;
        get playerStages(): Internal.Stages;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface EffectInstanceAccess {
        get effect(): Internal.MobEffect;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface SkyRenderable {
        renderSky(arg0: Internal.PoseStack, arg1: number): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Recipe <C> {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface MultiBufferSource {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ContentHandlerFactory {
        createContentHandler(arg0: string): Internal.ContentHandler;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ExplosionJS {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        strength(f: number): Internal.ExplosionJS;
        hashCode(): number;
        damagesTerrain(b: boolean): Internal.ExplosionJS;
        exploder(entity: Internal.EntityJS): Internal.ExplosionJS;
        explode(): void;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        causesFire(b: boolean): Internal.ExplosionJS;
        destroysTerrain(b: boolean): Internal.ExplosionJS;
        notify(): void;
        explosionMode : Internal.Explosion$BlockInteraction;
        readonly x : number;
        readonly y : number;
        readonly z : number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class CompressorHolder implements Internal.Compressable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        keys<T>(arg0: Internal.DynamicOps<T>): Internal.Stream<T>;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        compressor<T>(arg0: Internal.DynamicOps<T>): Internal.KeyCompressor<T>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class BuilderBase {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        translationKey(key: string): Internal.BuilderBase;
        hashCode(): number;
        newID(pre: string, post: string): ResourceLocation;
        displayName(name: string): Internal.BuilderBase;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        tag(tag: ResourceLocation): Internal.BuilderBase;
        notify(): void;
        readonly id : ResourceLocation;
        defaultTags : Internal.Set<ResourceLocation>;
        get builderType(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface EntityAccessor {
        get entityChangeListener(): Internal.EntityInLevelCallback;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface BlockAndTintGetter implements Internal.BlockGetter {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class OptionalInt {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        isEmpty(): boolean;
        isPresent(): boolean;
        orElse(arg0: number): number;
        notify(): void;
        orElseThrow<X>(arg0: () => X): number;
        orElseThrow(): number;
        static empty(): Internal.OptionalInt;
        orElseGet(arg0: Internal.IntSupplier): number;
        stream(): Internal.IntStream;
        hashCode(): number;
        ifPresentOrElse(arg0: Internal.IntConsumer, arg1: Internal.Runnable): void;
        ifPresent(arg0: Internal.IntConsumer): void;
        static of(arg0: number): Internal.OptionalInt;
        equals(arg0: object): boolean;
        toString(): string;
        get asInt(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class CokeOvenRecipeJS extends Internal.IERecipeJS {
        ingredientAction(filter: Internal.IngredientActionFilter, action: Internal.IngredientAction): Internal.RecipeJS;
        convertReplacedInput(index: number, oldIngredient: Internal.IngredientJS, newIngredient: Internal.IngredientJS): Internal.IngredientJS;
        parseIngredientItemIE(json: Internal.JsonElement): Internal.IngredientStackJS;
        replaceOutput(i: Internal.IngredientJS, with_: Internal.ItemStackJS, exact: boolean): boolean;
        merge(data: object): Internal.RecipeJS;
        create(args: Internal.ListJS): void;
        id(_id: ResourceLocation): Internal.RecipeJS;
        parseIngredientItem(o: object, key: string): Internal.IngredientJS;
        parseIngredientItem(o: object): Internal.IngredientJS;
        group(g: string): Internal.RecipeJS;
        energy(e: number): Internal.IERecipeJS;
        getInputIndex(ingredient: Internal.IngredientJS, exact: boolean): number;
        setGroup(g: string): void;
        serialize(): void;
        replaceInput(i: Internal.IngredientJS, with_: Internal.IngredientJS, exact: boolean): boolean;
        getType(): string;
        getGroup(): string;
        hasOutput(ingredient: Internal.IngredientJS, exact: boolean): boolean;
        keepIngredient(filter: Internal.IngredientActionFilter): Internal.RecipeJS;
        customIngredientAction(filter: Internal.IngredientActionFilter, id: string): Internal.RecipeJS;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        convertReplacedOutput(index: number, oldStack: Internal.ItemStackJS, newStack: Internal.ItemStackJS): Internal.ItemStackJS;
        save(): void;
        damageIngredient(filter: Internal.IngredientActionFilter, damage: number): Internal.RecipeJS;
        damageIngredient(filter: Internal.IngredientActionFilter): Internal.RecipeJS;
        getId(): string;
        dontAdd(): void;
        notify(): void;
        serializeJson(): void;
        hashCode(): number;
        deserializeJson(): void;
        deserialize(): void;
        serializeNBTAsJson(): boolean;
        creosote(c: number): Internal.CokeOvenRecipeJS;
        getOutputIndex(ingredient: Internal.IngredientJS, exact: boolean): number;
        resultFromRecipeJson(json: Internal.JsonObject): Internal.ItemStackJS;
        stage(s: string): Internal.RecipeJS;
        serializeIngredientStack(in_: Internal.IngredientStackJS): Internal.JsonElement;
        equals(arg0: object): boolean;
        serializeItemStack(stack: Internal.ItemStackJS): Internal.JsonElement;
        toString(): string;
        time(t: number): Internal.IERecipeJS;
        hasInput(ingredient: Internal.IngredientJS, exact: boolean): boolean;
        parseResultItem(o: object): Internal.ItemStackJS;
        replaceIngredient(filter: Internal.IngredientActionFilter, item: Internal.ItemStackJS): Internal.RecipeJS;
        static currentRecipe : Internal.RecipeJS;
        readonly inputItems : Internal.List<Internal.IngredientJS>;
        static itemErrors : false;
        type : Internal.RecipeTypeJS;
        originalJson : Internal.JsonObject;
        serializeOutputs : boolean;
        readonly outputFluids : Internal.List<Internal.FluidStack>;
        originalRecipe : Internal.Recipe<object>;
        readonly inputFluids : Internal.List<Internal.FluidTagInput>;
        json : Internal.JsonObject;
        readonly outputItems : Internal.List<Internal.ItemStackJS>;
        serializeInputs : boolean;
        get uniqueId(): string;
        get path(): string;
        get originalRecipeResult(): Internal.ItemStackJS;
        get mod(): string;
        get fromToString(): string;
        get orCreateId(): ResourceLocation;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface LightProvider {
        getLight(arg0: Internal.LightLayer, arg1: number, arg2: number, arg3: number): number;
        getPackedLight(arg0: number, arg1: number, arg2: number): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class VertexFormatElement {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        get elementCount(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class FieldAttributes {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hasModifier(arg0: number): boolean;
        getAnnotation<T>(arg0: Internal.Class<T>): T;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        get declaringClass(): Internal.Class<object>;
        get name(): string;
        get declaredType(): Internal.Type;
        get declaredClass(): Internal.Class<object>;
        get annotations(): Internal.Collection<Internal.Annotation>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ItemTooltipEventJS extends Internal.EventJS {
        cancel(): void;
        add(item: object, text: object): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isCancelled(): boolean;
        isAlt(): boolean;
        notifyAll(): void;
        addAdvancedToAll(handler: Internal.ItemTooltipEventJS$StaticTooltipHandlerFromJS): void;
        notify(): void;
        post(t: Internal.ScriptType, id: string, sub: string): boolean;
        post(t: Internal.ScriptType, id: string): boolean;
        isCtrl(): boolean;
        hashCode(): number;
        addAdvanced(item: object, handler: Internal.ItemTooltipEventJS$StaticTooltipHandlerFromJS): void;
        isShift(): boolean;
        equals(arg0: object): boolean;
        toString(): string;
        addToAll(text: object): void;
        canCancel(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class FontManager implements Internal.AutoCloseable, Internal.FontResourceManagerAccess {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        close(): void;
        notify(): void;
        get fontSets(): Map<any, any>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ObjectArrayList <K> extends Internal.AbstractObjectList<K> implements Internal.RandomAccess, Internal.Cloneable, Internal.Serializable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        static toList<K>(): Internal.Collector<K, object, Internal.ObjectArrayList<K>>;
        compareTo(arg0: Internal.List<K>): number;
        compareTo(arg0: object): number;
        compareTo(arg0: Internal.ObjectArrayList<K>): number;
        notify(): void;
        remove(arg0: object): boolean;
        remove(arg0: number): K;
        pop(): K;
        iterator(): Internal.Iterator<any>;
        iterator(): Internal.ObjectIterator<any>;
        removeAll(arg0: Internal.Collection<object>): boolean;
        top(): K;
        trim(arg0: number): void;
        trim(): void;
        hashCode(): number;
        addElements(arg0: number, arg1: K[], arg2: number, arg3: number): void;
        addElements(arg0: number, arg1: K[]): void;
        static of<K>(arg0: K[]): Internal.ObjectArrayList<K>;
        static of<K>(): Internal.ObjectArrayList<K>;
        get(arg0: number): K;
        toArray<K>(arg0: K[]): K[];
        toArray(): object[];
        static toListWithExpectedSize<K>(arg0: number): Internal.Collector<K, object, Internal.ObjectArrayList<K>>;
        indexOf(arg0: object): number;
        add(arg0: number, arg1: K): void;
        add(arg0: K): boolean;
        subList(arg0: number, arg1: number): Internal.List<any>;
        subList(arg0: number, arg1: number): Internal.ObjectList<K>;
        set(arg0: number, arg1: K): K;
        spliterator(): Internal.ObjectSpliterator<K>;
        spliterator(): Internal.Spliterator<any>;
        forEach(arg0: (arg0: K) => void): void;
        isEmpty(): boolean;
        clear(): void;
        setElements(arg0: number, arg1: K[], arg2: number, arg3: number): void;
        setElements(arg0: K[]): void;
        setElements(arg0: number, arg1: K[]): void;
        sort(arg0: Internal.Comparator<K>): void;
        removeElements(arg0: number, arg1: number): void;
        push(arg0: K): void;
        peek(arg0: number): K;
        lastIndexOf(arg0: object): number;
        contains(arg0: object): boolean;
        size(arg0: number): void;
        size(): number;
        addAll(arg0: number, arg1: Internal.ObjectList<K>): boolean;
        addAll(arg0: number, arg1: Internal.Collection<K>): boolean;
        getElements(arg0: number, arg1: object[], arg2: number, arg3: number): void;
        elements(): K[];
        equals(arg0: Internal.ObjectArrayList<K>): boolean;
        equals(arg0: object): boolean;
        clone(): object;
        clone(): Internal.ObjectArrayList<K>;
        listIterator(arg0: number): Internal.ListIterator<any>;
        listIterator(arg0: number): Internal.ObjectListIterator<K>;
        listIterator(): Internal.ListIterator<any>;
        toString(): string;
        ensureCapacity(arg0: number): void;
        static wrap<K>(arg0: K[]): Internal.ObjectArrayList<K>;
        static wrap<K>(arg0: K[], arg1: number): Internal.ObjectArrayList<K>;
        unstableSort(arg0: Internal.Comparator<K>): void;
        static readonly DEFAULT_INITIAL_CAPACITY : 10;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface PausedPartialTickAccessor {
        flywheel$getPartialTicksPaused(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Products$P2 <F, T1, T2> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        apply<R>(arg0: Internal.Applicative<F, object>, arg1: (arg0: T1, arg1: T2) => R): Internal.App<F, R>;
        apply<R>(arg0: Internal.Applicative<F, object>, arg1: Internal.App<F, (arg0: T1, arg1: T2) => R>): Internal.App<F, R>;
        hashCode(): number;
        and<T3, T4, T5, T6, T7>(arg0: Internal.Products$P5<F, T3, T4, T5, T6, T7>): Internal.Products$P7<F, T1, T2, T3, T4, T5, T6, T7>;
        and<T3, T4, T5, T6, T7, T8>(arg0: Internal.Products$P6<F, T3, T4, T5, T6, T7, T8>): Internal.Products$P8<F, T1, T2, T3, T4, T5, T6, T7, T8>;
        and<T3>(arg0: Internal.App<F, T3>): Internal.Products$P3<F, T1, T2, T3>;
        and<T3, T4>(arg0: Internal.Products$P2<F, T3, T4>): Internal.Products$P4<F, T1, T2, T3, T4>;
        and<T3, T4, T5>(arg0: Internal.Products$P3<F, T3, T4, T5>): Internal.Products$P5<F, T1, T2, T3, T4, T5>;
        and<T3, T4, T5, T6>(arg0: Internal.Products$P4<F, T3, T4, T5, T6>): Internal.Products$P6<F, T1, T2, T3, T4, T5, T6>;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        t1(): Internal.App<F, T1>;
        notify(): void;
        t2(): Internal.App<F, T2>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Context$ClassShutterSetter {
        set classShutter(arg0: Internal.ClassShutter);
        get classShutter(): Internal.ClassShutter;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Excluder implements Internal.TypeAdapterFactory, Internal.Cloneable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        disableInnerClassSerialization(): Internal.Excluder;
        withModifiers(arg0: number[]): Internal.Excluder;
        withVersion(arg0: number): Internal.Excluder;
        excludeField(arg0: Internal.Field, arg1: boolean): boolean;
        notify(): void;
        hashCode(): number;
        withExclusionStrategy(arg0: Internal.ExclusionStrategy, arg1: boolean, arg2: boolean): Internal.Excluder;
        equals(arg0: object): boolean;
        create<T>(arg0: Internal.Gson, arg1: Internal.TypeToken<T>): Internal.TypeAdapter<T>;
        toString(): string;
        excludeClass(arg0: Internal.Class<object>, arg1: boolean): boolean;
        excludeFieldsWithoutExposeAnnotation(): Internal.Excluder;
        static readonly DEFAULT : Internal.Excluder;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface DoubleFunction <R> {
        apply(arg0: number): R;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ParticleProvider <T> {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class NetworkInterface {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        supportsMulticast(): boolean;
        getSubInterfaces(): Internal.Enumeration<Internal.NetworkInterface>;
        notifyAll(): void;
        inetAddresses(): Internal.Stream<Internal.InetAddress>;
        notify(): void;
        isPointToPoint(): boolean;
        isUp(): boolean;
        hashCode(): number;
        static getByName(arg0: string): Internal.NetworkInterface;
        isLoopback(): boolean;
        subInterfaces(): Internal.Stream<Internal.NetworkInterface>;
        static getByIndex(arg0: number): Internal.NetworkInterface;
        static getByInetAddress(arg0: Internal.InetAddress): Internal.NetworkInterface;
        static networkInterfaces(): Internal.Stream<Internal.NetworkInterface>;
        equals(arg0: object): boolean;
        toString(): string;
        isVirtual(): boolean;
        static getNetworkInterfaces(): Internal.Enumeration<Internal.NetworkInterface>;
        getInetAddresses(): Internal.Enumeration<Internal.InetAddress>;
        get interfaceAddresses(): Internal.List<Internal.InterfaceAddress>;
        get name(): string;
        get index(): number;
        get parent(): Internal.NetworkInterface;
        get mTU(): number;
        get displayName(): string;
        get hardwareAddress(): number[];
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class JsonObject extends Internal.JsonElement {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        isJsonArray(): boolean;
        notify(): void;
        remove(arg0: string): Internal.JsonElement;
        isJsonPrimitive(): boolean;
        isJsonObject(): boolean;
        hashCode(): number;
        get(arg0: string): Internal.JsonElement;
        has(arg0: string): boolean;
        keySet(): Internal.Set<string>;
        add(arg0: string, arg1: Internal.JsonElement): void;
        getAsJsonObject(arg0: string): Internal.JsonObject;
        entrySet(): Internal.Set<Internal.Map$Entry<string, Internal.JsonElement>>;
        isJsonNull(): boolean;
        addProperty(arg0: string, arg1: string): void;
        addProperty(arg0: string, arg1: boolean): void;
        addProperty(arg0: string, arg1: string): void;
        addProperty(arg0: string, arg1: Internal.Number): void;
        deepCopy(): Internal.JsonElement;
        deepCopy(): Internal.JsonObject;
        getAsJsonArray(arg0: string): Internal.JsonArray;
        size(): number;
        getAsJsonPrimitive(arg0: string): Internal.JsonPrimitive;
        equals(arg0: object): boolean;
        toString(): string;
        get asFloat(): number;
        get asByte(): number;
        get asBigDecimal(): Internal.BigDecimal;
        get asNumber(): Internal.Number;
        get asCharacter(): string;
        get asString(): string;
        get asInt(): number;
        get asLong(): number;
        get asBigInteger(): Internal.BigInteger;
        get asJsonObject(): Internal.JsonObject;
        get asJsonNull(): Internal.JsonNull;
        get asDouble(): number;
        get asJsonArray(): Internal.JsonArray;
        get asBoolean(): boolean;
        get asJsonPrimitive(): Internal.JsonPrimitive;
        get asShort(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ArcFurnaceRecipeJS extends Internal.IERecipeJS {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        ingredientAction(filter: Internal.IngredientActionFilter, action: Internal.IngredientAction): Internal.RecipeJS;
        notifyAll(): void;
        convertReplacedOutput(index: number, oldStack: Internal.ItemStackJS, newStack: Internal.ItemStackJS): Internal.ItemStackJS;
        convertReplacedInput(index: number, oldIngredient: Internal.IngredientJS, newIngredient: Internal.IngredientJS): Internal.IngredientJS;
        save(): void;
        damageIngredient(filter: Internal.IngredientActionFilter, damage: number): Internal.RecipeJS;
        damageIngredient(filter: Internal.IngredientActionFilter): Internal.RecipeJS;
        getId(): string;
        dontAdd(): void;
        notify(): void;
        serializeJson(): void;
        parseIngredientItemIE(json: Internal.JsonElement): Internal.IngredientStackJS;
        replaceOutput(i: Internal.IngredientJS, with_: Internal.ItemStackJS, exact: boolean): boolean;
        hashCode(): number;
        merge(data: object): Internal.RecipeJS;
        create(args: Internal.ListJS): void;
        deserializeJson(): void;
        id(_id: ResourceLocation): Internal.RecipeJS;
        parseIngredientItem(o: object, key: string): Internal.IngredientJS;
        parseIngredientItem(o: object): Internal.IngredientJS;
        group(g: string): Internal.RecipeJS;
        energy(e: number): Internal.IERecipeJS;
        deserialize(): void;
        serializeNBTAsJson(): boolean;
        getOutputIndex(ingredient: Internal.IngredientJS, exact: boolean): number;
        getInputIndex(ingredient: Internal.IngredientJS, exact: boolean): number;
        setGroup(g: string): void;
        serialize(): void;
        resultFromRecipeJson(json: Internal.JsonObject): Internal.ItemStackJS;
        stage(s: string): Internal.RecipeJS;
        serializeIngredientStack(in_: Internal.IngredientStackJS): Internal.JsonElement;
        replaceInput(i: Internal.IngredientJS, with_: Internal.IngredientJS, exact: boolean): boolean;
        getType(): string;
        equals(arg0: object): boolean;
        getGroup(): string;
        serializeItemStack(stack: Internal.ItemStackJS): Internal.JsonElement;
        hasOutput(ingredient: Internal.IngredientJS, exact: boolean): boolean;
        toString(): string;
        keepIngredient(filter: Internal.IngredientActionFilter): Internal.RecipeJS;
        time(t: number): Internal.IERecipeJS;
        hasInput(ingredient: Internal.IngredientJS, exact: boolean): boolean;
        customIngredientAction(filter: Internal.IngredientActionFilter, id: string): Internal.RecipeJS;
        parseResultItem(o: object): Internal.ItemStackJS;
        replaceIngredient(filter: Internal.IngredientActionFilter, item: Internal.ItemStackJS): Internal.RecipeJS;
        static currentRecipe : Internal.RecipeJS;
        readonly inputItems : Internal.List<Internal.IngredientJS>;
        static itemErrors : false;
        type : Internal.RecipeTypeJS;
        originalJson : Internal.JsonObject;
        serializeOutputs : boolean;
        readonly outputFluids : Internal.List<Internal.FluidStack>;
        originalRecipe : Internal.Recipe<object>;
        readonly inputFluids : Internal.List<Internal.FluidTagInput>;
        json : Internal.JsonObject;
        readonly outputItems : Internal.List<Internal.ItemStackJS>;
        serializeInputs : boolean;
        get mod(): string;
        get uniqueId(): string;
        get fromToString(): string;
        get path(): string;
        get orCreateId(): ResourceLocation;
        get originalRecipeResult(): Internal.ItemStackJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Endimation {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static builder(): Internal.Endimation$Builder;
        toString(): string;
        notify(): void;
        static readonly BLANK : Internal.Endimation;
        static readonly CODEC : Internal.Codec<Internal.Endimation>;
        get effects(): Internal.ConfiguredEndimationEffect<object, object>[];
        get partKeyframes(): (arg0: string) => Internal.Endimation$PartKeyframes;
        get blendWeight(): number;
        get length(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ItemKJS {
        set foodPropertiesKJS(arg0: Internal.FoodProperties);
        set fireResistantKJS(arg0: boolean);
        set craftingRemainderKJS(arg0: Internal.Item);
        set maxDamageKJS(arg0: number);
        set itemBuilderKJS(arg0: Internal.ItemBuilder);
        set burnTimeKJS(arg0: number);
        set rarityKJS(arg0: Internal.Rarity);
        get itemBuilderKJS(): Internal.ItemBuilder;
        set maxStackSizeKJS(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface FontResourceManagerAccess {
        get fontSets(): Map<ResourceLocation, Internal.FontSet>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface BlockStateKJS {
        set destroySpeedKJS(arg0: number);
        set lightEmissionKJS(arg0: number);
        set requiresToolKJS(arg0: boolean);
        set materialKJS(arg0: net.minecraft.world.level.material.Material);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Int2IntMap$FastEntrySet implements Internal.ObjectSet<Internal.Int2IntMap$Entry> {
        add(arg0: E): boolean;
        fastForEach(arg0: (arg0: Internal.Int2IntMap$Entry) => void): void;
        contains(arg0: object): boolean;
        iterator(): Internal.Iterator<any>;
        size(): number;
        spliterator(): Internal.Spliterator<any>;
        hashCode(): number;
        equals(arg0: object): boolean;
        toArray<T>(arg0: T[]): T[];
        toArray(): object[];
        isEmpty(): boolean;
        clear(): void;
        fastIterator(): Internal.ObjectIterator<Internal.Int2IntMap$Entry>;
        remove(arg0: object): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class ImmutableCollection <E> extends Internal.AbstractCollection<E> implements Internal.Serializable {
        add(arg0: E): boolean;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        spliterator(): Internal.Spliterator<E>;
        notifyAll(): void;
        isEmpty(): boolean;
        clear(): void;
        notify(): void;
        asList(): Internal.ImmutableList<E>;
        remove(arg0: object): boolean;
        removeIf(arg0: (arg0: E) => boolean): boolean;
        removeAll(arg0: Internal.Collection<object>): boolean;
        contains(arg0: object): boolean;
        iterator(): Internal.UnmodifiableIterator<E>;
        iterator(): Internal.Iterator<any>;
        size(): number;
        addAll(arg0: Internal.Collection<E>): boolean;
        hashCode(): number;
        equals(arg0: object): boolean;
        toArray(): object[];
        toArray<T>(arg0: T[]): T[];
        toString(): string;
        retainAll(arg0: Internal.Collection<object>): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IVertexConsumer {
        put(arg0: number, arg1: number[]): void;
        set quadOrientation(arg0: Internal.Direction);
        set texture(arg0: Internal.TextureAtlasSprite);
        set applyDiffuseLighting(arg0: boolean);
        set quadTint(arg0: number);
        get vertexFormat(): Internal.VertexFormat;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class PrintWriter extends Internal.Writer {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        format(arg0: string, arg1: object[]): Internal.PrintWriter;
        format(arg0: Internal.Locale, arg1: string, arg2: object[]): Internal.PrintWriter;
        checkError(): boolean;
        notify(): void;
        printf(arg0: string, arg1: object[]): Internal.PrintWriter;
        printf(arg0: Internal.Locale, arg1: string, arg2: object[]): Internal.PrintWriter;
        print(arg0: number): void;
        print(arg0: number): void;
        print(arg0: number): void;
        print(arg0: string): void;
        print(arg0: boolean): void;
        print(arg0: object): void;
        print(arg0: string): void;
        print(arg0: string[]): void;
        print(arg0: number): void;
        println(arg0: string[]): void;
        println(): void;
        println(arg0: boolean): void;
        println(arg0: string): void;
        println(arg0: object): void;
        println(arg0: number): void;
        println(arg0: number): void;
        println(arg0: number): void;
        println(arg0: number): void;
        println(arg0: string): void;
        flush(): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        static nullWriter(): Internal.Writer;
        toString(): string;
        close(): void;
        write(arg0: string[], arg1: number, arg2: number): void;
        write(arg0: string): void;
        write(arg0: string, arg1: number, arg2: number): void;
        write(arg0: string[]): void;
        write(arg0: number): void;
        append(arg0: Internal.CharSequence, arg1: number, arg2: number): Internal.PrintWriter;
        append(arg0: Internal.CharSequence, arg1: number, arg2: number): Internal.Appendable;
        append(arg0: Internal.CharSequence, arg1: number, arg2: number): Internal.Writer;
        append(arg0: string): Internal.PrintWriter;
        append(arg0: string): Internal.Appendable;
        append(arg0: string): Internal.Writer;
        append(arg0: Internal.CharSequence): Internal.PrintWriter;
        append(arg0: Internal.CharSequence): Internal.Appendable;
        append(arg0: Internal.CharSequence): Internal.Writer;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ChatFormatting extends Internal.Enum<Internal.ChatFormatting> implements Internal.Color {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        static valueOf(arg0: string): Internal.ChatFormatting;
        notifyAll(): void;
        static values(): Internal.ChatFormatting[];
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        name(): string;
        createTextColorKJS(): Internal.TextColor;
        toString(): string;
        specialEquals(o: object, shallow: boolean): boolean;
        ordinal(): number;
        static readonly ITALIC : Internal.ChatFormatting;
        static readonly GOLD : Internal.ChatFormatting;
        static readonly GRAY : Internal.ChatFormatting;
        static readonly AQUA : Internal.ChatFormatting;
        static readonly WHITE : Internal.ChatFormatting;
        static readonly BLUE : Internal.ChatFormatting;
        static readonly OBFUSCATED : Internal.ChatFormatting;
        static readonly DARK_AQUA : Internal.ChatFormatting;
        static readonly RESET : Internal.ChatFormatting;
        static readonly DARK_BLUE : Internal.ChatFormatting;
        static readonly GREEN : Internal.ChatFormatting;
        static readonly UNDERLINE : Internal.ChatFormatting;
        static readonly RED : Internal.ChatFormatting;
        static readonly DARK_PURPLE : Internal.ChatFormatting;
        static readonly STRIKETHROUGH : Internal.ChatFormatting;
        static readonly DARK_RED : Internal.ChatFormatting;
        static readonly LIGHT_PURPLE : Internal.ChatFormatting;
        static readonly BLACK : Internal.ChatFormatting;
        static readonly BOLD : Internal.ChatFormatting;
        static readonly DARK_GREEN : Internal.ChatFormatting;
        static readonly YELLOW : Internal.ChatFormatting;
        static readonly DARK_GRAY : Internal.ChatFormatting;
        get rgbKJS(): number;
        get serializeKJS(): string;
        get hexKJS(): string;
        get argbKJS(): number;
        get fireworkColorKJS(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Scoreboard {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class LootModificationEventJS extends Internal.EventJS {
        cancel(): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isCancelled(): boolean;
        addBlockLootModifier(arg0: BlockStatePredicate): Internal.LootActionsBuilderJS;
        notifyAll(): void;
        removeGlobalModifier(arg0: string[]): void;
        splitLocationsOrPattern(arg0: string[], arg1: Internal.List<Internal.Pattern>, arg2: Internal.List<ResourceLocation>): void;
        notify(): void;
        disableLootModification(arg0: string[]): void;
        addLootTableModifier(arg0: string[]): Internal.LootActionsBuilderJS;
        post(t: Internal.ScriptType, id: string, sub: string): boolean;
        post(t: Internal.ScriptType, id: string): boolean;
        addLootTypeModifier(arg0: LootType[]): Internal.LootActionsBuilderJS;
        hashCode(): number;
        equals(arg0: object): boolean;
        addEntityLootModifier(arg0: Internal.EntityType<object>[]): Internal.LootActionsBuilderJS;
        toString(): string;
        enableLogging(): void;
        canCancel(): boolean;
        get globalModifiers(): Internal.List<string>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Byte2DoubleFunction implements it.unimi.dsi.fastutil.Function<number, number>, Internal.IntToDoubleFunction {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        applyAsDouble(arg0: number): number;
        andThenShort(arg0: Internal.Double2ShortFunction): Internal.Byte2ShortFunction;
        composeByte(arg0: Internal.Byte2ByteFunction): Internal.Byte2DoubleFunction;
        andThenInt(arg0: Internal.Double2IntFunction): Internal.Byte2IntFunction;
        composeReference<T>(arg0: Internal.Reference2ByteFunction<T>): Internal.Reference2DoubleFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: number) => T;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: number): number;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: object): object;
        remove(arg0: object): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Double2DoubleFunction): Internal.Byte2DoubleFunction;
        andThenObject<T>(arg0: Internal.Double2ObjectFunction<T>): Internal.Byte2ObjectFunction<T>;
        get(arg0: object): number;
        get(arg0: object): object;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Double2LongFunction): Internal.Byte2LongFunction;
        composeLong(arg0: Internal.Long2ByteFunction): Internal.Long2DoubleFunction;
        andThenByte(arg0: Internal.Double2ByteFunction): Internal.Byte2ByteFunction;
        andThenFloat(arg0: Internal.Double2FloatFunction): Internal.Byte2FloatFunction;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2ByteFunction): Internal.Int2DoubleFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2ByteFunction): Internal.Float2DoubleFunction;
        andThenChar(arg0: Internal.Double2CharFunction): Internal.Byte2CharFunction;
        composeObject<T>(arg0: Internal.Object2ByteFunction<T>): Internal.Object2DoubleFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => number;
        composeShort(arg0: Internal.Short2ByteFunction): Internal.Short2DoubleFunction;
        andThenReference<T>(arg0: Internal.Double2ReferenceFunction<T>): Internal.Byte2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2ByteFunction): Internal.Char2DoubleFunction;
        composeDouble(arg0: Internal.Double2ByteFunction): Internal.Double2DoubleFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ChannelHandler {
        exceptionCaught(arg0: Internal.ChannelHandlerContext, arg1: Internal.Throwable): void;
        handlerAdded(arg0: Internal.ChannelHandlerContext): void;
        handlerRemoved(arg0: Internal.ChannelHandlerContext): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class VecBuffer {
        putVec2(arg0: number, arg1: number): Internal.VecBuffer;
        putVec2(arg0: number, arg1: number): Internal.VecBuffer;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        putVec3(arg0: number, arg1: number, arg2: number): Internal.VecBuffer;
        putVec3(arg0: number, arg1: number, arg2: number): Internal.VecBuffer;
        putVec4(arg0: number, arg1: number, arg2: number, arg3: number): Internal.VecBuffer;
        putInt(arg0: number): Internal.VecBuffer;
        notifyAll(): void;
        putColor(arg0: number, arg1: number, arg2: number, arg3: number): Internal.VecBuffer;
        putColor(arg0: number, arg1: number, arg2: number, arg3: number): Internal.VecBuffer;
        notify(): void;
        put(arg0: number): Internal.VecBuffer;
        put(arg0: Internal.FloatBuffer): Internal.VecBuffer;
        put(arg0: Internal.ByteBuffer): Internal.VecBuffer;
        putByteArray(arg0: number[]): Internal.VecBuffer;
        unwrap(): Internal.ByteBuffer;
        putFloat(arg0: number): Internal.VecBuffer;
        static allocate(arg0: number): Internal.VecBuffer;
        rewind(): Internal.VecBuffer;
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        position(arg0: number): Internal.VecBuffer;
        position(): number;
        putShort(arg0: number): Internal.VecBuffer;
        putFloatArray(arg0: number[]): Internal.VecBuffer;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class LunarTextComponents {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        static readonly CODEC : Internal.Codec<Internal.LunarTextComponents>;
        static readonly LEGACY_CODEC : Internal.Codec<Internal.LunarTextComponents>;
        get setNotification(): Internal.LunarTextComponents$Notification;
        get name(): Internal.CustomTranslationTextComponent;
        get riseNotification(): Internal.LunarTextComponents$Notification;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class MaterialJS {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        get minecraftMaterial(): net.minecraft.world.level.material.Material;
        get id(): string;
        get sound(): Internal.SoundType;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class RenderLayer extends Internal.Enum<Internal.RenderLayer> {
        static getPrimaryLayer(arg0: Internal.RenderType): Internal.RenderLayer;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static getLayer(arg0: Internal.RenderType): Internal.RenderLayer;
        static valueOf(arg0: string): Internal.RenderLayer;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.RenderLayer[];
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly CUTOUT : Internal.RenderLayer;
        static readonly SOLID : Internal.RenderLayer;
        static readonly TRANSPARENT : Internal.RenderLayer;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ChannelConfig {
        getOption<T>(arg0: Internal.ChannelOption<T>): T;
        isAutoClose(): boolean;
        isAutoRead(): boolean;
        setOption<T>(arg0: Internal.ChannelOption<T>, arg1: T): boolean;
        set writeBufferLowWaterMark(arg0: number);
        set messageSizeEstimator(arg0: Internal.MessageSizeEstimator);
        get writeBufferLowWaterMark(): number;
        get messageSizeEstimator(): Internal.MessageSizeEstimator;
        set recvByteBufAllocator(arg0: Internal.RecvByteBufAllocator);
        get recvByteBufAllocator(): T;
        set allocator(arg0: Internal.ByteBufAllocator);
        get allocator(): Internal.ByteBufAllocator;
        set options(arg0: Map<Internal.ChannelOption<object>, object>);
        set connectTimeoutMillis(arg0: number);
        set writeBufferWaterMark(arg0: Internal.WriteBufferWaterMark);
        set writeSpinCount(arg0: number);
        get connectTimeoutMillis(): number;
        set writeBufferHighWaterMark(arg0: number);
        get maxMessagesPerRead(): number;
        get writeBufferHighWaterMark(): number;
        set autoRead(arg0: boolean);
        get writeSpinCount(): number;
        set maxMessagesPerRead(arg0: number);
        get options(): Map<Internal.ChannelOption<object>, object>;
        get writeBufferWaterMark(): Internal.WriteBufferWaterMark;
        set autoClose(arg0: boolean);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface MethodHandleInfo {
        isVarArgs(): boolean;
        reflectAs<T>(arg0: Internal.Class<T>, arg1: Internal.MethodHandles$Lookup): T;
        get referenceKind(): number;
        get declaringClass(): Internal.Class<object>;
        get name(): string;
        get methodType(): Internal.MethodType;
        get modifiers(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ShapedRecipeJS extends Internal.RecipeJS {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        ingredientAction(filter: Internal.IngredientActionFilter, action: Internal.IngredientAction): Internal.RecipeJS;
        notifyAll(): void;
        convertReplacedInput(index: number, oldIngredient: Internal.IngredientJS, newIngredient: Internal.IngredientJS): Internal.IngredientJS;
        convertReplacedOutput(index: number, oldStack: Internal.ItemStackJS, newStack: Internal.ItemStackJS): Internal.ItemStackJS;
        save(): void;
        damageIngredient(filter: Internal.IngredientActionFilter, damage: number): Internal.RecipeJS;
        damageIngredient(filter: Internal.IngredientActionFilter): Internal.RecipeJS;
        getId(): string;
        dontAdd(): void;
        noShrink(): Internal.ShapedRecipeJS;
        notify(): void;
        serializeJson(): void;
        replaceOutput(i: Internal.IngredientJS, with_: Internal.ItemStackJS, exact: boolean): boolean;
        hashCode(): number;
        merge(data: object): Internal.RecipeJS;
        noMirror(): Internal.ShapedRecipeJS;
        create(args: Internal.ListJS): void;
        deserializeJson(): void;
        id(_id: ResourceLocation): Internal.RecipeJS;
        parseIngredientItem(o: object, key: string): Internal.IngredientJS;
        parseIngredientItem(o: object): Internal.IngredientJS;
        group(g: string): Internal.RecipeJS;
        deserialize(): void;
        serializeNBTAsJson(): boolean;
        getOutputIndex(ingredient: Internal.IngredientJS, exact: boolean): number;
        getInputIndex(ingredient: Internal.IngredientJS, exact: boolean): number;
        setGroup(g: string): void;
        serialize(): void;
        resultFromRecipeJson(json: Internal.JsonObject): Internal.ItemStackJS;
        serializeIngredientStack(in_: Internal.IngredientStackJS): Internal.JsonElement;
        stage(s: string): Internal.RecipeJS;
        replaceInput(i: Internal.IngredientJS, with_: Internal.IngredientJS, exact: boolean): boolean;
        getType(): string;
        equals(arg0: object): boolean;
        getGroup(): string;
        serializeItemStack(stack: Internal.ItemStackJS): Internal.JsonElement;
        hasOutput(ingredient: Internal.IngredientJS, exact: boolean): boolean;
        toString(): string;
        keepIngredient(filter: Internal.IngredientActionFilter): Internal.RecipeJS;
        parseResultItem(o: object): Internal.ItemStackJS;
        hasInput(ingredient: Internal.IngredientJS, exact: boolean): boolean;
        customIngredientAction(filter: Internal.IngredientActionFilter, id: string): Internal.RecipeJS;
        replaceIngredient(filter: Internal.IngredientActionFilter, item: Internal.ItemStackJS): Internal.RecipeJS;
        static currentRecipe : Internal.RecipeJS;
        originalJson : Internal.JsonObject;
        serializeOutputs : boolean;
        originalRecipe : Internal.Recipe<object>;
        readonly inputItems : Internal.List<Internal.IngredientJS>;
        static itemErrors : false;
        json : Internal.JsonObject;
        readonly outputItems : Internal.List<Internal.ItemStackJS>;
        type : Internal.RecipeTypeJS;
        serializeInputs : boolean;
        get mod(): string;
        get uniqueId(): string;
        get fromToString(): string;
        get path(): string;
        get orCreateId(): ResourceLocation;
        get originalRecipeResult(): Internal.ItemStackJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ServerPlayer extends Internal.Player {
        backpackedMoved(): boolean;
        handler$zno000$changeDimensionTail(arg0: Internal.ServerLevel, arg1: Internal.ITeleporter, arg2: Internal.CallbackInfoReturnable<any>): void;
        handler$zbc000$onFallFlying(arg0: number, arg1: number, arg2: number, arg3: Internal.CallbackInfo): void;
        onEndimationEnd(arg0: Internal.PlayableEndimation, arg1: Internal.PlayableEndimation): void;
        canBeRiddenInWater(arg0: Internal.Entity): boolean;
        handler$zzo000$tickHead(arg0: Internal.CallbackInfo): void;
        isEndimationPlaying(arg0: Internal.PlayableEndimation): boolean;
        isActive(): boolean;
        handler$zgm001$tick(arg0: Internal.CallbackInfo): void;
        create$callSpawnItemParticles(arg0: Internal.ItemStack, arg1: number): void;
        handler$zjn000$onUpdateFluidOnEyes(arg0: Internal.CallbackInfo): void;
        changeDimension(arg0: Internal.ServerLevel, arg1: Internal.ITeleporter): Internal.Entity;
        serializeNBT(): Internal.Tag;
        serializeNBT(): Internal.CompoundTag;
        invalidateCaps(): void;
        foodEatenKJS(is: Internal.ItemStack): void;
        revive(): void;
        getDigSpeed(arg0: Internal.BlockState, arg1: BlockPos): number;
        canUpdate(): boolean;
        canUpdate(arg0: boolean): void;
        handler$bgc000$tryShortcutFluidPushing(tag: net.minecraft.tags.Tag<any>, speed: number, cir: Internal.CallbackInfoReturnable<any>, box: Internal.AABB, x1: number, x2: number, y1: number, y2: number, z1: number, z2: number, zero: number): void;
        resetEndimation(): void;
        areCapsCompatible(arg0: Internal.CapabilityDispatcher): boolean;
        getEyeHeightAccess(arg0: Internal.Pose, arg1: Internal.EntityDimensions): number;
        reviveCaps(): void;
        lithiumOnBlockCacheDeleted(): void;
        handler$zgd000$diet$constructPlayer(arg0: Internal.CallbackInfo): void;
        handler$zno000$changeDimensionHead(arg0: Internal.ServerLevel, arg1: Internal.ITeleporter, arg2: Internal.CallbackInfoReturnable<any>): void;
        canRiderInteract(): boolean;
        handler$zbc000$locateAmmo(arg0: Internal.ItemStack, arg1: Internal.CallbackInfoReturnable<any>, arg2: Internal.Predicate<any>): void;
        getEntries(arg0: boolean): Internal.Set<any>;
        onAddedToWorld(): void;
        handler$zcp000$read(arg0: Internal.CompoundTag, arg1: Internal.CallbackInfo): void;
        canTrample(arg0: Internal.BlockState, arg1: BlockPos, arg2: number): boolean;
        getClassification(arg0: boolean): Internal.MobCategory;
        onEndimationStart(arg0: Internal.PlayableEndimation, arg1: Internal.PlayableEndimation): void;
        isNoEndimationPlaying(): boolean;
        lithiumSetClimbingMobCachingSectionUpdateBehavior(listenForCachedBlockChanges: boolean): void;
        shouldRiderSit(): boolean;
        getPickedResult(arg0: Internal.HitResult): Internal.ItemStack;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        handler$zeg000$onIsScoping(arg0: Internal.CallbackInfoReturnable<any>): void;
        handler$znn000$getExitPortal(arg0: Internal.ServerLevel, arg1: BlockPos, arg2: boolean, arg3: Internal.WorldBorder, arg4: Internal.CallbackInfoReturnable<any>): void;
        notifyAll(): void;
        lithiumOnEquipmentChanged(): void;
        lithiumOnBlockCacheSet(newState: Internal.BlockState): void;
        handler$zjn000$onUpdateFluidOnEyeAssign(arg0: Internal.CallbackInfo): void;
        notify(): void;
        handler$zzo000$moveStep(arg0: Internal.MoverType, arg1: Vec3, arg2: Internal.CallbackInfo): void;
        endimateTick(): void;
        isDirty(): boolean;
        hashCode(): number;
        refreshTabListName(): void;
        isAddedToWorld(): boolean;
        addListener(listener: Internal.NearbyEntityListener): void;
        onRemovedFromWorld(): void;
        isMultipartEntity(): boolean;
        deserializeNBT(arg0: Internal.CompoundTag): void;
        deserializeNBT(arg0: Internal.Tag): void;
        curePotionEffects(arg0: Internal.ItemStack): boolean;
        clean(): void;
        asKJS(): object;
        getValue(arg0: Internal.TrackedData<any>): object;
        shouldRiderFaceForward(arg0: Internal.Player): boolean;
        setValue(arg0: Internal.TrackedData<any>, arg1: object): void;
        equals(arg0: object): boolean;
        toString(): string;
        getBackpackedInventory(): Internal.BackpackInventory;
        refreshDisplayName(): void;
        backpackedInventory : Internal.BackpackInventory;
        static readonly PERSISTED_NBT_TAG : "PlayerPersisted";
        set citadelEntityData(arg0: Internal.CompoundTag);
        get cachedFeetBlockState(): Internal.BlockState;
        get pos(): Internal.Position;
        get persistentDataKJS(): Internal.CompoundTag;
        get endimatedState(): Internal.Endimatable$EndimatedState;
        set forcedPose(arg0: Internal.Pose);
        get effectHandler(): Internal.EndimationEffectHandler;
        get dataEffectColorId_$md$85ada3$1(): Internal.EntityDataAccessor<any>;
        set animationTick(arg0: number);
        get citadelEntityData(): Internal.CompoundTag;
        get listener(): Internal.NearbyEntityListenerMulti;
        get isInsidePortal(): boolean;
        get persistentData(): Internal.CompoundTag;
        get remainingFireTicks(): number;
        get stagesRawKJS(): Internal.Stages;
        get dataMap(): Map<any, any>;
        get stages(): Internal.Stages;
        get entityChangeListener(): Internal.EntityInLevelCallback;
        set dataMap(arg0: Map<any, any>);
        get dataEffectAmbienceId_$md$85ada3$0(): Internal.EntityDataAccessor<any>;
        get lastPos(): BlockPos;
        get parts(): Internal.PartEntity<object>[];
        get language(): string;
        get playingEndimation(): Internal.PlayableEndimation;
        get dirtyEntries(): Internal.Set<any>;
        set playingEndimation(arg0: Internal.PlayableEndimation);
        get animationTick(): number;
        set remainingFireTicks(arg0: number);
        get forcedPose(): Internal.Pose;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class PlayableEndimation$LoopType extends Internal.Enum<Internal.PlayableEndimation$LoopType> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(arg0: string): Internal.PlayableEndimation$LoopType;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.PlayableEndimation$LoopType[];
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly LOOP : Internal.PlayableEndimation$LoopType;
        static readonly NONE : Internal.PlayableEndimation$LoopType;
        static readonly HOLD : Internal.PlayableEndimation$LoopType;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class AttachedData extends Internal.HashMap<string, object> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        getOrDefault(arg0: object, arg1: V): V;
        containsKey(arg0: object): boolean;
        notifyAll(): void;
        replace(arg0: K, arg1: V): V;
        replace(arg0: K, arg1: V, arg2: V): boolean;
        isEmpty(): boolean;
        clear(): void;
        notify(): void;
        containsValue(arg0: object): boolean;
        put(arg0: K, arg1: V): V;
        remove(arg0: object, arg1: object): boolean;
        remove(arg0: object): V;
        size(): number;
        hashCode(): number;
        equals(arg0: object): boolean;
        get(arg0: object): V;
        clone(): object;
        toString(): string;
        putIfAbsent(arg0: K, arg1: V): V;
        get parent(): object;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class MobSpawnSettings$MobSpawnCost {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class BlockBuilder extends Internal.BuilderBase {
        noItem(): Internal.BlockBuilder;
        suffocating(b: boolean): Internal.BlockBuilder;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        waterlogged(): Internal.BlockBuilder;
        translationKey(key: string): Internal.BuilderBase;
        color(index: number, c: number): Internal.BlockBuilder;
        textureAll(tex: string): Internal.BlockBuilder;
        newID(pre: string, post: string): ResourceLocation;
        displayName(name: string): Internal.BuilderBase;
        notifyAll(): void;
        box(x0: number, y0: number, z0: number, x1: number, y1: number, z1: number, scale16: boolean): Internal.BlockBuilder;
        box(x0: number, y0: number, z0: number, x1: number, y1: number, z1: number): Internal.BlockBuilder;
        viewBlocking(b: boolean): Internal.BlockBuilder;
        type(t: Internal.BlockType): Internal.BlockBuilder;
        notify(): void;
        transparent(b: boolean): Internal.BlockBuilder;
        tagBlock(tag: ResourceLocation): Internal.BlockBuilder;
        fullBlock(f: boolean): Internal.BlockBuilder;
        createProperties(): Internal.BlockBehaviour$Properties;
        notSolid(): Internal.BlockBuilder;
        hashCode(): number;
        noCollission(): Internal.BlockBuilder;
        unbreakable(): Internal.BlockBuilder;
        requiresTool(f: boolean): Internal.BlockBuilder;
        model(m: string): Internal.BlockBuilder;
        tag(arg0: ResourceLocation): Internal.BuilderBase;
        tag(tag: ResourceLocation): Internal.BlockBuilder;
        renderType(l: string): Internal.BlockBuilder;
        jumpFactor(f: number): Internal.BlockBuilder;
        tagBoth(tag: ResourceLocation): Internal.BlockBuilder;
        createShape(): Internal.VoxelShape;
        defaultCutout(): Internal.BlockBuilder;
        item(i: (arg0: Internal.BlockItemBuilder) => void): Internal.BlockBuilder;
        opaque(o: boolean): Internal.BlockBuilder;
        randomTick(randomTickCallback: (arg0: Internal.RandomTickCallbackJS) => void): Internal.BlockBuilder;
        texture(id: string, tex: string): Internal.BlockBuilder;
        noDrops(): Internal.BlockBuilder;
        speedFactor(f: number): Internal.BlockBuilder;
        tagItem(tag: ResourceLocation): Internal.BlockBuilder;
        noValidSpawns(b: boolean): Internal.BlockBuilder;
        resistance(r: number): Internal.BlockBuilder;
        hardness(h: number): Internal.BlockBuilder;
        lightLevel(light: number): Internal.BlockBuilder;
        defaultTranslucent(): Internal.BlockBuilder;
        material(m: Internal.MaterialJS): Internal.BlockBuilder;
        slipperiness(f: number): Internal.BlockBuilder;
        equals(arg0: object): boolean;
        toString(): string;
        redstoneConductor(b: boolean): Internal.BlockBuilder;
        textureSide(direction: Internal.Direction, tex: string): Internal.BlockBuilder;
        readonly textures : Internal.JsonObject;
        defaultTags : Internal.Set<ResourceLocation>;
        static current : Internal.BlockBuilder;
        lootTable : (arg0: Internal.LootBuilder) => void;
        modelJson : Internal.JsonObject;
        blockstateJson : Internal.JsonObject;
        block : Internal.Block;
        readonly id : ResourceLocation;
        customShape : Internal.List<Internal.AABB>;
        itemBuilder : Internal.BlockItemBuilder;
        randomTickCallback : (arg0: Internal.RandomTickCallbackJS) => void;
        get builderType(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class ZoneId implements Internal.Serializable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        normalized(): Internal.ZoneId;
        notifyAll(): void;
        notify(): void;
        static ofOffset(arg0: string, arg1: Internal.ZoneOffset): Internal.ZoneId;
        static systemDefault(): Internal.ZoneId;
        getDisplayName(arg0: Internal.TextStyle, arg1: Internal.Locale): string;
        hashCode(): number;
        static of(arg0: string, arg1: Map<string, string>): Internal.ZoneId;
        static of(arg0: string): Internal.ZoneId;
        equals(arg0: object): boolean;
        static from(arg0: Internal.TemporalAccessor): Internal.ZoneId;
        toString(): string;
        static readonly SHORT_IDS : Map<string, string>;
        get id(): string;
        get availableZoneIds(): Internal.Set<string>;
        get rules(): Internal.ZoneRules;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class MoverType extends Internal.Enum<Internal.MoverType> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(arg0: string): Internal.MoverType;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.MoverType[];
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly PLAYER : Internal.MoverType;
        static readonly PISTON : Internal.MoverType;
        static readonly SHULKER_BOX : Internal.MoverType;
        static readonly SELF : Internal.MoverType;
        static readonly SHULKER : Internal.MoverType;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ScreenPaintEventJS extends Internal.PaintEventJS {
        cancel(): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        vertex(m: Internal.Matrix4f, x: number, y: number, z: number, col: number, u: number, v: number): void;
        vertex(m: Internal.Matrix4f, x: number, y: number, z: number, col: number): void;
        notifyAll(): void;
        scale(x: number, y: number): void;
        scale(scale: number): void;
        scale(x: number, y: number, z: number): void;
        notify(): void;
        translate(x: number, y: number): void;
        translate(x: number, y: number, z: number): void;
        pop(): void;
        post(id: string, sub: string): boolean;
        post(id: string): boolean;
        post(t: Internal.ScriptType, id: string, sub: string): boolean;
        post(t: Internal.ScriptType, id: string): boolean;
        hashCode(): number;
        end(): void;
        alignX(x: number, w: number, alignX: number): number;
        text(text: Internal.Component, x: number, y: number, color: number, shadow: boolean): void;
        alignY(y: number, h: number, alignY: number): number;
        bindTexture(tex: ResourceLocation): void;
        isCancelled(): boolean;
        beginQuads(texture: boolean): void;
        beginQuads(format: Internal.VertexFormat): void;
        rotateDeg(angle: number): void;
        push(): void;
        rawText(text: Internal.FormattedCharSequence, x: number, y: number, color: number, shadow: boolean): void;
        equals(arg0: object): boolean;
        toString(): string;
        rectangle(x: number, y: number, z: number, w: number, h: number, color: number): void;
        rectangle(x: number, y: number, z: number, w: number, h: number, color: number, u0: number, v0: number, u1: number, v1: number): void;
        rotateRad(angle: number): void;
        begin(type: Internal.VertexFormat$Mode, format: Internal.VertexFormat): void;
        canCancel(): boolean;
        readonly mouseX : number;
        readonly mc : Internal.Minecraft;
        readonly mouseY : number;
        readonly width : number;
        readonly delta : number;
        readonly screen : Internal.Screen;
        readonly tesselator : Internal.Tesselator;
        readonly buffer : Internal.BufferBuilder;
        readonly inventory : boolean;
        readonly matrices : Internal.PoseStack;
        readonly height : number;
        readonly font : Internal.Font;
        get player(): Internal.ClientPlayerJS;
        get textureAtlas(): Internal.TextureAtlas;
        get matrix(): Internal.Matrix4f;
        set textureEnabled(enabled: boolean);
        get entity(): Internal.EntityJS;
        get level(): Internal.ClientLevelJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class AbstractObjectCollection <K> extends Internal.AbstractCollection<K> implements Internal.ObjectCollection<K> {
        add(arg0: E): boolean;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        spliterator(): Internal.ObjectSpliterator<K>;
        spliterator(): Internal.Spliterator<any>;
        notifyAll(): void;
        isEmpty(): boolean;
        clear(): void;
        notify(): void;
        remove(arg0: object): boolean;
        contains(arg0: object): boolean;
        iterator(): Internal.ObjectIterator<K>;
        iterator(): Internal.Iterator<any>;
        size(): number;
        hashCode(): number;
        equals(arg0: object): boolean;
        toArray(): object[];
        toArray<T>(arg0: T[]): T[];
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class AndCondition implements Internal.IExtendedLootCondition {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        or(arg0: (arg0: T) => boolean): (arg0: T) => boolean;
        test(arg0: Internal.LootContext): boolean;
        test(arg0: object): boolean;
        and(arg0: (arg0: T) => boolean): (arg0: T) => boolean;
        negate(): (arg0: T) => boolean;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class Player extends Internal.LivingEntity implements Internal.BackpackedInventoryAccess, Internal.PlayerKJS {
        backpackedMoved(): boolean;
        getCapability<T>(arg0: Internal.Capability<T>, arg1: Internal.Direction): Internal.LazyOptional<T>;
        handler$zbc000$onFallFlying(arg0: number, arg1: number, arg2: number, arg3: Internal.CallbackInfo): void;
        onEndimationEnd(arg0: Internal.PlayableEndimation, arg1: Internal.PlayableEndimation): void;
        canBeRiddenInWater(arg0: Internal.Entity): boolean;
        handler$zzo000$tickHead(arg0: Internal.CallbackInfo): void;
        isEndimationPlaying(arg0: Internal.PlayableEndimation): boolean;
        isActive(): boolean;
        handler$zgm001$tick(arg0: Internal.CallbackInfo): void;
        create$callSpawnItemParticles(arg0: Internal.ItemStack, arg1: number): void;
        handler$zjn000$onUpdateFluidOnEyes(arg0: Internal.CallbackInfo): void;
        changeDimension(arg0: Internal.ServerLevel, arg1: Internal.ITeleporter): Internal.Entity;
        serializeNBT(): Internal.Tag;
        serializeNBT(): Internal.CompoundTag;
        invalidateCaps(): void;
        foodEatenKJS(is: Internal.ItemStack): void;
        revive(): void;
        getDigSpeed(arg0: Internal.BlockState, arg1: BlockPos): number;
        canUpdate(): boolean;
        canUpdate(arg0: boolean): void;
        handler$bgc000$tryShortcutFluidPushing(tag: net.minecraft.tags.Tag<any>, speed: number, cir: Internal.CallbackInfoReturnable<any>, box: Internal.AABB, x1: number, x2: number, y1: number, y2: number, z1: number, z2: number, zero: number): void;
        resetEndimation(): void;
        areCapsCompatible(arg0: Internal.CapabilityDispatcher): boolean;
        getEyeHeightAccess(arg0: Internal.Pose, arg1: Internal.EntityDimensions): number;
        reviveCaps(): void;
        lithiumOnBlockCacheDeleted(): void;
        handler$zgd000$diet$constructPlayer(arg0: Internal.CallbackInfo): void;
        canRiderInteract(): boolean;
        handler$zbc000$locateAmmo(arg0: Internal.ItemStack, arg1: Internal.CallbackInfoReturnable<any>, arg2: Internal.Predicate<any>): void;
        getEntries(arg0: boolean): Internal.Set<any>;
        onAddedToWorld(): void;
        handler$zcp000$read(arg0: Internal.CompoundTag, arg1: Internal.CallbackInfo): void;
        canTrample(arg0: Internal.BlockState, arg1: BlockPos, arg2: number): boolean;
        getClassification(arg0: boolean): Internal.MobCategory;
        onEndimationStart(arg0: Internal.PlayableEndimation, arg1: Internal.PlayableEndimation): void;
        isNoEndimationPlaying(): boolean;
        lithiumSetClimbingMobCachingSectionUpdateBehavior(listenForCachedBlockChanges: boolean): void;
        shouldRiderSit(): boolean;
        getPickedResult(arg0: Internal.HitResult): Internal.ItemStack;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        handler$zeg000$onIsScoping(arg0: Internal.CallbackInfoReturnable<any>): void;
        notifyAll(): void;
        lithiumOnEquipmentChanged(): void;
        lithiumOnBlockCacheSet(newState: Internal.BlockState): void;
        handler$zjn000$onUpdateFluidOnEyeAssign(arg0: Internal.CallbackInfo): void;
        notify(): void;
        handler$zzo000$moveStep(arg0: Internal.MoverType, arg1: Vec3, arg2: Internal.CallbackInfo): void;
        endimateTick(): void;
        isDirty(): boolean;
        hashCode(): number;
        isAddedToWorld(): boolean;
        addListener(listener: Internal.NearbyEntityListener): void;
        onRemovedFromWorld(): void;
        isMultipartEntity(): boolean;
        deserializeNBT(arg0: Internal.CompoundTag): void;
        deserializeNBT(arg0: Internal.Tag): void;
        curePotionEffects(arg0: Internal.ItemStack): boolean;
        clean(): void;
        asKJS(): object;
        getValue(arg0: Internal.TrackedData<any>): object;
        shouldRiderFaceForward(arg0: Internal.Player): boolean;
        setValue(arg0: Internal.TrackedData<any>, arg1: object): void;
        equals(arg0: object): boolean;
        toString(): string;
        getBackpackedInventory(): Internal.BackpackInventory;
        refreshDisplayName(): void;
        backpackedInventory : Internal.BackpackInventory;
        static readonly PERSISTED_NBT_TAG : "PlayerPersisted";
        set citadelEntityData(arg0: Internal.CompoundTag);
        get cachedFeetBlockState(): Internal.BlockState;
        get pos(): Internal.Position;
        get persistentDataKJS(): Internal.CompoundTag;
        get endimatedState(): Internal.Endimatable$EndimatedState;
        get suffixes(): Internal.Collection<Internal.MutableComponent>;
        set forcedPose(arg0: Internal.Pose);
        get effectHandler(): Internal.EndimationEffectHandler;
        get dataEffectColorId_$md$85ada3$1(): Internal.EntityDataAccessor<any>;
        set animationTick(arg0: number);
        get prefixes(): Internal.Collection<Internal.MutableComponent>;
        get citadelEntityData(): Internal.CompoundTag;
        get listener(): Internal.NearbyEntityListenerMulti;
        get isInsidePortal(): boolean;
        get persistentData(): Internal.CompoundTag;
        get remainingFireTicks(): number;
        get stagesRawKJS(): Internal.Stages;
        get dataMap(): Map<any, any>;
        get stages(): Internal.Stages;
        get entityChangeListener(): Internal.EntityInLevelCallback;
        set dataMap(arg0: Map<any, any>);
        get dataEffectAmbienceId_$md$85ada3$0(): Internal.EntityDataAccessor<any>;
        get lastPos(): BlockPos;
        get parts(): Internal.PartEntity<object>[];
        get playingEndimation(): Internal.PlayableEndimation;
        get dirtyEntries(): Internal.Set<any>;
        set playingEndimation(arg0: Internal.PlayableEndimation);
        get animationTick(): number;
        set remainingFireTicks(arg0: number);
        get forcedPose(): Internal.Pose;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class BlockBehaviour$BlockStateBase extends Internal.StateHolder<Internal.Block, Internal.BlockState> implements Internal.BlockStateKJS, Internal.BlockStatePathingCache, Internal.BlockStateFlagHolder, Internal.ExtendedAbstractBlockState {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        notify(): void;
        handler$zii000$cacheStateHead(ci: Internal.CallbackInfo): void;
        replacePropertyMap(newMap: Internal.ImmutableMap<any, any>): void;
        hashCode(): number;
        handler$zii000$cacheStateTail(ci: Internal.CallbackInfo): void;
        redirect$zie000$getNeighborFromFastMap(ignore: Internal.Table<any, any, any>, rowKey: object, columnKey: object): object;
        isConditionallyFullOpaque(): boolean;
        equals(arg0: object): boolean;
        toString(): string;
        handler$bnd000$initLightAccessState(arg0: Internal.CallbackInfo): void;
        handler$zko000$onBlockCollision(arg0: Internal.Level, arg1: BlockPos, arg2: Internal.Entity, arg3: Internal.CallbackInfo): void;
        get stateIndex(): number;
        get neighborTable(): Internal.Table<any, any, any>;
        get opacityIfCached(): number;
        set requiresToolKJS(arg0: boolean);
        set materialKJS(arg0: net.minecraft.world.level.material.Material);
        set stateIndex(newValue: number);
        get vanillaPropertyMap(): Internal.ImmutableMap<any, any>;
        set destroySpeedKJS(arg0: number);
        get neighborPathNodeType(): Internal.BlockPathTypes;
        set lightEmissionKJS(arg0: number);
        get pathNodeType(): Internal.BlockPathTypes;
        set neighborTable(table: Internal.Table<any, any, any>);
        set stateMap(newValue: Internal.FastMap<any>);
        get stateMap(): Internal.FastMap<any>;
        get allFlags(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class IERecipeJS extends Internal.RecipeJS {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        ingredientAction(filter: Internal.IngredientActionFilter, action: Internal.IngredientAction): Internal.RecipeJS;
        notifyAll(): void;
        convertReplacedOutput(index: number, oldStack: Internal.ItemStackJS, newStack: Internal.ItemStackJS): Internal.ItemStackJS;
        convertReplacedInput(index: number, oldIngredient: Internal.IngredientJS, newIngredient: Internal.IngredientJS): Internal.IngredientJS;
        save(): void;
        damageIngredient(filter: Internal.IngredientActionFilter, damage: number): Internal.RecipeJS;
        damageIngredient(filter: Internal.IngredientActionFilter): Internal.RecipeJS;
        getId(): string;
        dontAdd(): void;
        notify(): void;
        serializeJson(): void;
        parseIngredientItemIE(json: Internal.JsonElement): Internal.IngredientStackJS;
        replaceOutput(i: Internal.IngredientJS, with_: Internal.ItemStackJS, exact: boolean): boolean;
        hashCode(): number;
        merge(data: object): Internal.RecipeJS;
        create(arg0: Internal.ListJS): void;
        deserializeJson(): void;
        id(_id: ResourceLocation): Internal.RecipeJS;
        parseIngredientItem(o: object, key: string): Internal.IngredientJS;
        parseIngredientItem(o: object): Internal.IngredientJS;
        deserialize(): void;
        group(g: string): Internal.RecipeJS;
        energy(e: number): Internal.IERecipeJS;
        serializeNBTAsJson(): boolean;
        getOutputIndex(ingredient: Internal.IngredientJS, exact: boolean): number;
        getInputIndex(ingredient: Internal.IngredientJS, exact: boolean): number;
        serialize(): void;
        setGroup(g: string): void;
        resultFromRecipeJson(json: Internal.JsonObject): Internal.ItemStackJS;
        stage(s: string): Internal.RecipeJS;
        serializeIngredientStack(in_: Internal.IngredientStackJS): Internal.JsonElement;
        replaceInput(i: Internal.IngredientJS, with_: Internal.IngredientJS, exact: boolean): boolean;
        getType(): string;
        equals(arg0: object): boolean;
        getGroup(): string;
        serializeItemStack(stack: Internal.ItemStackJS): Internal.JsonElement;
        hasOutput(ingredient: Internal.IngredientJS, exact: boolean): boolean;
        toString(): string;
        keepIngredient(filter: Internal.IngredientActionFilter): Internal.RecipeJS;
        time(t: number): Internal.IERecipeJS;
        hasInput(ingredient: Internal.IngredientJS, exact: boolean): boolean;
        customIngredientAction(filter: Internal.IngredientActionFilter, id: string): Internal.RecipeJS;
        parseResultItem(o: object): Internal.ItemStackJS;
        replaceIngredient(filter: Internal.IngredientActionFilter, item: Internal.ItemStackJS): Internal.RecipeJS;
        static currentRecipe : Internal.RecipeJS;
        readonly inputItems : Internal.List<Internal.IngredientJS>;
        static itemErrors : false;
        type : Internal.RecipeTypeJS;
        originalJson : Internal.JsonObject;
        serializeOutputs : boolean;
        readonly outputFluids : Internal.List<Internal.FluidStack>;
        originalRecipe : Internal.Recipe<object>;
        readonly inputFluids : Internal.List<Internal.FluidTagInput>;
        json : Internal.JsonObject;
        readonly outputItems : Internal.List<Internal.ItemStackJS>;
        serializeInputs : boolean;
        get mod(): string;
        get uniqueId(): string;
        get fromToString(): string;
        get path(): string;
        get orCreateId(): ResourceLocation;
        get originalRecipeResult(): Internal.ItemStackJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class AlloyRecipeJS extends Internal.IERecipeJS {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        ingredientAction(filter: Internal.IngredientActionFilter, action: Internal.IngredientAction): Internal.RecipeJS;
        notifyAll(): void;
        convertReplacedOutput(index: number, oldStack: Internal.ItemStackJS, newStack: Internal.ItemStackJS): Internal.ItemStackJS;
        convertReplacedInput(index: number, oldIngredient: Internal.IngredientJS, newIngredient: Internal.IngredientJS): Internal.IngredientJS;
        save(): void;
        damageIngredient(filter: Internal.IngredientActionFilter, damage: number): Internal.RecipeJS;
        damageIngredient(filter: Internal.IngredientActionFilter): Internal.RecipeJS;
        getId(): string;
        dontAdd(): void;
        notify(): void;
        serializeJson(): void;
        parseIngredientItemIE(json: Internal.JsonElement): Internal.IngredientStackJS;
        replaceOutput(i: Internal.IngredientJS, with_: Internal.ItemStackJS, exact: boolean): boolean;
        hashCode(): number;
        merge(data: object): Internal.RecipeJS;
        create(args: Internal.ListJS): void;
        deserializeJson(): void;
        id(_id: ResourceLocation): Internal.RecipeJS;
        parseIngredientItem(o: object, key: string): Internal.IngredientJS;
        parseIngredientItem(o: object): Internal.IngredientJS;
        group(g: string): Internal.RecipeJS;
        energy(e: number): Internal.IERecipeJS;
        deserialize(): void;
        serializeNBTAsJson(): boolean;
        getOutputIndex(ingredient: Internal.IngredientJS, exact: boolean): number;
        getInputIndex(ingredient: Internal.IngredientJS, exact: boolean): number;
        setGroup(g: string): void;
        serialize(): void;
        resultFromRecipeJson(json: Internal.JsonObject): Internal.ItemStackJS;
        stage(s: string): Internal.RecipeJS;
        serializeIngredientStack(in_: Internal.IngredientStackJS): Internal.JsonElement;
        replaceInput(i: Internal.IngredientJS, with_: Internal.IngredientJS, exact: boolean): boolean;
        getType(): string;
        equals(arg0: object): boolean;
        getGroup(): string;
        serializeItemStack(stack: Internal.ItemStackJS): Internal.JsonElement;
        hasOutput(ingredient: Internal.IngredientJS, exact: boolean): boolean;
        toString(): string;
        keepIngredient(filter: Internal.IngredientActionFilter): Internal.RecipeJS;
        time(t: number): Internal.IERecipeJS;
        hasInput(ingredient: Internal.IngredientJS, exact: boolean): boolean;
        customIngredientAction(filter: Internal.IngredientActionFilter, id: string): Internal.RecipeJS;
        parseResultItem(o: object): Internal.ItemStackJS;
        replaceIngredient(filter: Internal.IngredientActionFilter, item: Internal.ItemStackJS): Internal.RecipeJS;
        static currentRecipe : Internal.RecipeJS;
        readonly inputItems : Internal.List<Internal.IngredientJS>;
        static itemErrors : false;
        type : Internal.RecipeTypeJS;
        originalJson : Internal.JsonObject;
        serializeOutputs : boolean;
        readonly outputFluids : Internal.List<Internal.FluidStack>;
        originalRecipe : Internal.Recipe<object>;
        readonly inputFluids : Internal.List<Internal.FluidTagInput>;
        json : Internal.JsonObject;
        readonly outputItems : Internal.List<Internal.ItemStackJS>;
        serializeInputs : boolean;
        get mod(): string;
        get uniqueId(): string;
        get fromToString(): string;
        get path(): string;
        get orCreateId(): ResourceLocation;
        get originalRecipeResult(): Internal.ItemStackJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface TypeDescriptor {
        descriptorString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class EntityEventJS extends Internal.LevelEventJS {
        cancel(): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isCancelled(): boolean;
        post(id: string, sub: string): boolean;
        post(id: string): boolean;
        post(t: Internal.ScriptType, id: string, sub: string): boolean;
        post(t: Internal.ScriptType, id: string): boolean;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        canCancel(): boolean;
        get server(): Internal.ServerJS;
        get level(): Internal.LevelJS;
        get entity(): Internal.EntityJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class PlayerJS <E> extends Internal.LivingEntityJS implements Internal.WithAttachedData {
        sendData(channel: string, data: Internal.CompoundTag): void;
        isOnScoreboardTeam(teamID: string): boolean;
        isLiving(): boolean;
        isSprinting(): boolean;
        paint(arg0: Internal.CompoundTag): void;
        runCommandSilent(command: string): number;
        getDistanceSq(pos: BlockPos): number;
        getDistanceSq(x: number, y: number, z: number): number;
        isBoss(): boolean;
        isGlowing(): boolean;
        addFood(f: number, m: number): void;
        give(item: Internal.ItemStackJS): void;
        setMotion(x: number, y: number, z: number): void;
        setRotation(yaw: number, pitch: number): void;
        isMiningBlock(): boolean;
        isSpectator(): boolean;
        isOnSameTeam(e: Internal.EntityJS): boolean;
        isAnimal(): boolean;
        addExhaustion(exhaustion: number): void;
        addMotion(x: number, y: number, z: number): void;
        isFake(): boolean;
        isInvisible(): boolean;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isUnderWater(): boolean;
        getHeldItem(hand: Hand): Internal.ItemStackJS;
        getEquipment(slot: EquipmentSlot): Internal.ItemStackJS;
        notify(): void;
        damageHeldItem(hand: Hand, amount: number): void;
        damageHeldItem(): void;
        removePassengers(): void;
        attack(hp: number): void;
        attack(source: string, hp: number): void;
        isOnLadder(): boolean;
        isUndead(): boolean;
        playSound(id: Internal.SoundEvent): void;
        playSound(id: Internal.SoundEvent, volume: number, pitch: number): void;
        boostElytraFlight(): void;
        getDistance(x: number, y: number, z: number): number;
        getDistance(pos: BlockPos): number;
        isSwimming(): boolean;
        mergeFullNBT(tag: Internal.CompoundTag): Internal.EntityJS;
        kill(): void;
        setPositionAndRotation(x: number, y: number, z: number, yaw: number, pitch: number): void;
        isMonster(): boolean;
        equals(arg0: object): boolean;
        addItemCooldown(item: Internal.Item, ticks: number): void;
        isOnGround(): boolean;
        toString(): string;
        isSilent(): boolean;
        isPassenger(e: Internal.EntityJS): boolean;
        sendInventoryUpdate(): void;
        tell(message: Internal.Component): void;
        isWaterCreature(): boolean;
        setPosition(x: number, y: number, z: number): void;
        closeInventory(): void;
        extinguish(): void;
        isChild(): boolean;
        setEquipment(slot: EquipmentSlot, item: Internal.ItemStackJS): void;
        giveInHand(item: Internal.ItemStackJS): void;
        isHoldingInAnyHand(ingredient: object): boolean;
        isCreativeMode(): boolean;
        damageEquipment(slot: EquipmentSlot): void;
        damageEquipment(slot: EquipmentSlot, amount: number): void;
        isAlive(): boolean;
        setHeldItem(hand: Hand, item: Internal.ItemStackJS): void;
        isPlayer(): boolean;
        isCrouching(): boolean;
        notifyAll(): void;
        addXPLevels(l: number): void;
        hashCode(): number;
        isFrame(): boolean;
        heal(hp: number): void;
        startRiding(e: Internal.EntityJS, force: boolean): boolean;
        runCommand(command: string): number;
        addXP(xp: number): void;
        isElytraFlying(): boolean;
        isInWater(): boolean;
        dismountRidingEntity(): void;
        isSleeping(): boolean;
        isAmbientCreature(): boolean;
        swingArm(hand: Hand): void;
        rayTrace(): Internal.RayTraceResultJS;
        rayTrace(distance: number): Internal.RayTraceResultJS;
        isInvulnerable(): boolean;
        canEntityBeSeen(entity: Internal.LivingEntityJS): boolean;
        spawn(): void;
        isPeacefulCreature(): boolean;
        readonly persistentData : Internal.CompoundTag;
        readonly minecraftPlayer : E;
        readonly minecraftEntity : Internal.Entity;
        readonly minecraftLivingEntity : Internal.LivingEntity;
        get xpLevel(): number;
        get lastAttackedEntity(): Internal.LivingEntityJS;
        set y(y: number);
        set x(x: number);
        get item(): Internal.ItemStackJS;
        get revengeTarget(): Internal.LivingEntityJS;
        get offHandItem(): Internal.ItemStackJS;
        set glowing(glowing: boolean);
        set z(z: number);
        set xpLevel(l: number);
        get hasCustomName(): boolean;
        set invisible(invisible: boolean);
        get idleTime(): number;
        get movementSpeed(): number;
        set selectedSlot(index: number);
        get horizontalFacing(): Internal.Direction;
        set legsArmorItem(item: Internal.ItemStackJS);
        get health(): number;
        get server(): Internal.ServerJS;
        set feetArmorItem(item: Internal.ItemStackJS);
        set maxHealth(hp: number);
        get profile(): Internal.GameProfile;
        set absorptionAmount(amount: number);
        get displayName(): Internal.Text;
        get type(): string;
        get xp(): number;
        set customNameAlwaysVisible(b: boolean);
        set offHandItem(item: Internal.ItemStackJS);
        get foodLevel(): number;
        get maxHealth(): number;
        get eyeHeight(): number;
        get fallDistance(): number;
        set airSupply(air: number);
        set onFire(seconds: number);
        get inventory(): Internal.InventoryJS;
        get data(): Internal.AttachedData;
        get lastDamageSource(): Internal.DamageSourceJS;
        set statusMessage(message: Internal.Component);
        get reachDistance(): number;
        get customName(): Internal.Text;
        get stepHeight(): number;
        get ridingEntity(): Internal.EntityJS;
        get level(): Internal.LevelJS;
        get pitch(): number;
        get passengers(): Internal.EntityArrayList;
        get lastAttackedEntityTime(): number;
        set pitch(pitch: number);
        get facing(): Internal.Direction;
        set xp(xp: number);
        get maxAirSupply(): number;
        get recursivePassengers(): Internal.EntityArrayList;
        get nbt(): Internal.CompoundTag;
        set fallDistance(fallDistance: number);
        get name(): Internal.Text;
        get feetArmorItem(): Internal.ItemStackJS;
        set customName(name: Internal.Component);
        set mainHandItem(item: Internal.ItemStackJS);
        set stepHeight(stepHeight: number);
        get teamId(): string;
        set noClip(noClip: boolean);
        set position(block: Internal.BlockContainerJS);
        set invulnerable(invulnerable: boolean);
        set revengeTarget(target: Internal.LivingEntityJS);
        set movementSpeed(speed: number);
        get airSupply(): number;
        get legsArmorItem(): Internal.ItemStackJS;
        set fullNBT(nbt: Internal.CompoundTag);
        get attackingEntity(): Internal.LivingEntityJS;
        set yaw(yaw: number);
        get fullNBT(): Internal.CompoundTag;
        get noClip(): boolean;
        get yaw(): number;
        get headArmorItem(): Internal.ItemStackJS;
        set noGravity(noGravity: boolean);
        set mouseItem(item: Internal.ItemStackJS);
        get revengeTimer(): number;
        get stats(): Internal.PlayerStatsJS;
        get absorptionAmount(): number;
        get id(): Internal.UUID;
        get ticksExisted(): number;
        get openInventory(): Internal.AbstractContainerMenu;
        get stages(): Internal.Stages;
        set silent(isSilent: boolean);
        get chestArmorItem(): Internal.ItemStackJS;
        set chestArmorItem(item: Internal.ItemStackJS);
        get customNameAlwaysVisible(): boolean;
        get mainHandItem(): Internal.ItemStackJS;
        set health(hp: number);
        set motionZ(z: number);
        set motionY(y: number);
        get block(): Internal.BlockContainerJS;
        set motionX(x: number);
        get potionEffects(): Internal.EntityPotionEffectsJS;
        set headArmorItem(item: Internal.ItemStackJS);
        get selectedSlot(): number;
        get x(): number;
        get y(): number;
        get z(): number;
        get mouseItem(): Internal.ItemStackJS;
        set foodLevel(foodLevel: number);
        get motionZ(): number;
        get motionX(): number;
        get noGravity(): boolean;
        get motionY(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ChunkRandomSource {
        getRandomPosInChunk(arg0: number, arg1: number, arg2: number, arg3: number, arg4: Internal.BlockPos$MutableBlockPos): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class AbstractContainerEventHandler extends Internal.GuiComponent implements Internal.ContainerEventHandler {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface UserPrincipal implements Internal.Principal {
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        implies(arg0: Internal.Subject): boolean;
        get name(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IdMap <T> implements Internal.Iterable<T> {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Scriptable implements Internal.IdEnumerationIterator {
        enumerationIteratorNext(cx: Internal.Context, currentId: (arg0: object) => void): boolean;
        hasInstance(arg0: Internal.Scriptable): boolean;
        delete(arg0: string): void;
        delete(arg0: number): void;
        put(arg0: number, arg1: Internal.Scriptable, arg2: object): void;
        put(arg0: string, arg1: Internal.Scriptable, arg2: object): void;
        getDefaultValue(arg0: Internal.Class<object>): object;
        get(arg0: number, arg1: Internal.Scriptable): object;
        get(arg0: string, arg1: Internal.Scriptable): object;
        enumerationIteratorHasNext(cx: Internal.Context, currentId: (arg0: object) => void): boolean;
        has(arg0: string, arg1: Internal.Scriptable): boolean;
        has(arg0: number, arg1: Internal.Scriptable): boolean;
        set parentScope(arg0: Internal.Scriptable);
        get ids(): object[];
        get allIds(): object[];
        set prototype(arg0: Internal.Scriptable);
        get prototype(): Internal.Scriptable;
        get className(): string;
        get parentScope(): Internal.Scriptable;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class IngredientStackJS implements Internal.IngredientJS {
        anyStackMatches(ingredient: Internal.IngredientJS): boolean;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        isInvalidRecipeIngredient(): boolean;
        notify(): void;
        not(): Internal.IngredientJS;
        hashCode(): number;
        static stackOf(in_: Internal.IngredientJS): Internal.IngredientStackJS;
        copy(): Internal.Copyable;
        copy(): Internal.IngredientJS;
        testVanillaItem(item: Internal.Item): boolean;
        test(stack: Internal.ItemStackJS): boolean;
        isEmpty(): boolean;
        asIngredientStack(): Internal.IngredientStackJS;
        filter(filter: Internal.IngredientJS): Internal.IngredientJS;
        createVanillaIngredient(): Internal.Ingredient;
        toJson(): Internal.JsonElement;
        withCount(count: number): Internal.IngredientJS;
        getIngredient(): Internal.IngredientJS;
        unwrapStackIngredient(): Internal.List<Internal.IngredientJS>;
        equals(arg0: object): boolean;
        testVanilla(stack: Internal.ItemStack): boolean;
        x(c: number): Internal.IngredientJS;
        toString(): string;
        ingredientKey : string;
        ingredient : Internal.IngredientJS;
        countKey : string;
        get itemIds(): Internal.Set<string>;
        get stacks(): Internal.Set<Internal.ItemStackJS>;
        get vanillaItems(): Internal.Set<Internal.Item>;
        get first(): Internal.ItemStackJS;
        get count(): number;
        get vanillaPredicate(): (arg0: Internal.ItemStack) => boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Int2IntMap$Entry implements Internal.Map$Entry<number, number> {
        hashCode(): number;
        equals(arg0: object): boolean;
        get intKey(): number;
        get key(): object;
        get key(): number;
        get value(): number;
        get value(): object;
        get intValue(): number;
        set value(arg0: object);
        set value(arg0: number);
        set value(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface BufferVertexFormat {
        get stride(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class Charset implements Internal.Comparable<Internal.Charset> {
        encode(arg0: string): Internal.ByteBuffer;
        encode(arg0: Internal.CharBuffer): Internal.ByteBuffer;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        aliases(): Internal.Set<string>;
        static forName(arg0: string): Internal.Charset;
        displayName(): string;
        displayName(arg0: Internal.Locale): string;
        newDecoder(): Internal.CharsetDecoder;
        notifyAll(): void;
        static defaultCharset(): Internal.Charset;
        static isSupported(arg0: string): boolean;
        compareTo(arg0: object): number;
        compareTo(arg0: Internal.Charset): number;
        decode(arg0: Internal.ByteBuffer): Internal.CharBuffer;
        notify(): void;
        contains(arg0: Internal.Charset): boolean;
        hashCode(): number;
        canEncode(): boolean;
        equals(arg0: object): boolean;
        newEncoder(): Internal.CharsetEncoder;
        name(): string;
        isRegistered(): boolean;
        toString(): string;
        static availableCharsets(): Internal.SortedMap<string, Internal.Charset>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface NonNullFunction <T, R> {
        apply(arg0: T): R;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface BakedQuadAccess {
        set vertices(arg0: number[]);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class EndimationEaser <C> implements Internal.BiFunction<number, C, number> {
        configured(): (arg0: C) => Internal.EndimationEaser<C>;
        configured(arg0: C): (arg0: C) => Internal.EndimationEaser<C>;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        apply(arg0: number): number;
        apply(arg0: T, arg1: U): R;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        andThen<V>(arg0: (arg0: R) => V): (arg0: T, arg1: U) => V;
        notify(): void;
        get codec(): Internal.Codec<(arg0: C) => Internal.EndimationEaser<C>>;
        get defaultConfig(): C;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Short2CharFunction implements it.unimi.dsi.fastutil.Function<number, string>, Internal.IntUnaryOperator {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: string): string;
        getOrDefault(arg0: number, arg1: string): string;
        andThenShort(arg0: Internal.Char2ShortFunction): Internal.Short2ShortFunction;
        composeByte(arg0: Internal.Byte2ShortFunction): Internal.Byte2CharFunction;
        andThenInt(arg0: Internal.Char2IntFunction): Internal.Short2IntFunction;
        composeReference<T>(arg0: Internal.Reference2ShortFunction<T>): Internal.Reference2CharFunction<T>;
        andThen<T>(arg0: (arg0: string) => T): (arg0: number) => T;
        andThen(arg0: Internal.IntUnaryOperator): Internal.IntUnaryOperator;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: string): string;
        put(arg0: number, arg1: string): string;
        remove(arg0: number): string;
        remove(arg0: object): object;
        remove(arg0: object): string;
        defaultReturnValue(arg0: string): void;
        defaultReturnValue(): string;
        andThenDouble(arg0: Internal.Char2DoubleFunction): Internal.Short2DoubleFunction;
        andThenObject<T>(arg0: Internal.Char2ObjectFunction<T>): Internal.Short2ObjectFunction<T>;
        get(arg0: object): string;
        get(arg0: object): object;
        get(arg0: number): string;
        andThenLong(arg0: Internal.Char2LongFunction): Internal.Short2LongFunction;
        composeLong(arg0: Internal.Long2ShortFunction): Internal.Long2CharFunction;
        andThenByte(arg0: Internal.Char2ByteFunction): Internal.Short2ByteFunction;
        andThenFloat(arg0: Internal.Char2FloatFunction): Internal.Short2FloatFunction;
        applyAsInt(arg0: number): number;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2ShortFunction): Internal.Int2CharFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2ShortFunction): Internal.Float2CharFunction;
        andThenChar(arg0: Internal.Char2CharFunction): Internal.Short2CharFunction;
        composeObject<T>(arg0: Internal.Object2ShortFunction<T>): Internal.Object2CharFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => string;
        compose(arg0: Internal.IntUnaryOperator): Internal.IntUnaryOperator;
        composeShort(arg0: Internal.Short2ShortFunction): Internal.Short2CharFunction;
        andThenReference<T>(arg0: Internal.Char2ReferenceFunction<T>): Internal.Short2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2ShortFunction): Internal.Char2CharFunction;
        composeDouble(arg0: Internal.Double2ShortFunction): Internal.Double2CharFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Function9 <T1, T2, T3, T4, T5, T6, T7, T8, T9, R> {
        apply(arg0: T1, arg1: T2, arg2: T3, arg3: T4, arg4: T5, arg5: T6, arg6: T7, arg7: T8, arg8: T9): R;
        curry7(): Internal.Function7<T1, T2, T3, T4, T5, T6, T7, (arg0: T8, arg1: T9) => R>;
        curry8(): Internal.Function8<T1, T2, T3, T4, T5, T6, T7, T8, (arg0: T9) => R>;
        curry5(): Internal.Function5<T1, T2, T3, T4, T5, Internal.Function4<T6, T7, T8, T9, R>>;
        curry6(): Internal.Function6<T1, T2, T3, T4, T5, T6, Internal.Function3<T7, T8, T9, R>>;
        curry3(): Internal.Function3<T1, T2, T3, Internal.Function6<T4, T5, T6, T7, T8, T9, R>>;
        curry4(): Internal.Function4<T1, T2, T3, T4, Internal.Function5<T5, T6, T7, T8, T9, R>>;
        curry2(): (arg0: T1, arg1: T2) => Internal.Function7<T3, T4, T5, T6, T7, T8, T9, R>;
        curry(): (arg0: T1) => Internal.Function8<T2, T3, T4, T5, T6, T7, T8, T9, R>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface MutableComponent implements Internal.Component {
        get string(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class GuiComponent {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ContainerEventHandler implements Internal.GuiEventListener {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Short2DoubleFunction implements it.unimi.dsi.fastutil.Function<number, number>, Internal.IntToDoubleFunction {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        applyAsDouble(arg0: number): number;
        andThenShort(arg0: Internal.Double2ShortFunction): Internal.Short2ShortFunction;
        composeByte(arg0: Internal.Byte2ShortFunction): Internal.Byte2DoubleFunction;
        andThenInt(arg0: Internal.Double2IntFunction): Internal.Short2IntFunction;
        composeReference<T>(arg0: Internal.Reference2ShortFunction<T>): Internal.Reference2DoubleFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: number) => T;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: number): number;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: object): object;
        remove(arg0: object): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Double2DoubleFunction): Internal.Short2DoubleFunction;
        andThenObject<T>(arg0: Internal.Double2ObjectFunction<T>): Internal.Short2ObjectFunction<T>;
        get(arg0: object): number;
        get(arg0: object): object;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Double2LongFunction): Internal.Short2LongFunction;
        composeLong(arg0: Internal.Long2ShortFunction): Internal.Long2DoubleFunction;
        andThenByte(arg0: Internal.Double2ByteFunction): Internal.Short2ByteFunction;
        andThenFloat(arg0: Internal.Double2FloatFunction): Internal.Short2FloatFunction;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2ShortFunction): Internal.Int2DoubleFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2ShortFunction): Internal.Float2DoubleFunction;
        andThenChar(arg0: Internal.Double2CharFunction): Internal.Short2CharFunction;
        composeObject<T>(arg0: Internal.Object2ShortFunction<T>): Internal.Object2DoubleFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => number;
        composeShort(arg0: Internal.Short2ShortFunction): Internal.Short2DoubleFunction;
        andThenReference<T>(arg0: Internal.Double2ReferenceFunction<T>): Internal.Short2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2ShortFunction): Internal.Char2DoubleFunction;
        composeDouble(arg0: Internal.Double2ShortFunction): Internal.Double2DoubleFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Reference2FloatFunction <K> implements it.unimi.dsi.fastutil.Function<K, number>, Internal.ToDoubleFunction<K> {
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        applyAsDouble(arg0: K): number;
        andThenShort(arg0: Internal.Float2ShortFunction): Internal.Reference2ShortFunction<K>;
        composeByte(arg0: Internal.Byte2ReferenceFunction<K>): Internal.Byte2FloatFunction;
        getFloat(arg0: object): number;
        andThenInt(arg0: Internal.Float2IntFunction): Internal.Reference2IntFunction<K>;
        composeReference<T>(arg0: (arg0: T) => K): Internal.Reference2FloatFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: K) => T;
        put(arg0: K, arg1: number): number;
        put(arg0: K, arg1: number): number;
        put(arg0: object, arg1: object): object;
        remove(arg0: object): number;
        remove(arg0: object): object;
        defaultReturnValue(): number;
        defaultReturnValue(arg0: number): void;
        andThenDouble(arg0: Internal.Float2DoubleFunction): Internal.Reference2DoubleFunction<K>;
        andThenObject<T>(arg0: Internal.Float2ObjectFunction<T>): (arg0: K) => T;
        get(arg0: object): object;
        get(arg0: object): number;
        andThenLong(arg0: Internal.Float2LongFunction): Internal.Reference2LongFunction<K>;
        composeLong(arg0: Internal.Long2ReferenceFunction<K>): Internal.Long2FloatFunction;
        andThenByte(arg0: Internal.Float2ByteFunction): Internal.Reference2ByteFunction<K>;
        andThenFloat(arg0: Internal.Float2FloatFunction): Internal.Reference2FloatFunction<K>;
        removeFloat(arg0: object): number;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        composeInt(arg0: Internal.Int2ReferenceFunction<K>): Internal.Int2FloatFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2ReferenceFunction<K>): Internal.Float2FloatFunction;
        andThenChar(arg0: Internal.Float2CharFunction): Internal.Reference2CharFunction<K>;
        composeObject<T>(arg0: (arg0: T) => K): Internal.Object2FloatFunction<T>;
        size(): number;
        composeShort(arg0: Internal.Short2ReferenceFunction<K>): Internal.Short2FloatFunction;
        andThenReference<T>(arg0: Internal.Float2ReferenceFunction<T>): (arg0: K) => T;
        composeChar(arg0: Internal.Char2ReferenceFunction<K>): Internal.Char2FloatFunction;
        composeDouble(arg0: Internal.Double2ReferenceFunction<K>): Internal.Double2FloatFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface StorableItemStack {
        unregisterFromInventory(arg0: Internal.LithiumStackList): void;
        registerToInventory(arg0: Internal.LithiumStackList, arg1: number): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface LevelSimulatedReader {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class AbstractObject2ObjectFunction <K, V> implements Internal.Object2ObjectFunction<K, V>, Internal.Serializable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        getOrDefault(arg0: object, arg1: V): V;
        notifyAll(): void;
        andThenShort(arg0: Internal.Object2ShortFunction<V>): Internal.Object2ShortFunction<K>;
        composeByte(arg0: Internal.Byte2ObjectFunction<K>): Internal.Byte2ObjectFunction<V>;
        andThenInt(arg0: Internal.Object2IntFunction<V>): Internal.Object2IntFunction<K>;
        andThen<V>(arg0: (arg0: R) => V): (arg0: T) => V;
        composeReference<T>(arg0: (arg0: T) => K): (arg0: T) => V;
        put(arg0: K, arg1: V): V;
        remove(arg0: object): V;
        notify(): void;
        defaultReturnValue(arg0: V): void;
        defaultReturnValue(): V;
        andThenDouble(arg0: Internal.Object2DoubleFunction<V>): Internal.Object2DoubleFunction<K>;
        andThenObject<T>(arg0: (arg0: V) => T): (arg0: K) => T;
        hashCode(): number;
        get(arg0: object): V;
        andThenLong(arg0: Internal.Object2LongFunction<V>): Internal.Object2LongFunction<K>;
        composeLong(arg0: Internal.Long2ObjectFunction<K>): Internal.Long2ObjectFunction<V>;
        andThenByte(arg0: Internal.Object2ByteFunction<V>): Internal.Object2ByteFunction<K>;
        andThenFloat(arg0: Internal.Object2FloatFunction<V>): Internal.Object2FloatFunction<K>;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        composeInt(arg0: Internal.Int2ObjectFunction<K>): Internal.Int2ObjectFunction<V>;
        clear(): void;
        composeFloat(arg0: Internal.Float2ObjectFunction<K>): Internal.Float2ObjectFunction<V>;
        andThenChar(arg0: Internal.Object2CharFunction<V>): Internal.Object2CharFunction<K>;
        composeObject<T>(arg0: (arg0: T) => K): (arg0: T) => V;
        size(): number;
        compose<V>(arg0: (arg0: V) => T): (arg0: V) => R;
        composeShort(arg0: Internal.Short2ObjectFunction<K>): Internal.Short2ObjectFunction<V>;
        equals(arg0: object): boolean;
        andThenReference<T>(arg0: (arg0: V) => T): (arg0: K) => T;
        composeChar(arg0: Internal.Char2ObjectFunction<K>): Internal.Char2ObjectFunction<V>;
        toString(): string;
        composeDouble(arg0: Internal.Double2ObjectFunction<K>): Internal.Double2ObjectFunction<V>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class CallbackInfoReturnable <R> extends Internal.CallbackInfo {
        cancel(): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isCancelled(): boolean;
        notifyAll(): void;
        notify(): void;
        static getCallInfoClassName(arg0: org.objectweb.asm.Type): string;
        hashCode(): number;
        equals(arg0: object): boolean;
        isCancellable(): boolean;
        toString(): string;
        set returnValue(arg0: R);
        get returnValueB(): number;
        get id(): string;
        get returnValueI(): number;
        get returnValueJ(): number;
        get returnValueC(): string;
        get returnValueD(): number;
        get returnValueF(): number;
        get returnValue(): R;
        get returnValueZ(): boolean;
        get returnValueS(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class DataResult$PartialResult <R> {
        flatMap<R2>(arg0: (arg0: R) => Internal.DataResult$PartialResult<R2>): Internal.DataResult$PartialResult<R2>;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        message(): string;
        map<R2>(arg0: (arg0: R) => R2): Internal.DataResult$PartialResult<R2>;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class BlockPathTypes extends Internal.Enum<Internal.BlockPathTypes> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(arg0: string): Internal.BlockPathTypes;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.BlockPathTypes[];
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly DAMAGE_CACTUS : Internal.BlockPathTypes;
        static readonly LAVA : Internal.BlockPathTypes;
        static readonly LEAVES : Internal.BlockPathTypes;
        static readonly BLOCKED : Internal.BlockPathTypes;
        static readonly WALKABLE : Internal.BlockPathTypes;
        static readonly DANGER_CACTUS : Internal.BlockPathTypes;
        static readonly TRAPDOOR : Internal.BlockPathTypes;
        static readonly BREACH : Internal.BlockPathTypes;
        static readonly POWDER_SNOW : Internal.BlockPathTypes;
        static readonly DOOR_WOOD_CLOSED : Internal.BlockPathTypes;
        static readonly DANGER_FIRE : Internal.BlockPathTypes;
        static readonly DAMAGE_FIRE : Internal.BlockPathTypes;
        static readonly WATER : Internal.BlockPathTypes;
        static readonly WATER_BORDER : Internal.BlockPathTypes;
        static readonly WALKABLE_DOOR : Internal.BlockPathTypes;
        static readonly DOOR_IRON_CLOSED : Internal.BlockPathTypes;
        static readonly FENCE : Internal.BlockPathTypes;
        static readonly OPEN : Internal.BlockPathTypes;
        static readonly RAIL : Internal.BlockPathTypes;
        static readonly DAMAGE_OTHER : Internal.BlockPathTypes;
        static readonly DOOR_OPEN : Internal.BlockPathTypes;
        static readonly UNPASSABLE_RAIL : Internal.BlockPathTypes;
        static readonly COCOA : Internal.BlockPathTypes;
        static readonly DANGER_OTHER : Internal.BlockPathTypes;
        static readonly STICKY_HONEY : Internal.BlockPathTypes;
        get danger(): Internal.BlockPathTypes;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class MapCodec <A> extends Internal.CompressorHolder implements Internal.MapDecoder<A>, Internal.MapEncoder<A> {
        encode<T>(arg0: A, arg1: Internal.DynamicOps<T>, arg2: Internal.RecordBuilder<T>): Internal.RecordBuilder<T>;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        keys<T>(arg0: Internal.DynamicOps<T>): Internal.Stream<T>;
        notifyAll(): void;
        deprecated(arg0: number): Internal.MapCodec<A>;
        decode<T>(arg0: Internal.DynamicOps<T>, arg1: Internal.MapLike<T>): Internal.DataResult<A>;
        notify(): void;
        hashCode(): number;
        flatXmap<S>(arg0: (arg0: A) => Internal.DataResult<S>, arg1: (arg0: S) => Internal.DataResult<A>): Internal.MapCodec<S>;
        comap<B>(arg0: (arg0: B) => A): Internal.MapEncoder<B>;
        static of<A>(arg0: Internal.MapEncoder<A>, arg1: Internal.MapDecoder<A>, arg2: () => string): Internal.MapCodec<A>;
        static of<A>(arg0: Internal.MapEncoder<A>, arg1: Internal.MapDecoder<A>): Internal.MapCodec<A>;
        fieldOf(arg0: string): Internal.MapCodec<A>;
        xmap<S>(arg0: (arg0: A) => S, arg1: (arg0: S) => A): Internal.MapCodec<S>;
        map<B>(arg0: (arg0: A) => B): Internal.MapDecoder<B>;
        dependent<E>(arg0: Internal.MapCodec<E>, arg1: (arg0: A) => Internal.Pair<E, Internal.MapCodec<E>>, arg2: (arg0: A, arg1: E) => A): Internal.MapCodec<A>;
        flatComap<B>(arg0: (arg0: B) => Internal.DataResult<A>): Internal.MapEncoder<B>;
        compressedDecode<T>(arg0: Internal.DynamicOps<T>, arg1: T): Internal.DataResult<A>;
        compressedBuilder<T>(arg0: Internal.DynamicOps<T>): Internal.RecordBuilder<T>;
        decoder(): Internal.Decoder<A>;
        withLifecycle(arg0: Internal.Lifecycle): Internal.MapDecoder<any>;
        withLifecycle(arg0: Internal.Lifecycle): Internal.MapEncoder<any>;
        withLifecycle(arg0: Internal.Lifecycle): Internal.MapCodec<A>;
        encoder(): Internal.Encoder<A>;
        orElse(arg0: A): Internal.MapCodec<A>;
        orElse(arg0: (arg0: string) => void, arg1: A): Internal.MapCodec<A>;
        orElse(arg0: Internal.UnaryOperator<string>, arg1: A): Internal.MapCodec<A>;
        forGetter<O>(arg0: (arg0: O) => A): Internal.RecordCodecBuilder<O, A>;
        ap<E>(arg0: Internal.MapDecoder<(arg0: A) => E>): Internal.MapDecoder<E>;
        flatMap<B>(arg0: (arg0: A) => Internal.DataResult<B>): Internal.MapDecoder<B>;
        codec(): Internal.Codec<A>;
        static unit<A>(arg0: () => A): Internal.MapCodec<A>;
        static unit<A>(arg0: A): Internal.MapCodec<A>;
        orElseGet(arg0: Internal.UnaryOperator<string>, arg1: () => A): Internal.MapCodec<A>;
        orElseGet(arg0: (arg0: string) => void, arg1: () => A): Internal.MapCodec<A>;
        orElseGet(arg0: () => A): Internal.MapCodec<A>;
        stable(): Internal.MapCodec<A>;
        equals(arg0: object): boolean;
        mapResult(arg0: Internal.MapCodec$ResultFunction<A>): Internal.MapCodec<A>;
        toString(): string;
        set partial(arg0: () => A);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class EntityModel <T> extends net.minecraft.client.model.Model {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Date implements Internal.Serializable, Internal.Cloneable, Internal.Comparable<Internal.Date> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        static UTC(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): number;
        before(arg0: Internal.Date): boolean;
        notifyAll(): void;
        compareTo(arg0: object): number;
        compareTo(arg0: Internal.Date): number;
        notify(): void;
        hashCode(): number;
        static from(arg0: Internal.Instant): Internal.Date;
        after(arg0: Internal.Date): boolean;
        static parse(arg0: string): number;
        toInstant(): Internal.Instant;
        toGMTString(): string;
        equals(arg0: object): boolean;
        clone(): object;
        toString(): string;
        toLocaleString(): string;
        get time(): number;
        get hours(): number;
        set hours(arg0: number);
        set seconds(arg0: number);
        get date(): number;
        get month(): number;
        set time(arg0: number);
        set month(arg0: number);
        set minutes(arg0: number);
        set year(arg0: number);
        get day(): number;
        get minutes(): number;
        get timezoneOffset(): number;
        get seconds(): number;
        get year(): number;
        set date(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Stream <T> implements Internal.BaseStream<T, Internal.Stream<T>> {
        sequential(): S;
        takeWhile(arg0: (arg0: T) => boolean): Internal.Stream<T>;
        distinct(): Internal.Stream<T>;
        findFirst(): Internal.Optional<T>;
        skip(arg0: number): Internal.Stream<T>;
        toList(): Internal.List<T>;
        allMatch(arg0: (arg0: T) => boolean): boolean;
        mapMultiToDouble(arg0: (arg0: T, arg1: Internal.DoubleConsumer) => void): Internal.DoubleStream;
        mapMulti<R>(arg0: (arg0: T, arg1: (arg0: R) => void) => void): Internal.Stream<R>;
        flatMapToInt(arg0: (arg0: T) => Internal.IntStream): Internal.IntStream;
        min(arg0: Internal.Comparator<T>): Internal.Optional<T>;
        flatMapToLong(arg0: (arg0: T) => Internal.LongStream): Internal.LongStream;
        parallel(): S;
        mapToLong(arg0: Internal.ToLongFunction<T>): Internal.LongStream;
        noneMatch(arg0: (arg0: T) => boolean): boolean;
        findAny(): Internal.Optional<T>;
        isParallel(): boolean;
        limit(arg0: number): Internal.Stream<T>;
        toArray(): object[];
        toArray<A>(arg0: Internal.IntFunction<A[]>): A[];
        forEachOrdered(arg0: (arg0: T) => void): void;
        close(): void;
        anyMatch(arg0: (arg0: T) => boolean): boolean;
        map<R>(arg0: (arg0: T) => R): Internal.Stream<R>;
        mapToDouble(arg0: Internal.ToDoubleFunction<T>): Internal.DoubleStream;
        unordered(): S;
        mapMultiToLong(arg0: (arg0: T, arg1: Internal.LongConsumer) => void): Internal.LongStream;
        mapMultiToInt(arg0: (arg0: T, arg1: Internal.IntConsumer) => void): Internal.IntStream;
        reduce<U>(arg0: U, arg1: (arg0: U, arg1: T) => U, arg2: Internal.BinaryOperator<U>): U;
        reduce(arg0: T, arg1: Internal.BinaryOperator<T>): T;
        reduce(arg0: Internal.BinaryOperator<T>): Internal.Optional<T>;
        max(arg0: Internal.Comparator<T>): Internal.Optional<T>;
        forEach(arg0: (arg0: T) => void): void;
        count(): number;
        dropWhile(arg0: (arg0: T) => boolean): Internal.Stream<T>;
        flatMapToDouble(arg0: (arg0: T) => Internal.DoubleStream): Internal.DoubleStream;
        peek(arg0: (arg0: T) => void): Internal.Stream<T>;
        flatMap<R>(arg0: (arg0: T) => Internal.Stream<R>): Internal.Stream<R>;
        filter(arg0: (arg0: T) => boolean): Internal.Stream<T>;
        onClose(arg0: Internal.Runnable): S;
        sorted(arg0: Internal.Comparator<T>): Internal.Stream<T>;
        sorted(): Internal.Stream<T>;
        mapToInt(arg0: Internal.ToIntFunction<T>): Internal.IntStream;
        collect<R>(arg0: () => R, arg1: (arg0: R, arg1: T) => void, arg2: (arg0: R, arg1: R) => void): R;
        collect<R, A>(arg0: Internal.Collector<T, A, R>): R;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Locale$FilteringMode extends Internal.Enum<Internal.Locale$FilteringMode> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(arg0: string): Internal.Locale$FilteringMode;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.Locale$FilteringMode[];
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly IGNORE_EXTENDED_RANGES : Internal.Locale$FilteringMode;
        static readonly MAP_EXTENDED_RANGES : Internal.Locale$FilteringMode;
        static readonly AUTOSELECT_FILTERING : Internal.Locale$FilteringMode;
        static readonly REJECT_EXTENDED_RANGES : Internal.Locale$FilteringMode;
        static readonly EXTENDED_FILTERING : Internal.Locale$FilteringMode;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ModuleDescriptor$Opens$Modifier extends Internal.Enum<Internal.ModuleDescriptor$Opens$Modifier> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(arg0: string): Internal.ModuleDescriptor$Opens$Modifier;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.ModuleDescriptor$Opens$Modifier[];
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly SYNTHETIC : Internal.ModuleDescriptor$Opens$Modifier;
        static readonly MANDATED : Internal.ModuleDescriptor$Opens$Modifier;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ItemTransforms$TransformType extends Internal.Enum<Internal.ItemTransforms$TransformType> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(arg0: string): Internal.ItemTransforms$TransformType;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.ItemTransforms$TransformType[];
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly HEAD : Internal.ItemTransforms$TransformType;
        static readonly THIRD_PERSON_LEFT_HAND : Internal.ItemTransforms$TransformType;
        static readonly THIRD_PERSON_RIGHT_HAND : Internal.ItemTransforms$TransformType;
        static readonly FIRST_PERSON_RIGHT_HAND : Internal.ItemTransforms$TransformType;
        static readonly GROUND : Internal.ItemTransforms$TransformType;
        static readonly FIRST_PERSON_LEFT_HAND : Internal.ItemTransforms$TransformType;
        static readonly FIXED : Internal.ItemTransforms$TransformType;
        static readonly GUI : Internal.ItemTransforms$TransformType;
        static readonly NONE : Internal.ItemTransforms$TransformType;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class Stages {
        add(stage: string): boolean;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        set(stage: string, enabled: boolean): boolean;
        static added(event: (arg0: Internal.StageChangeEvent) => void): void;
        notifyAll(): void;
        static invokeAdded(stages: Internal.Stages, stage: string): void;
        replace(stages: Internal.Collection<string>): void;
        clear(): boolean;
        toggle(stage: string): boolean;
        addNoUpdate(arg0: string): boolean;
        sync(): void;
        notify(): void;
        remove(stage: string): boolean;
        static removed(event: (arg0: Internal.StageChangeEvent) => void): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        static get(player: Internal.Player): Internal.Stages;
        toString(): string;
        static invokeRemoved(stages: Internal.Stages, stage: string): void;
        static overrideCreation(event: (arg0: Internal.StageCreationEvent) => void): void;
        has(stage: string): boolean;
        removeNoUpdate(arg0: string): boolean;
        readonly player : Internal.Player;
        get all(): Internal.Collection<string>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Clearable {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class NetworkEvent$PacketDispatcher {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        sendPacket(arg0: ResourceLocation, arg1: Internal.FriendlyByteBuf): void;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ScreenAccessor {
        balm_getChildren(): Internal.List<Internal.GuiEventListener>;
        balm_getRenderables(): Internal.List<Internal.Widget>;
        balm_getNarratables(): Internal.List<Internal.NarratableEntry>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface MessageSizeEstimator {
        newHandle(): Internal.MessageSizeEstimator$Handle;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface FileAttribute <T> {
        name(): string;
        value(): T;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ItemEntityAccess {
        set age(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ModuleDescriptor$Builder {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        mainClass(arg0: string): Internal.ModuleDescriptor$Builder;
        exports(arg0: string): Internal.ModuleDescriptor$Builder;
        exports(arg0: Internal.Set<Internal.ModuleDescriptor$Exports$Modifier>, arg1: string, arg2: Internal.Set<string>): Internal.ModuleDescriptor$Builder;
        exports(arg0: string, arg1: Internal.Set<string>): Internal.ModuleDescriptor$Builder;
        exports(arg0: Internal.Set<Internal.ModuleDescriptor$Exports$Modifier>, arg1: string): Internal.ModuleDescriptor$Builder;
        exports(arg0: Internal.ModuleDescriptor$Exports): Internal.ModuleDescriptor$Builder;
        notifyAll(): void;
        packages(arg0: Internal.Set<string>): Internal.ModuleDescriptor$Builder;
        version(arg0: string): Internal.ModuleDescriptor$Builder;
        version(arg0: Internal.ModuleDescriptor$Version): Internal.ModuleDescriptor$Builder;
        notify(): void;
        build(): Internal.ModuleDescriptor;
        hashCode(): number;
        provides(arg0: Internal.ModuleDescriptor$Provides): Internal.ModuleDescriptor$Builder;
        provides(arg0: string, arg1: Internal.List<string>): Internal.ModuleDescriptor$Builder;
        equals(arg0: object): boolean;
        opens(arg0: string): Internal.ModuleDescriptor$Builder;
        opens(arg0: Internal.Set<Internal.ModuleDescriptor$Opens$Modifier>, arg1: string, arg2: Internal.Set<string>): Internal.ModuleDescriptor$Builder;
        opens(arg0: string, arg1: Internal.Set<string>): Internal.ModuleDescriptor$Builder;
        opens(arg0: Internal.ModuleDescriptor$Opens): Internal.ModuleDescriptor$Builder;
        opens(arg0: Internal.Set<Internal.ModuleDescriptor$Opens$Modifier>, arg1: string): Internal.ModuleDescriptor$Builder;
        toString(): string;
        uses(arg0: string): Internal.ModuleDescriptor$Builder;
        requires(arg0: Internal.ModuleDescriptor$Requires): Internal.ModuleDescriptor$Builder;
        requires(arg0: Internal.Set<Internal.ModuleDescriptor$Requires$Modifier>, arg1: string, arg2: Internal.ModuleDescriptor$Version): Internal.ModuleDescriptor$Builder;
        requires(arg0: string): Internal.ModuleDescriptor$Builder;
        requires(arg0: Internal.Set<Internal.ModuleDescriptor$Requires$Modifier>, arg1: string): Internal.ModuleDescriptor$Builder;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ChunkPos {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IForgeRegistryEntry <V> {
        get registryType(): Internal.Class<V>;
        get registryName(): ResourceLocation;
        set registryName(arg0: ResourceLocation);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface BackpackedInventoryAccess {
        get backpackedInventory(): Internal.BackpackInventory;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ConditionsContainer <B> {
        killerPredicate(arg0: (arg0: Internal.EntityJS) => boolean): B;
        survivesExplosion(): B;
        addCondition(arg0: Internal.LootItemCondition$Builder): B;
        addCondition(arg0: Internal.LootItemCondition): B;
        matchFluid(arg0: string): B;
        customDistanceToPlayer(arg0: (arg0: Internal.DistancePredicateBuilder) => void): B;
        not(arg0: (arg0: Internal.NotConditionBuilder) => void): B;
        directKillerPredicate(arg0: (arg0: Internal.EntityJS) => boolean): B;
        matchEquip(arg0: EquipmentSlot, arg1: Internal.IngredientJS): B;
        and(arg0: (arg0: Internal.AndConditionBuilder) => void): B;
        matchLoot(arg0: Internal.IngredientJS): B;
        matchLoot(arg0: Internal.IngredientJS, arg1: boolean): B;
        anyBiome(arg0: string[]): B;
        distanceToKiller(arg0: Internal.MinMaxBounds$Doubles): B;
        matchEntity(arg0: (arg0: Internal.EntityPredicateBuilderJS) => void): B;
        entityPredicate(arg0: (arg0: Internal.EntityJS) => boolean): B;
        anyDimension(arg0: ResourceLocation[]): B;
        killedByPlayer(): B;
        or(arg0: (arg0: Internal.OrConditionBuilder) => void): B;
        randomChance(arg0: number): B;
        timeCheck(arg0: number, arg1: number): B;
        timeCheck(arg0: number, arg1: number, arg2: number): B;
        matchOffHand(arg0: Internal.IngredientJS): B;
        playerPredicate(arg0: (arg0: Internal.PlayerJS<object>) => boolean): B;
        weatherCheck(arg0: Map<string, boolean>): B;
        matchDirectKiller(arg0: (arg0: Internal.EntityPredicateBuilderJS) => void): B;
        matchBlockState(arg0: Internal.Block, arg1: Map<string, string>): B;
        matchMainHand(arg0: Internal.IngredientJS): B;
        matchPlayer(arg0: (arg0: Internal.EntityPredicateBuilderJS) => void): B;
        lightLevel(arg0: number, arg1: number): B;
        biome(arg0: string[]): B;
        customCondition(arg0: Internal.JsonObject): B;
        matchKiller(arg0: (arg0: Internal.EntityPredicateBuilderJS) => void): B;
        randomChanceWithLooting(arg0: number, arg1: number): B;
        hasAnyStage(arg0: string[]): B;
        randomChanceWithEnchantment(arg0: Internal.Enchantment, arg1: number[]): B;
        matchDamageSource(arg0: (arg0: Internal.DamageSourcePredicateBuilderJS) => void): B;
        anyStructure(arg0: ResourceLocation[], arg1: boolean): B;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Package extends Internal.NamedPackage implements Internal.AnnotatedElement {
        isSealed(arg0: Internal.URL): boolean;
        isSealed(): boolean;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        static getPackage(arg0: string): Internal.Package;
        isAnnotationPresent(arg0: Internal.Class<Internal.Annotation>): boolean;
        notifyAll(): void;
        isCompatibleWith(arg0: string): boolean;
        notify(): void;
        getAnnotationsByType<A>(arg0: Internal.Class<A>): A[];
        getDeclaredAnnotationsByType<A>(arg0: Internal.Class<A>): A[];
        getAnnotation<A>(arg0: Internal.Class<A>): A;
        hashCode(): number;
        equals(arg0: object): boolean;
        getDeclaredAnnotation<A>(arg0: Internal.Class<A>): A;
        toString(): string;
        get name(): string;
        get specificationTitle(): string;
        get implementationTitle(): string;
        get annotations(): Internal.Annotation[];
        get specificationVendor(): string;
        get declaredAnnotations(): Internal.Annotation[];
        get packages(): Internal.Package[];
        get specificationVersion(): string;
        get implementationVendor(): string;
        get implementationVersion(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Predicate <T> {
        or(arg0: (arg0: T) => boolean): (arg0: T) => boolean;
        test(arg0: T): boolean;
        and(arg0: (arg0: T) => boolean): (arg0: T) => boolean;
        negate(): (arg0: T) => boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Cancellable {
        cancel(): void;
        isCancelled(): boolean;
        isCancellable(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class DateTimeFormatter {
        withLocale(arg0: Internal.Locale): Internal.DateTimeFormatter;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        parseBest(arg0: Internal.CharSequence, arg1: Internal.TemporalQuery<object>[]): Internal.TemporalAccessor;
        static ofLocalizedDateTime(arg0: Internal.FormatStyle): Internal.DateTimeFormatter;
        static ofLocalizedDateTime(arg0: Internal.FormatStyle, arg1: Internal.FormatStyle): Internal.DateTimeFormatter;
        notifyAll(): void;
        static ofPattern(arg0: string): Internal.DateTimeFormatter;
        static ofPattern(arg0: string, arg1: Internal.Locale): Internal.DateTimeFormatter;
        notify(): void;
        static ofLocalizedDate(arg0: Internal.FormatStyle): Internal.DateTimeFormatter;
        formatTo(arg0: Internal.TemporalAccessor, arg1: Internal.Appendable): void;
        static parsedLeapSecond(): Internal.TemporalQuery<boolean>;
        hashCode(): number;
        withChronology(arg0: Internal.Chronology): Internal.DateTimeFormatter;
        withDecimalStyle(arg0: Internal.DecimalStyle): Internal.DateTimeFormatter;
        withZone(arg0: Internal.ZoneId): Internal.DateTimeFormatter;
        localizedBy(arg0: Internal.Locale): Internal.DateTimeFormatter;
        static parsedExcessDays(): Internal.TemporalQuery<Internal.Period>;
        withResolverStyle(arg0: Internal.ResolverStyle): Internal.DateTimeFormatter;
        format(arg0: Internal.TemporalAccessor): string;
        parse(arg0: Internal.CharSequence, arg1: Internal.ParsePosition): Internal.TemporalAccessor;
        parse(arg0: Internal.CharSequence): Internal.TemporalAccessor;
        parse<T>(arg0: Internal.CharSequence, arg1: Internal.TemporalQuery<T>): T;
        toFormat(arg0: Internal.TemporalQuery<object>): Internal.Format;
        toFormat(): Internal.Format;
        static ofLocalizedTime(arg0: Internal.FormatStyle): Internal.DateTimeFormatter;
        equals(arg0: object): boolean;
        toString(): string;
        withResolverFields(arg0: Internal.TemporalField[]): Internal.DateTimeFormatter;
        withResolverFields(arg0: Internal.Set<Internal.TemporalField>): Internal.DateTimeFormatter;
        parseUnresolved(arg0: Internal.CharSequence, arg1: Internal.ParsePosition): Internal.TemporalAccessor;
        static readonly ISO_OFFSET_TIME : Internal.DateTimeFormatter;
        static readonly ISO_LOCAL_DATE_TIME : Internal.DateTimeFormatter;
        static readonly RFC_1123_DATE_TIME : Internal.DateTimeFormatter;
        static readonly ISO_INSTANT : Internal.DateTimeFormatter;
        static readonly ISO_ZONED_DATE_TIME : Internal.DateTimeFormatter;
        static readonly ISO_OFFSET_DATE_TIME : Internal.DateTimeFormatter;
        static readonly ISO_DATE_TIME : Internal.DateTimeFormatter;
        static readonly ISO_DATE : Internal.DateTimeFormatter;
        static readonly ISO_TIME : Internal.DateTimeFormatter;
        static readonly ISO_LOCAL_TIME : Internal.DateTimeFormatter;
        static readonly ISO_OFFSET_DATE : Internal.DateTimeFormatter;
        static readonly ISO_ORDINAL_DATE : Internal.DateTimeFormatter;
        static readonly ISO_LOCAL_DATE : Internal.DateTimeFormatter;
        static readonly BASIC_ISO_DATE : Internal.DateTimeFormatter;
        static readonly ISO_WEEK_DATE : Internal.DateTimeFormatter;
        get resolverFields(): Internal.Set<Internal.TemporalField>;
        get chronology(): Internal.Chronology;
        get resolverStyle(): Internal.ResolverStyle;
        get zone(): Internal.ZoneId;
        get decimalStyle(): Internal.DecimalStyle;
        get locale(): Internal.Locale;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ValueRange implements Internal.Serializable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        notify(): void;
        isIntValue(): boolean;
        isValidValue(arg0: number): boolean;
        hashCode(): number;
        static of(arg0: number, arg1: number): Internal.ValueRange;
        static of(arg0: number, arg1: number, arg2: number, arg3: number): Internal.ValueRange;
        static of(arg0: number, arg1: number, arg2: number): Internal.ValueRange;
        equals(arg0: object): boolean;
        checkValidIntValue(arg0: number, arg1: Internal.TemporalField): number;
        checkValidValue(arg0: number, arg1: Internal.TemporalField): number;
        toString(): string;
        isFixed(): boolean;
        isValidIntValue(arg0: number): boolean;
        get maximum(): number;
        get smallestMaximum(): number;
        get largestMinimum(): number;
        get minimum(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Script {
        exec(arg0: Internal.Context, arg1: Internal.Scriptable): object;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class EntityClassGroup {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        contains(entityClass: Internal.Class<object>): boolean;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        clear(): void;
        toString(): string;
        notify(): void;
        static readonly MINECART_BOAT_LIKE_COLLISION : Internal.EntityClassGroup;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class FileChannel$MapMode {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        static readonly READ_ONLY : Internal.FileChannel$MapMode;
        static readonly READ_WRITE : Internal.FileChannel$MapMode;
        static readonly PRIVATE : Internal.FileChannel$MapMode;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface CustomIngredientActionCallback {
        transform(arg0: Internal.ItemStackJS, arg1: number, arg2: Internal.InventoryJS): object;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class DrawBuffer {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hasVertices(): boolean;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        reset(): void;
        toString(): string;
        inject(arg0: Internal.BufferBuilderExtension): void;
        begin(arg0: number): Internal.DirectVertexConsumer;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class AccessibleObject implements Internal.AnnotatedElement {
        trySetAccessible(): boolean;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isAccessible(): boolean;
        static setAccessible(arg0: Internal.AccessibleObject[], arg1: boolean): void;
        isAnnotationPresent(arg0: Internal.Class<Internal.Annotation>): boolean;
        notifyAll(): void;
        notify(): void;
        getAnnotationsByType<T>(arg0: Internal.Class<T>): T[];
        getDeclaredAnnotationsByType<T>(arg0: Internal.Class<T>): T[];
        getAnnotation<T>(arg0: Internal.Class<T>): T;
        hashCode(): number;
        equals(arg0: object): boolean;
        canAccess(arg0: object): boolean;
        getDeclaredAnnotation<T>(arg0: Internal.Class<T>): T;
        toString(): string;
        set accessible(arg0: boolean);
        get annotations(): Internal.Annotation[];
        get declaredAnnotations(): Internal.Annotation[];
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class SimpleChannelInboundHandler <I> extends Internal.ChannelInboundHandlerAdapter {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        channelReadComplete(arg0: Internal.ChannelHandlerContext): void;
        notifyAll(): void;
        exceptionCaught(arg0: Internal.ChannelHandlerContext, arg1: Internal.Throwable): void;
        channelActive(arg0: Internal.ChannelHandlerContext): void;
        handlerAdded(arg0: Internal.ChannelHandlerContext): void;
        isSharable(): boolean;
        notify(): void;
        handlerRemoved(arg0: Internal.ChannelHandlerContext): void;
        channelWritabilityChanged(arg0: Internal.ChannelHandlerContext): void;
        channelRead(arg0: Internal.ChannelHandlerContext, arg1: object): void;
        channelInactive(arg0: Internal.ChannelHandlerContext): void;
        channelUnregistered(arg0: Internal.ChannelHandlerContext): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        userEventTriggered(arg0: Internal.ChannelHandlerContext, arg1: object): void;
        channelRegistered(arg0: Internal.ChannelHandlerContext): void;
        acceptInboundMessage(arg0: object): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class ByteBuffer extends Internal.Buffer implements Internal.Comparable<Internal.ByteBuffer> {
        asIntBuffer(): Internal.IntBuffer;
        compact(): Internal.ByteBuffer;
        asLongBuffer(): Internal.LongBuffer;
        compareTo(arg0: object): number;
        compareTo(arg0: Internal.ByteBuffer): number;
        put(arg0: Internal.ByteBuffer): Internal.ByteBuffer;
        put(arg0: number, arg1: number): Internal.ByteBuffer;
        put(arg0: number, arg1: Internal.ByteBuffer, arg2: number, arg3: number): Internal.ByteBuffer;
        put(arg0: number[]): Internal.ByteBuffer;
        put(arg0: number, arg1: number[]): Internal.ByteBuffer;
        put(arg0: number, arg1: number[], arg2: number, arg3: number): Internal.ByteBuffer;
        put(arg0: number): Internal.ByteBuffer;
        put(arg0: number[], arg1: number, arg2: number): Internal.ByteBuffer;
        slice(): Internal.ByteBuffer;
        slice(): Internal.Buffer;
        slice(arg0: number, arg1: number): Internal.ByteBuffer;
        slice(arg0: number, arg1: number): Internal.Buffer;
        limit(arg0: number): Internal.Buffer;
        limit(arg0: number): Internal.ByteBuffer;
        limit(): number;
        order(): Internal.ByteOrder;
        order(arg0: Internal.ByteOrder): Internal.ByteBuffer;
        asFloatBuffer(): Internal.FloatBuffer;
        asCharBuffer(): Internal.CharBuffer;
        static allocateDirect(arg0: number): Internal.ByteBuffer;
        putInt(arg0: number, arg1: number): Internal.ByteBuffer;
        putInt(arg0: number): Internal.ByteBuffer;
        duplicate(): Internal.ByteBuffer;
        duplicate(): Internal.Buffer;
        remaining(): number;
        putFloat(arg0: number): Internal.ByteBuffer;
        putFloat(arg0: number, arg1: number): Internal.ByteBuffer;
        getInt(arg0: number): number;
        getChar(arg0: number): string;
        static allocate(arg0: number): Internal.ByteBuffer;
        reset(): Internal.ByteBuffer;
        reset(): Internal.Buffer;
        position(arg0: number): Internal.ByteBuffer;
        position(arg0: number): Internal.Buffer;
        position(): number;
        asShortBuffer(): Internal.ShortBuffer;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        putDouble(arg0: number, arg1: number): Internal.ByteBuffer;
        putDouble(arg0: number): Internal.ByteBuffer;
        getDouble(arg0: number): number;
        getFloat(arg0: number): number;
        putLong(arg0: number, arg1: number): Internal.ByteBuffer;
        putLong(arg0: number): Internal.ByteBuffer;
        notify(): void;
        asReadOnlyBuffer(): Internal.ByteBuffer;
        capacity(): number;
        isReadOnly(): boolean;
        asDoubleBuffer(): Internal.DoubleBuffer;
        array(): number[];
        array(): object;
        hashCode(): number;
        get(arg0: number, arg1: number[], arg2: number, arg3: number): Internal.ByteBuffer;
        get(arg0: number): number;
        get(arg0: number[], arg1: number, arg2: number): Internal.ByteBuffer;
        get(): number;
        get(arg0: number, arg1: number[]): Internal.ByteBuffer;
        get(arg0: number[]): Internal.ByteBuffer;
        arrayOffset(): number;
        putShort(arg0: number): Internal.ByteBuffer;
        putShort(arg0: number, arg1: number): Internal.ByteBuffer;
        flip(): Internal.Buffer;
        flip(): Internal.ByteBuffer;
        hasArray(): boolean;
        getShort(arg0: number): number;
        putChar(arg0: number, arg1: string): Internal.ByteBuffer;
        putChar(arg0: string): Internal.ByteBuffer;
        hasRemaining(): boolean;
        clear(): Internal.ByteBuffer;
        clear(): Internal.Buffer;
        getLong(arg0: number): number;
        alignmentOffset(arg0: number, arg1: number): number;
        rewind(): Internal.Buffer;
        rewind(): Internal.ByteBuffer;
        mismatch(arg0: Internal.ByteBuffer): number;
        equals(arg0: object): boolean;
        toString(): string;
        alignedSlice(arg0: number): Internal.ByteBuffer;
        isDirect(): boolean;
        static wrap(arg0: number[]): Internal.ByteBuffer;
        static wrap(arg0: number[], arg1: number, arg2: number): Internal.ByteBuffer;
        mark(): Internal.Buffer;
        mark(): Internal.ByteBuffer;
        get int(): number;
        get char(): string;
        get double(): number;
        get float(): number;
        get short(): number;
        get long(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class FloatBuffer extends Internal.Buffer implements Internal.Comparable<Internal.FloatBuffer> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        compact(): Internal.FloatBuffer;
        notifyAll(): void;
        compareTo(arg0: object): number;
        compareTo(arg0: Internal.FloatBuffer): number;
        notify(): void;
        asReadOnlyBuffer(): Internal.FloatBuffer;
        put(arg0: number[]): Internal.FloatBuffer;
        put(arg0: number, arg1: number[], arg2: number, arg3: number): Internal.FloatBuffer;
        put(arg0: number, arg1: number[]): Internal.FloatBuffer;
        put(arg0: number[], arg1: number, arg2: number): Internal.FloatBuffer;
        put(arg0: number, arg1: Internal.FloatBuffer, arg2: number, arg3: number): Internal.FloatBuffer;
        put(arg0: Internal.FloatBuffer): Internal.FloatBuffer;
        put(arg0: number, arg1: number): Internal.FloatBuffer;
        put(arg0: number): Internal.FloatBuffer;
        capacity(): number;
        isReadOnly(): boolean;
        slice(): Internal.Buffer;
        slice(): Internal.FloatBuffer;
        slice(arg0: number, arg1: number): Internal.Buffer;
        slice(arg0: number, arg1: number): Internal.FloatBuffer;
        array(): number[];
        array(): object;
        hashCode(): number;
        get(): number;
        get(arg0: number, arg1: number[]): Internal.FloatBuffer;
        get(arg0: number): number;
        get(arg0: number, arg1: number[], arg2: number, arg3: number): Internal.FloatBuffer;
        get(arg0: number[], arg1: number, arg2: number): Internal.FloatBuffer;
        get(arg0: number[]): Internal.FloatBuffer;
        limit(arg0: number): Internal.FloatBuffer;
        limit(arg0: number): Internal.Buffer;
        limit(): number;
        arrayOffset(): number;
        flip(): Internal.Buffer;
        flip(): Internal.FloatBuffer;
        order(): Internal.ByteOrder;
        hasArray(): boolean;
        hasRemaining(): boolean;
        clear(): Internal.Buffer;
        clear(): Internal.FloatBuffer;
        duplicate(): Internal.FloatBuffer;
        duplicate(): Internal.Buffer;
        remaining(): number;
        static allocate(arg0: number): Internal.FloatBuffer;
        rewind(): Internal.Buffer;
        rewind(): Internal.FloatBuffer;
        mismatch(arg0: Internal.FloatBuffer): number;
        equals(arg0: object): boolean;
        reset(): Internal.Buffer;
        reset(): Internal.FloatBuffer;
        toString(): string;
        position(arg0: number): Internal.FloatBuffer;
        position(arg0: number): Internal.Buffer;
        position(): number;
        isDirect(): boolean;
        static wrap(arg0: number[]): Internal.FloatBuffer;
        static wrap(arg0: number[], arg1: number, arg2: number): Internal.FloatBuffer;
        mark(): Internal.Buffer;
        mark(): Internal.FloatBuffer;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Heightmap$Types extends Internal.Enum<Internal.Heightmap$Types> implements Internal.StringRepresentable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(arg0: string): Internal.Heightmap$Types;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.Heightmap$Types[];
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly OCEAN_FLOOR : Internal.Heightmap$Types;
        static readonly MOTION_BLOCKING_NO_LEAVES : Internal.Heightmap$Types;
        static readonly MOTION_BLOCKING : Internal.Heightmap$Types;
        static readonly WORLD_SURFACE : Internal.Heightmap$Types;
        static readonly OCEAN_FLOOR_WG : Internal.Heightmap$Types;
        static readonly WORLD_SURFACE_WG : Internal.Heightmap$Types;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class EntityArrayList extends Internal.ArrayList<Internal.EntityJS> implements Internal.MessageSender {
        sendData(channel: string, data: Internal.CompoundTag): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        tell(message: Internal.Component): void;
        notify(): void;
        remove(arg0: object): boolean;
        remove(arg0: number): E;
        runCommandSilent(command: string): number;
        hashCode(): number;
        get(arg0: number): E;
        playSound(id: Internal.SoundEvent, volume: number, pitch: number): void;
        playSound(id: Internal.SoundEvent): void;
        toArray<T>(arg0: T[]): T[];
        toArray(): object[];
        runCommand(command: string): number;
        indexOf(arg0: object): number;
        add(arg0: E): boolean;
        add(arg0: number, arg1: E): void;
        trimToSize(): void;
        set(arg0: number, arg1: E): E;
        isEmpty(): boolean;
        clear(): void;
        kill(): void;
        filter(filter: (arg0: Internal.EntityJS) => boolean): Internal.EntityArrayList;
        lastIndexOf(arg0: object): number;
        contains(arg0: object): boolean;
        size(): number;
        equals(arg0: object): boolean;
        clone(): object;
        toString(): string;
        ensureCapacity(arg0: number): void;
        get world(): Internal.LevelJS;
        get name(): Internal.Text;
        get first(): Internal.EntityJS;
        set statusMessage(message: Internal.Component);
        get level(): Internal.LevelJS;
        get displayName(): Internal.Text;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IEventHandler {
        onEvent(arg0: Internal.EventJS): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class LootActionsBuilderJS implements Internal.ConditionsContainer<Internal.LootActionsBuilderJS> {
        killerPredicate(arg0: (arg0: Internal.EntityJS) => boolean): B;
        thenRemove(arg0: Internal.IngredientJS): Internal.LootActionsBuilderJS;
        addCondition(arg0: Internal.LootItemCondition): Internal.LootActionsBuilderJS;
        addCondition(arg0: Internal.LootItemCondition): Internal.ConditionsContainer<any>;
        addCondition(arg0: Internal.LootItemCondition$Builder): B;
        getLogName(arg0: string): string;
        directKillerPredicate(arg0: (arg0: Internal.EntityJS) => boolean): B;
        thenAddWeighted(arg0: Internal.ItemStackJS[]): Internal.LootActionsBuilderJS;
        thenAddWeighted(arg0: Internal.MinMaxBounds$Ints, arg1: Internal.ItemStackJS[]): Internal.LootActionsBuilderJS;
        thenAddWeighted(arg0: Internal.MinMaxBounds$Ints, arg1: boolean, arg2: Internal.ItemStackJS[]): Internal.LootActionsBuilderJS;
        matchLoot(arg0: Internal.IngredientJS): B;
        matchLoot(arg0: Internal.IngredientJS, arg1: boolean): B;
        anyBiome(arg0: string[]): B;
        entityPredicate(arg0: (arg0: Internal.EntityJS) => boolean): B;
        thenApply(arg0: (arg0: Internal.LootContextJS) => void): Internal.LootActionsBuilderJS;
        anyDimension(arg0: ResourceLocation[]): B;
        killedByPlayer(): B;
        randomChance(arg0: number): B;
        timeCheck(arg0: number, arg1: number): B;
        timeCheck(arg0: number, arg1: number, arg2: number): B;
        matchOffHand(arg0: Internal.IngredientJS): B;
        weatherCheck(arg0: Map<string, boolean>): B;
        matchDirectKiller(arg0: (arg0: Internal.EntityPredicateBuilderJS) => void): B;
        logName(arg0: string): Internal.LootActionsBuilderJS;
        biome(arg0: string[]): B;
        customCondition(arg0: Internal.JsonObject): B;
        randomChanceWithLooting(arg0: number, arg1: number): B;
        thenLightningStrike(arg0: boolean): Internal.LootActionsBuilderJS;
        matchDamageSource(arg0: (arg0: Internal.DamageSourcePredicateBuilderJS) => void): B;
        anyStructure(arg0: ResourceLocation[], arg1: boolean): B;
        thenModify(arg0: Internal.IngredientJS, arg1: (arg0: Internal.ItemStackJS) => Internal.ItemStackJS): Internal.LootActionsBuilderJS;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        survivesExplosion(): B;
        notifyAll(): void;
        thenAdd(arg0: Internal.ItemStackJS[]): Internal.LootActionsBuilderJS;
        matchFluid(arg0: string): B;
        customDistanceToPlayer(arg0: (arg0: Internal.DistancePredicateBuilder) => void): B;
        notify(): void;
        not(arg0: (arg0: Internal.NotConditionBuilder) => void): B;
        matchEquip(arg0: EquipmentSlot, arg1: Internal.IngredientJS): B;
        and(arg0: (arg0: Internal.AndConditionBuilder) => void): B;
        hashCode(): number;
        thenRollPool(arg0: Internal.MinMaxBounds$Ints, arg1: (arg0: Internal.LootActionsBuilderJS) => void): Internal.LootActionsBuilderJS;
        thenRollPool(arg0: (arg0: Internal.LootActionsBuilderJS) => void): Internal.LootActionsBuilderJS;
        distanceToKiller(arg0: Internal.MinMaxBounds$Doubles): B;
        matchEntity(arg0: (arg0: Internal.EntityPredicateBuilderJS) => void): B;
        or(arg0: (arg0: Internal.OrConditionBuilder) => void): B;
        playerPredicate(arg0: (arg0: Internal.PlayerJS<object>) => boolean): B;
        thenExplode(arg0: number, arg1: boolean, arg2: boolean): Internal.LootActionsBuilderJS;
        matchBlockState(arg0: Internal.Block, arg1: Map<string, string>): B;
        matchMainHand(arg0: Internal.IngredientJS): B;
        matchPlayer(arg0: (arg0: Internal.EntityPredicateBuilderJS) => void): B;
        lightLevel(arg0: number, arg1: number): B;
        equals(arg0: object): boolean;
        matchKiller(arg0: (arg0: Internal.EntityPredicateBuilderJS) => void): B;
        hasAnyStage(arg0: string[]): B;
        toString(): string;
        thenReplace(arg0: Internal.IngredientJS, arg1: Internal.ItemStackJS): Internal.LootActionsBuilderJS;
        randomChanceWithEnchantment(arg0: Internal.Enchantment, arg1: number[]): B;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class ForwardingObject {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface WorldGenLevel implements Internal.ServerLevelAccessor {
        isAreaLoaded(arg0: BlockPos, arg1: number): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class EntityPredicate {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ChannelOutboundInvoker {
        disconnect(arg0: Internal.ChannelPromise): Internal.ChannelFuture;
        disconnect(): Internal.ChannelFuture;
        newProgressivePromise(): Internal.ChannelProgressivePromise;
        read(): Internal.ChannelOutboundInvoker;
        deregister(): Internal.ChannelFuture;
        deregister(arg0: Internal.ChannelPromise): Internal.ChannelFuture;
        newFailedFuture(arg0: Internal.Throwable): Internal.ChannelFuture;
        writeAndFlush(arg0: object, arg1: Internal.ChannelPromise): Internal.ChannelFuture;
        writeAndFlush(arg0: object): Internal.ChannelFuture;
        bind(arg0: Internal.SocketAddress): Internal.ChannelFuture;
        bind(arg0: Internal.SocketAddress, arg1: Internal.ChannelPromise): Internal.ChannelFuture;
        newSucceededFuture(): Internal.ChannelFuture;
        voidPromise(): Internal.ChannelPromise;
        flush(): Internal.ChannelOutboundInvoker;
        close(arg0: Internal.ChannelPromise): Internal.ChannelFuture;
        close(): Internal.ChannelFuture;
        write(arg0: object): Internal.ChannelFuture;
        write(arg0: object, arg1: Internal.ChannelPromise): Internal.ChannelFuture;
        connect(arg0: Internal.SocketAddress, arg1: Internal.SocketAddress, arg2: Internal.ChannelPromise): Internal.ChannelFuture;
        connect(arg0: Internal.SocketAddress, arg1: Internal.ChannelPromise): Internal.ChannelFuture;
        connect(arg0: Internal.SocketAddress): Internal.ChannelFuture;
        connect(arg0: Internal.SocketAddress, arg1: Internal.SocketAddress): Internal.ChannelFuture;
        newPromise(): Internal.ChannelPromise;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Reference2ReferenceFunction <K, V> implements it.unimi.dsi.fastutil.Function<K, V> {
        getOrDefault(arg0: object, arg1: V): V;
        andThenShort(arg0: Internal.Reference2ShortFunction<V>): Internal.Reference2ShortFunction<K>;
        composeByte(arg0: Internal.Byte2ReferenceFunction<K>): Internal.Byte2ReferenceFunction<V>;
        andThenInt(arg0: Internal.Reference2IntFunction<V>): Internal.Reference2IntFunction<K>;
        composeReference<T>(arg0: (arg0: T) => K): (arg0: T) => V;
        put(arg0: K, arg1: V): V;
        remove(arg0: object): V;
        defaultReturnValue(): V;
        defaultReturnValue(arg0: V): void;
        andThenDouble(arg0: Internal.Reference2DoubleFunction<V>): Internal.Reference2DoubleFunction<K>;
        andThenObject<T>(arg0: (arg0: V) => T): (arg0: K) => T;
        get(arg0: object): V;
        andThenLong(arg0: Internal.Reference2LongFunction<V>): Internal.Reference2LongFunction<K>;
        composeLong(arg0: Internal.Long2ReferenceFunction<K>): Internal.Long2ReferenceFunction<V>;
        andThenByte(arg0: Internal.Reference2ByteFunction<V>): Internal.Reference2ByteFunction<K>;
        andThenFloat(arg0: Internal.Reference2FloatFunction<V>): Internal.Reference2FloatFunction<K>;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        composeInt(arg0: Internal.Int2ReferenceFunction<K>): Internal.Int2ReferenceFunction<V>;
        clear(): void;
        composeFloat(arg0: Internal.Float2ReferenceFunction<K>): Internal.Float2ReferenceFunction<V>;
        andThenChar(arg0: Internal.Reference2CharFunction<V>): Internal.Reference2CharFunction<K>;
        composeObject<T>(arg0: (arg0: T) => K): (arg0: T) => V;
        size(): number;
        composeShort(arg0: Internal.Short2ReferenceFunction<K>): Internal.Short2ReferenceFunction<V>;
        andThenReference<T>(arg0: (arg0: V) => T): (arg0: K) => T;
        composeChar(arg0: Internal.Char2ReferenceFunction<K>): Internal.Char2ReferenceFunction<V>;
        composeDouble(arg0: Internal.Double2ReferenceFunction<K>): Internal.Double2ReferenceFunction<V>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface DoubleStream$Builder implements Internal.DoubleConsumer {
        add(arg0: number): Internal.DoubleStream$Builder;
        build(): Internal.DoubleStream;
        andThen(arg0: Internal.DoubleConsumer): Internal.DoubleConsumer;
        accept(arg0: number): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ConfigurableAutoFlush {
        set shouldAutoFlush(arg0: boolean);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface TemporalQuery <R> {
        queryFrom(arg0: Internal.TemporalAccessor): R;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class WorldBorder {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface GenericFutureListener <F> implements Internal.EventListener {
        operationComplete(arg0: F): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ItemStackKJS implements Internal.AsKJS {
        removeTagKJS(): void;
        asKJS(): object;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Int2ByteFunction implements it.unimi.dsi.fastutil.Function<number, number>, Internal.IntUnaryOperator {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        andThenShort(arg0: Internal.Byte2ShortFunction): Internal.Int2ShortFunction;
        composeByte(arg0: Internal.Byte2IntFunction): Internal.Byte2ByteFunction;
        andThenInt(arg0: Internal.Byte2IntFunction): Internal.Int2IntFunction;
        composeReference<T>(arg0: Internal.Reference2IntFunction<T>): Internal.Reference2ByteFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: number) => T;
        andThen(arg0: Internal.IntUnaryOperator): Internal.IntUnaryOperator;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: number): number;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: object): object;
        remove(arg0: object): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Byte2DoubleFunction): Internal.Int2DoubleFunction;
        andThenObject<T>(arg0: Internal.Byte2ObjectFunction<T>): Internal.Int2ObjectFunction<T>;
        get(arg0: object): number;
        get(arg0: object): object;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Byte2LongFunction): Internal.Int2LongFunction;
        composeLong(arg0: Internal.Long2IntFunction): Internal.Long2ByteFunction;
        andThenByte(arg0: Internal.Byte2ByteFunction): Internal.Int2ByteFunction;
        andThenFloat(arg0: Internal.Byte2FloatFunction): Internal.Int2FloatFunction;
        applyAsInt(arg0: number): number;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2IntFunction): Internal.Int2ByteFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2IntFunction): Internal.Float2ByteFunction;
        andThenChar(arg0: Internal.Byte2CharFunction): Internal.Int2CharFunction;
        composeObject<T>(arg0: Internal.Object2IntFunction<T>): Internal.Object2ByteFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => number;
        compose(arg0: Internal.IntUnaryOperator): Internal.IntUnaryOperator;
        composeShort(arg0: Internal.Short2IntFunction): Internal.Short2ByteFunction;
        andThenReference<T>(arg0: Internal.Byte2ReferenceFunction<T>): Internal.Int2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2IntFunction): Internal.Char2ByteFunction;
        composeDouble(arg0: Internal.Double2IntFunction): Internal.Double2ByteFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ClientConnectionEncryptionExtension {
        set upEncryption(arg0: Internal.SecretKey);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class RegistryAccess$RegistryHolder extends Internal.RegistryAccess {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class TwoHandedAnimation {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        isTwoHanded(): boolean;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        set twoHanded(arg0: boolean);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Stat <T> extends Internal.ObjectiveCriteria {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class LithiumStackList extends Internal.NonNullList<Internal.ItemStack> implements Internal.LithiumDefaultedList {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        clearSignalStrengthOverride(): void;
        hasSignalStrengthOverride(): boolean;
        beforeSlotCountChange(slot: number, newCount: number): void;
        changedInteractionConditions(): void;
        notify(): void;
        remove(arg0: number): object;
        remove(index: number): Internal.ItemStack;
        remove(arg0: object): boolean;
        runComparatorUpdatePatternOnFailedExtract(masterStackList: Internal.LithiumStackList, inventory: Internal.Container): void;
        setUnstableInteractionConditions(): void;
        changedALot(): void;
        hashCode(): number;
        get(arg0: number): E;
        toArray(): object[];
        toArray<T>(arg0: T[]): T[];
        indexOf(arg0: object): number;
        add(slot: number, element: Internal.ItemStack): void;
        add(arg0: number, arg1: object): void;
        add(arg0: E): boolean;
        set(arg0: number, arg1: object): object;
        set(index: number, element: Internal.ItemStack): Internal.ItemStack;
        isEmpty(): boolean;
        clear(): void;
        lastIndexOf(arg0: object): number;
        setReducedSignalStrengthOverride(): void;
        contains(arg0: object): boolean;
        size(): number;
        equals(arg0: object): boolean;
        getSignalStrength(inventory: Internal.Container): number;
        toString(): string;
        changed(): void;
        get delegate(): Internal.List<any>;
        get occupiedSlots(): number;
        get modCount(): number;
        get fullSlots(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ContinuationPending extends Internal.RuntimeException {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        printStackTrace(): void;
        printStackTrace(arg0: Internal.PrintStream): void;
        printStackTrace(arg0: Internal.PrintWriter): void;
        notifyAll(): void;
        initCause(arg0: Internal.Throwable): Internal.Throwable;
        notify(): void;
        addSuppressed(arg0: Internal.Throwable): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        fillInStackTrace(): Internal.Throwable;
        get localizedMessage(): string;
        get message(): string;
        get applicationState(): object;
        get cause(): Internal.Throwable;
        get continuation(): object;
        set stackTrace(arg0: Internal.StackTraceElement[]);
        get stackTrace(): Internal.StackTraceElement[];
        set applicationState(applicationState: object);
        get suppressed(): Internal.Throwable[];
        set continuation(continuation: Internal.NativeContinuation);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class DoubleBuffer extends Internal.Buffer implements Internal.Comparable<Internal.DoubleBuffer> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        compact(): Internal.DoubleBuffer;
        notifyAll(): void;
        compareTo(arg0: object): number;
        compareTo(arg0: Internal.DoubleBuffer): number;
        notify(): void;
        asReadOnlyBuffer(): Internal.DoubleBuffer;
        put(arg0: number[]): Internal.DoubleBuffer;
        put(arg0: number, arg1: number[], arg2: number, arg3: number): Internal.DoubleBuffer;
        put(arg0: number, arg1: number[]): Internal.DoubleBuffer;
        put(arg0: number[], arg1: number, arg2: number): Internal.DoubleBuffer;
        put(arg0: number, arg1: Internal.DoubleBuffer, arg2: number, arg3: number): Internal.DoubleBuffer;
        put(arg0: Internal.DoubleBuffer): Internal.DoubleBuffer;
        put(arg0: number, arg1: number): Internal.DoubleBuffer;
        put(arg0: number): Internal.DoubleBuffer;
        capacity(): number;
        isReadOnly(): boolean;
        slice(): Internal.Buffer;
        slice(): Internal.DoubleBuffer;
        slice(arg0: number, arg1: number): Internal.Buffer;
        slice(arg0: number, arg1: number): Internal.DoubleBuffer;
        array(): number[];
        array(): object;
        hashCode(): number;
        get(): number;
        get(arg0: number, arg1: number[]): Internal.DoubleBuffer;
        get(arg0: number): number;
        get(arg0: number, arg1: number[], arg2: number, arg3: number): Internal.DoubleBuffer;
        get(arg0: number[], arg1: number, arg2: number): Internal.DoubleBuffer;
        get(arg0: number[]): Internal.DoubleBuffer;
        limit(arg0: number): Internal.DoubleBuffer;
        limit(arg0: number): Internal.Buffer;
        limit(): number;
        arrayOffset(): number;
        flip(): Internal.Buffer;
        flip(): Internal.DoubleBuffer;
        order(): Internal.ByteOrder;
        hasArray(): boolean;
        hasRemaining(): boolean;
        clear(): Internal.Buffer;
        clear(): Internal.DoubleBuffer;
        duplicate(): Internal.DoubleBuffer;
        duplicate(): Internal.Buffer;
        remaining(): number;
        static allocate(arg0: number): Internal.DoubleBuffer;
        rewind(): Internal.Buffer;
        rewind(): Internal.DoubleBuffer;
        mismatch(arg0: Internal.DoubleBuffer): number;
        equals(arg0: object): boolean;
        reset(): Internal.Buffer;
        reset(): Internal.DoubleBuffer;
        toString(): string;
        position(arg0: number): Internal.DoubleBuffer;
        position(arg0: number): Internal.Buffer;
        position(): number;
        isDirect(): boolean;
        static wrap(arg0: number[]): Internal.DoubleBuffer;
        static wrap(arg0: number[], arg1: number, arg2: number): Internal.DoubleBuffer;
        mark(): Internal.Buffer;
        mark(): Internal.DoubleBuffer;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ConsoleJS {
        printObject(o: object, tree: boolean): void;
        printObject(o: object): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        infof(message: object, args: object[]): void;
        log(message: object): void;
        notifyAll(): void;
        errorf(message: string, args: object[]): void;
        error(message: string, throwable: Internal.Throwable): void;
        error(message: object): void;
        error(message: string, throwable: Internal.Throwable, skip: Internal.Pattern): void;
        notify(): void;
        debugf(message: string, args: object[]): void;
        trace(): void;
        flush(): void;
        hashCode(): number;
        warnf(message: string, args: object[]): void;
        info(message: object): void;
        group(): void;
        debug(message: object): void;
        printStackTrace(throwable: Internal.Throwable, skip: Internal.Pattern): void;
        shouldPrintDebug(): boolean;
        resetFile(): void;
        warn(message: object): void;
        warn(message: string, throwable: Internal.Throwable): void;
        warn(message: string, throwable: Internal.Throwable, skip: Internal.Pattern): void;
        groupEnd(): void;
        printClass(className: string): void;
        printClass(className: string, tree: boolean): void;
        equals(arg0: object): boolean;
        toString(): string;
        static SERVER : Internal.ConsoleJS;
        static STARTUP : Internal.ConsoleJS;
        static CLIENT : Internal.ConsoleJS;
        set muted(m: boolean);
        set writeToFile(m: boolean);
        set lineNumber(b: boolean);
        get scriptLine(): number;
        get muted(): boolean;
        get logger(): Internal.Logger;
        set debugEnabled(m: boolean);
        get debugEnabled(): boolean;
        get writeToFile(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ModelProperty <T> implements Internal.Predicate<T> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        or(arg0: (arg0: T) => boolean): (arg0: T) => boolean;
        test(arg0: T): boolean;
        and(arg0: (arg0: T) => boolean): (arg0: T) => boolean;
        negate(): (arg0: T) => boolean;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ToDoubleFunction <T> {
        applyAsDouble(arg0: T): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class LocalTime implements Internal.Temporal, Internal.TemporalAdjuster, Internal.Comparable<Internal.LocalTime>, Internal.Serializable {
        static ofInstant(arg0: Internal.Instant, arg1: Internal.ZoneId): Internal.LocalTime;
        minus(arg0: Internal.TemporalAmount): Internal.LocalTime;
        minus(arg0: Internal.TemporalAmount): Internal.Temporal;
        minus(arg0: number, arg1: Internal.TemporalUnit): Internal.Temporal;
        minus(arg0: number, arg1: Internal.TemporalUnit): Internal.LocalTime;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        plusHours(arg0: number): Internal.LocalTime;
        minusHours(arg0: number): Internal.LocalTime;
        notifyAll(): void;
        atDate(arg0: Internal.LocalDate): Internal.LocalDateTime;
        adjustInto(arg0: Internal.Temporal): Internal.Temporal;
        range(arg0: Internal.TemporalField): Internal.ValueRange;
        compareTo(arg0: object): number;
        compareTo(arg0: Internal.LocalTime): number;
        plusMinutes(arg0: number): Internal.LocalTime;
        notify(): void;
        toSecondOfDay(): number;
        minusMinutes(arg0: number): Internal.LocalTime;
        hashCode(): number;
        static now(): Internal.LocalTime;
        static now(arg0: Internal.Clock): Internal.LocalTime;
        static now(arg0: Internal.ZoneId): Internal.LocalTime;
        static of(arg0: number, arg1: number, arg2: number, arg3: number): Internal.LocalTime;
        static of(arg0: number, arg1: number): Internal.LocalTime;
        static of(arg0: number, arg1: number, arg2: number): Internal.LocalTime;
        get(arg0: Internal.TemporalField): number;
        plusSeconds(arg0: number): Internal.LocalTime;
        static from(arg0: Internal.TemporalAccessor): Internal.LocalTime;
        plusNanos(arg0: number): Internal.LocalTime;
        withMinute(arg0: number): Internal.LocalTime;
        withHour(arg0: number): Internal.LocalTime;
        static ofNanoOfDay(arg0: number): Internal.LocalTime;
        atOffset(arg0: Internal.ZoneOffset): Internal.OffsetTime;
        truncatedTo(arg0: Internal.TemporalUnit): Internal.LocalTime;
        query<R>(arg0: Internal.TemporalQuery<R>): R;
        minusNanos(arg0: number): Internal.LocalTime;
        format(arg0: Internal.DateTimeFormatter): string;
        static parse(arg0: Internal.CharSequence, arg1: Internal.DateTimeFormatter): Internal.LocalTime;
        static parse(arg0: Internal.CharSequence): Internal.LocalTime;
        isSupported(arg0: Internal.TemporalField): boolean;
        isSupported(arg0: Internal.TemporalUnit): boolean;
        isBefore(arg0: Internal.LocalTime): boolean;
        plus(arg0: Internal.TemporalAmount): Internal.Temporal;
        plus(arg0: Internal.TemporalAmount): Internal.LocalTime;
        plus(arg0: number, arg1: Internal.TemporalUnit): Internal.LocalTime;
        plus(arg0: number, arg1: Internal.TemporalUnit): Internal.Temporal;
        withNano(arg0: number): Internal.LocalTime;
        getLong(arg0: Internal.TemporalField): number;
        static ofSecondOfDay(arg0: number): Internal.LocalTime;
        with(arg0: Internal.TemporalField, arg1: number): Internal.Temporal;
        with(arg0: Internal.TemporalField, arg1: number): Internal.LocalTime;
        with(arg0: Internal.TemporalAdjuster): Internal.Temporal;
        with(arg0: Internal.TemporalAdjuster): Internal.LocalTime;
        toNanoOfDay(): number;
        toEpochSecond(arg0: Internal.LocalDate, arg1: Internal.ZoneOffset): number;
        equals(arg0: object): boolean;
        until(arg0: Internal.Temporal, arg1: Internal.TemporalUnit): number;
        toString(): string;
        minusSeconds(arg0: number): Internal.LocalTime;
        isAfter(arg0: Internal.LocalTime): boolean;
        withSecond(arg0: number): Internal.LocalTime;
        static readonly MIN : Internal.LocalTime;
        static readonly NOON : Internal.LocalTime;
        static readonly MAX : Internal.LocalTime;
        static readonly MIDNIGHT : Internal.LocalTime;
        get minute(): number;
        get hour(): number;
        get nano(): number;
        get second(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface TypeDescriptor$OfMethod <F, M> implements Internal.TypeDescriptor {
        parameterType(arg0: number): F;
        parameterArray(): F[];
        dropParameterTypes(arg0: number, arg1: number): M;
        parameterCount(): number;
        changeReturnType(arg0: F): M;
        descriptorString(): string;
        parameterList(): Internal.List<F>;
        insertParameterTypes(arg0: number, arg1: F[]): M;
        returnType(): F;
        changeParameterType(arg0: number, arg1: F): M;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ILootHandler implements Internal.Predicate<Internal.LootContext> {
        test(arg0: T): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface RecipeManagerKJS {
        customRecipesKJS(jsonMap: Map<ResourceLocation, Internal.JsonObject>): void;
        get byNameKJS(): Map<ResourceLocation, Internal.Recipe<object>>;
        set byNameKJS(arg0: Map<ResourceLocation, Internal.Recipe<object>>);
        set recipesKJS(arg0: Map<Internal.RecipeType<object>, Map<ResourceLocation, Internal.Recipe<object>>>);
        get recipesKJS(): Map<Internal.RecipeType<object>, Map<ResourceLocation, Internal.Recipe<object>>>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class SearchRegistry implements Internal.ResourceManagerReloadListener {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class ImmutableSet <E> extends Internal.ImmutableCollection<E> implements Internal.Set<E> {
        add(arg0: E): boolean;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        isEmpty(): boolean;
        clear(): void;
        static copyOf<E>(arg0: E[]): Internal.ImmutableSet<E>;
        static copyOf<E>(arg0: Internal.Iterable<E>): Internal.ImmutableSet<E>;
        static copyOf<E>(arg0: Internal.Collection<E>): Internal.ImmutableSet<E>;
        static copyOf<E>(arg0: Internal.Iterator<E>): Internal.ImmutableSet<E>;
        notify(): void;
        remove(arg0: object): boolean;
        static builderWithExpectedSize<E>(arg0: number): Internal.ImmutableSet$Builder<E>;
        contains(arg0: object): boolean;
        iterator(): Internal.Iterator<any>;
        iterator(): Internal.UnmodifiableIterator<E>;
        size(): number;
        hashCode(): number;
        static of<E>(arg0: E, arg1: E, arg2: E, arg3: E): Internal.ImmutableSet<E>;
        static of<E>(arg0: E, arg1: E, arg2: E): Internal.ImmutableSet<E>;
        static of<E>(): Internal.ImmutableSet<E>;
        static of<E>(arg0: E): Internal.ImmutableSet<E>;
        static of<E>(arg0: E, arg1: E): Internal.ImmutableSet<E>;
        static of<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E, arg6: E[]): Internal.ImmutableSet<E>;
        static of<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E): Internal.ImmutableSet<E>;
        equals(arg0: object): boolean;
        toArray(): object[];
        toArray<T>(arg0: T[]): T[];
        static builder<E>(): Internal.ImmutableSet$Builder<E>;
        toString(): string;
        static toImmutableSet<E>(): Internal.Collector<E, object, Internal.ImmutableSet<E>>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ObjectBidirectionalIterator <K> implements Internal.ObjectIterator<K>, Internal.BidirectionalIterator<K> {
        next(): E;
        previous(): K;
        hasPrevious(): boolean;
        back(arg0: number): number;
        hasNext(): boolean;
        skip(arg0: number): number;
        remove(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ImmutableMultiset$Builder <E> extends Internal.ImmutableCollection$Builder<E> {
        add(arg0: object): Internal.ImmutableCollection$Builder<any>;
        add(arg0: E): Internal.ImmutableMultiset$Builder<E>;
        add(arg0: object[]): Internal.ImmutableCollection$Builder<any>;
        add(arg0: E[]): Internal.ImmutableMultiset$Builder<E>;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        build(): Internal.ImmutableCollection<any>;
        build(): Internal.ImmutableMultiset<E>;
        addAll(arg0: Internal.Iterable<any>): Internal.ImmutableCollection$Builder<any>;
        addAll(arg0: Internal.Iterable<E>): Internal.ImmutableMultiset$Builder<E>;
        addAll(arg0: Internal.Iterator<any>): Internal.ImmutableCollection$Builder<any>;
        addAll(arg0: Internal.Iterator<E>): Internal.ImmutableMultiset$Builder<E>;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        addCopies(arg0: E, arg1: number): Internal.ImmutableMultiset$Builder<E>;
        notify(): void;
        setCount(arg0: E, arg1: number): Internal.ImmutableMultiset$Builder<E>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ChangeListener <T> {
        onChanged(arg0: T): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Double2ObjectFunction <V> implements it.unimi.dsi.fastutil.Function<number, V>, Internal.DoubleFunction<V> {
        getOrDefault(arg0: object, arg1: V): V;
        getOrDefault(arg0: number, arg1: V): V;
        andThenShort(arg0: Internal.Object2ShortFunction<V>): Internal.Double2ShortFunction;
        composeByte(arg0: Internal.Byte2DoubleFunction): Internal.Byte2ObjectFunction<V>;
        andThenInt(arg0: Internal.Object2IntFunction<V>): Internal.Double2IntFunction;
        composeReference<T>(arg0: Internal.Reference2DoubleFunction<T>): (arg0: T) => V;
        put(arg0: number, arg1: V): V;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: V): V;
        remove(arg0: number): V;
        remove(arg0: object): V;
        defaultReturnValue(): V;
        defaultReturnValue(arg0: V): void;
        andThenDouble(arg0: Internal.Object2DoubleFunction<V>): Internal.Double2DoubleFunction;
        andThenObject<T>(arg0: (arg0: V) => T): Internal.Double2ObjectFunction<T>;
        get(arg0: object): V;
        get(arg0: number): V;
        andThenLong(arg0: Internal.Object2LongFunction<V>): Internal.Double2LongFunction;
        composeLong(arg0: Internal.Long2DoubleFunction): Internal.Long2ObjectFunction<V>;
        andThenByte(arg0: Internal.Object2ByteFunction<V>): Internal.Double2ByteFunction;
        andThenFloat(arg0: Internal.Object2FloatFunction<V>): Internal.Double2FloatFunction;
        apply(arg0: number): V;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2DoubleFunction): Internal.Int2ObjectFunction<V>;
        clear(): void;
        composeFloat(arg0: Internal.Float2DoubleFunction): Internal.Float2ObjectFunction<V>;
        andThenChar(arg0: Internal.Object2CharFunction<V>): Internal.Double2CharFunction;
        composeObject<T>(arg0: Internal.Object2DoubleFunction<T>): (arg0: T) => V;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => V;
        composeShort(arg0: Internal.Short2DoubleFunction): Internal.Short2ObjectFunction<V>;
        andThenReference<T>(arg0: (arg0: V) => T): Internal.Double2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2DoubleFunction): Internal.Char2ObjectFunction<V>;
        composeDouble(arg0: Internal.Double2DoubleFunction): Internal.Double2ObjectFunction<V>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class EndimationEffectHandler {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        reset(): void;
        update(arg0: Internal.Endimation, arg1: number): void;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface NonNullSupplier <T> {
        get(): T;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Products$P13 <F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        apply<R>(arg0: Internal.Applicative<F, object>, arg1: Internal.Function13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R>): Internal.App<F, R>;
        apply<R>(arg0: Internal.Applicative<F, object>, arg1: Internal.App<F, Internal.Function13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R>>): Internal.App<F, R>;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class PlantType {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static get(arg0: string): Internal.PlantType;
        toString(): string;
        notify(): void;
        static readonly BEACH : Internal.PlantType;
        static readonly CAVE : Internal.PlantType;
        static readonly NETHER : Internal.PlantType;
        static readonly PLAINS : Internal.PlantType;
        static readonly DESERT : Internal.PlantType;
        static readonly WATER : Internal.PlantType;
        static readonly CROP : Internal.PlantType;
        get name(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class WriteBufferWaterMark {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        high(): number;
        low(): number;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        static readonly DEFAULT : Internal.WriteBufferWaterMark;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class GridAlignedBB implements Internal.ImmutableBox {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        intersects(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): boolean;
        intersects(arg0: Internal.ImmutableBox): boolean;
        notifyAll(): void;
        forEachContained(arg0: Internal.CoordinateConsumer): void;
        nextPowerOf2(): void;
        fixMinMax(): void;
        notify(): void;
        translate(arg0: Vec3i): void;
        translate(arg0: number, arg1: number, arg2: number): void;
        empty(): boolean;
        setMin(arg0: number, arg1: number, arg2: number): Internal.GridAlignedBB;
        mirrorAbout(arg0: Internal.Direction$Axis): void;
        hashCode(): number;
        static ofRadius(arg0: number): Internal.GridAlignedBB;
        static from(arg0: Internal.SectionPos): Internal.GridAlignedBB;
        static from(arg0: Internal.AABB): Internal.GridAlignedBB;
        static from(arg0: BlockPos, arg1: BlockPos): Internal.GridAlignedBB;
        static from(arg0: number, arg1: number): Internal.GridAlignedBB;
        static from(arg0: BlockPos): Internal.GridAlignedBB;
        copy(): Internal.GridAlignedBB;
        intersectAssign(arg0: Internal.ImmutableBox): void;
        setMax(arg0: number, arg1: number, arg2: number): Internal.GridAlignedBB;
        hasPowerOf2Sides(): boolean;
        grow(arg0: number, arg1: number, arg2: number): void;
        grow(arg0: number): void;
        intersect(arg0: Internal.ImmutableBox): Internal.GridAlignedBB;
        nextPowerOf2Centered(): void;
        union(arg0: Internal.ImmutableBox): Internal.ImmutableBox;
        static containingAll(arg0: Internal.Collection<BlockPos>): Internal.ImmutableBox;
        volume(): number;
        sizeX(): number;
        contains(arg0: Internal.ImmutableBox): boolean;
        contains(arg0: number, arg1: number, arg2: number): boolean;
        isContainedBy(arg0: Internal.GridAlignedBB): boolean;
        unionAssign(arg0: Internal.ImmutableBox): void;
        unionAssign(arg0: Internal.AABB): void;
        toAABB(): Internal.AABB;
        equals(arg0: object): boolean;
        toString(): string;
        sizeY(): number;
        sameAs(arg0: Internal.ImmutableBox): boolean;
        sameAs(arg0: Internal.AABB): boolean;
        sizeZ(): number;
        assign(arg0: Internal.AABB): void;
        assign(arg0: BlockPos, arg1: BlockPos): Internal.GridAlignedBB;
        assign(arg0: Internal.ImmutableBox): void;
        set minY(arg0: number);
        set minX(arg0: number);
        set minZ(arg0: number);
        set min(arg0: Vec3i);
        set max(arg0: Vec3i);
        get maxX(): number;
        get maxY(): number;
        get maxZ(): number;
        set maxZ(arg0: number);
        set maxY(arg0: number);
        set maxX(arg0: number);
        get minZ(): number;
        get minX(): number;
        get minY(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface SpecialEquality {
        specialEquals(o: object, shallow: boolean): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface CharacterIterator implements Internal.Cloneable {
        next(): string;
        current(): string;
        previous(): string;
        last(): string;
        clone(): object;
        first(): string;
        get index(): number;
        get endIndex(): number;
        set index(arg0: number);
        get beginIndex(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface VoxelShapeAccess {
        set faces(arg0: Internal.VoxelShape[]);
        get faces(): Internal.VoxelShape[];
        get shape(): Internal.DiscreteVoxelShape;
        set shape(arg0: Internal.DiscreteVoxelShape);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface BlockGetter implements Internal.LevelHeightAccessor {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ResourceLocationAccess {
        set path(arg0: string);
        set namespace(arg0: string);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Connection extends Internal.SimpleChannelInboundHandler<Internal.Packet<object>> implements Internal.ConfigurableAutoFlush, Internal.ClientConnectionEncryptionExtension {
        handler$zln000$setCompressionThreshold(compressionThreshold: number, validate: boolean, ci: Internal.CallbackInfo): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        channelReadComplete(arg0: Internal.ChannelHandlerContext): void;
        notifyAll(): void;
        channel(): io.netty.channel.Channel;
        exceptionCaught(arg0: Internal.ChannelHandlerContext, arg1: Internal.Throwable): void;
        channelActive(arg0: Internal.ChannelHandlerContext): void;
        handlerAdded(arg0: Internal.ChannelHandlerContext): void;
        redirect$zlh000$disableForcedFlushEveryTick(clientConnection: Internal.Connection): io.netty.channel.Channel;
        isSharable(): boolean;
        notify(): void;
        handlerRemoved(arg0: Internal.ChannelHandlerContext): void;
        channelWritabilityChanged(arg0: Internal.ChannelHandlerContext): void;
        channelRead(arg0: Internal.ChannelHandlerContext, arg1: object): void;
        channelInactive(arg0: Internal.ChannelHandlerContext): void;
        channelUnregistered(arg0: Internal.ChannelHandlerContext): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        userEventTriggered(arg0: Internal.ChannelHandlerContext, arg1: object): void;
        channelRegistered(arg0: Internal.ChannelHandlerContext): void;
        acceptInboundMessage(arg0: object): boolean;
        set shouldAutoFlush(shouldAutoFlush: boolean);
        get direction(): Internal.PacketFlow;
        set upEncryption(key: Internal.SecretKey);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class DataResult$Mu implements Internal.K1 {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Tags$IOptionalNamedTag <T> implements Internal.Tag$Named<T> {
        isDefaulted(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface NBTSerializable {
        toNBT(): Internal.Tag;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface EventLoopGroup implements Internal.EventExecutorGroup {
        next(): Internal.EventLoop;
        next(): Internal.EventExecutor;
        isShuttingDown(): boolean;
        isTerminated(): boolean;
        awaitTermination(arg0: number, arg1: Internal.TimeUnit): boolean;
        execute(arg0: Internal.Runnable): void;
        shutdown(): void;
        isShutdown(): boolean;
        register(arg0: io.netty.channel.Channel, arg1: Internal.ChannelPromise): Internal.ChannelFuture;
        register(arg0: Internal.ChannelPromise): Internal.ChannelFuture;
        register(arg0: io.netty.channel.Channel): Internal.ChannelFuture;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Advancement {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Functor <F, Mu> implements Internal.Kind1<F, Mu> {
        map<T, R>(arg0: (arg0: T) => R, arg1: Internal.App<F, T>): Internal.App<F, R>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class RuleTest {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Function7 <T1, T2, T3, T4, T5, T6, T7, R> {
        apply(arg0: T1, arg1: T2, arg2: T3, arg3: T4, arg4: T5, arg5: T6, arg6: T7): R;
        curry5(): Internal.Function5<T1, T2, T3, T4, T5, (arg0: T6, arg1: T7) => R>;
        curry6(): Internal.Function6<T1, T2, T3, T4, T5, T6, (arg0: T7) => R>;
        curry3(): Internal.Function3<T1, T2, T3, Internal.Function4<T4, T5, T6, T7, R>>;
        curry4(): Internal.Function4<T1, T2, T3, T4, Internal.Function3<T5, T6, T7, R>>;
        curry2(): (arg0: T1, arg1: T2) => Internal.Function5<T3, T4, T5, T6, T7, R>;
        curry(): (arg0: T1) => Internal.Function6<T2, T3, T4, T5, T6, T7, R>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ResolvedModule {
        reference(): Internal.ModuleReference;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        configuration(): Internal.Configuration;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        reads(): Internal.Set<Internal.ResolvedModule>;
        name(): string;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Tier {
        get tag(): net.minecraft.tags.Tag<Internal.Block>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Function3 <T1, T2, T3, R> {
        apply(arg0: T1, arg1: T2, arg2: T3): R;
        curry2(): (arg0: T1, arg1: T2) => (arg0: T3) => R;
        curry(): (arg0: T1) => (arg0: T2, arg1: T3) => R;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Constructor <T> extends Internal.Executable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        isSynthetic(): boolean;
        notify(): void;
        hashCode(): number;
        canAccess(arg0: object): boolean;
        toGenericString(): string;
        trySetAccessible(): boolean;
        isAccessible(): boolean;
        static setAccessible(arg0: Internal.AccessibleObject[], arg1: boolean): void;
        isVarArgs(): boolean;
        newInstance(arg0: object[]): T;
        getAnnotation<T>(arg0: Internal.Class<T>): T;
        equals(arg0: object): boolean;
        toString(): string;
        static readonly PUBLIC : 0;
        static readonly DECLARED : 1;
        get name(): string;
        get parameterCount(): number;
        get annotatedParameterTypes(): Internal.AnnotatedType[];
        get parameterTypes(): Internal.Class<object>[];
        get genericExceptionTypes(): Internal.Type[];
        get annotatedReceiverType(): Internal.AnnotatedType;
        get declaredAnnotations(): Internal.Annotation[];
        get declaringClass(): Internal.Class<T>;
        get typeParameters(): Internal.TypeVariable<Internal.Constructor<T>>[];
        get modifiers(): number;
        set accessible(arg0: boolean);
        get annotations(): Internal.Annotation[];
        get annotatedExceptionTypes(): Internal.AnnotatedType[];
        get exceptionTypes(): Internal.Class<object>[];
        get genericParameterTypes(): Internal.Type[];
        get parameters(): Internal.Parameter[];
        get annotatedReturnType(): Internal.AnnotatedType;
        get parameterAnnotations(): Internal.Annotation[][];
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Enum$EnumDesc <E> extends Internal.DynamicConstantDesc<E> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        static ofCanonical<T>(arg0: Internal.DirectMethodHandleDesc, arg1: string, arg2: Internal.ClassDesc, arg3: Internal.ConstantDesc[]): Internal.ConstantDesc;
        constantType(): Internal.ClassDesc;
        bootstrapMethod(): Internal.DirectMethodHandleDesc;
        constantName(): string;
        hashCode(): number;
        notifyAll(): void;
        bootstrapArgs(): Internal.ConstantDesc[];
        equals(arg0: object): boolean;
        static of<E>(arg0: Internal.ClassDesc, arg1: string): Internal.Enum$EnumDesc<E>;
        toString(): string;
        resolveConstantDesc(arg0: Internal.MethodHandles$Lookup): object;
        resolveConstantDesc(arg0: Internal.MethodHandles$Lookup): E;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Item$Properties {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        setNoRepair(): Internal.Item$Properties;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ImmutableSet$Builder <E> extends Internal.ImmutableCollection$Builder<E> {
        add(arg0: E): Internal.ImmutableSet$Builder<E>;
        add(arg0: object): Internal.ImmutableCollection$Builder<any>;
        add(arg0: E[]): Internal.ImmutableSet$Builder<E>;
        add(arg0: object[]): Internal.ImmutableCollection$Builder<any>;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        build(): Internal.ImmutableCollection<any>;
        build(): Internal.ImmutableSet<E>;
        addAll(arg0: Internal.Iterator<any>): Internal.ImmutableCollection$Builder<any>;
        addAll(arg0: Internal.Iterator<E>): Internal.ImmutableSet$Builder<E>;
        addAll(arg0: Internal.Iterable<any>): Internal.ImmutableCollection$Builder<any>;
        addAll(arg0: Internal.Iterable<E>): Internal.ImmutableSet$Builder<E>;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class AbstractConstant <T> implements Internal.Constant<T> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        name(): string;
        toString(): string;
        id(): number;
        compareTo(arg0: T): number;
        compareTo(arg0: object): number;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class NativeJavaClass extends Internal.NativeJavaObject implements dev.latvian.mods.rhino.Function {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hasInstance(value: Internal.Scriptable): boolean;
        notifyAll(): void;
        addCustomProperty(name: string, getter: Internal.CustomProperty): void;
        construct(cx: Internal.Context, scope: Internal.Scriptable, args: object[]): Internal.Scriptable;
        delete(index: number): void;
        delete(key: Internal.Symbol): void;
        delete(name: string): void;
        notify(): void;
        put(name: string, start: Internal.Scriptable, value: object): void;
        put(index: number, start: Internal.Scriptable, value: object): void;
        put(symbol: Internal.Symbol, start: Internal.Scriptable, value: object): void;
        unwrap(): object;
        getDefaultValue(hint: Internal.Class<object>): object;
        call(cx: Internal.Context, scope: Internal.Scriptable, thisObj: Internal.Scriptable, args: object[]): object;
        hashCode(): number;
        equals(arg0: object): boolean;
        get(name: string, start: Internal.Scriptable): object;
        get(key: Internal.Symbol, start: Internal.Scriptable): object;
        get(index: number, start: Internal.Scriptable): object;
        toString(): string;
        has(name: string, start: Internal.Scriptable): boolean;
        has(index: number, start: Internal.Scriptable): boolean;
        has(key: Internal.Symbol, start: Internal.Scriptable): boolean;
        static readonly NOT_FOUND : object;
        set parentScope(m: Internal.Scriptable);
        get ids(): object[];
        get classObject(): Internal.Class<object>;
        get allIds(): object[];
        set prototype(m: Internal.Scriptable);
        get prototype(): Internal.Scriptable;
        get className(): string;
        get parentScope(): Internal.Scriptable;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class PaintEventJS extends Internal.ClientEventJS {
        cancel(): void;
        bindTexture(tex: ResourceLocation): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isCancelled(): boolean;
        vertex(m: Internal.Matrix4f, x: number, y: number, z: number, col: number, u: number, v: number): void;
        vertex(m: Internal.Matrix4f, x: number, y: number, z: number, col: number): void;
        beginQuads(texture: boolean): void;
        beginQuads(format: Internal.VertexFormat): void;
        notifyAll(): void;
        scale(x: number, y: number, z: number): void;
        notify(): void;
        translate(x: number, y: number, z: number): void;
        push(): void;
        pop(): void;
        post(id: string, sub: string): boolean;
        post(id: string): boolean;
        post(t: Internal.ScriptType, id: string, sub: string): boolean;
        post(t: Internal.ScriptType, id: string): boolean;
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        end(): void;
        begin(type: Internal.VertexFormat$Mode, format: Internal.VertexFormat): void;
        canCancel(): boolean;
        readonly mc : Internal.Minecraft;
        readonly delta : number;
        readonly screen : Internal.Screen;
        readonly tesselator : Internal.Tesselator;
        readonly buffer : Internal.BufferBuilder;
        readonly matrices : Internal.PoseStack;
        readonly font : Internal.Font;
        get player(): Internal.ClientPlayerJS;
        set textureEnabled(enabled: boolean);
        get textureAtlas(): Internal.TextureAtlas;
        get entity(): Internal.EntityJS;
        get level(): Internal.ClientLevelJS;
        get matrix(): Internal.Matrix4f;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    /**
    */
    class RecipeEventJS extends Internal.EventJS {
        cancel(): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        countRecipes(filter: Internal.RecipeFilter): number;
        forEachRecipe(filter: Internal.RecipeFilter, consumer: (arg0: Internal.RecipeJS) => void): void;
        notify(): void;
        remove(filter: Internal.RecipeFilter): number;
        replaceOutput(ingredient: Internal.IngredientJS, with_: Internal.ItemStackJS): number;
        replaceOutput(filter: Internal.RecipeFilter, ingredient: Internal.IngredientJS, with_: Internal.ItemStackJS): number;
        replaceOutput(filter: Internal.RecipeFilter, ingredient: Internal.IngredientJS, with_: Internal.ItemStackJS, exact: boolean): number;
        post(t: Internal.ScriptType, id: string, sub: string): boolean;
        post(t: Internal.ScriptType, id: string): boolean;
        hashCode(): number;
        printAllTypes(): void;
        customFilter(filter: Internal.RecipeFilter): Internal.RecipeFilter;
        isCancelled(): boolean;
        printTypes(): void;
        getRecipeFunction(id: string): Internal.RecipeFunction;
        custom(o: object): Internal.RecipeJS;
        forEachRecipeAsync(filter: Internal.RecipeFilter, consumer: (arg0: Internal.RecipeJS) => void): void;
        printExamples(type: string): void;
        addRecipe(r: Internal.RecipeJS, type: Internal.RecipeTypeJS, args1: Internal.ListJS): Internal.RecipeJS;
        stage(filter: Internal.RecipeFilter, stage: string): void;
        replaceInput(ingredient: Internal.IngredientJS, with_: Internal.IngredientJS): number;
        replaceInput(filter: Internal.RecipeFilter, ingredient: Internal.IngredientJS, with_: Internal.IngredientJS): number;
        replaceInput(filter: Internal.RecipeFilter, ingredient: Internal.IngredientJS, with_: Internal.IngredientJS, exact: boolean): number;
        equals(arg0: object): boolean;
        toString(): string;
        canCancel(): boolean;
        readonly smithing : Internal.RecipeFunction;
        static instance : Internal.RecipeEventJS;
        readonly stonecutting : Internal.RecipeFunction;
        readonly shaped : Internal.RecipeFunction;
        readonly smoking : Internal.RecipeFunction;
        static readonly FORGE_CONDITIONAL : "forge:conditional";
        readonly campfireCooking : Internal.RecipeFunction;
        static customIngredientMap : Map<Internal.UUID, Internal.IngredientWithCustomPredicateJS>;
        readonly shapeless : Internal.RecipeFunction;
        readonly smelting : Internal.RecipeFunction;
        readonly blasting : Internal.RecipeFunction;
        /**
        * Holds all the recipes collected from documents.
        */
        get recipes(): Document.RecipeHolder;
        set itemErrors(b: boolean);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
        /**
        * Adds a smelting recipe to Minecraft.
        *
        * This is used by Furnaces.
        */
        smelting(output: Internal.ItemStackJS, input: Internal.IngredientJS): Internal.CookingRecipeJS;
        /**
        * Adds a smelting recipe to Minecraft.
        *
        * This is used by Smokers.
        */
        smoking(output: Internal.ItemStackJS, input: Internal.IngredientJS): Internal.CookingRecipeJS;
        /**
        * Adds a smelting recipe to Minecraft.
        *
        * This is used by Blast Furnaces.
        */
        blasting(output: Internal.ItemStackJS, input: Internal.IngredientJS): Internal.CookingRecipeJS;
        /**
        * Adds a shaped crafting recipe.
        */
        shaped(output: Internal.ItemStackJS, pattern: string[], items: Map<string, Internal.IngredientJS>): Internal.ShapedRecipeJS;
        /**
        * Adds a shapeless crafting recipe.
        */
        shapeless(output: Internal.ItemStackJS, inputs: Internal.IngredientJS[]): Internal.ShapelessRecipeJS;
        /**
        * Adds a smelting recipe to Minecraft.
        *
        * This is used by Camefire.
        */
        campfireCooking(output: Internal.ItemStackJS, input: Internal.IngredientJS): Internal.CookingRecipeJS;
        /**
        * Adds a stonecutting recipe.
        */
        stonecutting(output: Internal.ItemStackJS, inputs: Internal.IngredientJS): Internal.StonecuttingRecipeJS;
        /**
        * Adds a smithing recipe.
        */
        smithing(output: Internal.ItemStackJS, base: Internal.IngredientJS, addition: Internal.IngredientJS): Internal.SmithingRecipeJS;
    }
    class ScheduledEvent {
        reschedule(): void;
        reschedule(timer: number): Internal.ScheduledEvent;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        isUsingTicks(): boolean;
        notify(): void;
        get server(): Internal.ServerJS;
        get endTime(): number;
        get timerDuration(): number;
        get timer(): number;
        get data(): object;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class FireworksJS$Shape extends Internal.Enum<Internal.FireworksJS$Shape> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(name: string): Internal.FireworksJS$Shape;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.FireworksJS$Shape[];
        static get(name: string): Internal.FireworksJS$Shape;
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly SMALL_BALL : Internal.FireworksJS$Shape;
        static readonly LARGE_BALL : Internal.FireworksJS$Shape;
        static readonly STAR : Internal.FireworksJS$Shape;
        static readonly CREEPER : Internal.FireworksJS$Shape;
        static readonly BURST : Internal.FireworksJS$Shape;
        static readonly VALUES : Internal.FireworksJS$Shape[];
        readonly type : number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class StageCreationEvent {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        get player(): Internal.Player;
        set playerStages(s: Internal.Stages);
        get playerStages(): Internal.Stages;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IntStream$Builder implements Internal.IntConsumer {
        add(arg0: number): Internal.IntStream$Builder;
        build(): Internal.IntStream;
        andThen(arg0: Internal.IntConsumer): Internal.IntConsumer;
        accept(arg0: number): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface NonNullPredicate <T> {
        test(arg0: T): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ItemColorsExtended {
        getColorProvider(arg0: Internal.ItemStack): Internal.ItemColor;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IDataManager {
        getValue<T>(arg0: Internal.TrackedData<T>): T;
        isDirty(): boolean;
        getEntries(arg0: boolean): Internal.Set<Internal.IDataManager$DataEntry<object>>;
        setValue<T>(arg0: Internal.TrackedData<T>, arg1: T): void;
        clean(): void;
        get dirtyEntries(): Internal.Set<Internal.IDataManager$DataEntry<object>>;
        set dataMap(arg0: Map<Internal.TrackedData<object>, Internal.IDataManager$DataEntry<object>>);
        get dataMap(): Map<Internal.TrackedData<object>, Internal.IDataManager$DataEntry<object>>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Field extends Internal.AccessibleObject implements Internal.Member {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        setByte(arg0: object, arg1: number): void;
        getByte(arg0: object): number;
        notifyAll(): void;
        isSynthetic(): boolean;
        getDouble(arg0: object): number;
        setShort(arg0: object, arg1: number): void;
        getFloat(arg0: object): number;
        notify(): void;
        setDouble(arg0: object, arg1: number): void;
        setChar(arg0: object, arg1: string): void;
        getAnnotationsByType<T>(arg0: Internal.Class<T>): T[];
        hashCode(): number;
        canAccess(arg0: object): boolean;
        toGenericString(): string;
        get(arg0: object): object;
        getBoolean(arg0: object): boolean;
        trySetAccessible(): boolean;
        setFloat(arg0: object, arg1: number): void;
        isAccessible(): boolean;
        set(arg0: object, arg1: object): void;
        static setAccessible(arg0: Internal.AccessibleObject[], arg1: boolean): void;
        getShort(arg0: object): number;
        setInt(arg0: object, arg1: number): void;
        getLong(arg0: object): number;
        getInt(arg0: object): number;
        getChar(arg0: object): string;
        setLong(arg0: object, arg1: number): void;
        getAnnotation<T>(arg0: Internal.Class<T>): T;
        equals(arg0: object): boolean;
        toString(): string;
        isEnumConstant(): boolean;
        setBoolean(arg0: object, arg1: boolean): void;
        static readonly PUBLIC : 0;
        static readonly DECLARED : 1;
        get name(): string;
        get declaredAnnotations(): Internal.Annotation[];
        get declaringClass(): Internal.Class<object>;
        get genericType(): Internal.Type;
        get modifiers(): number;
        get annotatedType(): Internal.AnnotatedType;
        set accessible(arg0: boolean);
        get annotations(): Internal.Annotation[];
        get type(): Internal.Class<object>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ChronoUnit extends Internal.Enum<Internal.ChronoUnit> implements Internal.TemporalUnit {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        static valueOf(arg0: string): Internal.ChronoUnit;
        notifyAll(): void;
        static values(): Internal.ChronoUnit[];
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        isDurationEstimated(): boolean;
        hashCode(): number;
        equals(arg0: object): boolean;
        isTimeBased(): boolean;
        name(): string;
        addTo<R>(arg0: R, arg1: number): R;
        toString(): string;
        isDateBased(): boolean;
        between(arg0: Internal.Temporal, arg1: Internal.Temporal): number;
        ordinal(): number;
        isSupportedBy(arg0: Internal.Temporal): boolean;
        static readonly FOREVER : Internal.ChronoUnit;
        static readonly MICROS : Internal.ChronoUnit;
        static readonly SECONDS : Internal.ChronoUnit;
        static readonly DECADES : Internal.ChronoUnit;
        static readonly MILLENNIA : Internal.ChronoUnit;
        static readonly DAYS : Internal.ChronoUnit;
        static readonly MILLIS : Internal.ChronoUnit;
        static readonly HALF_DAYS : Internal.ChronoUnit;
        static readonly MONTHS : Internal.ChronoUnit;
        static readonly YEARS : Internal.ChronoUnit;
        static readonly HOURS : Internal.ChronoUnit;
        static readonly WEEKS : Internal.ChronoUnit;
        static readonly NANOS : Internal.ChronoUnit;
        static readonly CENTURIES : Internal.ChronoUnit;
        static readonly MINUTES : Internal.ChronoUnit;
        static readonly ERAS : Internal.ChronoUnit;
        get duration(): Internal.Duration;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface CustomJavaObjectWrapper$AsList implements Internal.CustomJavaObjectWrapper {
        wrapAsJavaList(): Internal.List<object>;
        wrapAsJavaObject(cx: Internal.Context, scope: Internal.Scriptable, staticType: Internal.Class<object>): Internal.Scriptable;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ClocheFertilizerRecipeJS extends Internal.IERecipeJS {
        ingredientAction(filter: Internal.IngredientActionFilter, action: Internal.IngredientAction): Internal.RecipeJS;
        convertReplacedInput(index: number, oldIngredient: Internal.IngredientJS, newIngredient: Internal.IngredientJS): Internal.IngredientJS;
        parseIngredientItemIE(json: Internal.JsonElement): Internal.IngredientStackJS;
        replaceOutput(i: Internal.IngredientJS, with_: Internal.ItemStackJS, exact: boolean): boolean;
        merge(data: object): Internal.RecipeJS;
        growthModifier(f: number): Internal.ClocheFertilizerRecipeJS;
        create(args: Internal.ListJS): void;
        id(_id: ResourceLocation): Internal.RecipeJS;
        parseIngredientItem(o: object, key: string): Internal.IngredientJS;
        parseIngredientItem(o: object): Internal.IngredientJS;
        group(g: string): Internal.RecipeJS;
        energy(e: number): Internal.IERecipeJS;
        getInputIndex(ingredient: Internal.IngredientJS, exact: boolean): number;
        setGroup(g: string): void;
        serialize(): void;
        replaceInput(i: Internal.IngredientJS, with_: Internal.IngredientJS, exact: boolean): boolean;
        getType(): string;
        getGroup(): string;
        hasOutput(ingredient: Internal.IngredientJS, exact: boolean): boolean;
        keepIngredient(filter: Internal.IngredientActionFilter): Internal.RecipeJS;
        customIngredientAction(filter: Internal.IngredientActionFilter, id: string): Internal.RecipeJS;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        convertReplacedOutput(index: number, oldStack: Internal.ItemStackJS, newStack: Internal.ItemStackJS): Internal.ItemStackJS;
        save(): void;
        damageIngredient(filter: Internal.IngredientActionFilter, damage: number): Internal.RecipeJS;
        damageIngredient(filter: Internal.IngredientActionFilter): Internal.RecipeJS;
        getId(): string;
        dontAdd(): void;
        notify(): void;
        serializeJson(): void;
        hashCode(): number;
        deserializeJson(): void;
        deserialize(): void;
        serializeNBTAsJson(): boolean;
        getOutputIndex(ingredient: Internal.IngredientJS, exact: boolean): number;
        resultFromRecipeJson(json: Internal.JsonObject): Internal.ItemStackJS;
        stage(s: string): Internal.RecipeJS;
        serializeIngredientStack(in_: Internal.IngredientStackJS): Internal.JsonElement;
        equals(arg0: object): boolean;
        serializeItemStack(stack: Internal.ItemStackJS): Internal.JsonElement;
        toString(): string;
        time(t: number): Internal.IERecipeJS;
        hasInput(ingredient: Internal.IngredientJS, exact: boolean): boolean;
        parseResultItem(o: object): Internal.ItemStackJS;
        replaceIngredient(filter: Internal.IngredientActionFilter, item: Internal.ItemStackJS): Internal.RecipeJS;
        static currentRecipe : Internal.RecipeJS;
        readonly inputItems : Internal.List<Internal.IngredientJS>;
        static itemErrors : false;
        type : Internal.RecipeTypeJS;
        originalJson : Internal.JsonObject;
        serializeOutputs : boolean;
        readonly outputFluids : Internal.List<Internal.FluidStack>;
        originalRecipe : Internal.Recipe<object>;
        readonly inputFluids : Internal.List<Internal.FluidTagInput>;
        json : Internal.JsonObject;
        readonly outputItems : Internal.List<Internal.ItemStackJS>;
        serializeInputs : boolean;
        get uniqueId(): string;
        get path(): string;
        get originalRecipeResult(): Internal.ItemStackJS;
        get mod(): string;
        get fromToString(): string;
        get orCreateId(): ResourceLocation;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Byte2LongFunction implements it.unimi.dsi.fastutil.Function<number, number>, Internal.IntToLongFunction {
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        andThenShort(arg0: Internal.Long2ShortFunction): Internal.Byte2ShortFunction;
        composeByte(arg0: Internal.Byte2ByteFunction): Internal.Byte2LongFunction;
        andThenInt(arg0: Internal.Long2IntFunction): Internal.Byte2IntFunction;
        composeReference<T>(arg0: Internal.Reference2ByteFunction<T>): Internal.Reference2LongFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: number) => T;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: number): number;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: object): object;
        remove(arg0: object): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Long2DoubleFunction): Internal.Byte2DoubleFunction;
        andThenObject<T>(arg0: Internal.Long2ObjectFunction<T>): Internal.Byte2ObjectFunction<T>;
        get(arg0: object): number;
        get(arg0: object): object;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Long2LongFunction): Internal.Byte2LongFunction;
        composeLong(arg0: Internal.Long2ByteFunction): Internal.Long2LongFunction;
        andThenByte(arg0: Internal.Long2ByteFunction): Internal.Byte2ByteFunction;
        andThenFloat(arg0: Internal.Long2FloatFunction): Internal.Byte2FloatFunction;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2ByteFunction): Internal.Int2LongFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2ByteFunction): Internal.Float2LongFunction;
        andThenChar(arg0: Internal.Long2CharFunction): Internal.Byte2CharFunction;
        applyAsLong(arg0: number): number;
        composeObject<T>(arg0: Internal.Object2ByteFunction<T>): Internal.Object2LongFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => number;
        composeShort(arg0: Internal.Short2ByteFunction): Internal.Short2LongFunction;
        andThenReference<T>(arg0: Internal.Long2ReferenceFunction<T>): Internal.Byte2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2ByteFunction): Internal.Char2LongFunction;
        composeDouble(arg0: Internal.Double2ByteFunction): Internal.Double2LongFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ModuleDescriptor$Exports$Modifier extends Internal.Enum<Internal.ModuleDescriptor$Exports$Modifier> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(arg0: string): Internal.ModuleDescriptor$Exports$Modifier;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.ModuleDescriptor$Exports$Modifier[];
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly SYNTHETIC : Internal.ModuleDescriptor$Exports$Modifier;
        static readonly MANDATED : Internal.ModuleDescriptor$Exports$Modifier;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class FixedUnit extends Internal.Unit {
        mod(with_: Internal.Unit): Internal.Unit;
        log1p(): Internal.Unit;
        cos(): Internal.Unit;
        deg(): Internal.Unit;
        lt(with_: Internal.Unit): Internal.Unit;
        atan(): Internal.Unit;
        div(with_: Internal.Unit): Internal.Unit;
        neg(): Internal.Unit;
        shiftLeft(with_: Internal.Unit): Internal.Unit;
        rad(): Internal.Unit;
        sqrt(): Internal.Unit;
        gte(with_: Internal.Unit): Internal.Unit;
        neq(with_: Internal.Unit): Internal.Unit;
        atan2(with_: Internal.Unit): Internal.Unit;
        tan(): Internal.Unit;
        add(with_: Internal.Unit): Internal.Unit;
        newValue(v: number): Internal.Unit;
        toBool(): Internal.Unit;
        ceil(): Internal.Unit;
        eq(with_: Internal.Unit): Internal.Unit;
        shiftRight(with_: Internal.Unit): Internal.Unit;
        sub(with_: Internal.Unit): Internal.Unit;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        mul(with_: Internal.Unit): Internal.Unit;
        log(): Internal.Unit;
        log10(): Internal.Unit;
        notifyAll(): void;
        notify(): void;
        not(): Internal.Unit;
        min(with_: Internal.Unit): Internal.Unit;
        hashCode(): number;
        and(with_: Internal.Unit): Internal.Unit;
        static of(value: number): Internal.FixedUnit;
        get(): number;
        pow(with_: Internal.Unit): Internal.Unit;
        sin(): Internal.Unit;
        xor(with_: Internal.Unit): Internal.Unit;
        lte(with_: Internal.Unit): Internal.Unit;
        floor(): Internal.Unit;
        isFixed(): boolean;
        sq(): Internal.Unit;
        or(with_: Internal.Unit): Internal.Unit;
        max(with_: Internal.Unit): Internal.Unit;
        gt(with_: Internal.Unit): Internal.Unit;
        abs(): Internal.Unit;
        equals(arg0: object): boolean;
        toString(): string;
        append(sb: Internal.StringBuilder): void;
        static readonly ZERO : Internal.FixedUnit;
        static readonly ONE : Internal.FixedUnit;
        static readonly POS_INFINITY : Internal.FixedUnit;
        static readonly NEG_INFINITY : Internal.FixedUnit;
        static readonly NAN : Internal.FixedUnit;
        get asInt(): number;
        get asBoolean(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface WindowEventHandler {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ClassDesc implements Internal.ConstantDesc, Internal.TypeDescriptor$OfField<Internal.ClassDesc> {
        componentType(): Internal.TypeDescriptor$OfField<any>;
        componentType(): Internal.ClassDesc;
        arrayType(): Internal.TypeDescriptor$OfField<any>;
        arrayType(): Internal.ClassDesc;
        arrayType(arg0: number): Internal.ClassDesc;
        displayName(): string;
        equals(arg0: object): boolean;
        descriptorString(): string;
        isArray(): boolean;
        resolveConstantDesc(arg0: Internal.MethodHandles$Lookup): object;
        packageName(): string;
        isClassOrInterface(): boolean;
        nested(arg0: string): Internal.ClassDesc;
        nested(arg0: string, arg1: string[]): Internal.ClassDesc;
        isPrimitive(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class ScriptableObject implements Internal.Scriptable, Internal.SymbolScriptable, Internal.Serializable, Internal.ConstProperties {
        isSealed(): boolean;
        static redefineProperty(obj: Internal.Scriptable, name: string, isConst: boolean): void;
        putConst(name: string, start: Internal.Scriptable, value: object): void;
        static getTypedProperty<T>(s: Internal.Scriptable, name: string, type: Internal.Class<T>): T;
        static getTypedProperty<T>(s: Internal.Scriptable, index: number, type: Internal.Class<T>): T;
        static getArrayPrototype(scope: Internal.Scriptable): Internal.Scriptable;
        put(name: string, start: Internal.Scriptable, value: object): void;
        put(index: number, start: Internal.Scriptable, value: object): void;
        put(key: Internal.Symbol, start: Internal.Scriptable, value: object): void;
        getDefaultValue(typeHint: Internal.Class<object>): object;
        static getDefaultValue(object: Internal.Scriptable, typeHint: Internal.Class<object>): object;
        defineOwnProperties(cx: Internal.Context, props: Internal.ScriptableObject): void;
        static defineProperty(destination: Internal.Scriptable, propertyName: string, value: object, attributes: number): void;
        defineProperty(key: Internal.Symbol, value: object, attributes: number): void;
        defineProperty(propertyName: string, clazz: Internal.Class<object>, attributes: number): void;
        defineProperty(propertyName: string, value: object, attributes: number): void;
        defineProperty(propertyName: string, delegateTo: object, getter: Internal.Method, setter: Internal.Method, attributes: number): void;
        setGetterOrSetter(name: string, index: number, getterOrSetter: Internal.Callable, isSetter: boolean): void;
        avoidObjectDetection(): boolean;
        has(name: string, start: Internal.Scriptable): boolean;
        has(index: number, start: Internal.Scriptable): boolean;
        has(key: Internal.Symbol, start: Internal.Scriptable): boolean;
        getAttributes(name: string): number;
        getAttributes(index: number): number;
        getAttributes(sym: Internal.Symbol): number;
        hasInstance(instance: Internal.Scriptable): boolean;
        getAssociatedValue(key: object): object;
        static getPropertyIds(obj: Internal.Scriptable): object[];
        static hasProperty(obj: Internal.Scriptable, key: Internal.Symbol): boolean;
        static hasProperty(obj: Internal.Scriptable, index: number): boolean;
        static hasProperty(obj: Internal.Scriptable, name: string): boolean;
        size(): number;
        defineOwnProperty(cx: Internal.Context, id: object, desc: Internal.ScriptableObject): void;
        static getFunctionPrototype(scope: Internal.Scriptable): Internal.Scriptable;
        preventExtensions(): void;
        static callMethod(obj: Internal.Scriptable, methodName: string, args: object[]): object;
        static callMethod(cx: Internal.Context, obj: Internal.Scriptable, methodName: string, args: object[]): object;
        enumerationIteratorNext(cx: Internal.Context, currentId: (arg0: object) => void): boolean;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        static getTopScopeValue(scope: Internal.Scriptable, key: object): object;
        notifyAll(): void;
        sealObject(): void;
        setAttributes(key: Internal.Symbol, attributes: number): void;
        setAttributes(index: number, attributes: number): void;
        setAttributes(name: string, attributes: number): void;
        static putProperty(obj: Internal.Scriptable, index: number, value: object): void;
        static putProperty(obj: Internal.Scriptable, name: string, value: object): void;
        static putProperty(obj: Internal.Scriptable, key: Internal.Symbol, value: object): void;
        delete(index: number): void;
        delete(name: string): void;
        delete(key: Internal.Symbol): void;
        notify(): void;
        associateValue(key: object, value: object): object;
        static deleteProperty(obj: Internal.Scriptable, name: string): boolean;
        static deleteProperty(obj: Internal.Scriptable, index: number): boolean;
        static getObjectPrototype(scope: Internal.Scriptable): Internal.Scriptable;
        isExtensible(): boolean;
        hashCode(): number;
        isConst(name: string): boolean;
        get(name: string, start: Internal.Scriptable): object;
        get(index: number, start: Internal.Scriptable): object;
        get(key: Internal.Symbol, start: Internal.Scriptable): object;
        get(key: object): object;
        static putConstProperty(obj: Internal.Scriptable, name: string, value: object): void;
        getGetterOrSetter(name: string, index: number, isSetter: boolean): object;
        static getTopLevelScope(obj: Internal.Scriptable): Internal.Scriptable;
        static getProperty(obj: Internal.Scriptable, key: Internal.Symbol): object;
        static getProperty(obj: Internal.Scriptable, index: number): object;
        static getProperty(obj: Internal.Scriptable, name: string): object;
        static defineClass<T>(scope: Internal.Scriptable, clazz: Internal.Class<T>, sealed: boolean): void;
        static defineClass<T>(scope: Internal.Scriptable, clazz: Internal.Class<T>): void;
        static defineClass<T>(scope: Internal.Scriptable, clazz: Internal.Class<T>, sealed: boolean, mapInheritance: boolean): string;
        isEmpty(): boolean;
        defineFunctionProperties(names: string[], clazz: Internal.Class<object>, attributes: number): void;
        static getClassPrototype(scope: Internal.Scriptable, className: string): Internal.Scriptable;
        defineConst(name: string, start: Internal.Scriptable): void;
        equals(arg0: object): boolean;
        static defineConstProperty(destination: Internal.Scriptable, propertyName: string): void;
        toString(): string;
        enumerationIteratorHasNext(cx: Internal.Context, currentId: (arg0: object) => void): boolean;
        static getGeneratorFunctionPrototype(scope: Internal.Scriptable): Internal.Scriptable;
        static readonly DONTENUM : 2;
        static readonly CONST : 13;
        static readonly NOT_FOUND : object;
        static readonly UNINITIALIZED_CONST : 8;
        static readonly EMPTY : 0;
        static readonly READONLY : 1;
        static readonly PERMANENT : 4;
        set parentScope(m: Internal.Scriptable);
        get ids(): object[];
        get allIds(): object[];
        get externalArrayLength(): object;
        get externalArrayData(): Internal.ExternalArrayData;
        get className(): string;
        get parentScope(): Internal.Scriptable;
        set externalArrayData(array: Internal.ExternalArrayData);
        get typeOf(): string;
        get prototype(): Internal.Scriptable;
        set prototype(m: Internal.Scriptable);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface FastMapStateHolder <S> {
        replacePropertyMap(arg0: Internal.ImmutableMap<Internal.Property<object>, Internal.Comparable<object>>): void;
        get stateIndex(): number;
        get neighborTable(): Internal.Table<Internal.Property<object>, Internal.Comparable<object>, S>;
        set neighborTable(arg0: Internal.Table<Internal.Property<object>, Internal.Comparable<object>, S>);
        set stateIndex(arg0: number);
        set stateMap(arg0: Internal.FastMap<S>);
        get vanillaPropertyMap(): Internal.ImmutableMap<Internal.Property<object>, Internal.Comparable<object>>;
        get stateMap(): Internal.FastMap<S>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Object2LongFunction <K> implements it.unimi.dsi.fastutil.Function<K, number>, Internal.ToLongFunction<K> {
        getOrDefault(arg0: object, arg1: number): number;
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: object, arg1: number): number;
        andThenShort(arg0: Internal.Long2ShortFunction): Internal.Object2ShortFunction<K>;
        composeByte(arg0: Internal.Byte2ObjectFunction<K>): Internal.Byte2LongFunction;
        andThenInt(arg0: Internal.Long2IntFunction): Internal.Object2IntFunction<K>;
        composeReference<T>(arg0: (arg0: T) => K): Internal.Reference2LongFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: K) => T;
        put(arg0: K, arg1: number): number;
        put(arg0: K, arg1: number): number;
        put(arg0: object, arg1: object): object;
        remove(arg0: object): number;
        remove(arg0: object): object;
        defaultReturnValue(): number;
        defaultReturnValue(arg0: number): void;
        andThenDouble(arg0: Internal.Long2DoubleFunction): Internal.Object2DoubleFunction<K>;
        andThenObject<T>(arg0: Internal.Long2ObjectFunction<T>): (arg0: K) => T;
        removeLong(arg0: object): number;
        get(arg0: object): object;
        get(arg0: object): number;
        andThenLong(arg0: Internal.Long2LongFunction): Internal.Object2LongFunction<K>;
        composeLong(arg0: Internal.Long2ObjectFunction<K>): Internal.Long2LongFunction;
        andThenByte(arg0: Internal.Long2ByteFunction): Internal.Object2ByteFunction<K>;
        andThenFloat(arg0: Internal.Long2FloatFunction): Internal.Object2FloatFunction<K>;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        composeInt(arg0: Internal.Int2ObjectFunction<K>): Internal.Int2LongFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2ObjectFunction<K>): Internal.Float2LongFunction;
        andThenChar(arg0: Internal.Long2CharFunction): Internal.Object2CharFunction<K>;
        getLong(arg0: object): number;
        applyAsLong(arg0: K): number;
        composeObject<T>(arg0: (arg0: T) => K): Internal.Object2LongFunction<T>;
        size(): number;
        composeShort(arg0: Internal.Short2ObjectFunction<K>): Internal.Short2LongFunction;
        andThenReference<T>(arg0: Internal.Long2ReferenceFunction<T>): (arg0: K) => T;
        composeChar(arg0: Internal.Char2ObjectFunction<K>): Internal.Char2LongFunction;
        composeDouble(arg0: Internal.Double2ObjectFunction<K>): Internal.Double2LongFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface LogBuilder {
        withLocation(): Internal.LogBuilder;
        withLocation(location: Internal.StackTraceElement): Internal.LogBuilder;
        log(message: string, p0: object, p1: object, p2: object, p3: object): void;
        log(message: string, p0: object, p1: object, p2: object, p3: object, p4: object): void;
        log(message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object): void;
        log(message: string, p0: object, p1: object, p2: object): void;
        log(message: string, p0: object, p1: object): void;
        log(message: string, p0: object): void;
        log(): void;
        log(message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object, p7: object, p8: object, p9: object): void;
        log(message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object, p7: object, p8: object): void;
        log(message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object, p7: object): void;
        log(message: string, p0: object, p1: object, p2: object, p3: object, p4: object, p5: object, p6: object): void;
        log(message: string, params: Internal.Supplier<object>[]): void;
        log(message: string, params: object[]): void;
        log(message: string): void;
        log(message: Internal.CharSequence): void;
        log(message: object): void;
        log(messageSupplier: Internal.Supplier<Internal.Message>): void;
        log(message: Internal.Message): void;
        withMarker(marker: Internal.Marker): Internal.LogBuilder;
        withThrowable(throwable: Internal.Throwable): Internal.LogBuilder;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ServerEventJS extends Internal.EventJS {
        cancel(): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        isCancelled(): boolean;
        post(t: Internal.ScriptType, id: string, sub: string): boolean;
        post(t: Internal.ScriptType, id: string): boolean;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        canCancel(): boolean;
        get server(): Internal.ServerJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class TrackedData <T> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        isPersistent(): boolean;
        toString(): string;
        shouldSave(): boolean;
        notify(): void;
        get processor(): Internal.IDataProcessor<T>;
        get syncType(): Internal.SyncType;
        get defaultValue(): T;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ChannelInboundHandler implements Internal.ChannelHandler {
        channelInactive(arg0: Internal.ChannelHandlerContext): void;
        channelUnregistered(arg0: Internal.ChannelHandlerContext): void;
        channelReadComplete(arg0: Internal.ChannelHandlerContext): void;
        exceptionCaught(arg0: Internal.ChannelHandlerContext, arg1: Internal.Throwable): void;
        channelActive(arg0: Internal.ChannelHandlerContext): void;
        handlerAdded(arg0: Internal.ChannelHandlerContext): void;
        userEventTriggered(arg0: Internal.ChannelHandlerContext, arg1: object): void;
        channelRegistered(arg0: Internal.ChannelHandlerContext): void;
        handlerRemoved(arg0: Internal.ChannelHandlerContext): void;
        channelWritabilityChanged(arg0: Internal.ChannelHandlerContext): void;
        channelRead(arg0: Internal.ChannelHandlerContext, arg1: object): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Products$P1 <F, T1> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        apply<R>(arg0: Internal.Applicative<F, object>, arg1: (arg0: T1) => R): Internal.App<F, R>;
        apply<R>(arg0: Internal.Applicative<F, object>, arg1: Internal.App<F, (arg0: T1) => R>): Internal.App<F, R>;
        hashCode(): number;
        and<T2, T3, T4, T5, T6, T7>(arg0: Internal.Products$P6<F, T2, T3, T4, T5, T6, T7>): Internal.Products$P7<F, T1, T2, T3, T4, T5, T6, T7>;
        and<T2, T3, T4, T5, T6, T7, T8>(arg0: Internal.Products$P7<F, T2, T3, T4, T5, T6, T7, T8>): Internal.Products$P8<F, T1, T2, T3, T4, T5, T6, T7, T8>;
        and<T2, T3, T4, T5>(arg0: Internal.Products$P4<F, T2, T3, T4, T5>): Internal.Products$P5<F, T1, T2, T3, T4, T5>;
        and<T2, T3>(arg0: Internal.Products$P2<F, T2, T3>): Internal.Products$P3<F, T1, T2, T3>;
        and<T2, T3, T4>(arg0: Internal.Products$P3<F, T2, T3, T4>): Internal.Products$P4<F, T1, T2, T3, T4>;
        and<T2>(arg0: Internal.App<F, T2>): Internal.Products$P2<F, T1, T2>;
        and<T2, T3, T4, T5, T6>(arg0: Internal.Products$P5<F, T2, T3, T4, T5, T6>): Internal.Products$P6<F, T1, T2, T3, T4, T5, T6>;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        t1(): Internal.App<F, T1>;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ConfiguredEndimationInterpolator <C, I> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        apply(arg0: Internal.EndimationInterpolator$VecConsumer, arg1: Internal.EndimationKeyframe[], arg2: Internal.EndimationKeyframe, arg3: number, arg4: number, arg5: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        static readonly CODEC : Internal.Codec<Internal.ConfiguredEndimationInterpolator<object, object>>;
        get easer(): (arg0: object) => object;
        get interpolator(): I;
        get config(): C;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface ClassShutter {
        visibleToScripts(arg0: string, arg1: number): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class FileSystemProvider {
        getFileStore(arg0: Internal.Path): Internal.FileStore;
        isSameFile(arg0: Internal.Path, arg1: Internal.Path): boolean;
        newByteChannel(arg0: Internal.Path, arg1: Internal.Set<Internal.OpenOption>, arg2: Internal.FileAttribute<object>[]): Internal.SeekableByteChannel;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        getFileAttributeView<V>(arg0: Internal.Path, arg1: Internal.Class<V>, arg2: Internal.LinkOption[]): V;
        newAsynchronousFileChannel(arg0: Internal.Path, arg1: Internal.Set<Internal.OpenOption>, arg2: Internal.ExecutorService, arg3: Internal.FileAttribute<object>[]): Internal.AsynchronousFileChannel;
        notifyAll(): void;
        createSymbolicLink(arg0: Internal.Path, arg1: Internal.Path, arg2: Internal.FileAttribute<object>[]): void;
        static installedProviders(): Internal.List<Internal.FileSystemProvider>;
        delete(arg0: Internal.Path): void;
        notify(): void;
        createLink(arg0: Internal.Path, arg1: Internal.Path): void;
        setAttribute(arg0: Internal.Path, arg1: string, arg2: object, arg3: Internal.LinkOption[]): void;
        newFileChannel(arg0: Internal.Path, arg1: Internal.Set<Internal.OpenOption>, arg2: Internal.FileAttribute<object>[]): Internal.FileChannel;
        newInputStream(arg0: Internal.Path, arg1: Internal.OpenOption[]): Internal.InputStream;
        hashCode(): number;
        readAttributes<A>(arg0: Internal.Path, arg1: Internal.Class<A>, arg2: Internal.LinkOption[]): A;
        readAttributes(arg0: Internal.Path, arg1: string, arg2: Internal.LinkOption[]): Map<string, object>;
        newOutputStream(arg0: Internal.Path, arg1: Internal.OpenOption[]): Internal.OutputStream;
        getPath(arg0: Internal.URI): Internal.Path;
        createDirectory(arg0: Internal.Path, arg1: Internal.FileAttribute<object>[]): void;
        copy(arg0: Internal.Path, arg1: Internal.Path, arg2: Internal.CopyOption[]): void;
        move(arg0: Internal.Path, arg1: Internal.Path, arg2: Internal.CopyOption[]): void;
        newFileSystem(arg0: Internal.URI, arg1: Map<string, object>): Internal.FileSystem;
        newFileSystem(arg0: Internal.Path, arg1: Map<string, object>): Internal.FileSystem;
        deleteIfExists(arg0: Internal.Path): boolean;
        newDirectoryStream(arg0: Internal.Path, arg1: Internal.DirectoryStream$Filter<Internal.Path>): Internal.DirectoryStream<Internal.Path>;
        getFileSystem(arg0: Internal.URI): Internal.FileSystem;
        checkAccess(arg0: Internal.Path, arg1: Internal.AccessMode[]): void;
        readSymbolicLink(arg0: Internal.Path): Internal.Path;
        isHidden(arg0: Internal.Path): boolean;
        equals(arg0: object): boolean;
        toString(): string;
        get scheme(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class AbstractInt2IntFunction implements Internal.Int2IntFunction, Internal.Serializable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        getOrDefault(arg0: object, arg1: object): object;
        getOrDefault(arg0: number, arg1: number): number;
        getOrDefault(arg0: object, arg1: number): number;
        notifyAll(): void;
        andThenShort(arg0: Internal.Int2ShortFunction): Internal.Int2ShortFunction;
        composeByte(arg0: Internal.Byte2IntFunction): Internal.Byte2IntFunction;
        andThenInt(arg0: Internal.Int2IntFunction): Internal.Int2IntFunction;
        composeReference<T>(arg0: Internal.Reference2IntFunction<T>): Internal.Reference2IntFunction<T>;
        andThen<T>(arg0: (arg0: number) => T): (arg0: number) => T;
        andThen(arg0: Internal.IntUnaryOperator): Internal.IntUnaryOperator;
        put(arg0: object, arg1: object): object;
        put(arg0: number, arg1: number): number;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: object): object;
        remove(arg0: object): number;
        notify(): void;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Int2DoubleFunction): Internal.Int2DoubleFunction;
        andThenObject<T>(arg0: Internal.Int2ObjectFunction<T>): Internal.Int2ObjectFunction<T>;
        hashCode(): number;
        get(arg0: object): number;
        get(arg0: object): object;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Int2LongFunction): Internal.Int2LongFunction;
        composeLong(arg0: Internal.Long2IntFunction): Internal.Long2IntFunction;
        andThenByte(arg0: Internal.Int2ByteFunction): Internal.Int2ByteFunction;
        andThenFloat(arg0: Internal.Int2FloatFunction): Internal.Int2FloatFunction;
        applyAsInt(arg0: number): number;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2IntFunction): Internal.Int2IntFunction;
        clear(): void;
        composeFloat(arg0: Internal.Float2IntFunction): Internal.Float2IntFunction;
        andThenChar(arg0: Internal.Int2CharFunction): Internal.Int2CharFunction;
        composeObject<T>(arg0: Internal.Object2IntFunction<T>): Internal.Object2IntFunction<T>;
        size(): number;
        compose<T>(arg0: (arg0: T) => number): (arg0: T) => number;
        compose(arg0: Internal.IntUnaryOperator): Internal.IntUnaryOperator;
        composeShort(arg0: Internal.Short2IntFunction): Internal.Short2IntFunction;
        equals(arg0: object): boolean;
        andThenReference<T>(arg0: Internal.Int2ReferenceFunction<T>): Internal.Int2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2IntFunction): Internal.Char2IntFunction;
        toString(): string;
        composeDouble(arg0: Internal.Double2IntFunction): Internal.Double2IntFunction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Pose extends Internal.Enum<Internal.Pose> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(arg0: string): Internal.Pose;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.Pose[];
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly SLEEPING : Internal.Pose;
        static readonly FALL_FLYING : Internal.Pose;
        static readonly LONG_JUMPING : Internal.Pose;
        static readonly DYING : Internal.Pose;
        static readonly CROUCHING : Internal.Pose;
        static readonly STANDING : Internal.Pose;
        static readonly SWIMMING : Internal.Pose;
        static readonly SPIN_ATTACK : Internal.Pose;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ChannelOutboundBuffer {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        isWritable(): boolean;
        notify(): void;
        addMessage(arg0: object, arg1: number, arg2: Internal.ChannelPromise): void;
        remove(): boolean;
        remove(arg0: Internal.Throwable): boolean;
        addFlush(): void;
        totalPendingWriteBytes(): number;
        forEachFlushedMessage(arg0: Internal.ChannelOutboundBuffer$MessageProcessor): void;
        current(): object;
        setUserDefinedWritability(arg0: number, arg1: boolean): void;
        hashCode(): number;
        nioBufferSize(): number;
        recycle(): void;
        bytesBeforeWritable(): number;
        currentProgress(): number;
        bytesBeforeUnwritable(): number;
        getUserDefinedWritability(arg0: number): boolean;
        isEmpty(): boolean;
        removeBytes(arg0: number): void;
        nioBuffers(): Internal.ByteBuffer[];
        nioBuffers(arg0: number, arg1: number): Internal.ByteBuffer[];
        nioBufferCount(): number;
        size(): number;
        equals(arg0: object): boolean;
        progress(arg0: number): void;
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract class BlockType {
        applyDefaults(builder: Internal.BlockBuilder): void;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        generateBlockModels(builder: Internal.BlockBuilder): Map<ResourceLocation, Internal.JsonObject>;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        generateData(builder: Internal.BlockBuilder, generator: Internal.DataJsonGenerator): void;
        createBlock(arg0: Internal.BlockBuilder): Internal.Block;
        toString(): string;
        generateAssets(b: Internal.BlockBuilder, generator: Internal.AssetJsonGenerator): void;
        notify(): void;
        readonly name : string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IntCollection implements Internal.Collection<number>, Internal.IntIterable {
        intIterator(): Internal.IntIterator;
        intSpliterator(): Internal.IntSpliterator;
        remove(arg0: object): boolean;
        intStream(): Internal.IntStream;
        removeAll(arg0: Internal.IntCollection): boolean;
        iterator(): Internal.IntIterator;
        iterator(): Internal.Iterator<any>;
        stream(): Internal.Stream<number>;
        hashCode(): number;
        toIntArray(arg0: number[]): number[];
        toIntArray(): number[];
        toArray(arg0: number[]): number[];
        toArray<T>(arg0: T[]): T[];
        toArray(): object[];
        parallelStream(): Internal.Stream<number>;
        rem(arg0: number): boolean;
        add(arg0: number): boolean;
        add(arg0: number): boolean;
        add(arg0: object): boolean;
        spliterator(): Internal.Spliterator<any>;
        spliterator(): Internal.IntSpliterator;
        forEach(arg0: Internal.IntConsumer): void;
        forEach(arg0: it.unimi.dsi.fastutil.ints.IntConsumer): void;
        containsAll(arg0: Internal.IntCollection): boolean;
        isEmpty(): boolean;
        clear(): void;
        removeIf(arg0: (arg0: number) => boolean): boolean;
        removeIf(arg0: Internal.IntPredicate): boolean;
        removeIf(arg0: it.unimi.dsi.fastutil.ints.IntPredicate): boolean;
        contains(arg0: object): boolean;
        contains(arg0: number): boolean;
        size(): number;
        addAll(arg0: Internal.IntCollection): boolean;
        equals(arg0: object): boolean;
        intParallelStream(): Internal.IntStream;
        retainAll(arg0: Internal.IntCollection): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ServerPlayerDataJS extends Internal.PlayerDataJS<Internal.ServerPlayer, Internal.ServerPlayerJS> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        notify(): void;
        hashCode(): number;
        equals(arg0: object): boolean;
        hasClientMod(): boolean;
        toString(): string;
        get server(): Internal.ServerJS;
        get player(): Internal.ServerPlayerJS;
        get player(): Internal.PlayerJS<any>;
        get name(): string;
        get profile(): Internal.GameProfile;
        get id(): Internal.UUID;
        get overworld(): Internal.LevelJS;
        get minecraftPlayer(): Internal.ServerPlayer;
        get minecraftPlayer(): Internal.Player;
        get data(): Internal.AttachedData;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Container implements Internal.Clearable {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Spliterator$OfDouble implements Internal.Spliterator$OfPrimitive<number, Internal.DoubleConsumer, Internal.Spliterator$OfDouble> {
        trySplit(): Internal.Spliterator$OfPrimitive<any, any, any>;
        trySplit(): Internal.Spliterator<any>;
        trySplit(): Internal.Spliterator$OfDouble;
        characteristics(): number;
        tryAdvance(arg0: Internal.DoubleConsumer): boolean;
        tryAdvance(arg0: (arg0: number) => void): boolean;
        tryAdvance(arg0: object): boolean;
        estimateSize(): number;
        hasCharacteristics(arg0: number): boolean;
        forEachRemaining(arg0: object): void;
        forEachRemaining(arg0: Internal.DoubleConsumer): void;
        forEachRemaining(arg0: (arg0: number) => void): void;
        get exactSizeIfKnown(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface EventExecutor implements Internal.EventExecutorGroup {
        inEventLoop(arg0: Internal.Thread): boolean;
        inEventLoop(): boolean;
        next(): Internal.EventExecutor;
        isShuttingDown(): boolean;
        parent(): Internal.EventExecutorGroup;
        newProgressivePromise<V>(): Internal.ProgressivePromise<V>;
        newSucceededFuture<V>(arg0: V): Internal.Future<V>;
        isTerminated(): boolean;
        awaitTermination(arg0: number, arg1: Internal.TimeUnit): boolean;
        newFailedFuture<V>(arg0: Internal.Throwable): Internal.Future<V>;
        execute(arg0: Internal.Runnable): void;
        shutdown(): void;
        isShutdown(): boolean;
        newPromise<V>(): Internal.Promise<V>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class BlockEntityWithoutLevelRenderer implements Internal.ResourceManagerReloadListener {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface DoubleUnaryOperator {
        applyAsDouble(arg0: number): number;
        compose(arg0: Internal.DoubleUnaryOperator): Internal.DoubleUnaryOperator;
        andThen(arg0: Internal.DoubleUnaryOperator): Internal.DoubleUnaryOperator;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Products$P12 <F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        apply<R>(arg0: Internal.Applicative<F, object>, arg1: Internal.Function12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R>): Internal.App<F, R>;
        apply<R>(arg0: Internal.Applicative<F, object>, arg1: Internal.App<F, Internal.Function12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R>>): Internal.App<F, R>;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class ColorSettings {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        static tryParseColor(arg0: string): number;
        static readonly CODEC : Internal.Codec<Internal.ColorSettings>;
        get moonTextureColor(): number;
        get skyLightColor(): number;
        get moonTextureBlendStrength(): number;
        get gLSkyLightColor(): Internal.Vector3f;
        get gLMoonColor(): Internal.Vector3f;
        get skyLightBlendStrength(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class EventObject implements Internal.Serializable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        get source(): object;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class JsonPrimitive extends Internal.JsonElement {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        isJsonArray(): boolean;
        notify(): void;
        isJsonPrimitive(): boolean;
        isBoolean(): boolean;
        isJsonObject(): boolean;
        isNumber(): boolean;
        hashCode(): number;
        isString(): boolean;
        isJsonNull(): boolean;
        deepCopy(): Internal.JsonElement;
        deepCopy(): Internal.JsonPrimitive;
        equals(arg0: object): boolean;
        toString(): string;
        get asFloat(): number;
        get asByte(): number;
        get asBigDecimal(): Internal.BigDecimal;
        get asNumber(): Internal.Number;
        get asCharacter(): string;
        get asString(): string;
        get asInt(): number;
        get asLong(): number;
        get asBigInteger(): Internal.BigInteger;
        get asJsonObject(): Internal.JsonObject;
        get asJsonNull(): Internal.JsonNull;
        get asDouble(): number;
        get asJsonArray(): Internal.JsonArray;
        get asJsonPrimitive(): Internal.JsonPrimitive;
        get asBoolean(): boolean;
        get asShort(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface LevelChunk$PostLoadProcessor {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface SlotAccess {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Principal {
        hashCode(): number;
        equals(arg0: object): boolean;
        toString(): string;
        implies(arg0: Internal.Subject): boolean;
        get name(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    class Rotation extends Internal.Enum<Internal.Rotation> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(arg0: string): Internal.Rotation;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): Internal.Rotation[];
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly COUNTERCLOCKWISE_90 : Internal.Rotation;
        static readonly CLOCKWISE_90 : Internal.Rotation;
        static readonly CLOCKWISE_180 : Internal.Rotation;
        static readonly NONE : Internal.Rotation;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
}
declare namespace corgitaco.enhancedcelestials.mixin.access {
    abstract interface ChunkAccess {
        get level(): Internal.Level;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface RegistryAccess {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
}
declare namespace java_.util.function_ {
    abstract interface Supplier <T> {
        get(): T;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IntBinaryOperator {
        applyAsInt(arg0: number, arg1: number): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
}
declare namespace me.jellysquid.mods.lithium.mixin.chunk.entity_class_groups {
    abstract interface ServerWorldAccessor {
        get entityManager(): Internal.PersistentEntitySectionManager<Internal.Entity>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
}
declare namespace io.netty.util.concurrent {
    abstract interface ScheduledFuture <V> implements Internal.Future<V>, Internal.ScheduledFuture<V> {
        cancel(arg0: boolean): boolean;
        isCancelled(): boolean;
        getDelay(arg0: Internal.TimeUnit): number;
        get(arg0: number, arg1: Internal.TimeUnit): V;
        get(): V;
        isCancellable(): boolean;
        await(arg0: number, arg1: Internal.TimeUnit): boolean;
        await(arg0: number): boolean;
        cause(): Internal.Throwable;
        awaitUninterruptibly(arg0: number): boolean;
        awaitUninterruptibly(arg0: number, arg1: Internal.TimeUnit): boolean;
        compareTo(arg0: T): number;
        isDone(): boolean;
        isSuccess(): boolean;
        get now(): V;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
}
declare namespace org.apache.logging.log4j {
    class Level implements Internal.Comparable<org.apache.logging.log4j.Level>, Internal.Serializable {
        isMoreSpecificThan(level: org.apache.logging.log4j.Level): boolean;
        isLessSpecificThan(level: org.apache.logging.log4j.Level): boolean;
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        static forName(name: string, intValue: number): org.apache.logging.log4j.Level;
        static valueOf<T>(enumType: Internal.Class<T>, name: string): T;
        static valueOf(name: string): org.apache.logging.log4j.Level;
        notifyAll(): void;
        static values(): org.apache.logging.log4j.Level[];
        isInRange(minLevel: org.apache.logging.log4j.Level, maxLevel: org.apache.logging.log4j.Level): boolean;
        compareTo(other: object): number;
        compareTo(other: org.apache.logging.log4j.Level): number;
        intLevel(): number;
        notify(): void;
        static getLevel(name: string): org.apache.logging.log4j.Level;
        static toLevel(sArg: string): org.apache.logging.log4j.Level;
        static toLevel(name: string, defaultLevel: org.apache.logging.log4j.Level): org.apache.logging.log4j.Level;
        hashCode(): number;
        equals(other: object): boolean;
        clone(): object;
        clone(): org.apache.logging.log4j.Level;
        name(): string;
        toString(): string;
        static readonly TRACE : org.apache.logging.log4j.Level;
        static readonly ALL : org.apache.logging.log4j.Level;
        static readonly CATEGORY : "Level";
        static readonly ERROR : org.apache.logging.log4j.Level;
        static readonly INFO : org.apache.logging.log4j.Level;
        static readonly FATAL : org.apache.logging.log4j.Level;
        static readonly DEBUG : org.apache.logging.log4j.Level;
        static readonly OFF : org.apache.logging.log4j.Level;
        static readonly WARN : org.apache.logging.log4j.Level;
        get declaringClass(): Internal.Class<org.apache.logging.log4j.Level>;
        get standardLevel(): Internal.StandardLevel;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
}
declare namespace com.mojang.brigadier {
    abstract interface Message {
        get string(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
}
declare namespace io.netty.channel {
    abstract interface Channel implements Internal.AttributeMap, Internal.ChannelOutboundInvoker, Internal.Comparable<io.netty.channel.Channel> {
        disconnect(arg0: Internal.ChannelPromise): Internal.ChannelFuture;
        disconnect(): Internal.ChannelFuture;
        parent(): io.netty.channel.Channel;
        metadata(): Internal.ChannelMetadata;
        newProgressivePromise(): Internal.ChannelProgressivePromise;
        eventLoop(): Internal.EventLoop;
        compareTo(arg0: T): number;
        isWritable(): boolean;
        isActive(): boolean;
        unsafe(): Internal.Channel$Unsafe;
        writeAndFlush(arg0: object, arg1: Internal.ChannelPromise): Internal.ChannelFuture;
        writeAndFlush(arg0: object): Internal.ChannelFuture;
        bind(arg0: Internal.SocketAddress): Internal.ChannelFuture;
        bind(arg0: Internal.SocketAddress, arg1: Internal.ChannelPromise): Internal.ChannelFuture;
        flush(): io.netty.channel.Channel;
        flush(): Internal.ChannelOutboundInvoker;
        bytesBeforeWritable(): number;
        id(): Internal.ChannelId;
        close(arg0: Internal.ChannelPromise): Internal.ChannelFuture;
        close(): Internal.ChannelFuture;
        write(arg0: object): Internal.ChannelFuture;
        write(arg0: object, arg1: Internal.ChannelPromise): Internal.ChannelFuture;
        connect(arg0: Internal.SocketAddress, arg1: Internal.SocketAddress, arg2: Internal.ChannelPromise): Internal.ChannelFuture;
        connect(arg0: Internal.SocketAddress, arg1: Internal.ChannelPromise): Internal.ChannelFuture;
        connect(arg0: Internal.SocketAddress): Internal.ChannelFuture;
        connect(arg0: Internal.SocketAddress, arg1: Internal.SocketAddress): Internal.ChannelFuture;
        remoteAddress(): Internal.SocketAddress;
        newPromise(): Internal.ChannelPromise;
        read(): io.netty.channel.Channel;
        read(): Internal.ChannelOutboundInvoker;
        bytesBeforeUnwritable(): number;
        deregister(): Internal.ChannelFuture;
        deregister(arg0: Internal.ChannelPromise): Internal.ChannelFuture;
        newFailedFuture(arg0: Internal.Throwable): Internal.ChannelFuture;
        pipeline(): Internal.ChannelPipeline;
        isOpen(): boolean;
        newSucceededFuture(): Internal.ChannelFuture;
        voidPromise(): Internal.ChannelPromise;
        closeFuture(): Internal.ChannelFuture;
        localAddress(): Internal.SocketAddress;
        isRegistered(): boolean;
        alloc(): Internal.ByteBufAllocator;
        config(): Internal.ChannelConfig;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
}
declare namespace net.minecraft.world.level.material {
    class Material {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        notifyAll(): void;
        equals(arg0: object): boolean;
        toString(): string;
        notify(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
}
declare namespace com.mojang.datafixers.util {
    class Unit extends Internal.Enum<com.mojang.datafixers.util.Unit> {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        hashCode(): number;
        static valueOf(arg0: string): com.mojang.datafixers.util.Unit;
        notifyAll(): void;
        equals(arg0: object): boolean;
        static values(): com.mojang.datafixers.util.Unit[];
        name(): string;
        toString(): string;
        compareTo(arg0: object): number;
        compareTo(arg0: E): number;
        notify(): void;
        ordinal(): number;
        static readonly INSTANCE : com.mojang.datafixers.util.Unit;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
}
declare namespace net.blay09.mods.clienttweaks.mixin {
    abstract interface LivingEntityAccessor {
        get dataEffectColorId(): Internal.EntityDataAccessor<number>;
        get dataEffectAmbienceId(): Internal.EntityDataAccessor<boolean>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
}
declare namespace me.jellysquid.mods.lithium.mixin.ai.nearby_entity_tracking {
    abstract interface ServerEntityManagerAccessor <T> {
        get cache(): Internal.EntitySectionStorage<T>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
}
declare namespace it.unimi.dsi.fastutil {
    abstract interface Function <K, V> implements Internal.Function<K, V> {
        getOrDefault(arg0: object, arg1: V): V;
        size(): number;
        apply(arg0: K): V;
        containsKey(arg0: object): boolean;
        get(arg0: object): V;
        clear(): void;
        put(arg0: K, arg1: V): V;
        remove(arg0: object): V;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
}
declare namespace io.netty.util {
    abstract interface Attribute <T> {
        set(arg0: T): void;
        compareAndSet(arg0: T, arg1: T): boolean;
        get(): T;
        getAndSet(arg0: T): T;
        key(): Internal.AttributeKey<T>;
        remove(): void;
        set ifAbsent(arg0: T);
        get andRemove(): T;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
}
declare namespace dev.architectury.fluid {
    class FluidStack {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        getOrCreateChildTag(childName: string): Internal.CompoundTag;
        notify(): void;
        static empty(): dev.architectury.fluid.FluidStack;
        getChildTag(childName: string): Internal.CompoundTag;
        hashCode(): number;
        static create(fluid: Internal.Fluid, amount: number, tag: Internal.CompoundTag): dev.architectury.fluid.FluidStack;
        static create(fluid: () => Internal.Fluid, amount: number): dev.architectury.fluid.FluidStack;
        static create(stack: dev.architectury.fluid.FluidStack, amount: number): dev.architectury.fluid.FluidStack;
        static create(fluid: () => Internal.Fluid, amount: number, tag: Internal.CompoundTag): dev.architectury.fluid.FluidStack;
        static create(fluid: Internal.Fluid, amount: number): dev.architectury.fluid.FluidStack;
        copy(): dev.architectury.fluid.FluidStack;
        write(buf: Internal.FriendlyByteBuf): void;
        write(tag: Internal.CompoundTag): Internal.CompoundTag;
        removeChildTag(childName: string): void;
        grow(amount: number): void;
        static read(buf: Internal.FriendlyByteBuf): dev.architectury.fluid.FluidStack;
        static read(tag: Internal.CompoundTag): dev.architectury.fluid.FluidStack;
        hasTag(): boolean;
        shrink(amount: number): void;
        isEmpty(): boolean;
        isFluidStackEqual(other: dev.architectury.fluid.FluidStack): boolean;
        static bucketAmount(): number;
        equals(o: object): boolean;
        toString(): string;
        get rawFluidSupplier(): () => Internal.Fluid;
        get rawFluid(): Internal.Fluid;
        get name(): Internal.Component;
        set tag(tag: Internal.CompoundTag);
        set amount(amount: number);
        get amount(): number;
        get translationKey(): string;
        get tag(): Internal.CompoundTag;
        get orCreateTag(): Internal.CompoundTag;
        get fluid(): Internal.Fluid;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
}
declare namespace it.unimi.dsi.fastutil.ints {
    abstract interface IntPredicate implements Internal.Predicate<number>, Internal.IntPredicate {
        or(arg0: (arg0: number) => boolean): (arg0: number) => boolean;
        or(arg0: Internal.IntPredicate): it.unimi.dsi.fastutil.ints.IntPredicate;
        or(arg0: Internal.IntPredicate): Internal.IntPredicate;
        or(arg0: it.unimi.dsi.fastutil.ints.IntPredicate): it.unimi.dsi.fastutil.ints.IntPredicate;
        test(arg0: number): boolean;
        test(arg0: object): boolean;
        test(arg0: number): boolean;
        and(arg0: Internal.IntPredicate): Internal.IntPredicate;
        and(arg0: Internal.IntPredicate): it.unimi.dsi.fastutil.ints.IntPredicate;
        and(arg0: it.unimi.dsi.fastutil.ints.IntPredicate): it.unimi.dsi.fastutil.ints.IntPredicate;
        and(arg0: (arg0: number) => boolean): (arg0: number) => boolean;
        negate(): Internal.IntPredicate;
        negate(): Internal.Predicate<any>;
        negate(): it.unimi.dsi.fastutil.ints.IntPredicate;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface IntConsumer implements Internal.Consumer<number>, Internal.IntConsumer {
        andThen(arg0: Internal.IntConsumer): Internal.IntConsumer;
        andThen(arg0: Internal.IntConsumer): it.unimi.dsi.fastutil.ints.IntConsumer;
        andThen(arg0: (arg0: number) => void): (arg0: number) => void;
        andThen(arg0: it.unimi.dsi.fastutil.ints.IntConsumer): it.unimi.dsi.fastutil.ints.IntConsumer;
        accept(arg0: object): void;
        accept(arg0: number): void;
        accept(arg0: number): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
}
declare namespace org.apache.commons.lang3.tuple {
    abstract class Pair <L, R> implements Internal.Map$Entry<L, R>, Internal.Comparable<org.apache.commons.lang3.tuple.Pair<L, R>>, Internal.Serializable {
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        compareTo(arg0: object): number;
        compareTo(arg0: org.apache.commons.lang3.tuple.Pair<L, R>): number;
        notify(): void;
        hashCode(): number;
        static of<L, R>(arg0: Internal.Map$Entry<L, R>): org.apache.commons.lang3.tuple.Pair<L, R>;
        static of<L, R>(arg0: L, arg1: R): org.apache.commons.lang3.tuple.Pair<L, R>;
        equals(arg0: object): boolean;
        toString(arg0: string): string;
        toString(): string;
        static emptyArray<L, R>(): org.apache.commons.lang3.tuple.Pair<L, R>[];
        static readonly EMPTY_ARRAY : org.apache.commons.lang3.tuple.Pair<object, object>[];
        get key(): L;
        get value(): R;
        get right(): R;
        set value(arg0: V);
        get left(): L;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
}
declare namespace org.objectweb.asm {
    class Type {
        static getDescriptor(arg0: Internal.Class<object>): string;
        static getArgumentTypes(arg0: string): org.objectweb.asm.Type[];
        static getArgumentTypes(arg0: Internal.Method): org.objectweb.asm.Type[];
        wait(arg0: number, arg1: number): void;
        wait(): void;
        wait(arg0: number): void;
        notifyAll(): void;
        static getArgumentsAndReturnSizes(arg0: string): number;
        notify(): void;
        static getMethodDescriptor(arg0: org.objectweb.asm.Type, arg1: org.objectweb.asm.Type[]): string;
        static getMethodDescriptor(arg0: Internal.Method): string;
        static getReturnType(arg0: string): org.objectweb.asm.Type;
        static getReturnType(arg0: Internal.Method): org.objectweb.asm.Type;
        static getInternalName(arg0: Internal.Class<object>): string;
        static getType(arg0: Internal.Class<object>): org.objectweb.asm.Type;
        static getType(arg0: string): org.objectweb.asm.Type;
        static getType(arg0: Internal.Method): org.objectweb.asm.Type;
        static getType(arg0: Internal.Constructor<object>): org.objectweb.asm.Type;
        hashCode(): number;
        equals(arg0: object): boolean;
        static getObjectType(arg0: string): org.objectweb.asm.Type;
        static getConstructorDescriptor(arg0: Internal.Constructor<object>): string;
        static getMethodType(arg0: org.objectweb.asm.Type, arg1: org.objectweb.asm.Type[]): org.objectweb.asm.Type;
        static getMethodType(arg0: string): org.objectweb.asm.Type;
        toString(): string;
        getOpcode(arg0: number): number;
        static readonly CHAR_TYPE : org.objectweb.asm.Type;
        static readonly FLOAT : 6;
        static readonly DOUBLE_TYPE : org.objectweb.asm.Type;
        static readonly ARRAY : 9;
        static readonly LONG_TYPE : org.objectweb.asm.Type;
        static readonly BYTE_TYPE : org.objectweb.asm.Type;
        static readonly CHAR : 2;
        static readonly VOID_TYPE : org.objectweb.asm.Type;
        static readonly OBJECT : 10;
        static readonly BOOLEAN_TYPE : org.objectweb.asm.Type;
        static readonly FLOAT_TYPE : org.objectweb.asm.Type;
        static readonly BOOLEAN : 1;
        static readonly INT : 5;
        static readonly SHORT : 4;
        static readonly BYTE : 3;
        static readonly METHOD : 11;
        static readonly SHORT_TYPE : org.objectweb.asm.Type;
        static readonly DOUBLE : 8;
        static readonly VOID : 0;
        static readonly LONG : 7;
        static readonly INT_TYPE : org.objectweb.asm.Type;
        get descriptor(): string;
        get elementType(): org.objectweb.asm.Type;
        get argumentTypes(): org.objectweb.asm.Type[];
        get argumentsAndReturnSizes(): number;
        get dimensions(): number;
        get sort(): number;
        get size(): number;
        get returnType(): org.objectweb.asm.Type;
        get internalName(): string;
        get className(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
}
declare namespace blusunrize.immersiveengineering.mixin.accessors {
    abstract interface EntityAccess {
        set remainingFireTicks(arg0: number);
        get remainingFireTicks(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
}
declare namespace com.jozufozu.flywheel.api {
    abstract interface Material <D> {
        getModel(arg0: Internal.BlockState): Internal.Instancer<D>;
        getModel(arg0: Internal.PartialModel, arg1: Internal.BlockState): Internal.Instancer<D>;
        getModel(arg0: Internal.PartialModel, arg1: Internal.BlockState, arg2: Internal.Direction, arg3: () => Internal.PoseStack): Internal.Instancer<D>;
        getModel(arg0: Internal.PartialModel, arg1: Internal.BlockState, arg2: Internal.Direction): Internal.Instancer<D>;
        getModel(arg0: Internal.PartialModel): Internal.Instancer<D>;
        model(arg0: object, arg1: () => Internal.Model): Internal.Instancer<D>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
}
declare namespace me.jellysquid.mods.sodium.client.util.frustum {
    abstract interface Frustum {
        isBoxVisible(minX: number, minY: number, minZ: number, maxX: number, maxY: number, maxZ: number): boolean;
        testBox(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): Internal.Frustum$Visibility;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
}
declare namespace java_.util.concurrent {
    abstract interface Future <V> {
        cancel(arg0: boolean): boolean;
        isCancelled(): boolean;
        get(arg0: number, arg1: Internal.TimeUnit): V;
        get(): V;
        isDone(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
    abstract interface Callable <V> {
        call(): V;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
}
declare namespace net.minecraft.tags {
    abstract interface Tag <T> {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
}
declare namespace dev.latvian.mods.rhino {
    abstract interface Function implements Internal.Scriptable, Internal.Callable {
        hasInstance(arg0: Internal.Scriptable): boolean;
        construct(arg0: Internal.Context, arg1: Internal.Scriptable, arg2: object[]): Internal.Scriptable;
        delete(arg0: string): void;
        delete(arg0: number): void;
        put(arg0: number, arg1: Internal.Scriptable, arg2: object): void;
        put(arg0: string, arg1: Internal.Scriptable, arg2: object): void;
        call(arg0: Internal.Context, arg1: Internal.Scriptable, arg2: Internal.Scriptable, arg3: object[]): object;
        get(arg0: number, arg1: Internal.Scriptable): object;
        get(arg0: string, arg1: Internal.Scriptable): object;
        has(arg0: string, arg1: Internal.Scriptable): boolean;
        has(arg0: number, arg1: Internal.Scriptable): boolean;
        set parentScope(arg0: Internal.Scriptable);
        get ids(): object[];
        get allIds(): object[];
        set prototype(arg0: Internal.Scriptable);
        get prototype(): Internal.Scriptable;
        get className(): string;
        get parentScope(): Internal.Scriptable;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
}
declare namespace me.jellysquid.mods.sodium.client.model.vertex.type {
    abstract interface VertexType <T> {
        createFallbackWriter(arg0: Internal.VertexConsumer): T;
        asBlittable(): Internal.BlittableVertexType<T>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        private constructor();
    }
}
declare namespace Document {
    class CreateRecipes {
        /**
        * Creates a recipe for Crushing Wheels.
        *
        * Specifying chances on outputs will make them output with chance.
        */
        crushing(outputs: Internal.ItemStackJS[], input: Internal.IngredientJS): Internal.ProcessingRecipeJS;
        /**
        * Creates a recipe for Millstone.
        *
        * Specifying chances on outputs will make them output with chance.
        */
        milling(outputs: Internal.ItemStackJS[], input: Internal.IngredientJS): Internal.ProcessingRecipeJS;
        /**
        * Creates a recipe for Compacting.
        */
        compacting(output: Type.ItemStackOrFluid, inputs: Type.IngredientOrFluid[]): Internal.ProcessingRecipeJS;
        /**
        * Creates a recipe for Mixing.
        */
        mixing(output: Type.ItemStackOrFluid, inputs: Type.IngredientOrFluid[]): Internal.ProcessingRecipeJS;
        /**
        * Creates a recipe for Pressing.
        *
        * Pressing uses Depot or Belt as container, and can only have 1 item slot as input.
        *
        * Pressing is available as an Assembly step.
        */
        pressing(output: Internal.ItemStackJS, input: Internal.IngredientJS): Internal.ProcessingRecipeJS;
        /**
        * Creates a recipe for Deploying.
        *
        * Deploying is available as an Assembly step.
        */
        deploying(output: Internal.ItemStackJS, input: Internal.IngredientJS): Internal.ProcessingRecipeJS;
        /**
        * Creates a recipe for Cutting.
        *
        * Cutting is available as an Assembly step.
        */
        cutting(output: Internal.ItemStackJS, input: Internal.IngredientJS): Internal.ProcessingRecipeJS;
        /**
        * Creates a recipe for Filling.
        *
        * Filling is available as an Assembly step.
        */
        filling(output: Internal.ItemStackJS, input: Type.IngredientOrFluid[]): Internal.ProcessingRecipeJS;
        /**
        * Creates a recipe for Sequenced Assembly.
        *
        * The sequnce must use recipes which is available for Assembly.
        */
        sequenced_assembly(output: Internal.ItemStackJS[], input: Internal.IngredientJS, sequence: Internal.ProcessingRecipeJS[]): Internal.SequencedAssemblyRecipeJS;
        /**
        * Creates a recipe for Splashing.
        */
        splashing(output: Internal.ItemStackJS[], input: Internal.IngredientJS): Internal.ProcessingRecipeJS;
        /**
        * Creates a recipe for Haunting.
        */
        haunting(output: Internal.ItemStackJS[], input: Internal.IngredientJS): Internal.ProcessingRecipeJS;
        /**
        * Creates a recipe for Sandpaper Polishing.
        */
        sandpaper_polishing(output: Internal.ItemStackJS, input: Internal.IngredientJS): Internal.ProcessingRecipeJS;
        /**
        * Creates a recipe for Mechanical Crafting.
        */
        mechanical_crafting(output: Internal.ItemStackJS, pattern: string[], items: Map<string, Internal.IngredientJS>): Internal.ProcessingRecipeJS;
        /**
        * Creates a recipe for Emptying.
        */
        emptying(output: Type.ItemStackOrFluid[], input: Internal.IngredientJS): Internal.ProcessingRecipeJS;
    }
    class RecipeHolder {
        /**
        * All recipes from Create.
        */
        readonly create: Document.CreateRecipes;
        /**
        * All recipes from Minecraft.
        */
        readonly minecraft: Document.MinecraftRecipes;
    }
    class MinecraftRecipes {
        /**
        * Adds a smelting recipe to Minecraft.
        *
        * This is used by Furnaces.
        */
        smelting(output: Internal.ItemStackJS, input: Internal.IngredientJS): Internal.CookingRecipeJS;
        /**
        * Adds a smelting recipe to Minecraft.
        *
        * This is used by Smokers.
        */
        smoking(output: Internal.ItemStackJS, input: Internal.IngredientJS): Internal.CookingRecipeJS;
        /**
        * Adds a smelting recipe to Minecraft.
        *
        * This is used by Blast Furnaces.
        */
        blasting(output: Internal.ItemStackJS, input: Internal.IngredientJS): Internal.CookingRecipeJS;
        /**
        * Adds a shaped crafting recipe.
        */
        crafting_shaped(output: Internal.ItemStackJS, pattern: string[], items: Map<string, Internal.IngredientJS>): Internal.ShapedRecipeJS;
        /**
        * Adds a shapeless crafting recipe.
        */
        crafting_shapeless(output: Internal.ItemStackJS, inputs: Internal.IngredientJS[]): Internal.ShapelessRecipeJS;
        /**
        * Adds a smelting recipe to Minecraft.
        *
        * This is used by Camefire.
        */
        camefire_cooking(output: Internal.ItemStackJS, input: Internal.IngredientJS): Internal.CookingRecipeJS;
        /**
        * Adds a stonecutting recipe.
        */
        stonecutting(output: Internal.ItemStackJS, inputs: Internal.IngredientJS): Internal.StonecuttingRecipeJS;
        /**
        * Adds a smithing recipe.
        */
        smithing(output: Internal.ItemStackJS, base: Internal.IngredientJS, addition: Internal.IngredientJS): Internal.SmithingRecipeJS;
    }
}
declare namespace Type {
    type ItemStackOrFluid = Internal.ItemStackJS | Internal.FluidStackJS;
    type IngredientOrFluid = Internal.IngredientJS | Internal.FluidStackJS;
}
